language: ts
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = extensions[0];\n\
    \    let strongest_strength: number = 0;\n    for (let extension of extensions)\
    \ {\n        let strength: number = 0;\n        for (let letter of extension)\
    \ {\n            if (letter.toUpperCase() === letter) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_strength) {\n            strongest = extension;\n\
    \            strongest_strength = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0mu80rq7.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0mu80rq7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char >= 'A' && char <= 'Z') {\n      \
    \          extension_strength++;\n            } else if (char >= 'a' && char <=\
    \ 'z') {\n                extension_strength--;\n            }\n        }\n  \
    \      if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp84965mp_.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp84965mp_.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.replace(/[^A-Z]/g, \"\").length - extension.replace(/[^a-z]/g, \"\
    \").length;\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxquoqd_8.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxquoqd_8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpk272ykvb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk272ykvb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n       \
    \         extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi9hsmomb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi9hsmomb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppr8_bv5h.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmppr8_bv5h.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let current_strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                current_strength++;\n            } else {\n             \
    \   current_strength--;\n            }\n        }\n        if (current_strength\
    \ > strongest_strength) {\n            strongest = extensions[i];\n          \
    \  strongest_strength = current_strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpibtcdssl.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpibtcdssl.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let cap = 0;\n        let sm = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        let strength = cap - sm;\n        if (strength\
    \ > strongest_strength) {\n            strongest = extensions[i];\n          \
    \  strongest_strength = strength;\n        }\n    }\n    return class_name + \"\
    .\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpeuvcdkdy.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeuvcdkdy.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 0
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = -Infinity;\n    for\
    \ (let i: number = 0; i < extensions.length; i++) {\n        let extension_strength:\
    \ number = 0;\n        for (let j: number = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"Z\") {\n\
    \                extension_strength++;\n            } else if (extensions[i][j]\
    \ >= \"a\" && extensions[i][j] <= \"z\") {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660334842
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let extension of extensions) {\n  \
    \      let strength = 0;\n        for (let letter of extension) {\n          \
    \  if (letter.match(/[A-Z]/)) {\n                strength++;\n            } else\
    \ if (letter.match(/[a-z]/)) {\n                strength--;\n            }\n \
    \       }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp67k009iy.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp67k009iy.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = 0;\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp21ya7lgt.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp21ya7lgt.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char === char.toUpperCase()) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppn4wbdc6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmppn4wbdc6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = 0;\n    for\
    \ (let i: number = 0; i < extensions.length; i++) {\n        let extension_strength:\
    \ number = 0;\n        for (let j: number = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                extension_strength++;\n            } else {\n               \
    \ extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpyq8gcewg.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyq8gcewg.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let extension\
    \ of extensions) {\n        let strength: number = 0;\n        for (let letter\
    \ of extension) {\n            if (letter.toUpperCase() === letter) {\n      \
    \          strength++;\n            } else {\n                strength--;\n  \
    \          }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxz_n66vl.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxz_n66vl.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let char of extension) {\n      \
    \      if (char.toUpperCase() === char) {\n                strength += 1;\n  \
    \          } else {\n                strength -= 1;\n            }\n        }\n\
    \        if (strongest_extension_strength < strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpj06gn5pe.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj06gn5pe.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = extensions[0];\n\
    \    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4qu0adv1.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4qu0adv1.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let extension_strength = extension.replace(/[^A-Z]/g, \"\").length\
    \ - extension.replace(/[^a-z]/g, \"\").length;\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpqt_e7mew.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqt_e7mew.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char >= 'A' && char <= 'Z') {\n      \
    \          extension_strength++;\n            } else if (char >= 'a' && char <=\
    \ 'z') {\n                extension_strength--;\n            }\n        }\n  \
    \      if (extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp84965mp_.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp84965mp_.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = 0;\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp21ya7lgt.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp21ya7lgt.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.match(/[A-Z]/)) {\n             \
    \   extension_strength++;\n            } else if (char.match(/[a-z]/)) {\n   \
    \             extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp08a4ztp9.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp08a4ztp9.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i: number = 0;\
    \ i < extensions.length; i++) {\n        let strength: number = 0;\n        for\
    \ (let j: number = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp7y_4mudc.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7y_4mudc.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let char of extension) {\n      \
    \      if (char.match(/[A-Z]/)) {\n                strength++;\n            }\
    \ else if (char.match(/[a-z]/)) {\n                strength--;\n            }\n\
    \        }\n        if (strength > strongest_extension_strength) {\n         \
    \   strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9ddadi45.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ddadi45.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char === char.toUpperCase()) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppn4wbdc6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmppn4wbdc6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = extensions[0];\n\
    \    let strongest_strength: number = 0;\n    for (let i: number = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j: number = 0; j\
    \ < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpb8cd4mo7.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb8cd4mo7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let strength = 0;\n\
    \        for (let j = 0; j < extension.length; j++) {\n            let char =\
    \ extension[j];\n            if (char.toUpperCase() === char) {\n            \
    \    strength++;\n            } else {\n                strength--;\n        \
    \    }\n        }\n        if (strength > strongest_extension_strength) {\n  \
    \          strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp7iisbv41.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7iisbv41.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let char of extension) {\n      \
    \      if (char.match(/[A-Z]/)) {\n                strength++;\n            }\
    \ else if (char.match(/[a-z]/)) {\n                strength--;\n            }\n\
    \        }\n        if (strength > strongest_extension_strength) {\n         \
    \   strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9ddadi45.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ddadi45.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let extension of extensions) {\n  \
    \      let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp26ymcmtb.js:21\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at Strongest_Extension (/tmp/tmp26ymcmtb.js:21:49)\n    at test (/tmp/tmp26ymcmtb.js:33:22)\n\
    \    at Object.<anonymous> (/tmp/tmp26ymcmtb.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334844
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_strength = 0;\n    for (let extension of extensions) {\n\
    \        let strength = 0;\n        for (let char of extension) {\n          \
    \  if (char.toUpperCase() === char) {\n                strength++;\n         \
    \   } else {\n                strength--;\n            }\n        }\n        if\
    \ (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpoi45dxs8.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoi45dxs8.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = 0;\n    extensions.forEach(extension\
    \ => {\n        let strength: number = 0;\n        for (let i: number = 0; i <\
    \ extension.length; i++) {\n            if (extension[i] === extension[i].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    });\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpt0ep7f0u.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt0ep7f0u.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = 0;\n    for\
    \ (let extension of extensions) {\n        let strength: number = 0;\n       \
    \ for (let char of extension) {\n            if (char.match(/[A-Z]/)) {\n    \
    \            strength++;\n            } else if (char.match(/[a-z]/)) {\n    \
    \            strength--;\n            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpju75tc35.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpju75tc35.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let extension of extensions) {\n  \
    \      let strength = 0;\n        for (let char of extension) {\n            if\
    \ (char.toUpperCase() === char) {\n                strength++;\n            }\
    \ else {\n                strength--;\n            }\n        }\n        if (strength\
    \ > strongest_strength) {\n            strongest_strength = strength;\n      \
    \      strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpyjowimsq.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyjowimsq.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = 0;\n    for\
    \ (let i: number = 0; i < extensions.length; i++) {\n        let extension_strength:\
    \ number = 0;\n        for (let j: number = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                extension_strength++;\n            } else {\n               \
    \ extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpyq8gcewg.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyq8gcewg.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgs7h0z8j.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgs7h0z8j.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n       \
    \         extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi9hsmomb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi9hsmomb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let uppercase_letters = extension.match(/[A-Z]/g);\n        let lowercase_letters\
    \ = extension.match(/[a-z]/g);\n        let strength = uppercase_letters.length\
    \ - lowercase_letters.length;\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplbo70lxf.js:23\n        let strength = uppercase_letters.length\
    \ - lowercase_letters.length;\n                                         ^\n\n\
    TypeError: Cannot read properties of null (reading 'length')\n    at Strongest_Extension\
    \ (/tmp/tmplbo70lxf.js:23:42)\n    at test (/tmp/tmplbo70lxf.js:35:22)\n    at\
    \ Object.<anonymous> (/tmp/tmplbo70lxf.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let extension\
    \ of extensions) {\n        let extension_strength: number = 0;\n        for (let\
    \ letter of extension) {\n            if (letter.match(/[A-Z]/)) {\n         \
    \       extension_strength++;\n            } else if (letter.match(/[a-z]/)) {\n\
    \                extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp6gq3tit5.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6gq3tit5.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = \"\";\n\
    \    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpdr4mybfq.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdr4mybfq.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let letter of extension) {\n    \
    \        if (letter.toUpperCase() === letter) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpscq_uywb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpscq_uywb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = \"\";\n\
    \    let strength: number = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let cap: number = 0;\n        let sm: number = 0;\n        for (let\
    \ j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] >=\
    \ \"A\" && extensions[i][j] <= \"Z\") {\n                cap++;\n            }\
    \ else {\n                sm++;\n            }\n        }\n        if (cap - sm\
    \ > strength) {\n            strength = cap - sm;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpt_6k9vv9.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt_6k9vv9.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = 0;\n    let\
    \ max_strength_extension = \"\";\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            max_strength_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + max_strength_extension;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp2a5cqhfr.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2a5cqhfr.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongestExtension = extensions[0];\n\
    \    let strongestExtensionStrength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extensionStrength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extensionStrength++;\n            } else {\n            \
    \    extensionStrength--;\n            }\n        }\n        if (extensionStrength\
    \ > strongestExtensionStrength) {\n            strongestExtensionStrength = extensionStrength;\n\
    \            strongestExtension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongestExtension;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1unmi3cd.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1unmi3cd.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                extension_strength++;\n            } else if (extensions[i][j]\
    \ >= \"a\" && extensions[i][j] <= \"z\") {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpnbwea81_.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnbwea81_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let extension_strength: number = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ == extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpl7_hkgwn.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl7_hkgwn.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char === char.toUpperCase()) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppn4wbdc6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmppn4wbdc6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i: number = 0;\
    \ i < extensions.length; i++) {\n        let strength: number = 0;\n        for\
    \ (let j: number = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ >= \"A\" && extensions[i][j] <= \"Z\") {\n                strength++;\n    \
    \        } else {\n                strength--;\n            }\n        }\n   \
    \     if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp8wx1382z.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8wx1382z.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = extensions[0];\n\
    \    let strongest_strength: number = 0;\n    for (let i: number = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j: number = 0; j\
    \ < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpb8cd4mo7.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb8cd4mo7.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let strength: number = 0;\n      \
    \  for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp6fqygrfv.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6fqygrfv.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let strength = 0;\n\
    \        for (let j = 0; j < extension.length; j++) {\n            let char =\
    \ extension[j];\n            if (char == char.toUpperCase()) {\n             \
    \   strength++;\n            } else {\n                strength--;\n         \
    \   }\n        }\n        if (strength > strongest_extension_strength) {\n   \
    \         strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpeq86fzmh.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeq86fzmh.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpjx5vs4dy.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjx5vs4dy.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let char of extension) {\n      \
    \      if (char.toUpperCase() === char) {\n                strength++;\n     \
    \       } else {\n                strength--;\n            }\n        }\n    \
    \    if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9f0grc0d.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9f0grc0d.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let extension\
    \ of extensions) {\n        let strength: number = 0;\n        for (let i: number\
    \ = 0; i < extension.length; i++) {\n            if (extension[i] >= \"A\" &&\
    \ extension[i] <= \"Z\") {\n                strength++;\n            } else if\
    \ (extension[i] >= \"a\" && extension[i] <= \"z\") {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9wgfkohj.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9wgfkohj.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            if (extension[j]\
    \ === extension[j].toUpperCase()) {\n                extension_strength += 1;\n\
    \            } else {\n                extension_strength -= 1;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp7tee0krw.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7tee0krw.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgs7h0z8j.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgs7h0z8j.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpt5e7jvya.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt5e7jvya.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let extension_strength: number = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ == extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpl7_hkgwn.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl7_hkgwn.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let char of extension) {\n      \
    \      if (char.toUpperCase() === char) {\n                strength++;\n     \
    \       } else {\n                strength--;\n            }\n        }\n    \
    \    if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppcey7rs5.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmppcey7rs5.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334848
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmplsf2n2fw.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmplsf2n2fw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334848
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpt5e7jvya.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt5e7jvya.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let extension_strength = 0;\n        for (let char of extension)\
    \ {\n            if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp6eljah0_.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6eljah0_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334848
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\nconsole.log(Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpoelgpwe8.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoelgpwe8.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'my_class.AA

    Slices.SErviNGSliCes

    '
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char === char.toUpperCase()) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppn4wbdc6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmppn4wbdc6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let extension = extensions[i];\n        let strength = 0;\n     \
    \   for (let j = 0; j < extension.length; j++) {\n            let char = extension[j];\n\
    \            if (char === char.toUpperCase()) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_strength) {\n            strongest = extension;\n\
    \            strongest_strength = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpv0jgp6to.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv0jgp6to.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let extension = extensions[i];\n        let strength = 0;\n     \
    \   for (let j = 0; j < extension.length; j++) {\n            let char = extension[j];\n\
    \            if (char.toUpperCase() === char) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_strength) {\n            strongest = extension;\n\
    \            strongest_strength = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmph2woaf1o.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmph2woaf1o.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppr8_bv5h.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmppr8_bv5h.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let i = 0; i < extension.length;\
    \ i++) {\n            if (extension[i] >= 'A' && extension[i] <= 'Z') {\n    \
    \            strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpyus2vi6_.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyus2vi6_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let char of extension) {\n      \
    \      if (char.match(/[A-Z]/)) {\n                strength++;\n            }\
    \ else if (char.match(/[a-z]/)) {\n                strength--;\n            }\n\
    \        }\n        if (strength > strongest_extension_strength) {\n         \
    \   strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9ddadi45.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ddadi45.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let extension_strength = 0;\n        for (let char of extension)\
    \ {\n            if (char.match(/[A-Z]/)) {\n                extension_strength++;\n\
    \            } else if (char.match(/[a-z]/)) {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphhzab1_n.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmphhzab1_n.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let extension_strength: number = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfq1ep5ts.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfq1ep5ts.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let extension of extensions) {\n  \
    \      let strength = 0;\n        for (let char of extension) {\n            if\
    \ (char.toUpperCase() === char) {\n                strength += 1;\n          \
    \  } else {\n                strength -= 1;\n            }\n        }\n      \
    \  if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpk6u2qksy.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk6u2qksy.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let current_extension_strength:\
    \ number = 0;\n        for (let j: number = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                current_extension_strength++;\n            } else {\n       \
    \         current_extension_strength--;\n            }\n        }\n        if\
    \ (current_extension_strength > strongest_extension_strength) {\n            strongest_extension\
    \ = extensions[i];\n            strongest_extension_strength = current_extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpqmrjvadl.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqmrjvadl.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpnlik1ztc.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnlik1ztc.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let char of extension) {\n      \
    \      if (char.toUpperCase() === char) {\n                strength++;\n     \
    \       } else {\n                strength--;\n            }\n        }\n    \
    \    if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9f0grc0d.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9f0grc0d.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n       \
    \         extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi9hsmomb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi9hsmomb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = 0;\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpauke95ge.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpauke95ge.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let extension_strength = 0;\n        for (let char of extension)\
    \ {\n            if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp6eljah0_.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6eljah0_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334848
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    extensions.forEach(extension => {\n    \
    \    let strength = 0;\n        for (let i = 0; i < extension.length; i++) {\n\
    \            if (extension[i] === extension[i].toUpperCase()) {\n            \
    \    strength++;\n            } else {\n                strength--;\n        \
    \    }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extension;\n        }\n    });\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpdb2yv8oe.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdb2yv8oe.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongestExtension = extensions[0];\n\
    \    let strongestExtensionStrength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extensionStrength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extensionStrength++;\n            } else {\n            \
    \    extensionStrength--;\n            }\n        }\n        if (extensionStrength\
    \ > strongestExtensionStrength) {\n            strongestExtensionStrength = extensionStrength;\n\
    \            strongestExtension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongestExtension;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1unmi3cd.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1unmi3cd.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let letter of extension) {\n    \
    \        if (letter.match(/[A-Z]/)) {\n                strength++;\n         \
    \   } else if (letter.match(/[a-z]/)) {\n                strength--;\n       \
    \     }\n        }\n        if (strength > strongest_extension_strength) {\n \
    \           strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmptx11q3r3.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmptx11q3r3.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    let current_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     current_extension_strength = 0;\n        for (let j: number = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                current_extension_strength++;\n            } else {\n   \
    \             current_extension_strength--;\n            }\n        }\n      \
    \  if (current_extension_strength > strongest_extension_strength) {\n        \
    \    strongest_extension_strength = current_extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgckj00yw.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgckj00yw.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n        \
    \        extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfu3qflc3.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfu3qflc3.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char === char.toUpperCase()) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppn4wbdc6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmppn4wbdc6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = 0;\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpauke95ge.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpauke95ge.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let i = 0; i < extension.length;\
    \ i++) {\n            if (extension[i] >= 'A' && extension[i] <= 'Z') {\n    \
    \            strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpyus2vi6_.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyus2vi6_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpt5e7jvya.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt5e7jvya.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp61ddb8fl.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp61ddb8fl.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let i = 0; i < extension.length;\
    \ i++) {\n            if (extension[i] === extension[i].toUpperCase()) {\n   \
    \             strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp_1oh9fne.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_1oh9fne.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let extension\
    \ of extensions) {\n        let strength: number = 0;\n        for (let char of\
    \ extension) {\n            if (char.toUpperCase() === char) {\n             \
    \   strength++;\n            } else {\n                strength--;\n         \
    \   }\n        }\n        if (strength > strongest_extension_strength) {\n   \
    \         strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpe0gpcfge.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe0gpcfge.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let extension_strength: number = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ == extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpl7_hkgwn.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl7_hkgwn.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let extension_strength = 0;\n        for (let char of extension)\
    \ {\n            if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpldny0184.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpldny0184.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n       \
    \         extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi9hsmomb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi9hsmomb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = \"\";\n\
    \    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpdr4mybfq.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdr4mybfq.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = \"\";\n\
    \    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpdr4mybfq.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdr4mybfq.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = \"\";\n\
    \    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpdr4mybfq.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdr4mybfq.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp887r_q0n.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp887r_q0n.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength: number = 0;\n        for (let j = 0;\
    \ j < extensions[i].length; j++) {\n            if (extensions[i][j] >= \"A\"\
    \ && extensions[i][j] <= \"Z\") {\n                extension_strength++;\n   \
    \         } else if (extensions[i][j] >= \"a\" && extensions[i][j] <= \"z\") {\n\
    \                extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_strength) {\n            strongest_strength = extension_strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp10xz7e8g.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp10xz7e8g.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpjx5vs4dy.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjx5vs4dy.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = -Infinity;\n    for\
    \ (let extension of extensions) {\n        let strength: number = 0;\n       \
    \ for (let char of extension) {\n            if (char.toUpperCase() === char)\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpjai5phj5.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjai5phj5.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength += 1;\n            } else {\n                extension_strength\
    \ -= 1;\n            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0iafrjk8.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0iafrjk8.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let extension_strength: number = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ >= \"A\" && extensions[i][j] <= \"Z\") {\n                extension_strength++;\n\
    \            } else if (extensions[i][j] >= \"a\" && extensions[i][j] <= \"z\"\
    ) {\n                extension_strength--;\n            }\n        }\n       \
    \ if (extension_strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp6mci4z0d.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6mci4z0d.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n       \
    \         extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpwjusbjk3.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwjusbjk3.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi47lx9gw.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi47lx9gw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char === char.toUpperCase()) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppn4wbdc6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmppn4wbdc6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n       \
    \         extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi9hsmomb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi9hsmomb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension: string = extensions[i];\n        let strength:\
    \ number = 0;\n        for (let j = 0; j < extension.length; j++) {\n        \
    \    let char: string = extension[j];\n            if (char === char.toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0cwjbd5h.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0cwjbd5h.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp887r_q0n.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp887r_q0n.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let cap = 0;\n        let sm = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        let strength = cap - sm;\n        if (strength\
    \ > strongest_strength) {\n            strongest = extensions[i];\n          \
    \  strongest_strength = strength;\n        }\n    }\n    return class_name + \"\
    .\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpg51autq3.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpg51autq3.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n       \
    \         extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi9hsmomb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi9hsmomb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let ext_strength = extensions.map(ext\
    \ => {\n        let cap = ext.match(/[A-Z]/g).length;\n        let sm = ext.match(/[a-z]/g).length;\n\
    \        return { ext, strength: cap - sm };\n    });\n    let strongest = ext_strength.reduce((a,\
    \ b) => a.strength > b.strength ? a : b);\n    return `${class_name}.${strongest.ext}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqf1on6dk.js:19\n        let cap = ext.match(/[A-Z]/g).length;\n\
    \                                     ^\n\nTypeError: Cannot read properties of\
    \ null (reading 'length')\n    at /tmp/tmpqf1on6dk.js:19:38\n    at Array.map\
    \ (<anonymous>)\n    at Strongest_Extension (/tmp/tmpqf1on6dk.js:18:35)\n    at\
    \ test (/tmp/tmpqf1on6dk.js:30:22)\n    at Object.<anonymous> (/tmp/tmpqf1on6dk.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let extension of\
    \ extensions) {\n        let strength: number = 0;\n        for (let letter of\
    \ extension) {\n            if (letter.toUpperCase() === letter) {\n         \
    \       strength++;\n            } else {\n                strength--;\n     \
    \       }\n        }\n        if (strength > strongest_strength) {\n         \
    \   strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0ovzlmlj.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0ovzlmlj.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest = extensions[0];\n\
    \  let strongest_strength = 0;\n  for (let i = 0; i < extensions.length; i++)\
    \ {\n    let extension = extensions[i];\n    let strength = 0;\n    for (let j\
    \ = 0; j < extension.length; j++) {\n      let char = extension[j];\n      if\
    \ (char === char.toUpperCase()) {\n        strength++;\n      } else {\n     \
    \   strength--;\n      }\n    }\n    if (strength > strongest_strength) {\n  \
    \    strongest = extension;\n      strongest_strength = strength;\n    }\n  }\n\
    \  return class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp62oi37h4.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp62oi37h4.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let extension_strength = 0;\n        for (let letter of extension)\
    \ {\n            if (letter.toUpperCase() === letter) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpthccs1yo.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpthccs1yo.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let extension_strength: number = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfq1ep5ts.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfq1ep5ts.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_strength = -Infinity;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let char of extension) {\n      \
    \      if (char.toUpperCase() === char) {\n                strength++;\n     \
    \       } else {\n                strength--;\n            }\n        }\n    \
    \    if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp3tqcj0hc.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3tqcj0hc.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = \"\";\n    let\
    \ strength = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ cap = 0;\n        let sm = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        if (cap - sm > strength) {\n            strength\
    \ = cap - sm;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpbpi0matp.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbpi0matp.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char === char.toUpperCase()) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppn4wbdc6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmppn4wbdc6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n       \
    \         extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi9hsmomb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi9hsmomb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let extension_strength: number = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfq1ep5ts.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfq1ep5ts.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = extensions[0];\n\
    \    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp56zwwowo.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56zwwowo.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char == char.toUpperCase()) {\n      \
    \          extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprmr7siqf.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmprmr7siqf.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = -1;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpv6wvaqm6.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv6wvaqm6.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = \"\";\n\
    \    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp12u__2fa.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp12u__2fa.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                extension_strength++;\n            } else if (extensions[i][j]\
    \ >= \"a\" && extensions[i][j] <= \"z\") {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpnbwea81_.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnbwea81_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let extension_strength = 0;\n        for (let char of extension)\
    \ {\n            if (char.match(/[A-Z]/)) {\n                extension_strength\
    \ += 1;\n            } else if (char.match(/[a-z]/)) {\n                extension_strength\
    \ -= 1;\n            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpofwzok47.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpofwzok47.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 2
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = get_extension_strength(strongest_extension);\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let extension_strength\
    \ = get_extension_strength(extensions[i]);\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp2ylls13n.ts(19,40): error TS2304: Cannot find name ''get_extension_strength''.

    ../../../../tmp/tmp2ylls13n.ts(21,34): error TS2304: Cannot find name ''get_extension_strength''.

    '
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmplsf2n2fw.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmplsf2n2fw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334848
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = \"\";\n    let\
    \ strongest_strength = 0;\n    for (let extension of extensions) {\n        let\
    \ strength = 0;\n        for (let letter of extension) {\n            if (letter.toUpperCase()\
    \ === letter) {\n                strength++;\n            } else {\n         \
    \       strength--;\n            }\n        }\n        if (strength > strongest_strength)\
    \ {\n            strongest = extension;\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkq4weipb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkq4weipb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ letter = extension[j];\n            if (letter.toUpperCase() === letter) {\n\
    \                extension_strength++;\n            } else {\n               \
    \ extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkowwtslg.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkowwtslg.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    extensions.forEach(extension =>\
    \ {\n        let strength = extension.split('').reduce((acc, curr) => {\n    \
    \        if (curr.toUpperCase() === curr) {\n                acc += 1;\n     \
    \       } else {\n                acc -= 1;\n            }\n            return\
    \ acc;\n        }, 0);\n        if (strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    });\n    return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmptr4z6t6g.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmptr4z6t6g.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n       \
    \         extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi9hsmomb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi9hsmomb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let i = 0; i < extension.length;\
    \ i++) {\n            if (extension[i] >= 'A' && extension[i] <= 'Z') {\n    \
    \            strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpyus2vi6_.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyus2vi6_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let extension: string = extensions[i];\n\
    \        let extension_strength: number = 0;\n        for (let j = 0; j < extension.length;\
    \ j++) {\n            let char: string = extension[j];\n            if (char.toUpperCase()\
    \ === char) {\n                extension_strength++;\n            } else {\n \
    \               extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgw1cdxgg.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgw1cdxgg.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let current_extension = extensions[i];\n        let current_extension_strength\
    \ = 0;\n        for (let j = 0; j < current_extension.length; j++) {\n       \
    \     let current_char = current_extension[j];\n            if (current_char ===\
    \ current_char.toUpperCase()) {\n                current_extension_strength++;\n\
    \            } else {\n                current_extension_strength--;\n       \
    \     }\n        }\n        if (current_extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = current_extension;\n            strongest_extension_strength\
    \ = current_extension_strength;\n        }\n    }\n    return class_name + \"\
    .\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkl7d5h4m.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkl7d5h4m.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334854
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp887r_q0n.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp887r_q0n.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i:\
    \ number = 0; i < extensions.length; i++) {\n        let extension_strength: number\
    \ = 0;\n        for (let j: number = 0; j < extensions[i].length; j++) {\n   \
    \         if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n       \
    \         extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi9hsmomb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi9hsmomb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let strength = 0;\n\
    \        for (let j = 0; j < extension.length; j++) {\n            let char =\
    \ extension[j];\n            if (char.toUpperCase() === char) {\n            \
    \    strength += 1;\n            } else {\n                strength -= 1;\n  \
    \          }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4c87v5k6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4c87v5k6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.match(/[A-Z]/)) {\n             \
    \   extension_strength++;\n            } else if (char.match(/[a-z]/)) {\n   \
    \             extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp08a4ztp9.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp08a4ztp9.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = \"\";\n\
    \    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension: string = extensions[i];\n        let strength:\
    \ number = 0;\n        for (let j = 0; j < extension.length; j++) {\n        \
    \    let char: string = extension[j];\n            if (char.toUpperCase() ===\
    \ char) {\n                strength++;\n            } else {\n               \
    \ strength--;\n            }\n        }\n        if (strength > strongest_strength)\
    \ {\n            strongest = extension;\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp5sn1v01j.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5sn1v01j.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let extension = extensions[i];\n        let strength = 0;\n     \
    \   for (let j = 0; j < extension.length; j++) {\n            let char = extension[j];\n\
    \            if (char.toUpperCase() === char) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp33pgd0xi.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp33pgd0xi.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    extensions.forEach(extension\
    \ => {\n        let strength: number = 0;\n        for (let i: number = 0; i <\
    \ extension.length; i++) {\n            if (extension[i] === extension[i].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    });\n    return class_name + \".\" + strongest_extension;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp62lp7u63.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp62lp7u63.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let extension_strength = 0;\n        for (let letter of extension)\
    \ {\n            if (letter.toUpperCase() === letter) {\n                extension_strength\
    \ += 1;\n            } else {\n                extension_strength -= 1;\n    \
    \        }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp40c5jywm.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp40c5jywm.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let i = 0; i < extension.length;\
    \ i++) {\n            if (extension[i] >= 'A' && extension[i] <= 'Z') {\n    \
    \            strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpyus2vi6_.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyus2vi6_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let extension of extensions) {\n  \
    \      let strength = 0;\n        for (let char of extension) {\n            if\
    \ (char.toUpperCase() === char) {\n                strength++;\n            }\
    \ else {\n                strength--;\n            }\n        }\n        if (strength\
    \ > strongest_strength) {\n            strongest = extension;\n            strongest_strength\
    \ = strength;\n        }\n    }\n    return class_name + \".\" + strongest;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpr10s4yjf.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr10s4yjf.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp887r_q0n.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp887r_q0n.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let char of extension) {\n      \
    \      if (char.toUpperCase() === char) {\n                strength++;\n     \
    \       } else {\n                strength--;\n            }\n        }\n    \
    \    if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9f0grc0d.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9f0grc0d.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                extension_strength++;\n            } else if (extensions[i][j]\
    \ >= \"a\" && extensions[i][j] <= \"z\") {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpnbwea81_.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnbwea81_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let strength = 0;\n\
    \        for (let j = 0; j < extension.length; j++) {\n            let char =\
    \ extension[j];\n            if (char.toUpperCase() === char) {\n            \
    \    strength++;\n            } else {\n                strength--;\n        \
    \    }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9aq_7u5o.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9aq_7u5o.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength += 1;\n            } else {\n                extension_strength\
    \ -= 1;\n            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0iafrjk8.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0iafrjk8.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.replace(/[^A-Z]/g, \"\").length - extension.replace(/[^a-z]/g, \"\
    \").length;\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxquoqd_8.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxquoqd_8.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppr8_bv5h.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmppr8_bv5h.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let extension_strength: number = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfq1ep5ts.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfq1ep5ts.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = -Infinity;\n    for\
    \ (let extension of extensions) {\n        let strength: number = 0;\n       \
    \ for (let char of extension) {\n            if (char.toUpperCase() === char)\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpjai5phj5.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjai5phj5.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength += 1;\n            } else {\n                extension_strength\
    \ -= 1;\n            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0iafrjk8.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0iafrjk8.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334852
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let extension of extensions)\
    \ {\n        let strength = 0;\n        for (let i = 0; i < extension.length;\
    \ i++) {\n            if (extension[i] >= \"A\" && extension[i] <= \"Z\") {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpgy91hi7y.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgy91hi7y.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char === char.toUpperCase()) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppn4wbdc6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmppn4wbdc6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char === char.toUpperCase()) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppn4wbdc6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmppn4wbdc6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let extension_strength: number = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfq1ep5ts.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfq1ep5ts.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char == char.toUpperCase()) {\n      \
    \          extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprmr7siqf.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmprmr7siqf.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4ef6qj52.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4ef6qj52.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp61ddb8fl.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp61ddb8fl.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char == char.toUpperCase()) {\n      \
    \          extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprmr7siqf.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmprmr7siqf.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334853
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppr8_bv5h.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmppr8_bv5h.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                extension_strength++;\n            } else if (extensions[i][j]\
    \ >= \"a\" && extensions[i][j] <= \"z\") {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpnbwea81_.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnbwea81_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpt5e7jvya.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt5e7jvya.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extension.length; j++) {\n            let\
    \ char = extension[j];\n            if (char.toUpperCase() === char) {\n     \
    \           extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgk3telf6.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgk3telf6.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334841
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let extension\
    \ of extensions) {\n        let strength: number = 0;\n        for (let char of\
    \ extension) {\n            if (char.toUpperCase() === char) {\n             \
    \   strength++;\n            } else {\n                strength--;\n         \
    \   }\n        }\n        if (strength > strongest_extension_strength) {\n   \
    \         strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpe0gpcfge.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe0gpcfge.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334849
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let extension of extensions) {\n  \
    \      let strength = 0;\n        for (let char of extension) {\n            if\
    \ (char.match(/[A-Z]/)) {\n                strength++;\n            } else if\
    \ (char.match(/[a-z]/)) {\n                strength--;\n            }\n      \
    \  }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphmzz9ccw.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmphmzz9ccw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = 0;\n    extensions.forEach(extension =>\
    \ {\n        let strength = extension.split('').reduce((acc, letter) => {\n  \
    \          if (letter.toUpperCase() === letter) {\n                return acc\
    \ + 1;\n            } else {\n                return acc - 1;\n            }\n\
    \        }, 0);\n        if (strength > strongest_extension_strength) {\n    \
    \        strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    });\n    return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpte61dd82.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpte61dd82.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = extensions[0];\n\
    \    let strongest_strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpki2v102q.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpki2v102q.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    extensions.forEach(extension => {\n    \
    \    let strength = extension.split('').reduce((acc, curr) => {\n            if\
    \ (curr.toUpperCase() === curr) {\n                acc += 1;\n            } else\
    \ {\n                acc -= 1;\n            }\n            return acc;\n     \
    \   }, 0);\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    });\n\
    \    return `${class_name}.${strongest_extension}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9ur6k2ta.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ur6k2ta.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    for (let i =\
    \ 0; i < extensions.length; i++) {\n        let strength: number = 0;\n      \
    \  for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp6fqygrfv.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6fqygrfv.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let strength = 0;\n\
    \        for (let j = 0; j < extension.length; j++) {\n            let char =\
    \ extension[j];\n            if (char.toUpperCase() === char) {\n            \
    \    strength++;\n            } else {\n                strength--;\n        \
    \    }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9aq_7u5o.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9aq_7u5o.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334855
- exit_code: 1
  program: "//You will be given the name of a class (a string) and a list of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
    \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgs7h0z8j.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgs7h0z8j.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660334845
