name: HumanEval_83_starts_one_ends
language: ts
prompt: "//Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunction starts_one_ends(n: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n \
  \ assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n\
  }\n\ntest();"
completions: ["  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 10;\n  }\n\
    \  if (n === 2) {\n    return 55;\n  }\n  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n   \
    \ return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 1;\n  }\n\
    \  if (n === 2) {\n    return 10;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "    if (n === 1) {\n\
    \        return 2;\n    }\n    if (n === 2) {\n        return 4;\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "    let count = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n \
    \   }\n    return count;\n}\n", "    if (n == 1) return 2;\n    if (n == 2) return\
    \ 3;\n    let count = 3;\n    let i = 3;\n    while (i <= n) {\n        count\
    \ += Math.pow(2, i - 1);\n        i++;\n    }\n    return count;\n}\n", "  if\
    \ (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n   \
    \     count += Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "    let\
    \ count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "    if (n == 1) {\n        return\
    \ 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 10;\n  }\n  let result = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    result += Math.pow(9, i - 1) * 9;\n  }\n  return result;\n}\n",
  "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "  if (n === 1) {\n    return 10;\n\
    \  }\n  return 9 * Math.pow(10, n - 1);\n}\n", "  let count = 0;\n  for (let i\
    \ = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n\
    }\n", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n \
    \ }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "    if\
    \ (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n\
    \    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n \
    \ return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(2,\
    \ i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n   \
    \ return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 4;\n\
    \  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n\
    \ === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  let count = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n    \
    \    count += Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n\
    \    count += Math.pow(10, i - 1);\n  }\n  return count * 2;\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  const dp: number[] = new Array(n + 1).fill(0);\n\
    \  dp[1] = 2;\n  dp[2] = 3;\n  for (let i = 3; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] + dp[i - 2];\n  }\n  return dp[n];\n}\n", "    let count = 0;\n    for\
    \ (let i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n \
    \   return count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n\
    \    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1)\
    \ {\n    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n\
    \    count += starts_one_ends(n - i);\n  }\n  return count;\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n   \
    \ return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  let count = 10;\n \
    \ for (let i = 3; i <= n; i++) {\n    count += 9 * Math.pow(10, i - 2);\n  }\n\
    \  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2)\
    \ {\n    return 10;\n  }\n  return 9 * Math.pow(10, n - 1);\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n   \
    \ return 2;\n  } else {\n    return 9 * Math.pow(10, n - 1) + starts_one_ends(n\
    \ - 1);\n  }\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "    if (n === 1) {\n \
    \       return 2;\n    }\n    return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "    if (n == 1) {\n        return 2;\n    }\n    return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "    let count = 0;\n    for (let i =\
    \ 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return\
    \ count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  let count = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  let result = 0;\n  for\
    \ (let i = 1; i < n; i++) {\n    result += starts_one_ends(i) * starts_one_ends(n\
    \ - i);\n  }\n  return result;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count * 2;\n}\n", "  let count = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  let\
    \ count = 10;\n  for (let i = 3; i <= n; i++) {\n    count += 9 * Math.pow(10,\
    \ i - 2);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count * 2;\n}\n", "  let count = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
    \ return 9 * Math.pow(10, n - 1);\n}\n", "  let count = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  return\
    \ 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return\
    \ starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "    if (n == 1) {\n\
    \        return 2;\n    }\n    if (n == 2) {\n        return 4;\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n\
    \    return 2;\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count * 2;\n}\n", "  let count = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n \
    \ return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "    if (n ===\
    \ 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n ==\
    \ 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 9;\n  }\n  let count =\
    \ 9;\n  for (let i = 1; i < n - 1; i++) {\n    count *= 10;\n  }\n  return count\
    \ * 2;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "    let count = 0;\n    for (let i =\
    \ 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return\
    \ count;\n}\n", "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2)\
    \ {\n        return 4;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n     \
    \   count += Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "  if (n ===\
    \ 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "    let count = 0;\n    for (let i =\
    \ 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return\
    \ count;\n}\n", "  if (n === 1) {\n    return 10;\n  }\n  if (n === 2) {\n   \
    \ return 55;\n  }\n  return (\n    starts_one_ends(n - 1) +\n    9 * Math.pow(10,\
    \ n - 2) +\n    9 * Math.pow(10, n - 2)\n  );\n}\n", "  let count = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  let\
    \ count = 3;\n  for (let i = 3; i <= n; i++) {\n    count = count * 2;\n  }\n\
    \  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2)\
    \ {\n    return 4;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n -\
    \ 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \   if (n === 1) {\n        return 2;\n    }\n    return starts_one_ends(n - 1)\
    \ + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return\
    \ starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n\
    \    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "    if (n\
    \ == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 4;\n  \
    \  }\n    let count = 4;\n    for (let i = 3; i <= n; i++) {\n        count =\
    \ count * (i - 1) + count;\n    }\n    return count;\n}\n", "  let count = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", " \
    \ if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 9;\n  }\n \
    \ return 9 * Math.pow(10, n - 2);\n}\n", "    let count = 0;\n    for (let i =\
    \ 1; i <= n; i++) {\n        let num = Math.pow(10, i - 1);\n        count +=\
    \ num;\n    }\n    return count;\n}\n", "  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n\
    \    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n\
    }\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 1;\n  }\n\
    \  if (n === 2) {\n    return 10;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n\
    \    return 1;\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n   \
    \ return 1;\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "    let count = 0;\n \
    \   for (let i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n  \
    \  }\n    return count;\n}\n", "    let count = 0;\n    for (let i = 1; i <= n;\
    \ i++) {\n        if (i === 1) {\n            count += 1;\n        } else {\n\
    \            count += 9 * Math.pow(10, i - 1);\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count +=\
    \ Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "  if (n === 1) {\n  \
    \  return 2;\n  }\n  if (n === 2) {\n    return 4;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n \
    \ let count = 10;\n  let start = 10;\n  let end = 10;\n  for (let i = 3; i <=\
    \ n; i++) {\n    start = start * (10 - i + 2);\n    end = end * (10 - i + 1);\n\
    \    count += start + end;\n  }\n  return count;\n}\n", "  let count = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n", "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2)\
    \ {\n        return 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2)\
    \ {\n        return 4;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n   \
    \ return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  if (n === 3) {\n  \
    \  return 100;\n  }\n  if (n === 4) {\n    return 1000;\n  }\n  if (n === 5) {\n\
    \    return 10000;\n  }\n  if (n === 6) {\n    return 100000;\n  }\n  if (n ===\
    \ 7) {\n    return 1000000;\n  }\n  if (n === 8) {\n    return 10000000;\n  }\n\
    \  if (n === 9) {\n    return 100000000;\n  }\n  if (n === 10) {\n    return 1000000000;\n\
    \  }\n  if (n === 11) {\n    return 10000000000;\n  }\n  if (n === 12) {\n   \
    \ return 100000000000;\n  }\n  if (n === 13) {\n    return 1000000000000;\n  }\n\
    \  if (n === 14) {\n    return 10000000000000;\n  }\n  if (n === 15) {\n    return\
    \ 100000000000000;\n  }\n  if (n === 16) {\n    return 1000000000000000;\n  }\n\
    \  if (n === 17) {\n    return 10000000000000000;\n  }\n  if (n === 18) {\n  \
    \  return 100000000000000000;\n  }\n  if (n === 19) {\n    return 1000000000000000000;\n\
    \  }\n  if (n === 20) {\n    return 10000000000000000000;\n  }\n  if (n === 21)\
    \ {\n    return 100000000000000000000;\n  }\n  if (n === 22) {\n    return 1000000000000000000000;\n\
    \  }\n  if (n === 23) {\n    return 10000000000000000000000;\n  }\n  if (n ===\
    \ 24) {\n    return 100000000000000000000000;\n  }\n  if (n === 25) {\n    return\
    \ 1000000000000000000000000;\n  }\n  if (n === 26) {\n    return 10000000000000000000000000;\n\
    \  }\n  if (n === 27) {\n    return 100000000000000000000000000;\n  }\n  if (n\
    \ === 28) {\n    return 1000000000000000000000000", "  let count = 0;\n  for (let\
    \ i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) +\
    \ 9 * Math.pow(10, n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if\
    \ (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n\
    \    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  let result = 3;\n\
    \  for (let i = 3; i <= n; i++) {\n    result = result * 2;\n  }\n  return result;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n\
    \  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n\
    \ === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n   \
    \ return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n\
    }\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  let\
    \ count = 10;\n  for (let i = 1; i < n - 1; i++) {\n    count *= 9;\n  }\n  return\
    \ count * 2;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n   \
    \ return 2;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  return 9 * Math.pow(10,\
    \ n - 1);\n}\n", "    if (n == 1) {\n        return 2;\n    }\n    let dp: number[]\
    \ = [1, 1];\n    for (let i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i\
    \ - 2];\n    }\n    return dp[n] * 2;\n}\n", "  let count = 0;\n  for (let i =\
    \ 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n\
    }\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 10;\n  }\n\
    \  if (n === 2) {\n    return 55;\n  }\n  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count * 2 - 10;\n\
    }\n", "    let count = 0;\n    let start = 1;\n    let end = 1;\n    for (let\
    \ i = 1; i <= n; i++) {\n        count += start + end;\n        start = start\
    \ * 10;\n        end = end * 10 + 1;\n    }\n    return count;\n}\n", "  let count\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n\
    \  }\n  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count * 2;\n}\n", "  if (n === 1) {\n    return 2;\n\
    \  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "    if\
    \ (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 10;\n\
    \    }\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count\
    \ += Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "  if (n === 1) {\n\
    \    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n\
    }\n", "  if (n == 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) +\
    \ 9 * Math.pow(10, n - 2);\n}\n", "  if (n === 1) {\n    return 1;\n  }\n  return\
    \ 10 * starts_one_ends(n - 1) - 9;\n}\n", "  if (n === 1) {\n    return 2;\n \
    \ }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n\
    \ === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  let count\
    \ = 10;\n  let base = 9;\n  for (let i = 3; i <= n; i++) {\n    count += base\
    \ * i;\n    base *= 10;\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return\
    \ 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n -\
    \ 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  if (n === 2) {\n    return 4;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  const dp: number[] = new\
    \ Array(n + 1).fill(0);\n  dp[1] = 2;\n  dp[2] = 3;\n  for (let i = 3; i <= n;\
    \ i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];\n}\n", "  if\
    \ (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  let\
    \ count = 10;\n  for (let i = 3; i <= n; i++) {\n    count += 9 * Math.pow(10,\
    \ i - 2);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n\
    \  return starts_one_ends(n - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  if (n ==\
    \ 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "    if (n === 1) {\n        return 2;\n\
    \    }\n    if (n === 2) {\n        return 4;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  let count = 0;\n  let start = Math.pow(10, n - 1);\n  let end = Math.pow(10,\
    \ n) - 1;\n  for (let i = start; i <= end; i++) {\n    if (i.toString().startsWith(\"\
    1\") || i.toString().endsWith(\"1\")) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return\
    \ 3;\n  }\n  let count = 3;\n  for (let i = 3; i <= n; i++) {\n    count = count\
    \ * 2;\n  }\n  return count;\n}\n\nconsole.log(starts_one_ends(1));\nconsole.log(starts_one_ends(2));\n\
    console.log(starts_one_ends(3));\nconsole.log(starts_one_ends(4));\nconsole.log(starts_one_ends(5));\n\
    console.log(starts_one_ends(6));\nconsole.log(starts_one_ends(7));\nconsole.log(starts_one_ends(8));\n\
    console.log(starts_one_ends(9));\nconsole.log(starts_one_ends(10));\nconsole.log(starts_one_ends(11));\n\
    console.log(starts_one_ends(12));\nconsole.log(starts_one_ends(13));\nconsole.log(starts_one_ends(14));\n\
    console.log(starts_one_ends(15));\nconsole.log(starts_one_ends(16));\nconsole.log(starts_one_ends(17));\n\
    console.log(starts_one_ends(18));\nconsole.log(starts_one_ends(19));\nconsole.log(starts_one_ends(20));\n\
    console.log(starts_one_ends(21));\nconsole.log(starts_one_ends(22));\nconsole.log(starts_one_ends(23));\n\
    console.log(starts_one_ends(24));\nconsole.log(starts_one_ends(25));\nconsole.log(starts_one_ends(26));\n\
    console.log(starts_one_ends(27));\nconsole.log(starts_one_ends(28));\nconsole.log(starts_one_ends(29));\n\
    console.log(starts_one_ends(30));\nconsole.log(starts_one_ends(31));\nconsole",
  "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "  if (n === 1) {\n    return 2;\n\
    \  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count * 2;\n}\n", "  if (n === 1) {\n    return 2;\n\
    \  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count * 2;\n}\n", "  let count = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    count += 9 * Math.pow(10, i - 1);\n  }\n  return count;\n\
    }\n", "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n\
    \  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n\
    \ === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n\
    \    return 1;\n  }\n  if (n === 2) {\n    return 10;\n  }\n  let dp: number[]\
    \ = new Array(n + 1).fill(0);\n  dp[1] = 1;\n  dp[2] = 10;\n  for (let i = 3;\
    \ i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * Math.pow(10, i - 2);\n  }\n  return\
    \ dp[n];\n}\n", "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n\
    \ - 1) + 9 * Math.pow(10, n - 2);\n}\n", "  let count = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  let count = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return\
    \ count;\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += 9 * Math.pow(10, i - 1);\n  }\n  return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
