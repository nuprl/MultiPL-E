name: HumanEval_83_starts_one_ends
language: ts
prompt: "//Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunction starts_one_ends(n: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n \
  \ assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n\
  }\n\ntest();"
completions: ["  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(10,\
    \ i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n    return 10;\n  }\n\
    \  if (n === 2) {\n    return 55;\n  }\n  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count\
    \ += Math.pow(10, i - 1);\n  }\n  return count;\n}\n", "  if (n === 1) {\n   \
    \ return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  if (n === 1) {\n    return 1;\n  }\n\
    \  if (n === 2) {\n    return 10;\n  }\n  return 9 * Math.pow(10, n - 2);\n}\n",
  "  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "    if (n === 1) {\n\
    \        return 2;\n    }\n    if (n === 2) {\n        return 4;\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "    let count = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n \
    \   }\n    return count;\n}\n", "    if (n == 1) return 2;\n    if (n == 2) return\
    \ 3;\n    let count = 3;\n    let i = 3;\n    while (i <= n) {\n        count\
    \ += Math.pow(2, i - 1);\n        i++;\n    }\n    return count;\n}\n", "  if\
    \ (n === 1) {\n    return 2;\n  }\n  return starts_one_ends(n - 1) + 9 * Math.pow(10,\
    \ n - 2);\n}\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n   \
    \     count += Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "    let\
    \ count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "    if (n == 1) {\n        return\
    \ 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "  let count = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n}\n",
  "  if (n === 1) {\n    return 10;\n  }\n  let result = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    result += Math.pow(9, i - 1) * 9;\n  }\n  return result;\n}\n",
  "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "  if (n === 1) {\n    return 10;\n\
    \  }\n  return 9 * Math.pow(10, n - 1);\n}\n", "  let count = 0;\n  for (let i\
    \ = 1; i <= n; i++) {\n    count += Math.pow(10, i - 1);\n  }\n  return count;\n\
    }\n", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n \
    \ }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
