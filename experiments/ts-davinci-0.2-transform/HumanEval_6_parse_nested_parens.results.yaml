language: ts
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let level = 0;\n    for (const paren of paren_group) {\n      if (paren ===\
    \ \"(\") {\n        level++;\n        max_level = Math.max(max_level, level);\n\
    \      } else if (paren === \")\") {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7ylgncjo.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738508
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let paren_stack: string[] = [];\n       \
    \ let max_depth: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            let paren: string = paren_group[j];\n            if (paren\
    \ === \"(\") {\n                paren_stack.push(paren);\n                max_depth\
    \ = Math.max(max_depth, paren_stack.length);\n            } else if (paren ===\
    \ \")\") {\n                paren_stack.pop();\n            }\n        }\n   \
    \     result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738508
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_array = paren_string.split(\" \");\n    let result = [];\n\
    \    for (let paren_group of paren_array) {\n        let max_nesting = 0;\n  \
    \      let current_nesting = 0;\n        for (let paren of paren_group) {\n  \
    \          if (paren === \"(\") {\n                current_nesting++;\n      \
    \          if (current_nesting > max_nesting) {\n                    max_nesting\
    \ = current_nesting;\n                }\n            } else if (paren === \")\"\
    ) {\n                current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp28m5o7zw.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_array = paren_string.split(\" \");\n  let result: number[] =\
    \ [];\n  for (let i = 0; i < paren_array.length; i++) {\n    let paren_count =\
    \ 0;\n    let max_paren_count = 0;\n    for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n      if (paren_array[i][j] === \"(\") {\n        paren_count++;\n \
    \     } else if (paren_array[i][j] === \")\") {\n        paren_count--;\n    \
    \  }\n      if (paren_count > max_paren_count) {\n        max_paren_count = paren_count;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let max_nesting: number = 0;\n        let\
    \ current_nesting: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                current_nesting++;\n\
    \                if (current_nesting > max_nesting) {\n                    max_nesting\
    \ = current_nesting;\n                }\n            } else if (paren_group[j]\
    \ === \")\") {\n                current_nesting--;\n            }\n        }\n\
    \        result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738501
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let depth = 0;\n        for (const paren of paren_group) {\n \
    \           if (paren === \"(\") {\n                depth++;\n            } else\
    \ if (paren === \")\") {\n                depth--;\n            }\n          \
    \  if (depth > max_depth) {\n                max_depth = depth;\n            }\n\
    \        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1mxbwkke.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxlorvtm7.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let paren_levels =\
    \ [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_paren_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                paren_level++;\n             \
    \   if (paren_level > max_paren_level) {\n                    max_paren_level\
    \ = paren_level;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                paren_level--;\n            }\n        }\n       \
    \ paren_levels.push(max_paren_level);\n    }\n    return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let paren_group of paren_groups) {\n        let max_depth: number\
    \ = 0;\n        let current_depth: number = 0;\n        for (let paren of paren_group)\
    \ {\n            if (paren === \"(\") {\n                current_depth++;\n  \
    \              if (current_depth > max_depth) {\n                    max_depth\
    \ = current_depth;\n                }\n            } else if (paren === \")\"\
    ) {\n                current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7u6b07u3.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ char = paren_group[j];\n            if (char === \"(\") {\n                current_nesting_level++;\n\
    \            } else if (char === \")\") {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const paren_groups = paren_string.split(\"\
    \ \");\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === \"(\") {\n                current_nesting++;\n\
    \            } else if (paren === \")\") {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaesk5_my.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let paren_levels =\
    \ [];\n    for (let paren_group of paren_groups) {\n        paren_levels.push(get_paren_level(paren_group));\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqjh3azj0.ts(10,27): error TS2304: Cannot find name
    ''get_paren_level''.

    '
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    const stack: string[]\
    \ = [];\n    let max_depth = 0;\n    for (const char of paren_group) {\n     \
    \ if (char === \"(\") {\n        stack.push(char);\n        max_depth = Math.max(max_depth,\
    \ stack.length);\n      } else if (char === \")\") {\n        stack.pop();\n \
    \     }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpofb3yori.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738503
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group:\
    \ string = paren_groups[i];\n    let paren_stack: string[] = [];\n    let max_level:\
    \ number = 0;\n    let level: number = 0;\n    for (let j = 0; j < paren_group.length;\
    \ j++) {\n      let paren: string = paren_group[j];\n      if (paren === \"(\"\
    ) {\n        paren_stack.push(paren);\n        level++;\n        if (level > max_level)\
    \ {\n          max_level = level;\n        }\n      } else if (paren === \")\"\
    ) {\n        paren_stack.pop();\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_array: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ string = paren_array[i];\n        let paren_stack: string[] = [];\n        let\
    \ max_nesting: number = 0;\n        for (let j = 0; j < paren_group.length; j++)\
    \ {\n            let paren: string = paren_group[j];\n            if (paren ===\
    \ \"(\") {\n                paren_stack.push(paren);\n                max_nesting\
    \ = Math.max(max_nesting, paren_stack.length);\n            } else if (paren ===\
    \ \")\") {\n                paren_stack.pop();\n            }\n        }\n   \
    \     result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let paren_levels =\
    \ [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_paren_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                paren_level++;\n             \
    \   if (paren_level > max_paren_level) {\n                    max_paren_level\
    \ = paren_level;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                paren_level--;\n            }\n        }\n       \
    \ paren_levels.push(max_paren_level);\n    }\n    return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_level = 0;\n    let\
    \ current_level = 0;\n    for (const char of group) {\n      if (char === \"(\"\
    ) {\n        current_level++;\n        max_level = Math.max(max_level, current_level);\n\
    \      } else if (char === \")\") {\n        current_level--;\n      }\n    }\n\
    \    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp23sw_g2j.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const max_nesting_levels\
    \ = paren_groups.map(paren_group => {\n    let max_level = 0;\n    let current_level\
    \ = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      if (paren_group[i]\
    \ === \"(\") {\n        current_level++;\n        if (current_level > max_level)\
    \ {\n          max_level = current_level;\n        }\n      } else if (paren_group[i]\
    \ === \")\") {\n        current_level--;\n      }\n    }\n    return max_level;\n\
    \  });\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_array: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ string = paren_array[i];\n        let max_depth: number = 0;\n        let current_depth:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      if (paren_group[j] === \"(\") {\n                current_depth++;\n   \
    \             if (current_depth > max_depth) {\n                    max_depth\
    \ = current_depth;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                current_depth--;\n            }\n        }\n     \
    \   result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    result.push(parse_nested_parens_helper(group));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprxb199q3.ts(10,17): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const paren_levels =\
    \ [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let paren_level = 0;\n    let max_paren_level = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        paren_level++;\n      } else if (paren_group[j] === \"\
    )\") {\n        paren_level--;\n      }\n      if (paren_level > max_paren_level)\
    \ {\n        max_paren_level = paren_level;\n      }\n    }\n    paren_levels.push(max_paren_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738509
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwehw3t6w.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3y336_ik.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let current_level = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_level++;\n        max_level = Math.max(max_level,\
    \ current_level);\n      } else if (char === \")\") {\n        current_level--;\n\
    \      }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7qlelea.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738506
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let paren_group of paren_groups) {\n        let max_nesting:\
    \ number = 0;\n        let current_nesting: number = 0;\n        for (let i: number\
    \ = 0; i < paren_group.length; i++) {\n            if (paren_group[i] === \"(\"\
    ) {\n                current_nesting++;\n                if (current_nesting >\
    \ max_nesting) {\n                    max_nesting = current_nesting;\n       \
    \         }\n            } else if (paren_group[i] === \")\") {\n            \
    \    current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3y336_ik.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let current_group:\
    \ string = paren_groups[i];\n        let current_level: number = 0;\n        let\
    \ max_level: number = 0;\n        for (let j = 0; j < current_group.length; j++)\
    \ {\n            if (current_group[j] === \"(\") {\n                current_level++;\n\
    \                if (current_level > max_level) {\n                    max_level\
    \ = current_level;\n                }\n            } else if (current_group[j]\
    \ === \")\") {\n                current_level--;\n            }\n        }\n \
    \       result.push(max_level);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let paren_levels =\
    \ [];\n    for (let paren_group of paren_groups) {\n        let paren_level =\
    \ 0;\n        let max_level = 0;\n        for (let paren of paren_group) {\n \
    \           if (paren === \"(\") {\n                paren_level += 1;\n      \
    \      } else if (paren === \")\") {\n                paren_level -= 1;\n    \
    \        }\n            if (paren_level > max_level) {\n                max_level\
    \ = paren_level;\n            }\n        }\n        paren_levels.push(max_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8t50uzq7.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_depth = 0;\n        let current_depth =\
    \ 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === '(') {\n                current_depth++;\n                if (current_depth\
    \ > max_depth) {\n                    max_depth = current_depth;\n           \
    \     }\n            } else if (paren_group[j] === ')') {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_nesting = 0;\n   \
    \ let current_nesting = 0;\n    for (const char of group) {\n      if (char ===\
    \ \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6yacekl4.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738509
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const paren_levels =\
    \ [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_levels.push(get_paren_level(paren_groups[i]));\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbvcixspo.ts(10,23): error TS2304: Cannot find name
    ''get_paren_level''.

    '
  timestamp: 1659738499
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let paren_group of paren_groups) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let i: number\
    \ = 0; i < paren_group.length; i++) {\n            if (paren_group[i] === \"(\"\
    ) {\n                paren_count++;\n            } else if (paren_group[i] ===\
    \ \")\") {\n                paren_count--;\n            }\n            if (paren_count\
    \ > max_paren_count) {\n                max_paren_count = paren_count;\n     \
    \       }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let paren_stack: string[] = [];\n       \
    \ let max_depth: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            let paren: string = paren_group[j];\n            if (paren\
    \ === \"(\") {\n                paren_stack.push(paren);\n                max_depth\
    \ = Math.max(max_depth, paren_stack.length);\n            } else if (paren ===\
    \ \")\") {\n                paren_stack.pop();\n            }\n        }\n   \
    \     result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738508
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3ptr2g_r.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let max_levels: number[]\
    \ = [];\n    for (let paren_group of paren_groups) {\n        let level = 0;\n\
    \        let max_level = 0;\n        for (let paren of paren_group) {\n      \
    \      if (paren === '(') {\n                level++;\n                if (level\
    \ > max_level) {\n                    max_level = level;\n                }\n\
    \            } else if (paren === ')') {\n                level--;\n         \
    \   }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8e2zyx60.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let paren_group of paren_groups) {\n        let max_depth: number\
    \ = 0;\n        let current_depth: number = 0;\n        for (let char of paren_group)\
    \ {\n            if (char === \"(\") {\n                current_depth++;\n   \
    \             if (current_depth > max_depth) {\n                    max_depth\
    \ = current_depth;\n                }\n            } else if (char === \")\")\
    \ {\n                current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyxs2p52c.ts(12,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === \"(\") {\n                current_depth++;\n  \
    \              max_depth = Math.max(max_depth, current_depth);\n            }\
    \ else if (paren === \")\") {\n                current_depth--;\n            }\n\
    \        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4jjb_052.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738503
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let paren_group of paren_groups) {\n        let max_nesting:\
    \ number = 0;\n        let current_nesting: number = 0;\n        for (let i: number\
    \ = 0; i < paren_group.length; i++) {\n            if (paren_group[i] === \"(\"\
    ) {\n                current_nesting++;\n                if (current_nesting >\
    \ max_nesting) {\n                    max_nesting = current_nesting;\n       \
    \         }\n            } else if (paren_group[i] === \")\") {\n            \
    \    current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvjy4h8u8.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        result.push(parse_nested_parens_helper(paren_group));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg4w1ryf9.ts(10,21): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1659738512
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(\" \");\n  let max_nested_levels\
    \ = [];\n  for (let paren_group of paren_groups) {\n    let max_nested_level =\
    \ 0;\n    let current_nested_level = 0;\n    for (let paren of paren_group) {\n\
    \      if (paren === \"(\") {\n        current_nested_level++;\n      } else if\
    \ (paren === \")\") {\n        current_nested_level--;\n      }\n      if (current_nested_level\
    \ > max_nested_level) {\n        max_nested_level = current_nested_level;\n  \
    \    }\n    }\n    max_nested_levels.push(max_nested_level);\n  }\n  return max_nested_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnsazvjdy.ts(12,23): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_array: string[] = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_array.length; i++) {\n    let paren_count:\
    \ number = 0;\n    let max_paren_count: number = 0;\n    for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n      if (paren_array[i][j] === \"(\") {\n        paren_count++;\n \
    \     } else if (paren_array[i][j] === \")\") {\n        paren_count--;\n    \
    \  }\n      if (paren_count > max_paren_count) {\n        max_paren_count = paren_count;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  return paren_groups.map(group\
    \ => {\n    let depth = 0;\n    let max_depth = 0;\n    for (let i = 0; i < group.length;\
    \ i++) {\n      if (group[i] === \"(\") {\n        depth++;\n      } else if (group[i]\
    \ === \")\") {\n        depth--;\n      }\n      max_depth = Math.max(max_depth,\
    \ depth);\n    }\n    return max_depth;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(\" \");\n  const max_nesting = parens.map(paren\
    \ => {\n    let max_nesting = 0;\n    let current_nesting = 0;\n    for (let i\
    \ = 0; i < paren.length; i++) {\n      if (paren[i] === \"(\") {\n        current_nesting++;\n\
    \        if (current_nesting > max_nesting) {\n          max_nesting = current_nesting;\n\
    \        }\n      } else if (paren[i] === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    return max_nesting;\n  });\n  return max_nesting;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3y336_ik.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_array: string[] = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_array.length; i++) {\n    let paren_count:\
    \ number = 0;\n    let max_paren_count: number = 0;\n    for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n      if (paren_array[i][j] === \"(\") {\n        paren_count++;\n \
    \     } else if (paren_array[i][j] === \")\") {\n        paren_count--;\n    \
    \  }\n      if (paren_count > max_paren_count) {\n        max_paren_count = paren_count;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let count = 0;\n    let max\
    \ = 0;\n    for (const char of group) {\n      if (char === \"(\") {\n       \
    \ count++;\n      } else if (char === \")\") {\n        count--;\n      }\n  \
    \    max = Math.max(max, count);\n    }\n    result.push(max);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwa2izvwn.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738578
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                current_nesting_level++;\n   \
    \         } else if (paren_group[j] === \")\") {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738504
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const max_nesting_levels\
    \ = paren_groups.map(paren_group => {\n    let max_nesting_level = 0;\n    let\
    \ current_nesting_level = 0;\n    for (let i = 0; i < paren_group.length; i++)\
    \ {\n      if (paren_group[i] === \"(\") {\n        current_nesting_level++;\n\
    \      } else if (paren_group[i] === \")\") {\n        current_nesting_level--;\n\
    \      }\n      if (current_nesting_level > max_nesting_level) {\n        max_nesting_level\
    \ = current_nesting_level;\n      }\n    }\n    return max_nesting_level;\n  });\n\
    \  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738580
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const paren_levels =\
    \ paren_groups.map(paren_group => {\n    const paren_stack = [];\n    let max_level\
    \ = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      const paren\
    \ = paren_group[i];\n      if (paren === \"(\") {\n        paren_stack.push(paren);\n\
    \        max_level = Math.max(max_level, paren_stack.length);\n      } else if\
    \ (paren === \")\") {\n        paren_stack.pop();\n      }\n    }\n    return\
    \ max_level;\n  });\n  return paren_levels;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738580
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_array = paren_string.split(\" \");\n    let result = [];\n\
    \    for (let i = 0; i < paren_array.length; i++) {\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjwfqys4s.ts(10,21): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1659738580
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === \"(\") {\n                current_nesting++;\n\
    \            } else if (paren === \")\") {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc54d573u.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let paren_group of paren_groups) {\n        let paren_stack:\
    \ string[] = [];\n        let max_depth: number = 0;\n        for (let paren of\
    \ paren_group) {\n            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === \")\") {\n                paren_stack.pop();\n   \
    \         }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi_rmnsii.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738580
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let paren_group of paren_groups) {\n        let max_depth: number\
    \ = 0;\n        let current_depth: number = 0;\n        for (let i: number = 0;\
    \ i < paren_group.length; i++) {\n            if (paren_group[i] === \"(\") {\n\
    \                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (paren_group[i] === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738509
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    const stack: string[]\
    \ = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    for (const\
    \ char of paren_group) {\n      if (char === \"(\") {\n        stack.push(char);\n\
    \        current_nesting++;\n        max_nesting = Math.max(max_nesting, current_nesting);\n\
    \      } else if (char === \")\") {\n        stack.pop();\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgxqdz4xx.ts(13,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738580
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const groups = paren_string.split(\"\
    \ \");\n    for (const group of groups) {\n        let max_nesting = 0;\n    \
    \    let current_nesting = 0;\n        for (const char of group) {\n         \
    \   if (char === \"(\") {\n                current_nesting++;\n              \
    \  max_nesting = Math.max(max_nesting, current_nesting);\n            } else if\
    \ (char === \")\") {\n                current_nesting--;\n            }\n    \
    \    }\n        result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwv79v7ms.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738580
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let current_level: number = 0;\n    let\
    \ max_level: number = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n\
    \        if (paren_string[i] === \"(\") {\n            current_level++;\n    \
    \        max_level = Math.max(max_level, current_level);\n        } else if (paren_string[i]\
    \ === \")\") {\n            current_level--;\n        } else if (paren_string[i]\
    \ === \" \") {\n            result.push(max_level);\n            max_level = 0;\n\
    \            current_level = 0;\n        }\n    }\n    result.push(max_level);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738581
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let level = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ \"(\") {\n        level++;\n        max_level = Math.max(max_level, level);\n\
    \      } else if (char === \")\") {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj7fd_7a4.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(\" \");\n  let result: number[] =\
    \ [];\n  for (let paren_group of paren_groups) {\n    let max_depth = 0;\n   \
    \ let current_depth = 0;\n    for (let char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7e0gk2yi.ts(12,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738580
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3y336_ik.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let paren_stack: string[] = [];\n       \
    \ let max_depth: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            let paren: string = paren_group[j];\n            if (paren\
    \ === \"(\") {\n                paren_stack.push(paren);\n                max_depth\
    \ = Math.max(max_depth, paren_stack.length);\n            } else if (paren ===\
    \ \")\") {\n                paren_stack.pop();\n            }\n        }\n   \
    \     result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738508
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let paren_levels =\
    \ [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_level = 0;\n\
    \        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                paren_level++;\n                if (paren_level\
    \ > max_level) {\n                    max_level = paren_level;\n             \
    \   }\n            } else if (paren_group[j] === \")\") {\n                paren_level--;\n\
    \            }\n        }\n        paren_levels.push(max_level);\n    }\n    return\
    \ paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738581
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  return paren_groups.map(group\
    \ => {\n    let max_depth = 0;\n    let current_depth = 0;\n    for (let i = 0;\
    \ i < group.length; i++) {\n      if (group[i] === \"(\") {\n        current_depth++;\n\
    \        max_depth = Math.max(max_depth, current_depth);\n      } else if (group[i]\
    \ === \")\") {\n        current_depth--;\n      }\n    }\n    return max_depth;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738580
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvjy4h8u8.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(\" \").map(paren_group => {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === \"(\") {\n        current_depth++;\n  \
    \      max_depth = Math.max(max_depth, current_depth);\n      } else if (paren_group[i]\
    \ === \")\") {\n        current_depth--;\n      }\n    }\n    return max_depth;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738506
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const paren_levels\
    \ = paren_groups.map(paren_group => {\n        let level = 0;\n        let max_level\
    \ = 0;\n        for (let i = 0; i < paren_group.length; i++) {\n            if\
    \ (paren_group[i] === \"(\") {\n                level++;\n            } else if\
    \ (paren_group[i] === \")\") {\n                level--;\n            }\n    \
    \        if (level > max_level) {\n                max_level = level;\n      \
    \      }\n        }\n        return max_level;\n    });\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738504
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptrvahmw0.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738580
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const group of paren_groups) {\n        let max_depth = 0;\n\
    \        let current_depth = 0;\n        for (const char of group) {\n       \
    \     if (char === \"(\") {\n                current_depth++;\n              \
    \  max_depth = Math.max(max_depth, current_depth);\n            } else if (char\
    \ === \")\") {\n                current_depth--;\n            }\n        }\n \
    \       result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn7q4fjk1.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738580
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let depth = 0;\n        for (const char of paren_group) {\n  \
    \          if (char === \"(\") {\n                depth++;\n                max_depth\
    \ = Math.max(max_depth, depth);\n            } else if (char === \")\") {\n  \
    \              depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6oxyt5mm.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738580
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let paren_levels =\
    \ [];\n    for (let paren_group of paren_groups) {\n        let level = 0;\n \
    \       let max_level = 0;\n        for (let paren of paren_group) {\n       \
    \     if (paren === \"(\") {\n                level += 1;\n            } else\
    \ if (paren === \")\") {\n                level -= 1;\n            }\n       \
    \     if (level > max_level) {\n                max_level = level;\n         \
    \   }\n        }\n        paren_levels.push(max_level);\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqrm2c_f_.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738581
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let max_level: number = 0;\n        let level:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      if (paren_group[j] === \"(\") {\n                level++;\n           \
    \     if (level > max_level) {\n                    max_level = level;\n     \
    \           }\n            } else if (paren_group[j] === \")\") {\n          \
    \      level--;\n            }\n        }\n        result.push(max_level);\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738509
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_array = paren_string.split(\" \");\n  let result: number[] =\
    \ [];\n  for (let i = 0; i < paren_array.length; i++) {\n    let paren = paren_array[i];\n\
    \    let count = 0;\n    let max_count = 0;\n    for (let j = 0; j < paren.length;\
    \ j++) {\n      if (paren[j] === \"(\") {\n        count++;\n      } else if (paren[j]\
    \ === \")\") {\n        count--;\n      }\n      if (count > max_count) {\n  \
    \      max_count = count;\n      }\n    }\n    result.push(max_count);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738581
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxlorvtm7.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(\" \");\n  const result: number[] = [];\n\
    \  for (let i = 0; i < parens.length; i++) {\n    const paren = parens[i];\n \
    \   let max_depth = 0;\n    let current_depth = 0;\n    for (let j = 0; j < paren.length;\
    \ j++) {\n      if (paren[j] === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738581
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n            if (paren_groups[i][j] === \"(\") {\n                current_nesting_level++;\n\
    \            } else if (paren_groups[i][j] === \")\") {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738581
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let paren_levels =\
    \ [];\n    for (let paren_group of paren_groups) {\n        let paren_level =\
    \ 0;\n        let max_level = 0;\n        for (let paren of paren_group) {\n \
    \           if (paren === \"(\") {\n                paren_level++;\n         \
    \   } else if (paren === \")\") {\n                paren_level--;\n          \
    \  }\n            if (paren_level > max_level) {\n                max_level =\
    \ paren_level;\n            }\n        }\n        paren_levels.push(max_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9s6jwxrf.ts(12,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738580
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let max_nesting =\
    \ [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_count = 0;\n        let current_nesting_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === \"(\") {\n              \
    \  current_nesting_count++;\n            } else if (paren === \")\") {\n     \
    \           current_nesting_count--;\n            }\n            if (current_nesting_count\
    \ > max_nesting_count) {\n                max_nesting_count = current_nesting_count;\n\
    \            }\n        }\n        max_nesting.push(max_nesting_count);\n    }\n\
    \    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738581
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const groups = paren_string.split(\" \"\
    );\n  for (const group of groups) {\n    let max_depth = 0;\n    let depth = 0;\n\
    \    for (const char of group) {\n      if (char === \"(\") {\n        depth++;\n\
    \        max_depth = Math.max(max_depth, depth);\n      } else if (char === \"\
    )\") {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgepqowai.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738581
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const paren_levels\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let level = 0;\n\
    \        let max_level = 0;\n        for (const paren of paren_group) {\n    \
    \        if (paren === \"(\") {\n                level++;\n            } else\
    \ if (paren === \")\") {\n                level--;\n            }\n          \
    \  if (level > max_level) {\n                max_level = level;\n            }\n\
    \        }\n        paren_levels.push(max_level);\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp57f2zele.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738581
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3ptr2g_r.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const paren_levels =\
    \ [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let paren_level = 0;\n    let max_level = 0;\n    for\
    \ (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] === \"\
    (\") {\n        paren_level++;\n      } else if (paren_group[j] === \")\") {\n\
    \        paren_level--;\n      }\n      if (paren_level > max_level) {\n     \
    \   max_level = paren_level;\n      }\n    }\n    paren_levels.push(max_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738581
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpedgkp7ub.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738509
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const paren_levels =\
    \ [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    const paren_level = parse_nested_parens_helper(paren_group);\n\
    \    paren_levels.push(paren_level);\n  }\n  return paren_levels;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6uynh41u.ts(11,25): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1659738581
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let current_level = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_level++;\n        max_level = Math.max(max_level,\
    \ current_level);\n      } else if (paren === \")\") {\n        current_level--;\n\
    \      }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq4wcqbv7.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let paren_count: number\
    \ = 0;\n    let max_paren_count: number = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === \"(\") {\n        paren_count++;\n    \
    \  } else if (paren_group[i] === \")\") {\n        paren_count--;\n      }\n \
    \     if (paren_count > max_paren_count) {\n        max_paren_count = paren_count;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738582
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_depth = 0;\n        let current_depth =\
    \ 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                current_depth++;\n                if (current_depth\
    \ > max_depth) {\n                    max_depth = current_depth;\n           \
    \     }\n            } else if (paren_group[j] === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738502
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === \"(\") {\n                current_nesting++;\n\
    \            } else if (paren === \")\") {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc54d573u.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_level = 0;\n    let\
    \ current_level = 0;\n    for (const paren of group) {\n      if (paren === \"\
    (\") {\n        current_level++;\n        max_level = Math.max(max_level, current_level);\n\
    \      } else if (paren === \")\") {\n        current_level--;\n      }\n    }\n\
    \    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3faua9y1.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738582
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let max_nesting: number\
    \ = 0;\n    let current_nesting: number = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === \"(\") {\n        current_nesting++;\n\
    \        if (current_nesting > max_nesting) {\n          max_nesting = current_nesting;\n\
    \        }\n      } else if (paren_group[i] === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let paren_stack: string[] = [];\n       \
    \ let max_depth: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            let paren: string = paren_group[j];\n            if (paren\
    \ === \"(\") {\n                paren_stack.push(paren);\n                max_depth\
    \ = Math.max(max_depth, paren_stack.length);\n            } else if (paren ===\
    \ \")\") {\n                paren_stack.pop();\n            }\n        }\n   \
    \     result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738508
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let max_level: number = 0;\n        let level:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      if (paren_group[j] === \"(\") {\n                level++;\n           \
    \     if (level > max_level) {\n                    max_level = level;\n     \
    \           }\n            } else if (paren_group[j] === \")\") {\n          \
    \      level--;\n            }\n        }\n        result.push(max_level);\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738509
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let depth = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ \"(\") {\n        depth++;\n        max_depth = Math.max(max_depth, depth);\n\
    \      } else if (char === \")\") {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpejz2rpqr.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    let current_level = 0;\n    let max_level\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === \"(\") {\n            current_level++;\n            max_level = Math.max(max_level,\
    \ current_level);\n        } else if (paren_string[i] === \")\") {\n         \
    \   current_level--;\n        } else if (paren_string[i] === \" \") {\n      \
    \      result.push(max_level);\n            max_level = 0;\n            current_level\
    \ = 0;\n        }\n    }\n    result.push(max_level);\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvjy4h8u8.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_nesting = 0;\n   \
    \ let current_nesting = 0;\n    for (const char of group) {\n      if (char ===\
    \ \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6yacekl4.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738509
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpedgkp7ub.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738509
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let level = 0;\n    for (const paren of paren_group) {\n      if (paren ===\
    \ \"(\") {\n        level++;\n      } else if (paren === \")\") {\n        level--;\n\
    \      }\n      if (level > max_level) {\n        max_level = level;\n      }\n\
    \    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq0bqenmx.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738583
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpedgkp7ub.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738509
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    const stack: string[]\
    \ = [];\n    let max_depth = 0;\n    for (const char of paren_group) {\n     \
    \ if (char === \"(\") {\n        stack.push(char);\n        max_depth = Math.max(max_depth,\
    \ stack.length);\n      } else if (char === \")\") {\n        stack.pop();\n \
    \     }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpofb3yori.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738503
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let paren_group of paren_groups) {\n        let max_depth: number\
    \ = 0;\n        let current_depth: number = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === \"(\") {\n                current_depth++;\n\
    \            } else if (paren_group[i] === \")\") {\n                current_depth--;\n\
    \            }\n            if (current_depth > max_depth) {\n               \
    \ max_depth = current_depth;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(\" \");\n  let result: number[] =\
    \ [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let max_nesting = 0;\n    let current_nesting = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren_group[j] === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738507
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let depth = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ \"(\") {\n        depth++;\n        max_depth = Math.max(max_depth, depth);\n\
    \      } else if (char === \")\") {\n        depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgqou5bbx.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738511
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        result.push(parse_parens(paren_groups[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7jyjz_5e.ts(10,21): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1659738583
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  let max_depth = 0;\n\
    \  const max_depth_arr = [];\n  for (let i = 0; i < paren_groups.length; i++)\
    \ {\n    const paren_group = paren_groups[i];\n    let depth = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] === \"(\") {\n\
    \        depth++;\n      } else if (paren_group[j] === \")\") {\n        depth--;\n\
    \      }\n    }\n    max_depth_arr.push(depth);\n  }\n  return max_depth_arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmphyh5talo.js:28:12)\n    at Object.<anonymous> (/tmp/tmphyh5talo.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let current_group:\
    \ string = paren_groups[i];\n        let current_level: number = 0;\n        let\
    \ max_level: number = 0;\n        for (let j = 0; j < current_group.length; j++)\
    \ {\n            if (current_group[j] === \"(\") {\n                current_level++;\n\
    \                if (current_level > max_level) {\n                    max_level\
    \ = current_level;\n                }\n            } else if (current_group[j]\
    \ === \")\") {\n                current_level--;\n            }\n        }\n \
    \       result.push(max_level);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738578
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        result.push(parse_nested_parens_helper(paren_group));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg4w1ryf9.ts(10,21): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1659738512
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxlorvtm7.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_list = paren_string.split(' ');\n    let result: number[] =\
    \ [];\n    for (let paren of paren_list) {\n        let max_level = 0;\n     \
    \   let current_level = 0;\n        for (let i = 0; i < paren.length; i++) {\n\
    \            if (paren[i] === '(') {\n                current_level++;\n     \
    \           if (current_level > max_level) {\n                    max_level =\
    \ current_level;\n                }\n            } else if (paren[i] === ')')\
    \ {\n                current_level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let stack: string[] = [];\n        let max_depth:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      let char: string = paren_group[j];\n            if (char === \"(\") {\n\
    \                stack.push(char);\n                max_depth = Math.max(max_depth,\
    \ stack.length);\n            } else if (char === \")\") {\n                stack.pop();\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let result = [];\n\
    \    for (let paren_group of paren_groups) {\n        let paren_stack = [];\n\
    \        let max_depth = 0;\n        for (let i = 0; i < paren_group.length; i++)\
    \ {\n            if (paren_group[i] === \"(\") {\n                paren_stack.push(paren_group[i]);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren_group[i] === \")\") {\n                paren_stack.pop();\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group:\
    \ string = paren_groups[i];\n    let paren_stack: string[] = [];\n    let max_depth:\
    \ number = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      let paren:\
    \ string = paren_group[j];\n      if (paren === \"(\") {\n        paren_stack.push(paren);\n\
    \        max_depth = Math.max(max_depth, paren_stack.length);\n      } else if\
    \ (paren === \")\") {\n        paren_stack.pop();\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const max_nested_levels\
    \ = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let max_level\
    \ = 0;\n    let current_level = 0;\n    for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n      if (paren_groups[i][j] === \"(\") {\n        current_level++;\n\
    \      } else if (paren_groups[i][j] === \")\") {\n        current_level--;\n\
    \      }\n      if (current_level > max_level) {\n        max_level = current_level;\n\
    \      }\n    }\n    max_nested_levels.push(max_level);\n  }\n  return max_nested_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let max_level: number = 0;\n        let current_level:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      if (paren_group[j] === \"(\") {\n                current_level++;\n   \
    \             if (current_level > max_level) {\n                    max_level\
    \ = current_level;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                current_level--;\n            }\n        }\n     \
    \   result.push(max_level);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpedgkp7ub.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738509
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let count = 0;\n\
    \        let max_count = 0;\n        for (const char of paren_group) {\n     \
    \       if (char === \"(\") {\n                count++;\n            } else if\
    \ (char === \")\") {\n                count--;\n            }\n            max_count\
    \ = Math.max(max_count, count);\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp303fsz9g.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const paren_levels =\
    \ [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let level = 0;\n    let max_level = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] === \"(\") {\n\
    \        level++;\n      } else if (paren_group[j] === \")\") {\n        level--;\n\
    \      }\n      if (level > max_level) {\n        max_level = level;\n      }\n\
    \    }\n    paren_levels.push(max_level);\n  }\n  return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738508
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(\" \");\n  let result = [];\n  for\
    \ (let paren_group of paren_groups) {\n    let paren_count = 0;\n    let max_paren_count\
    \ = 0;\n    for (let paren of paren_group) {\n      if (paren === \"(\") {\n \
    \       paren_count++;\n      } else if (paren === \")\") {\n        paren_count--;\n\
    \      }\n      if (paren_count > max_paren_count) {\n        max_paren_count\
    \ = paren_count;\n      }\n    }\n    result.push(max_paren_count);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1x_rqu3x.ts(12,23): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738583
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let level = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ \"(\") {\n        level++;\n        max_level = Math.max(max_level, level);\n\
    \      } else if (char === \")\") {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj7fd_7a4.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_level = 0;\n    let\
    \ level = 0;\n    for (const char of group) {\n      if (char === \"(\") {\n \
    \       level++;\n        max_level = Math.max(max_level, level);\n      } else\
    \ if (char === \")\") {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpljo_vo60.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  return paren_groups.map(group\
    \ => {\n    let max_depth = 0;\n    let current_depth = 0;\n    for (let i = 0;\
    \ i < group.length; i++) {\n      if (group[i] === \"(\") {\n        current_depth++;\n\
    \        max_depth = Math.max(max_depth, current_depth);\n      } else if (group[i]\
    \ === \")\") {\n        current_depth--;\n      }\n    }\n    return max_depth;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738580
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let paren_group of paren_groups) {\n        let max_nesting:\
    \ number = 0;\n        let current_nesting: number = 0;\n        for (let i =\
    \ 0; i < paren_group.length; i++) {\n            if (paren_group[i] === \"(\"\
    ) {\n                current_nesting++;\n            } else if (paren_group[i]\
    \ === \")\") {\n                current_nesting--;\n            }\n          \
    \  if (current_nesting > max_nesting) {\n                max_nesting = current_nesting;\n\
    \            }\n        }\n        result.push(max_nesting);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3y336_ik.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const char of paren_group)\
    \ {\n            if (char === \"(\") {\n                current_depth++;\n   \
    \             max_depth = Math.max(max_depth, current_depth);\n            } else\
    \ if (char === \")\") {\n                current_depth--;\n            }\n   \
    \     }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuntigzpf.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738503
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3y336_ik.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let level = 0;\n    for (const paren of paren_group) {\n      if (paren ===\
    \ \"(\") {\n        level++;\n      } else if (paren === \")\") {\n        level--;\n\
    \      }\n      if (level > max_level) {\n        max_level = level;\n      }\n\
    \    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq0bqenmx.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738583
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let max_depth: number =\
    \ 0;\n    let depth: number = 0;\n    for (let char of paren_group) {\n      if\
    \ (char === \"(\") {\n        depth++;\n        if (depth > max_depth) {\n   \
    \       max_depth = depth;\n        }\n      } else if (char === \")\") {\n  \
    \      depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphjqq2np1.ts(12,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738583
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (const char of group) {\n      if (char === \"(\") {\n       \
    \ level++;\n      } else if (char === \")\") {\n        level--;\n      }\n  \
    \    max_level = Math.max(max_level, level);\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu24lgai5.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738498
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_depth = 0;\n    let\
    \ current_depth = 0;\n    for (const char of group) {\n      if (char === \"(\"\
    ) {\n        current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (char === \")\") {\n        current_depth--;\n      }\n    }\n\
    \    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnnyh2isi.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_depth = 0;\n    let\
    \ current_depth = 0;\n    for (const char of group) {\n      if (char === \"(\"\
    ) {\n        current_depth++;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (char === \")\") {\n        current_depth--;\n      }\n    }\n\
    \    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnnyh2isi.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_depth\
    \ = 0;\n        let current_depth = 0;\n        for (const char of paren_group)\
    \ {\n            if (char === \"(\") {\n                current_depth++;\n   \
    \             max_depth = Math.max(max_depth, current_depth);\n            } else\
    \ if (char === \")\") {\n                current_depth--;\n            }\n   \
    \     }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuntigzpf.ts(12,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738503
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let count: number = 0;\n        let max_count:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      if (paren_group[j] === \"(\") {\n                count++;\n           \
    \ } else if (paren_group[j] === \")\") {\n                count--;\n         \
    \   }\n            if (count > max_count) {\n                max_count = count;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === \"(\") {\n              \
    \  current_nesting_level++;\n            } else if (paren === \")\") {\n     \
    \           current_nesting_level--;\n            }\n            if (current_nesting_level\
    \ > max_nesting_level) {\n                max_nesting_level = current_nesting_level;\n\
    \            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let count: number = 0;\n        let max_count:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      if (paren_group[j] === \"(\") {\n                count++;\n           \
    \     if (count > max_count) {\n                    max_count = count;\n     \
    \           }\n            } else if (paren_group[j] === \")\") {\n          \
    \      count--;\n            }\n        }\n        result.push(max_count);\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        result.push(parse_nested_parens_helper(paren_group));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg4w1ryf9.ts(10,21): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1659738512
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        result.push(parse_nested_parens_helper(paren_group));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg4w1ryf9.ts(10,21): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1659738512
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3ptr2g_r.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        let max_nesting\
    \ = 0;\n        let current_nesting = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === \"(\") {\n                current_nesting++;\n\
    \            } else if (paren === \")\") {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc54d573u.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let count: number = 0;\n        let max_count:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      if (paren_group[j] === \"(\") {\n                count++;\n           \
    \ } else if (paren_group[j] === \")\") {\n                count--;\n         \
    \   }\n            if (count > max_count) {\n                max_count = count;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738583
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const groups = paren_string.split(\" \"\
    );\n  for (const group of groups) {\n    let max = 0;\n    let count = 0;\n  \
    \  for (const char of group) {\n      if (char === \"(\") {\n        count++;\n\
    \        max = Math.max(max, count);\n      } else if (char === \")\") {\n   \
    \     count--;\n      }\n    }\n    result.push(max);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnnlec84g.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738584
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let current_level = 0;\n    for (const char of paren_group) {\n      if (char\
    \ === \"(\") {\n        current_level++;\n        max_level = Math.max(max_level,\
    \ current_level);\n      } else if (char === \")\") {\n        current_level--;\n\
    \      }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7qlelea.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_level = 0;\n\
    \    let level = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ \"(\") {\n        level++;\n        max_level = Math.max(max_level, level);\n\
    \      } else if (char === \")\") {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj7fd_7a4.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const paren_levels =\
    \ [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group\
    \ = paren_groups[i];\n    let level = 0;\n    let max_level = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      const paren = paren_group[j];\n\
    \      if (paren === \"(\") {\n        level++;\n      } else if (paren === \"\
    )\") {\n        level--;\n      }\n      if (level > max_level) {\n        max_level\
    \ = level;\n      }\n    }\n    paren_levels.push(max_level);\n  }\n  return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738584
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(\" \");\n  const result: number[] = [];\n\
    \  for (let i = 0; i < parens.length; i++) {\n    const paren = parens[i];\n \
    \   let count = 0;\n    let max = 0;\n    for (let j = 0; j < paren.length; j++)\
    \ {\n      if (paren[j] === \"(\") {\n        count++;\n        max = Math.max(max,\
    \ count);\n      } else {\n        count--;\n      }\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738499
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const paren_levels\
    \ = paren_groups.map(paren_group => {\n        let max_level = 0;\n        let\
    \ current_level = 0;\n        for (let i = 0; i < paren_group.length; i++) {\n\
    \            if (paren_group[i] === \"(\") {\n                current_level++;\n\
    \                max_level = Math.max(max_level, current_level);\n           \
    \ } else if (paren_group[i] === \")\") {\n                current_level--;\n \
    \           }\n        }\n        return max_level;\n    });\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738508
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let max_depth = 0;\n  let current_depth = 0;\n  let result = [];\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"\
    (\") {\n      current_depth++;\n      max_depth = Math.max(max_depth, current_depth);\n\
    \    } else if (paren_string[i] === \")\") {\n      current_depth--;\n    } else\
    \ if (paren_string[i] === \" \") {\n      result.push(max_depth);\n      max_depth\
    \ = 0;\n      current_depth = 0;\n    }\n  }\n  result.push(max_depth);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738584
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(\" \");\n  let result: number[] =\
    \ [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group\
    \ = paren_groups[i];\n    let stack: string[] = [];\n    let max_level = 0;\n\
    \    let current_level = 0;\n    for (let j = 0; j < paren_group.length; j++)\
    \ {\n      let paren = paren_group[j];\n      if (paren === \"(\") {\n       \
    \ stack.push(paren);\n        current_level++;\n        if (current_level > max_level)\
    \ {\n          max_level = current_level;\n        }\n      } else if (paren ===\
    \ \")\") {\n        stack.pop();\n        current_level--;\n      }\n    }\n \
    \   result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738585
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const paren_levels\
    \ = paren_groups.map(paren_group => {\n        let level = 0;\n        let max_level\
    \ = 0;\n        for (let i = 0; i < paren_group.length; i++) {\n            if\
    \ (paren_group[i] === \"(\") {\n                level++;\n            } else if\
    \ (paren_group[i] === \")\") {\n                level--;\n            }\n    \
    \        if (level > max_level) {\n                max_level = level;\n      \
    \      }\n        }\n        return max_level;\n    });\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738504
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const group of paren_groups) {\n        let max_nesting = 0;\n\
    \        let current_nesting = 0;\n        for (const paren of group) {\n    \
    \        if (paren === \"(\") {\n                current_nesting++;\n        \
    \    } else if (paren === \")\") {\n                current_nesting--;\n     \
    \       }\n            if (current_nesting > max_nesting) {\n                max_nesting\
    \ = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp36ftm_7g.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738501
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let parens_array = paren_string.split(\" \");\n    let result = [];\n\
    \    for (let i = 0; i < parens_array.length; i++) {\n        result.push(parse_parens(parens_array[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_qjlzytk.ts(10,21): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1659738584
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_depth = 0;\n\
    \    let current_depth = 0;\n    for (const paren of paren_group) {\n      if\
    \ (paren === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwehw3t6w.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  let max_depth = 0;\n  let current_depth\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === \"(\") {\n      current_depth++;\n      max_depth = Math.max(max_depth,\
    \ current_depth);\n    } else if (paren_string[i] === \")\") {\n      current_depth--;\n\
    \    } else if (paren_string[i] === \" \") {\n      result.push(max_depth);\n\
    \      max_depth = 0;\n      current_depth = 0;\n    }\n  }\n  result.push(max_depth);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738585
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let max_depth: number = 0;\n        let depth:\
    \ number = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n      \
    \      if (paren_group[j] === \"(\") {\n                depth++;\n           \
    \     if (depth > max_depth) {\n                    max_depth = depth;\n     \
    \           }\n            } else if (paren_group[j] === \")\") {\n          \
    \      depth--;\n            }\n        }\n        result.push(max_depth);\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738585
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group of paren_groups) {\n    let max_level = 0;\n    let\
    \ level = 0;\n    for (const char of group) {\n      if (char === \"(\") {\n \
    \       level++;\n        max_level = Math.max(max_level, level);\n      } else\
    \ if (char === \")\") {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpljo_vo60.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738583
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfehj0gmq.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738584
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    const stack: string[]\
    \ = [];\n    let max_depth = 0;\n    for (const char of paren_group) {\n     \
    \ if (char === \"(\") {\n        stack.push(char);\n        max_depth = Math.max(max_depth,\
    \ stack.length);\n      } else if (char === \")\") {\n        stack.pop();\n \
    \     }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpofb3yori.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738503
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let current_nesting = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3ptr2g_r.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738499
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let paren_groups: string[] = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ string = paren_groups[i];\n        let paren_stack: string[] = [];\n       \
    \ let max_nesting: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            let paren: string = paren_group[j];\n            if (paren\
    \ === \"(\") {\n                paren_stack.push(paren);\n                max_nesting\
    \ = Math.max(max_nesting, paren_stack.length);\n            } else if (paren ===\
    \ \")\") {\n                paren_stack.pop();\n            }\n        }\n   \
    \     result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738585
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  return paren_groups.map(group\
    \ => {\n    let max_depth = 0;\n    let current_depth = 0;\n    for (let i = 0;\
    \ i < group.length; i++) {\n      if (group[i] === \"(\") {\n        current_depth++;\n\
    \        max_depth = Math.max(max_depth, current_depth);\n      } else if (group[i]\
    \ === \")\") {\n        current_depth--;\n      }\n    }\n    return max_depth;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738580
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_groups: string[] = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let max_level: number =\
    \ 0;\n    let level: number = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === \"(\") {\n        level++;\n        if\
    \ (level > max_level) {\n          max_level = level;\n        }\n      } else\
    \ if (paren_group[i] === \")\") {\n        level--;\n      }\n    }\n    result.push(max_level);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738585
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const paren_group of paren_groups) {\n    let level = 0;\n   \
    \ let max_level = 0;\n    for (const paren of paren_group) {\n      if (paren\
    \ === \"(\") {\n        level++;\n      } else if (paren === \")\") {\n      \
    \  level--;\n      }\n      max_level = Math.max(max_level, level);\n    }\n \
    \   result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsdq0k0pb.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659738512
