language: ts
name: HumanEval_47_median
results:
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    return 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpaycj__ax.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaycj__ax.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    const sorted = l.sort((a, b) => a - b);\n    const\
    \ mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n \
    \       return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort(function(a, b) {return a - b});\n\
    \    let len = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len\
    \ / 2] + sorted[len / 2 - 1]) / 2;\n    } else {\n        return sorted[Math.floor(len\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let half = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2) {\n        return sorted[half];\n    } else\
    \ {\n        return (sorted[half - 1] + sorted[half]) / 2.0;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp2olw1wt1.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2olw1wt1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l1 = l.sort((a, b) => a - b);\n    let mid = Math.floor(l1.length\
    \ / 2);\n    if (l1.length % 2 == 0) {\n        return (l1[mid] + l1[mid - 1])\
    \ / 2;\n    } else {\n        return l1[mid];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpru4gadwr.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpru4gadwr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len - 1) /\
    \ 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m: number = 0;\n    let n: number = l.length;\n\
    \    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let\
    \ v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number\
    \ = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let ab: number =\
    \ 0;\n    let ac: number = 0;\n    let ad: number = 0;\n    let ae: number = 0;\n\
    \    let af: number = 0;\n    let ag: number = 0;\n    let ah: number = 0;\n \
    \   let ai: number = 0;\n    let aj: number = 0;\n    let ak: number = 0;\n  \
    \  let al: number = 0;\n    let am: number = 0;\n    let an: number = 0;\n   \
    \ let ao: number = 0;\n    let ap: number = 0;\n    let aq: number = 0;\n    let\
    \ ar: number = 0;\n    let as: number = 0;\n    let at: number = 0;\n    let au:\
    \ number = 0;\n    let av: number = 0;\n    let aw: number = 0;\n    let ax: number\
    \ = 0;\n    let ay: number = 0;\n    let az: number = 0;\n    let ba: number =\
    \ 0;\n    let bb: number = 0;\n    let bc: number = 0;\n    let bd: number = 0;\n\
    \    let be: number = 0;\n    let bf: number = 0;\n    let bg: number = 0;\n \
    \   let bh: number = 0;\n    let bi: number = 0;\n    let bj: number = 0;\n  \
    \  let bk: number = 0;\n    let bl: number = 0;\n    let bm: number = 0;\n   \
    \ let bn: number = 0;\n    let bo: number = 0;\n    let bp: number = 0;\n    let\
    \ bq: number = 0;\n    let br: number = 0;\n    let bs: number\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl50ngf2e.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort(function(a, b) {return a - b});\n\
    \    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0)\
    \ {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n     \
    \   return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    return 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpaycj__ax.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaycj__ax.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid - 1] +\
    \ sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpj5v1iuui.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj5v1iuui.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738115
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 === 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpkqkqlvdq.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkqkqlvdq.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    return 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpaycj__ax.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaycj__ax.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    return 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpaycj__ax.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaycj__ax.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 == 0) {\n        return (sorted[len / 2] + sorted[len / 2 - 1])\
    \ / 2;\n    } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp7dre1w_6.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7dre1w_6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l1 = l.sort((a, b) => a - b);\n    let len = l1.length;\n\
    \    if (len % 2 == 0) {\n        return (l1[len / 2] + l1[len / 2 - 1]) / 2;\n\
    \    } else {\n        return l1[Math.floor(len / 2)];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    return 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpaycj__ax.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaycj__ax.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let len = l.length;\n    if (len % 2 == 0) {\n    \
    \    return (l[len / 2 - 1] + l[len / 2]) / 2;\n    } else {\n        return l[Math.floor(len\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpk4efwztn.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpk4efwztn.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 == 0) {\n        return (l[m] + l[m - 1]) / 2;\n    } else {\n        return\
    \ l[m];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpjq3ruyae.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjq3ruyae.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let n =\
    \ sorted.length;\n    if (n % 2 == 0) {\n        return (sorted[n / 2 - 1] + sorted[n\
    \ / 2]) / 2;\n    } else {\n        return sorted[(n - 1) / 2];\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l2 = l.slice();\n    l2.sort();\n    let n = l2.length;\n\
    \    if (n % 2 == 0) {\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2;\n    }\
    \ else {\n        return l2[Math.floor(n / 2)];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp8mrrpbqv.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8mrrpbqv.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[middle - 1]\
    \ + sorted[middle]) / 2;\n    } else {\n        return sorted[middle];\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp9gymd0p3.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9gymd0p3.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738141
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    return 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpaycj__ax.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaycj__ax.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort(function(a, b) {\n        return\
    \ a - b;\n    });\n    let len = sorted.length;\n    if (len % 2 === 0) {\n  \
    \      return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n   \
    \     return sorted[(len - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp7cxfj274.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7cxfj274.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = l.length / 2;\n    return l.length % 2 == 0\
    \ ? (l[m] + l[m - 1]) / 2 : l[Math.floor(m)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmplhgw2s72.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplhgw2s72.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738141
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let half\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2) {\n        return\
    \ sorted[half];\n    } else {\n        return (sorted[half - 1] + sorted[half])\
    \ / 2.0;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l2 = l.slice();\n    l2.sort();\n    let mid =\
    \ Math.floor(l2.length / 2);\n    if (l2.length % 2 == 0) {\n        return (l2[mid\
    \ - 1] + l2[mid]) / 2;\n    } else {\n        return l2[mid];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpu3kyc__9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu3kyc__9.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = l.length / 2;\n    if (l.length % 2 === 0)\
    \ {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[Math.floor(m)];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp9n4sitfp.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9n4sitfp.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let s = l.sort();\n    let n = s.length;\n    if (n\
    \ % 2 == 0) {\n        return (s[n / 2] + s[n / 2 - 1]) / 2;\n    } else {\n \
    \       return s[Math.floor(n / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpahuxd3v9.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpahuxd3v9.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = l.length / 2;\n    return l.length % 2 ===\
    \ 0 ? (l[m - 1] + l[m]) / 2 : l[Math.floor(m)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmphk2pryb3.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphk2pryb3.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = sorted.length / 2;\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid]\
    \ + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[Math.floor(mid)];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 === 0) {\n        return (sorted[len / 2] + sorted[len / 2 -\
    \ 1]) / 2;\n    } else {\n        return sorted[Math.floor(len / 2)];\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp8fpod0_n.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8fpod0_n.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l2 = l.sort((a, b) => a - b);\n    let mid = Math.floor(l2.length\
    \ / 2);\n    if (l2.length % 2 == 0) {\n        return (l2[mid] + l2[mid - 1])\
    \ / 2;\n    } else {\n        return l2[mid];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let mid = Math.floor(l.length / 2);\n    let sorted\
    \ = l.sort((a, b) => a - b);\n    if (l.length % 2 === 0) {\n        return (sorted[mid]\
    \ + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l2 = l.sort();\n    let len = l2.length;\n    if\
    \ (len % 2 == 0) {\n        return (l2[len / 2] + l2[len / 2 - 1]) / 2;\n    }\
    \ else {\n        return l2[Math.floor(len / 2)];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmps6f0o4xu.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps6f0o4xu.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 == 0) {\n        return (sorted[len / 2] + sorted[len / 2 - 1])\
    \ / 2;\n    } else {\n        return sorted[Math.floor(len / 2)];\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp7cxzznl5.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7cxzznl5.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738141
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let mid = Math.floor(l.length / 2);\n    let sorted\
    \ = l.sort();\n    if (l.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp8zyyfjgt.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8zyyfjgt.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let mid = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 == 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n     \
    \   return l[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpi0juj7qe.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi0juj7qe.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    if (l.length == 0) {\n        return 0;\n    }\n  \
    \  l.sort();\n    let mid = Math.floor(l.length / 2);\n    if (l.length % 2 ==\
    \ 0) {\n        return (l[mid] + l[mid - 1]) / 2;\n    } else {\n        return\
    \ l[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp6oc6gz_i.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6oc6gz_i.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 === 0) {\n        return (sorted[len / 2] + sorted[len / 2 -\
    \ 1]) / 2;\n    } else {\n        return sorted[Math.floor(len / 2)];\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp8fpod0_n.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8fpod0_n.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    l.sort(function(a, b) { return a - b; });\n    var\
    \ half = Math.floor(l.length / 2);\n    if (l.length % 2) {\n        return l[half];\n\
    \    } else {\n        return (l[half - 1] + l[half]) / 2.0;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sortedList = l.sort((a, b) => a - b);\n    let\
    \ mid = Math.floor(sortedList.length / 2);\n    if (sortedList.length % 2) {\n\
    \        return sortedList[mid];\n    } else {\n        return (sortedList[mid\
    \ - 1] + sortedList[mid]) / 2.0;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let len = l.length;\n    let mid = Math.floor(len /\
    \ 2);\n    if (len % 2 == 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n  \
    \  } else {\n        return l[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpeilg8mbj.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeilg8mbj.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = l.length / 2;\n    let s = l.sort();\n    if\
    \ (l.length % 2 == 0) {\n        return (s[m] + s[m - 1]) / 2;\n    } else {\n\
    \        return s[Math.floor(m)];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpg65zc0m_.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg65zc0m_.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp7cxfj274.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7cxfj274.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l1 = l.sort();\n    let l2 = l1.length;\n    let\
    \ l3 = l2 / 2;\n    let l4 = Math.floor(l3);\n    let l5 = l1[l4];\n    let l6\
    \ = l1[l4 - 1];\n    let l7 = l5 + l6;\n    let l8 = l7 / 2;\n    return l8;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpt8y_93zo.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpt8y_93zo.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    return 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpaycj__ax.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaycj__ax.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len - 1) /\
    \ 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = l.length / 2;\n    if (l.length % 2 == 0) {\n\
    \        return (l[m] + l[m - 1]) / 2;\n    } else {\n        return l[Math.floor(m)];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpjww9suyz.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjww9suyz.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[Math.floor(len\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l2 = l.sort((a, b) => a - b);\n    let mid = Math.floor(l2.length\
    \ / 2);\n    if (l2.length % 2 == 0) {\n        return (l2[mid] + l2[mid - 1])\
    \ / 2;\n    } else {\n        return l2[mid];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738111
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 == 0) {\n        return (sorted[len / 2] + sorted[len / 2 - 1])\
    \ / 2;\n    } else {\n        return sorted[Math.floor(len / 2)];\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp7cxzznl5.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7cxzznl5.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738141
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 == 0) {\n        return (sorted[len / 2] + sorted[len / 2 - 1])\
    \ / 2;\n    } else {\n        return sorted[Math.floor(len / 2)];\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp7cxzznl5.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7cxzznl5.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738141
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp3x8lc41h.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3x8lc41h.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let length = sorted.length;\n\
    \    let mid = Math.floor(length / 2);\n    if (length % 2 == 0) {\n        return\
    \ (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp71_z_1lc.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp71_z_1lc.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    let mid = Math.floor(len / 2);\n    if (len % 2 === 0)\
    \ {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n     \
    \   return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738111
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l2 = l.sort();\n    let mid = l2.length / 2;\n\
    \    if (l2.length % 2 == 0) {\n        return (l2[mid] + l2[mid - 1]) / 2;\n\
    \    } else {\n        return l2[Math.floor(mid)];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpypodz33c.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpypodz33c.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    if (l.length == 0) {\n        return 0;\n    }\n  \
    \  let sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = l.length / 2;\n    if (m % 1 === 0) {\n   \
    \     return (l[m] + l[m - 1]) / 2;\n    } else {\n        return l[Math.floor(m)];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpu4bjjbut.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu4bjjbut.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    const sorted = l.sort((a, b) => a - b);\n    const\
    \ middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n\
    \        return (sorted[middle - 1] + sorted[middle]) / 2;\n    } else {\n   \
    \     return sorted[middle];\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    return sorted.length % 2 === 0 ? (sorted[mid]\
    \ + sorted[mid - 1]) / 2 : sorted[mid];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2) {\n        return\
    \ sorted[mid];\n    } else {\n        return (sorted[mid - 1] + sorted[mid]) /\
    \ 2.0;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  let sorted = l.sort((a, b) => a - b);\n  let mid = Math.floor(sorted.length\
    \ / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n  } else {\n    return sorted[mid];\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  let sorted = l.sort((a, b) => a - b);\n  let mid = Math.floor(sorted.length\
    \ / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n  } else {\n    return sorted[mid];\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpe9dtpsnk.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe9dtpsnk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738115
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    if (n % 2 === 0) {\n       \
    \ return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1)\
    \ / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyssizmvu.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyssizmvu.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    l.sort();\n    if (n % 2 === 0) {\n        return (l[n / 2 -\
    \ 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n    }\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpw3lp993o.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw3lp993o.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 == 0) {\n        return (l[m] + l[m - 1]) / 2;\n    } else {\n        return\
    \ l[m];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpjq3ruyae.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjq3ruyae.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len - 1) /\
    \ 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpru4gadwr.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpru4gadwr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp7cxfj274.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7cxfj274.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp3x8lc41h.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3x8lc41h.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len - 1) /\
    \ 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    if (l.length === 0) {\n        return 0;\n    }\n \
    \   l.sort();\n    let mid = Math.floor(l.length / 2);\n    if (l.length % 2 ===\
    \ 0) {\n        return (l[mid] + l[mid - 1]) / 2;\n    } else {\n        return\
    \ l[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp8a2z8gnu.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8a2z8gnu.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[Math.floor(n\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpd4qxwu_b.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd4qxwu_b.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sortedList = l.sort((a, b) => a - b);\n    let\
    \ length = sortedList.length;\n    if (length % 2 === 0) {\n        return (sortedList[length\
    \ / 2 - 1] + sortedList[length / 2]) / 2;\n    } else {\n        return sortedList[Math.floor(length\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return 0;\n  }\n  l.sort((a,\
    \ b) => a - b);\n  if (l.length % 2 === 0) {\n    return (l[l.length / 2 - 1]\
    \ + l[l.length / 2]) / 2;\n  } else {\n    return l[Math.floor(l.length / 2)];\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len - 1) /\
    \ 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp7cxfj274.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7cxfj274.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 == 0) {\n        return (l[m] + l[m - 1]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpm3ykeids.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm3ykeids.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp7cxfj274.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7cxfj274.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp3x8lc41h.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3x8lc41h.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    return sorted.length % 2 == 0 ? (sorted[mid]\
    \ + sorted[mid - 1]) / 2 : sorted[mid];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n\
    \        return l[m];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp7cxfj274.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7cxfj274.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    if (l.length === 0) {\n        return 0;\n    }\n \
    \   l.sort();\n    if (l.length % 2 === 0) {\n        return (l[l.length / 2 -\
    \ 1] + l[l.length / 2]) / 2;\n    } else {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp6l8vr2w6.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l8vr2w6.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort(function(a, b) {return a - b});\n\
    \    let len = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len\
    \ / 2] + sorted[len / 2 - 1]) / 2;\n    } else {\n        return sorted[Math.floor(len\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    return 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpaycj__ax.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaycj__ax.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp3x8lc41h.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3x8lc41h.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l2 = l.slice();\n    l2.sort();\n    let n = l2.length;\n\
    \    if (n % 2 == 0) {\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2;\n    }\
    \ else {\n        return l2[Math.floor(n / 2)];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp8mrrpbqv.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8mrrpbqv.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len - 1) /\
    \ 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort(function(a, b) {\n        return\
    \ a - b;\n    });\n    let length = sorted.length;\n    if (length % 2 === 0)\
    \ {\n        return (sorted[length / 2 - 1] + sorted[length / 2]) / 2;\n    }\
    \ else {\n        return sorted[Math.floor(length / 2)];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = l.length / 2;\n    return l.length % 2 ===\
    \ 0 ? (l[m - 1] + l[m]) / 2 : l[Math.floor(m)];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmphk2pryb3.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphk2pryb3.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    if (l.length === 0) {\n        return 0;\n    }\n \
    \   const sorted = l.sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid - 1] +\
    \ sorted[mid]) / 2;\n    }\n    return sorted[mid];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738145
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    } else {\n        return sorted[middle];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpfx12yx4e.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfx12yx4e.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738145
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l2 = l.sort();\n    let mid = l2.length / 2;\n\
    \    if (l2.length % 2 == 0) {\n        return (l2[mid] + l2[mid - 1]) / 2;\n\
    \    } else {\n        return l2[Math.floor(mid)];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpypodz33c.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpypodz33c.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort(function(a, b) {\n        return\
    \ a - b;\n    });\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738147
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    if (l.length === 0) {\n        return 0;\n    }\n \
    \   l.sort();\n    if (l.length % 2 === 0) {\n        return (l[l.length / 2 -\
    \ 1] + l[l.length / 2]) / 2;\n    } else {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp6l8vr2w6.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l8vr2w6.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = l.length / 2;\n    if (l.length % 2 === 0)\
    \ {\n        return (l[m] + l[m - 1]) / 2;\n    } else {\n        return l[Math.floor(m)];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmplk5p22ps.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplk5p22ps.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738147
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 == 0) {\n        return (sorted[len / 2] + sorted[len / 2 - 1])\
    \ / 2;\n    } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp7dre1w_6.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7dre1w_6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    if (l.length === 0) {\n        return 0;\n    }\n \
    \   l.sort();\n    if (l.length % 2 === 0) {\n        return (l[l.length / 2 -\
    \ 1] + l[l.length / 2]) / 2;\n    } else {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp6l8vr2w6.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l8vr2w6.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    l.sort();\n    let mid = Math.floor(l.length / 2);\n\
    \    if (l.length % 2 == 0) {\n        return (l[mid] + l[mid - 1]) / 2;\n   \
    \ } else {\n        return l[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp97kkwb68.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp97kkwb68.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746580
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l2 = l.slice();\n    l2.sort();\n    let n = l2.length;\n\
    \    if (n % 2 == 0) {\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2;\n    }\
    \ else {\n        return l2[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp9fsahorf.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9fsahorf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746580
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid - 1] +\
    \ sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpjs8cd_5p.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjs8cd_5p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746580
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    if (l.length === 0) {\n        return 0;\n    }\n \
    \   let sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746580
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort(function(a, b) {return a - b});\n\
    \    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0)\
    \ {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n     \
    \   return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[Math.floor(len\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let l2 = l.sort();\n    let mid = Math.floor(l2.length\
    \ / 2);\n    if (l2.length % 2 == 0) {\n        return (l2[mid] + l2[mid - 1])\
    \ / 2;\n    } else {\n        return l2[mid];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmprnyn8q_r.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprnyn8q_r.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746580
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 == 0) {\n        return (sorted[len / 2] + sorted[len / 2 - 1])\
    \ / 2;\n    } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp7dre1w_6.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7dre1w_6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let m = l.length / 2;\n    if (l.length % 2 === 0)\
    \ {\n        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[Math.floor(m)];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp9n4sitfp.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9n4sitfp.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738140
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpru4gadwr.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpru4gadwr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len - 1) /\
    \ 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    if (l.length === 0) {\n        return 0;\n    }\n \
    \   l.sort();\n    if (l.length % 2 === 0) {\n        return (l[l.length / 2 -\
    \ 1] + l[l.length / 2]) / 2;\n    } else {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp6l8vr2w6.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l8vr2w6.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738111
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    const sorted = l.sort((a, b) => a - b);\n    const\
    \ mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n \
    \       return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let n = l.length;\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return\
    \ (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpuisgjtqo.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuisgjtqo.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746580
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let len = l.length;\n    if (len % 2 == 0) {\n    \
    \    return (l[len / 2 - 1] + l[len / 2]) / 2;\n    } else {\n        return l[(len\
    \ - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp4alx0f7m.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4alx0f7m.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746580
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = sorted.length / 2;\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid]\
    \ + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[Math.floor(mid)];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746580
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n    let sorted = l.sort((a, b) => a - b);\n    let len\
    \ = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len - 1) /\
    \ 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738106
