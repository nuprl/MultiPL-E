name: HumanEval_68_pluck
language: ts
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["  if (arr.length === 0) {\n    return [];\n  }\n  const evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const\
    \ minEven = Math.min(...evens);\n  const index = arr.indexOf(minEven);\n  return\
    \ [minEven, index];\n}\n", "  const evens = arr.filter(n => n % 2 === 0);\n  const\
    \ min = Math.min(...evens);\n  return evens.length === 0 ? [] : [min, arr.indexOf(min)];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n\
    \  let minEven = Infinity;\n  let minEvenIndex = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n  \
    \    minEven = arr[i];\n      minEvenIndex = i;\n    }\n  }\n  if (minEven ===\
    \ Infinity) {\n    return [];\n  }\n  return [minEven, minEvenIndex];\n}\n", " \
    \ if (arr.length === 0) {\n    return [];\n  }\n  let min = Infinity;\n  let minIndex\
    \ = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 ===\
    \ 0 && arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n\
    \  if (min === Infinity) {\n    return [];\n  }\n  return [min, minIndex];\n}\n",
  "  let evens = arr.filter(num => num % 2 === 0);\n  let smallestEven = Math.min(...evens);\n\
    \  let smallestEvenIndex = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ smallestEvenIndex];\n}\n", "  let min = Infinity;\n  let minIndex = Infinity;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return min\
    \ === Infinity ? [] : [min, minIndex];\n}\n\nexport { pluck };", "  const evens\
    \ = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n\
    \  }\n  const min = Math.min(...evens);\n  const index = arr.indexOf(min);\n \
    \ return [min, index];\n}\n\nexport default pluck;", "  let smallestEven = Infinity;\n\
    \  let smallestEvenIndex = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n\
    \      smallestEvenIndex = i;\n    }\n  }\n  return smallestEven === Infinity\
    \ ? [] : [smallestEven, smallestEvenIndex];\n}\n", "  let evens = arr.filter(num\
    \ => num % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let\
    \ smallest = evens.reduce((acc, curr) => (acc < curr ? acc : curr));\n  let index\
    \ = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  let minEven = Number.MAX_SAFE_INTEGER;\n  let\
    \ minEvenIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      minEvenIndex\
    \ = i;\n    }\n  }\n  if (minEvenIndex === -1) {\n    return [];\n  }\n  return\
    \ [minEven, minEvenIndex];\n}\n", "  let smallestEven = Infinity;\n  let smallestEvenIndex\
    \ = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 ===\
    \ 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      smallestEvenIndex\
    \ = i;\n    }\n  }\n  return smallestEven === Infinity ? [] : [smallestEven, smallestEvenIndex];\n\
    }\n", "  let result: number[] = [];\n  let minEven: number = Infinity;\n  let\
    \ minEvenIndex: number = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n  \
    \    minEvenIndex = i;\n    }\n  }\n  if (minEven !== Infinity) {\n    result.push(minEven);\n\
    \    result.push(minEvenIndex);\n  }\n  return result;\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length\
    \ === 0) {\n    return [];\n  }\n  let min = Math.min(...evens);\n  let index\
    \ = arr.indexOf(min);\n  return [min, index];\n}\n", "  let minEven: number =\
    \ Infinity;\n  let minEvenIndex: number = Infinity;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n\
    \      minEvenIndex = i;\n    }\n  }\n  return minEven === Infinity ? [] : [minEven,\
    \ minEvenIndex];\n}\n", "  let evens = arr.filter(n => n % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  let min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n\
    \  const evens = arr.filter(num => num % 2 === 0);\n  const smallestEven = Math.min(...evens);\n\
    \  const index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n\
    }\n", "  if (arr.length === 0) {\n    return [];\n  }\n  const evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...evens);\n  const index = arr.indexOf(min);\n  return [min,\
    \ index];\n}\n", "  let min = Infinity;\n  let minIndex = -1;\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n   \
    \   min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex === -1 ?\
    \ [] : [min, minIndex];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
