name: HumanEval_10_make_palindrome
language: ts
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"\
  xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"\
  jerry\"),\"jerryrrej\");\n}\n\ntest();"
completions: ["    let reversed = string.split(\"\").reverse().join(\"\");\n    let\
    \ prefix = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (string.substr(i)\
    \ === reversed.substr(0, string.length - i)) {\n            prefix = string.substr(0,\
    \ i);\n            break;\n        }\n    }\n    return string + reversed.substr(prefix.length);\n\
    }\n", "    if (string.length === 0) {\n        return string;\n    }\n    let\
    \ suffix = find_longest_palindromic_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - suffix.length);\n    return prefix + suffix + prefix.split(\"\
    \").reverse().join(\"\");\n}\n", "    const palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    const prefix = string.substring(0, string.length - palindrome_suffix.length);\n\
    \    return string + reverse(prefix);\n}\n", "    let palindrome = string;\n \
    \   let reverse = string.split(\"\").reverse().join(\"\");\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string.substr(i) === reverse.substr(0,\
    \ string.length - i)) {\n            palindrome = string + reverse.substr(string.length\
    \ - i);\n            break;\n        }\n    }\n    return palindrome;\n}\n", " \
    \   const reverse = string.split(\"\").reverse().join(\"\");\n    const longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    const prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    return prefix + longest_palindrome_suffix\
    \ + reverse;\n}\n", "    let palindrome = string;\n    let prefix = \"\";\n  \
    \  for (let i = 0; i < string.length; i++) {\n        if (is_palindrome(string.substring(i)))\
    \ {\n            prefix = string.substring(0, i);\n            break;\n      \
    \  }\n    }\n    palindrome += reverse(prefix);\n    return palindrome;\n}\n",
  "    if (string.length === 0) {\n        return \"\";\n    }\n    let palindrome_suffix\
    \ = find_palindrome_suffix(string);\n    let prefix = string.substring(0, string.length\
    \ - palindrome_suffix.length);\n    return prefix + palindrome_suffix + reverse(prefix);\n\
    }\n", "    let result = string;\n    let longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    result += reverse(prefix);\n    return result;\n}\n", "    let palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - palindrome_suffix.length);\n    return prefix + palindrome_suffix\
    \ + reverse(prefix);\n}\n", "    const reversed_string = string.split(\"\").reverse().join(\"\
    \");\n    const longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    const prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return string + reversed_string.substring(reversed_string.length - prefix.length);\n\
    }\n", "    let palindrome = string;\n    let suffix = string;\n    while (suffix.length\
    \ > 0) {\n        if (is_palindrome(suffix)) {\n            palindrome = palindrome\
    \ + reverse(string.substring(0, string.length - suffix.length));\n           \
    \ break;\n        }\n        suffix = suffix.substring(1);\n    }\n    return\
    \ palindrome;\n}\n", "    if (string.length === 0) {\n        return \"\";\n \
    \   }\n    let longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "   \
    \ let longest_palindrome_postfix = find_longest_palindrome_postfix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_postfix.length);\n\
    \    return prefix + longest_palindrome_postfix + prefix.split(\"\").reverse().join(\"\
    \");\n}\n", "    if (string.length === 0) {\n        return \"\";\n    }\n   \
    \ let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n  \
    \  let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "   \
    \ if (string.length === 0) {\n        return \"\";\n    }\n    let suffix = longest_palindromic_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - suffix.length);\n    return\
    \ prefix + suffix + reverse(prefix);\n}\n", "    if (string.length === 0) {\n\
    \        return string;\n    }\n    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    let reversed_prefix = reverse(prefix);\n    return prefix + longest_palindrome_suffix\
    \ + reversed_prefix;\n}\n", "    let palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - palindrome_suffix.length);\n\
    \    let reverse_prefix = reverse_string(prefix);\n    return string + reverse_prefix;\n\
    }\n", "    if (string.length === 0) {\n        return string;\n    }\n    let\
    \ longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n    let\
    \ prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    let reverse_prefix = reverse(prefix);\n    return prefix + reverse_prefix\
    \ + longest_palindrome_suffix;\n}\n", "    if (string.length === 0) {\n      \
    \  return \"\";\n    }\n    let palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - palindrome_suffix.length);\n\
    \    let reverse_prefix = prefix.split(\"\").reverse().join(\"\");\n    return\
    \ prefix + palindrome_suffix + reverse_prefix;\n}\n", "    let reversed_string\
    \ = string.split(\"\").reverse().join(\"\");\n    let palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.substring(0, string.length - palindrome_suffix.length);\n\
    \    return prefix + palindrome_suffix + reversed_string;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
