language: ts
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let hasEvenDigit: boolean = false;\n        let\
    \ num: number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0)\
    \ {\n                hasEvenDigit = true;\n                break;\n          \
    \  }\n            num = Math.floor(num / 10);\n        }\n        if (!hasEvenDigit)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let is_unique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            let digit: number = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if (is_unique) {\n            result.push(x[i]);\n       \
    \ }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738105
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result = [];\n    for (let i = 0; i < x.length;\
    \ i++) {\n        let num = x[i];\n        let isEven = false;\n        while\
    \ (num > 0) {\n            if (num % 2 === 0) {\n                isEven = true;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if (!isEven) {\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num = Math.floor(num / 10);\n        }\n        if (isUnique) {\n \
    \           result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < x.length;\
    \ i++) {\n    let number = x[i];\n    let isUnique = true;\n    while (number\
    \ > 0) {\n      let digit = number % 10;\n      if (digit % 2 === 0) {\n     \
    \   isUnique = false;\n        break;\n      }\n      number = Math.floor(number\
    \ / 10);\n    }\n    if (isUnique) {\n      result.push(x[i]);\n    }\n  }\n \
    \ return result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(digit => parseInt(digit)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738102
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num = Math.floor(num / 10);\n        }\n        if (isUnique) {\n \
    \           result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(digit => Number(digit)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let even: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          even = true;\n                break;\n            }\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (!even) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(y => parseInt(y)\
    \ % 2 != 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738105
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let currentNumber:\
    \ number = x[i];\n        while (currentNumber > 0) {\n            let digit:\
    \ number = currentNumber % 10;\n            if (digit % 2 === 0) {\n         \
    \       isEven = true;\n                break;\n            }\n            currentNumber\
    \ = Math.floor(currentNumber / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num: number = x[i];\n        let is_unique:\
    \ boolean = true;\n        while (num > 0) {\n            let digit: number =\
    \ num % 10;\n            if (digit % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if (is_unique) {\n            result.push(x[i]);\n       \
    \ }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738102
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < x.length;\
    \ i++) {\n    if (x[i].toString().split(\"\").every(x => x % 2 != 0)) {\n    \
    \  result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpynkd_p9q.ts(12,46): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(function (element)\
    \ {\n            return parseInt(element) % 2 != 0;\n        })) {\n         \
    \   result.push(x[i]);\n        }\n    }\n    return result.sort(function (a,\
    \ b) {\n        return a - b;\n    });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let even = false;\n        let num = x[i];\n   \
    \     while (num > 0) {\n            if (num % 2 == 0) {\n                even\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!even) {\n            result.push(x[i]);\n  \
    \      }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(x => parseInt(x)\
    \ % 2 != 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(digit => parseInt(digit)\
    \ % 2 === 1)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\nconsole.log(unique_digits([15, 33, 1422, 1]));\n\
    console.log(unique_digits([152, 323, 1422, 10]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 1, 15, 33 ]

    []

    '
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let current = x[i];\n        let isUnique = true;\n\
    \        while (current > 0) {\n            let digit = current % 10;\n      \
    \      if (digit % 2 == 0) {\n                isUnique = false;\n            \
    \    break;\n            }\n            current = Math.floor(current / 10);\n\
    \        }\n        if (isUnique) {\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i: number\
    \ = 0; i < x.length; i++) {\n        if (x[i].toString().split('').every(function\
    \ (digit) {\n            return parseInt(digit) % 2 !== 0;\n        })) {\n  \
    \          result.push(x[i]);\n        }\n    }\n    return result.sort(function\
    \ (a, b) {\n        return a - b;\n    });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(y => y % 2 !=\
    \ 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdmphifpj.ts(12,50): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmp6whsmi5f.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6whsmi5f.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738105
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i: number\
    \ = 0; i < x.length; i++) {\n        let num: number = x[i];\n        let isEven:\
    \ boolean = false;\n        while (num > 0) {\n            if ((num % 10) % 2\
    \ === 0) {\n                isEven = true;\n                break;\n         \
    \   }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            let digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                isEven = true;\n                break;\n      \
    \      }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738103
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(e => parseInt(e)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i: number\
    \ = 0; i < x.length; i++) {\n        let temp: number = x[i];\n        let isEven:\
    \ boolean = false;\n        while (temp > 0) {\n            if (temp % 2 == 0)\
    \ {\n                isEven = true;\n                break;\n            }\n \
    \           temp = Math.floor(temp / 10);\n        }\n        if (!isEven) {\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(y => parseInt(y)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738103
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num = Math.floor(num / 10);\n        }\n        if (isUnique) {\n \
    \           result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            let digit: number = num % 10;\n\
    \            if (digit % 2 == 0) {\n                isEven = true;\n         \
    \       break;\n            }\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (!isEven) {\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result.sort();\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmp0cgbo3e8.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0cgbo3e8.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(digit => parseInt(digit)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738102
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(x => parseInt(x)\
    \ % 2 != 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i: number\
    \ = 0; i < x.length; i++) {\n        let isEven: boolean = false;\n        let\
    \ num: number = x[i];\n        while (num > 0) {\n            if ((num % 10) %\
    \ 2 === 0) {\n                isEven = true;\n                break;\n       \
    \     }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique = true;\n        let num = x[i];\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num = Math.floor(num / 10);\n        }\n        if (isUnique) {\n \
    \           result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          isEven = true;\n                break;\n            }\n           \
    \ num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738105
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let res: number[] = [];\n    for (let i = 0; i <\
    \ x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n   \
    \     while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            res.push(x[i]);\n   \
    \     }\n    }\n    return res.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let uniqueDigits: number[] = [];\n    for (let i\
    \ = 0; i < x.length; i++) {\n        let isUnique: boolean = true;\n        let\
    \ number: number = x[i];\n        while (number > 0) {\n            let digit:\
    \ number = number % 10;\n            if (digit % 2 === 0) {\n                isUnique\
    \ = false;\n                break;\n            }\n            number = Math.floor(number\
    \ / 10);\n        }\n        if (isUnique) {\n            uniqueDigits.push(x[i]);\n\
    \        }\n    }\n    return uniqueDigits.sort((a, b) => a - b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            let digit: number = num % 10;\n\
    \            if (digit % 2 == 0) {\n                isEven = true;\n         \
    \       break;\n            }\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (!isEven) {\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738105
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  return x.filter(function(num) {\n    return !num.toString().match(/[02468]/);\n\
    \  }).sort(function(a, b) {\n    return a - b;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            let digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                isEven = true;\n                break;\n      \
    \      }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738103
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num = Math.floor(num / 10);\n        }\n        if (isUnique) {\n \
    \           result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let hasEven = false;\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                hasEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!hasEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < x.length;\
    \ i++) {\n    let isUnique = true;\n    let num = x[i];\n    while (num > 0) {\n\
    \      if (num % 2 === 0) {\n        isUnique = false;\n        break;\n     \
    \ }\n      num = Math.floor(num / 10);\n    }\n    if (isUnique) {\n      result.push(x[i]);\n\
    \    }\n  }\n  return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(x => x % 2 !==\
    \ 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppzda3hym.ts(12,50): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(digit => parseInt(digit)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738102
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique = true;\n        let num = x[i];\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let hasEvenDigit: boolean = false;\n        let\
    \ num: number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0)\
    \ {\n                hasEvenDigit = true;\n                break;\n          \
    \  }\n            num = Math.floor(num / 10);\n        }\n        if (!hasEvenDigit)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let even: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          even = true;\n                break;\n            }\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (!even) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let temp: number = x[i];\n        let flag: boolean\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp = Math.floor(temp / 10);\n        }\n        if (flag) {\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let flag: boolean = true;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (flag) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738107
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let even = false;\n   \
    \     while (num > 0) {\n            if (num % 2 == 0) {\n                even\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!even) {\n            result.push(x[i]);\n  \
    \      }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let hasEven = false;\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                hasEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!hasEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let evenDigits = [0, 2, 4, 6, 8];\n    let uniqueDigits\
    \ = [];\n    for (let i = 0; i < x.length; i++) {\n        let isUnique = true;\n\
    \        let num = x[i];\n        while (num > 0) {\n            let digit = num\
    \ % 10;\n            if (evenDigits.includes(digit)) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            uniqueDigits.push(x[i]);\n\
    \        }\n    }\n    return uniqueDigits.sort((a, b) => a - b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi7k3vmm5.ts(17,28): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1659738134
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(x => x % 2 !==\
    \ 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppzda3hym.ts(12,50): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        if (num < 10) {\n     \
    \       result.push(num);\n        } else {\n            let flag = true;\n  \
    \          while (num > 0) {\n                if (num % 2 == 0) {\n          \
    \          flag = false;\n                    break;\n                }\n    \
    \            num = Math.floor(num / 10);\n            }\n            if (flag)\
    \ {\n                result.push(x[i]);\n            }\n        }\n    }\n   \
    \ return result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i: number\
    \ = 0; i < x.length; i++) {\n        let isUnique: boolean = true;\n        let\
    \ num: number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0)\
    \ {\n                isUnique = false;\n                break;\n            }\n\
    \            num = Math.floor(num / 10);\n        }\n        if (isUnique) {\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(digit => parseInt(digit)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738102
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    return x.filter(n => !n.toString().split('').some(d\
    \ => parseInt(d) % 2 === 0)).sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            let digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                isEven = true;\n                break;\n      \
    \      }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738103
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(digit => parseInt(digit)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738102
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num: number = x[i];\n        let isUnique: boolean\
    \ = true;\n        while (num > 0) {\n            let digit: number = num % 10;\n\
    \            if (digit % 2 == 0) {\n                isUnique = false;\n      \
    \          break;\n            }\n            num = Math.floor(num / 10);\n  \
    \      }\n        if (isUnique) {\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let even = false;\n   \
    \     while (num > 0) {\n            if (num % 2 == 0) {\n                even\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!even) {\n            result.push(x[i]);\n  \
    \      }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let even: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          even = true;\n                break;\n            }\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (!even) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < x.length;\
    \ i++) {\n    let evenDigit: boolean = false;\n    let num: number = x[i];\n \
    \   while (num > 0) {\n      if (num % 2 === 0) {\n        evenDigit = true;\n\
    \        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if (!evenDigit)\
    \ {\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a -\
    \ b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num =\
    \ x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n        \
    \        isEven = true;\n                break;\n            }\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique = true;\n        let num = x[i];\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result = [];\n    for (let i = 0; i < x.length;\
    \ i++) {\n        let isUnique = true;\n        let num = x[i];\n        while\
    \ (num > 0) {\n            if (num % 2 === 0) {\n                isUnique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if (isUnique) {\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  return x.filter(num => {\n    let numStr = num.toString();\n\
    \    return numStr.split('').every(digit => parseInt(digit) % 2 !== 0);\n  }).sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let unique_digits_list: number[] = [];\n    for (let\
    \ i = 0; i < x.length; i++) {\n        let is_unique: boolean = true;\n      \
    \  let num: number = x[i];\n        while (num > 0) {\n            let digit:\
    \ number = num % 10;\n            if (digit % 2 == 0) {\n                is_unique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (is_unique) {\n            unique_digits_list.push(x[i]);\n\
    \        }\n    }\n    return unique_digits_list.sort((a, b) => a - b);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique = true;\n        let num = x[i];\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique = true;\n        let num = x[i];\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let count = 0;\n        let num = x[i];\n      \
    \  while (num > 0) {\n            let digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                count++;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (count == 0) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num = Math.floor(num / 10);\n        }\n        if (isUnique) {\n \
    \           result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let temp: number = x[i];\n        let flag: boolean\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp = Math.floor(temp / 10);\n        }\n        if (flag) {\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n\
    }\nconsole.log(unique_digits([15, 33, 1422, 1]));\nconsole.log(unique_digits([152,\
    \ 323, 1422, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 1, 15, 33 ]

    []

    '
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let flag = true;\n    \
    \    while (num > 0) {\n            if (num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (flag) {\n            result.push(x[i]);\n   \
    \     }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let res: number[] = [];\n    for (let i = 0; i <\
    \ x.length; i++) {\n        let flag = true;\n        let num = x[i];\n      \
    \  while (num > 0) {\n            if (num % 2 == 0) {\n                flag =\
    \ false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (flag) {\n            res.push(x[i]);\n      \
    \  }\n    }\n    return res.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let is_unique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            let digit: number = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if (is_unique) {\n            result.push(x[i]);\n       \
    \ }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738105
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(el => parseInt(el)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result = [];\n    for (let i = 0; i < x.length;\
    \ i++) {\n        let num = x[i];\n        let isUnique = true;\n        while\
    \ (num > 0) {\n            let digit = num % 10;\n            if (digit % 2 ===\
    \ 0) {\n                isUnique = false;\n                break;\n          \
    \  }\n            num = Math.floor(num / 10);\n        }\n        if (isUnique)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            let digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                isEven = true;\n                break;\n      \
    \      }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738103
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i: number\
    \ = 0; i < x.length; i++) {\n        let isEven: boolean = false;\n        let\
    \ num: number = x[i];\n        while (num > 0) {\n            if ((num % 10) %\
    \ 2 === 0) {\n                isEven = true;\n                break;\n       \
    \     }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let hasEven = false;\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                hasEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!hasEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let is_unique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                is_unique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (is_unique) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num = Math.floor(num / 10);\n        }\n        if (isUnique) {\n \
    \           result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(x => parseInt(x)\
    \ % 2 != 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique = true;\n        let num = x[i];\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(digit => parseInt(digit)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738102
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let temp: number = x[i];\n        let isEven: boolean\
    \ = false;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n   \
    \             isEven = true;\n                break;\n            }\n        \
    \    temp = Math.floor(temp / 10);\n        }\n        if (!isEven) {\n      \
    \      result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    return x.filter(y => !y.toString().split('').some(z\
    \ => parseInt(z) % 2 === 0)).sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let res: number[] = [];\n    for (let i = 0; i <\
    \ x.length; i++) {\n        if (x[i].toString().split('').every(y => parseInt(y)\
    \ % 2 !== 0)) {\n            res.push(x[i]);\n        }\n    }\n    return res.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result = [];\n    for (let i = 0; i < x.length;\
    \ i++) {\n        let num = x[i];\n        let isUnique = true;\n        while\
    \ (num > 0) {\n            let digit = num % 10;\n            if (digit % 2 ===\
    \ 0) {\n                isUnique = false;\n                break;\n          \
    \  }\n            num = Math.floor(num / 10);\n        }\n        if (isUnique)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(digit => parseInt(digit)\
    \ % 2 != 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let even_digit = false;\n        let num = x[i];\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                even_digit\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!even_digit) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < x.length;\
    \ i++) {\n    let evenDigit: boolean = false;\n    let num: number = x[i];\n \
    \   while (num > 0) {\n      if (num % 2 === 0) {\n        evenDigit = true;\n\
    \        break;\n      }\n      num = Math.floor(num / 10);\n    }\n    if (!evenDigit)\
    \ {\n      result.push(x[i]);\n    }\n  }\n  return result.sort((a, b) => a -\
    \ b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let even: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          even = true;\n                break;\n            }\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (!even) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(e => e % 2 !==\
    \ 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_xt4lhj5.ts(12,50): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659746947
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            let digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                isEven = true;\n                break;\n      \
    \      }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738103
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num = Math.floor(num / 10);\n        }\n        if (isUnique) {\n \
    \           result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(digit => parseInt(digit)\
    \ % 2 != 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(n => parseInt(n)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(element => parseInt(element)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let flag: boolean = true;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (flag) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738107
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let temp: number = x[i];\n        let flag: boolean\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp = Math.floor(temp / 10);\n        }\n        if (flag) {\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < x.length;\
    \ i++) {\n    let isUnique = true;\n    let num = x[i];\n    while (num > 0) {\n\
    \      if (num % 2 === 0) {\n        isUnique = false;\n        break;\n     \
    \ }\n      num = Math.floor(num / 10);\n    }\n    if (isUnique) {\n      result.push(x[i]);\n\
    \    }\n  }\n  return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let hasEven = false;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                hasEven = true;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (!hasEven) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique: boolean = true;\n        let num:\
    \ number = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num = Math.floor(num / 10);\n        }\n        if (isUnique) {\n \
    \           result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(y => Number(y)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(e => parseInt(e)\
    \ % 2 === 1)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(function (digit)\
    \ {\n            return parseInt(digit) % 2 != 0;\n        })) {\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort(function (a, b)\
    \ {\n        return a - b;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            let digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                isEven = true;\n                break;\n      \
    \      }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738103
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let temp: number = x[i];\n        let flag: boolean\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp = Math.floor(temp / 10);\n        }\n        if (flag) {\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i: number\
    \ = 0; i < x.length; i++) {\n        if (x[i].toString().split('').every(digit\
    \ => parseInt(digit) % 2 !== 0)) {\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  return x.filter(num => !num.toString().match(/[02468]/g));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp9syq_ern.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9syq_ern.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746948
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    return x.filter(num => {\n        let str = num.toString();\n\
    \        for (let i = 0; i < str.length; i++) {\n            if (str[i] % 2 ===\
    \ 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }).sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjkojw1xl.ts(13,17): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659746947
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let temp: number = x[i];\n        let flag: boolean\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp = Math.floor(temp / 10);\n        }\n        if (flag) {\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            let digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                isEven = true;\n                break;\n      \
    \      }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738103
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let number: number = x[i];\n        let isEven:\
    \ boolean = false;\n        while (number > 0) {\n            let digit: number\
    \ = number % 10;\n            if (digit % 2 == 0) {\n                isEven =\
    \ true;\n                break;\n            }\n            number = Math.floor(number\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let even = false;\n   \
    \     while (num > 0) {\n            if (num % 2 == 0) {\n                even\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!even) {\n            result.push(x[i]);\n  \
    \      }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result = [];\n    for (let i = 0; i < x.length;\
    \ i++) {\n        let isEven = false;\n        let num = x[i];\n        while\
    \ (num > 0) {\n            let digit = num % 10;\n            if (digit % 2 ==\
    \ 0) {\n                isEven = true;\n                break;\n            }\n\
    \            num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    return x.filter(function (num) {\n        return\
    \ num.toString().split('').every(function (digit) {\n            return parseInt(digit)\
    \ % 2 !== 0;\n        });\n    }).sort(function (a, b) {\n        return a - b;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique = true;\n        let num = x[i];\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            let digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                isEven = true;\n                break;\n      \
    \      }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let flag = true;\n    \
    \    while (num > 0) {\n            if (num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (flag) {\n            result.push(x[i]);\n   \
    \     }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let number = x[i];\n        let hasEvenDigit = false;\n\
    \        while (number > 0) {\n            let digit = number % 10;\n        \
    \    if (digit % 2 == 0) {\n                hasEvenDigit = true;\n           \
    \     break;\n            }\n            number = Math.floor(number / 10);\n \
    \       }\n        if (!hasEvenDigit) {\n            result.push(x[i]);\n    \
    \    }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746949
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(x => x % 2 !=\
    \ 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx7yor3gd.ts(12,50): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659746949
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let temp = x[i];\n        let flag = true;\n   \
    \     while (temp > 0) {\n            if (temp % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            temp = Math.floor(temp\
    \ / 10);\n        }\n        if (flag) {\n            result.push(x[i]);\n   \
    \     }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746949
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let flag: boolean = true;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (flag) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmphx4repuz.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmphx4repuz.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746949
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let evenDigits = [0, 2, 4, 6, 8];\n    let uniqueDigits\
    \ = [];\n    for (let i = 0; i < x.length; i++) {\n        let isUnique = true;\n\
    \        let num = x[i];\n        while (num > 0) {\n            let digit = num\
    \ % 10;\n            if (evenDigits.includes(digit)) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            uniqueDigits.push(x[i]);\n\
    \        }\n    }\n    return uniqueDigits.sort((a, b) => a - b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi7k3vmm5.ts(17,28): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1659738134
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let hasEven = false;\n        let num = x[i];\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                hasEven = true;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (!hasEven) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if (!isEven) {\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique = true;\n        let num = x[i];\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            let digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                isEven = true;\n                break;\n      \
    \      }\n            num = Math.floor(num / 10);\n        }\n        if (!isEven)\
    \ {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738103
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isUnique = true;\n        let num = x[i];\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (isUnique) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    return x.filter(function (n) {\n        return n.toString().split('').every(function\
    \ (d) {\n            return parseInt(d) % 2 != 0;\n        });\n    }).sort(function\
    \ (a, b) {\n        return a - b;\n    });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(y => parseInt(y)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738103
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(x => x % 2 !==\
    \ 0)) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppzda3hym.ts(12,50): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659738133
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven: boolean = false;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            let digit: number = num % 10;\n\
    \            if (digit % 2 == 0) {\n                isEven = true;\n         \
    \       break;\n            }\n            num = Math.floor(num / 10);\n     \
    \   }\n        if (!isEven) {\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738105
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let unique_digits_list: number[] = [];\n    for (let\
    \ i = 0; i < x.length; i++) {\n        let is_unique: boolean = true;\n      \
    \  let num_string: string = x[i].toString();\n        for (let j = 0; j < num_string.length;\
    \ j++) {\n            if (parseInt(num_string[j]) % 2 == 0) {\n              \
    \  is_unique = false;\n                break;\n            }\n        }\n    \
    \    if (is_unique) {\n            unique_digits_list.push(x[i]);\n        }\n\
    \    }\n    return unique_digits_list.sort();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmpi89equon.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi89equon.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let temp: number = x[i];\n        let flag: boolean\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp = Math.floor(temp / 10);\n        }\n        if (flag) {\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isUnique = true;\n\
    \        while (num > 0) {\n            let digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if\
    \ (isUnique) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let flag = true;\n    \
    \    while (num > 0) {\n            if (num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (flag) {\n            result.push(x[i]);\n   \
    \     }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num = x[i];\n        let isEven = false;\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let isEven = false;\n        let num = x[i];\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738100
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let flag: boolean = true;\n        let num: number\
    \ = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (flag) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738107
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let temp: number = x[i];\n        let isEven: boolean\
    \ = false;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n   \
    \             isEven = true;\n                break;\n            }\n        \
    \    temp = Math.floor(temp / 10);\n        }\n        if (!isEven) {\n      \
    \      result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let number = x[i];\n        let hasEvenDigit = false;\n\
    \        while (number > 0) {\n            let digit = number % 10;\n        \
    \    if (digit % 2 == 0) {\n                hasEvenDigit = true;\n           \
    \     break;\n            }\n            number = Math.floor(number / 10);\n \
    \       }\n        if (!hasEvenDigit) {\n            result.push(x[i]);\n    \
    \    }\n    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        if (x[i].toString().split('').every(num => parseInt(num)\
    \ % 2 !== 0)) {\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746949
