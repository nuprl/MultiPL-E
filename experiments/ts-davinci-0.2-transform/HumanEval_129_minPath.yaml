name: HumanEval_129_minPath
language: ts
prompt: "//Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n// each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
  \ to find the minimum path of length k in the grid. You can start\n// from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n// in other words,\
  \ you can go to cells which share an edge with you current\n// cell.\n// Please\
  \ note that a path of length k means visiting exactly k cells (not\n// necessarily\
  \ distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered\
  \ less than a path B (of length k) if\n// after making the ordered lists of the\
  \ values on the cells that A and B go\n// through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n// than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer\
  \ is unique.\n// Return an ordered list of the values on the cells that the minimum\
  \ path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7,\
  \ 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n\
  // [1]\nfunction minPath(grid: number[][], k: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = minPath;\n  assert.deepEqual(candidate([[1, 2, 3],\
  \ [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);\n  assert.deepEqual(candidate([[5, 9, 3],\
  \ [4, 1, 6], [7, 8, 2]], 1),[1]);\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5,\
  \ 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);\n  assert.deepEqual(candidate([[6,\
  \ 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10,\
  \ 1, 10, 1]);\n  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5,\
  \ 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);\n  assert.deepEqual(candidate([[11,\
  \ 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1,\
  \ 6, 1, 6, 1]);\n  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5,\
  \ 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n  assert.deepEqual(candidate([[2,\
  \ 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);\n  assert.deepEqual(candidate([[6,\
  \ 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);\n  assert.deepEqual(candidate([[1,\
  \ 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n  assert.deepEqual(candidate([[1,\
  \ 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n\ntest();"
completions: ["    const n = grid.length;\n    const m = grid[0].length;\n    const\
    \ dp = new Array(n).fill(0).map(() => new Array(m).fill(0).map(() => new Array(k\
    \ + 1).fill(Infinity)));\n    const prev = new Array(n).fill(0).map(() => new\
    \ Array(m).fill(0).map(() => new Array(k + 1).fill(null)));\n    for (let i =\
    \ 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dp[i][j][1]\
    \ = grid[i][j];\n        }\n    }\n    for (let i = 0; i < n; i++) {\n       \
    \ for (let j = 0; j < m; j++) {\n            for (let l = 2; l <= k; l++) {\n\
    \                for (let di = -1; di <= 1; di++) {\n                    for (let\
    \ dj = -1; dj <= 1; dj++) {\n                        if (Math.abs(di) + Math.abs(dj)\
    \ !== 1) {\n                            continue;\n                        }\n\
    \                        const ni = i + di;\n                        const nj\
    \ = j + dj;\n                        if (ni < 0 || ni >= n || nj < 0 || nj >=\
    \ m) {\n                            continue;\n                        }\n   \
    \                     const cur = dp[ni][nj][l - 1] + grid[i][j];\n          \
    \              if (cur < dp[i][j][l]) {\n                            dp[i][j][l]\
    \ = cur;\n                            prev[i][j][l] = [ni, nj, l - 1];\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n    }\n    let min = Infinity;\n    let minI = -1;\n    let minJ =\
    \ -1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            if (dp[i][j][k] < min) {\n                min = dp[i][j][k];\n\
    \                minI =", "    const n = grid.length;\n    const dp: number[][][]\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let\
    \ j = 0; j < n; j++) {\n            dp[i][j] = [];\n        }\n    }\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n         \
    \   if (i === 0 && j === 0) {\n                dp[i][j][0] = grid[i][j];\n   \
    \         } else if (i === 0) {\n                dp[i][j][0] = dp[i][j - 1][0]\
    \ + grid[i][j];\n            } else if (j === 0) {\n                dp[i][j][0]\
    \ = dp[i - 1][j][0] + grid[i][j];\n            } else {\n                dp[i][j][0]\
    \ = Math.min(dp[i - 1][j][0], dp[i][j - 1][0]) + grid[i][j];\n            }\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < n; j++) {\n            for (let l = 1; l < k; l++) {\n                if\
    \ (i === 0 && j === 0) {\n                    dp[i][j][l] = grid[i][j];\n    \
    \            } else if (i === 0) {\n                    dp[i][j][l] = dp[i][j\
    \ - 1][l] + grid[i][j];\n                } else if (j === 0) {\n             \
    \       dp[i][j][l] = dp[i - 1][j][l] + grid[i][j];\n                } else {\n\
    \                    dp[i][j][l] = Math.min(dp[i - 1][j][l], dp[i][j - 1][l])\
    \ + grid[i][j];\n                }\n            }\n        }\n    }\n    const\
    \ path: number[]", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const visited = new Set<string>();\n    const queue = new PriorityQueue<[number[],\
    \ number[]]>((a, b) => {\n        for (let i = 0; i < k; i++) {\n            if\
    \ (a[0][i] < b[0][i]) {\n                return -1;\n            } else if (a[0][i]\
    \ > b[0][i]) {\n                return 1;\n            }\n        }\n        return\
    \ 0;\n    });\n    const start = [0, 0];\n    const startPath = [grid[0][0]];\n\
    \    queue.enqueue([startPath, start]);\n    while (!queue.isEmpty()) {\n    \
    \    const [path, [i, j]] = queue.dequeue();\n        if (path.length === k) {\n\
    \            return path;\n        }\n        if (i > 0 && !visited.has(`${i -\
    \ 1},${j}`)) {\n            const newPath = [...path, grid[i - 1][j]];\n     \
    \       queue.enqueue([newPath, [i - 1, j]]);\n            visited.add(`${i -\
    \ 1},${j}`);\n        }\n        if (i < n - 1 && !visited.has(`${i + 1},${j}`))\
    \ {\n            const newPath = [...path, grid[i + 1][j]];\n            queue.enqueue([newPath,\
    \ [i + 1, j]]);\n            visited.add(`${i + 1},${j}`);\n        }\n      \
    \  if (j > 0 && !visited.has(`${i},${j - 1}`)) {\n            const newPath =\
    \ [...path, grid[i][j - 1]];\n            queue.enqueue([newPath, [i, j - 1]]);\n\
    \            visited.add(`${i},${j - 1}`);\n        }\n        if (j < m - 1 &&\
    \ !visited.has(`${i},${j + 1}`)) {\n            const newPath = [...path, grid[i][j\
    \ + 1", "    let n = grid.length;\n    let m = grid[0].length;\n    let visited\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new\
    \ Array(m).fill(false);\n    }\n    let result = [];\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          let path = [];\n            dfs(grid, i, j, k, path, visited);\n  \
    \          if (path.length === k) {\n                if (path.join('') < min)\
    \ {\n                    min = path.join('');\n                    result = path;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n",
  "    // your code goes here\n    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let minPathSum2 = Infinity;\n    let minPath2 = [];\n    let minSum2 = Infinity;\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          let path = [];\n            let sum = 0;\n            let pathSum =\
    \ 0;\n            let pathSum2 = 0;\n            let path2 = [];\n           \
    \ let sum2 = 0;\n            for (let l = 0; l < k; l++) {\n                let\
    \ min = Infinity;\n                let min2 = Infinity;\n                let minI\
    \ = 0;\n                let minJ = 0;\n                let minI2 = 0;\n      \
    \          let minJ2 = 0;\n                for (let ii = Math.max(0, i - 1); ii\
    \ <= Math.min(n - 1, i + 1); ii++) {\n                    for (let jj = Math.max(0,\
    \ j - 1); jj <= Math.min(m - 1, j + 1); jj++) {\n                        if (grid[ii][jj]\
    \ < min) {\n                            min = grid[ii][jj];\n                \
    \            minI = ii;\n                            minJ = jj;\n            \
    \            }\n                        if (grid[ii][jj] < min2 && grid[ii][jj]\
    \ > grid[i][j]) {\n                            min2 = grid[ii][jj];\n        \
    \                    minI2 = ii;\n                            minJ2 = jj;\n  \
    \                      }\n                    }\n                }\n         \
    \       if (min2 == Infinity) {\n                    min2 = min;\n           \
    \         minI2 = minI;\n                    minJ2 = minJ;\n                }\n\
    \                path.push(min);\n                sum += min;\n              \
    \  pathSum += min * (l + 1);\n                path2.push(min2);\n            \
    \    sum2 += min2;\n                pathSum2 += min2 * (l + 1);\n            \
    \    i = minI;\n                j = min", "    let n = grid.length;\n    let m\
    \ = grid[0].length;\n    let minPaths: number[][][] = [];\n    for (let i = 0;\
    \ i < n; i++) {\n        minPaths[i] = [];\n        for (let j = 0; j < m; j++)\
    \ {\n            minPaths[i][j] = [];\n        }\n    }\n    for (let i = 0; i\
    \ < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i > 0) {\n\
    \                if (grid[i][j] < grid[i - 1][j]) {\n                    minPaths[i][j]\
    \ = minPaths[i - 1][j].slice();\n                    minPaths[i][j].push(grid[i][j]);\n\
    \                } else if (grid[i][j] > grid[i - 1][j]) {\n                 \
    \   minPaths[i][j] = minPaths[i - 1][j].slice();\n                    minPaths[i][j].push(grid[i\
    \ - 1][j]);\n                } else {\n                    minPaths[i][j] = minPaths[i\
    \ - 1][j].slice();\n                    minPaths[i][j].push(grid[i][j]);\n   \
    \             }\n            } else if (j > 0) {\n                if (grid[i][j]\
    \ < grid[i][j - 1]) {\n                    minPaths[i][j] = minPaths[i][j - 1].slice();\n\
    \                    minPaths[i][j].push(grid[i][j]);\n                } else\
    \ if (grid[i][j] > grid[i][j - 1]) {\n                    minPaths[i][j] = minPaths[i][j\
    \ - 1].slice();\n                    minPaths[i][j].push(grid[i][j - 1]);\n  \
    \              } else {\n                    minPaths[i][j] = minPaths[i][j -\
    \ 1].slice();\n                    minPaths[i][j].push(grid[i][j]);\n        \
    \        }\n            } else {\n                minPaths[i][j] =", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n).fill(0).map(()\
    \ => new Array(m).fill(false));\n    let minPath = new Array(k).fill(Infinity);\n\
    \    let minPaths = [];\n    let dfs = (i: number, j: number, path: number[])\
    \ => {\n        if (path.length === k) {\n            if (path.join('') < minPath.join(''))\
    \ {\n                minPath = path;\n                minPaths = [];\n       \
    \     }\n            if (path.join('') === minPath.join('')) {\n             \
    \   minPaths.push(path);\n            }\n            return;\n        }\n    \
    \    if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n            return;\n\
    \        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n  \
    \      dfs(i - 1, j, path.slice());\n        dfs(i + 1, j, path.slice());\n  \
    \      dfs(i, j - 1, path.slice());\n        dfs(i, j + 1, path.slice());\n  \
    \      visited[i][j] = false;\n    };\n    for (let i = 0; i < n; i++) {\n   \
    \     for (let j = 0; j < m; j++) {\n            dfs(i, j, []);\n        }\n \
    \   }\n    return minPath;\n}\n", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n      \
    \  visited[i] = new Array(m).fill(false);\n    }\n    const queue = [];\n    queue.push({\n\
    \        x: 0,\n        y: 0,\n        path: [grid[0][0]],\n        length: 1\n\
    \    });\n    visited[0][0] = true;\n    let minPath = null;\n    while (queue.length\
    \ > 0) {\n        const { x, y, path, length } = queue.shift();\n        if (length\
    \ === k) {\n            if (minPath === null || path < minPath) {\n          \
    \      minPath = path;\n            }\n            continue;\n        }\n    \
    \    if (minPath !== null && path >= minPath) {\n            continue;\n     \
    \   }\n        for (const [dx, dy] of [[0, 1], [0, -1], [1, 0], [-1, 0]]) {\n\
    \            const nx = x + dx;\n            const ny = y + dy;\n            if\
    \ (nx < 0 || nx >= n || ny < 0 || ny >= m || visited[nx][ny]) {\n            \
    \    continue;\n            }\n            visited[nx][ny] = true;\n         \
    \   queue.push({\n                x: nx,\n                y: ny,\n           \
    \     path: [...path, grid[nx][ny]],\n                length: length + 1\n   \
    \         });\n        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let dp = new Array(n).fill(0).map(() => new\
    \ Array(m).fill(0).map(() => new Array(k + 1).fill(Infinity)));\n    let path\
    \ = new Array(n).fill(0).map(() => new Array(m).fill(0).map(() => new Array(k\
    \ + 1).fill(0)));\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            dp[i][j][1] = grid[i][j];\n            path[i][j][1]\
    \ = grid[i][j];\n        }\n    }\n    for (let l = 2; l <= k; l++) {\n      \
    \  for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n\
    \                for (let di = -1; di <= 1; di++) {\n                    for (let\
    \ dj = -1; dj <= 1; dj++) {\n                        if (di * di + dj * dj ==\
    \ 1) {\n                            let ni = i + di;\n                       \
    \     let nj = j + dj;\n                            if (ni >= 0 && ni < n && nj\
    \ >= 0 && nj < m) {\n                                if (dp[ni][nj][l - 1] < dp[i][j][l])\
    \ {\n                                    dp[i][j][l] = dp[ni][nj][l - 1];\n  \
    \                                  path[i][j][l] = path[ni][nj][l - 1];\n    \
    \                            }\n                            }\n              \
    \          }\n                    }\n                }\n                if (dp[i][j][l]\
    \ != Infinity) {\n                    path[i][j][l] = [...path[i][j][l], grid[i][j]];\n\
    \                }\n            }\n        }\n    }\n    let ans = Infinity;\n\
    \    let ansPath = [];\n    for (let i = 0; i < n; i++) {\n        for (let j\
    \ = 0; j <", "    let N = grid.length;\n    let minPath = [];\n    let minPathSum\
    \ = Infinity;\n    let minPathSumGrid = [];\n    for (let i = 0; i < N; i++) {\n\
    \        minPathSumGrid.push([]);\n        for (let j = 0; j < N; j++) {\n   \
    \         minPathSumGrid[i].push(Infinity);\n        }\n    }\n    let minPathSumGridQueue\
    \ = [];\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++)\
    \ {\n            minPathSumGridQueue.push([i, j]);\n        }\n    }\n    while\
    \ (minPathSumGridQueue.length > 0) {\n        let [i, j] = minPathSumGridQueue.shift();\n\
    \        let minPathSumNeighbors = [];\n        if (i > 0) {\n            minPathSumNeighbors.push(minPathSumGrid[i\
    \ - 1][j]);\n        }\n        if (i < N - 1) {\n            minPathSumNeighbors.push(minPathSumGrid[i\
    \ + 1][j]);\n        }\n        if (j > 0) {\n            minPathSumNeighbors.push(minPathSumGrid[i][j\
    \ - 1]);\n        }\n        if (j < N - 1) {\n            minPathSumNeighbors.push(minPathSumGrid[i][j\
    \ + 1]);\n        }\n        let minPathSumNeighbor = Math.min(...minPathSumNeighbors);\n\
    \        if (minPathSumNeighbor < minPathSumGrid[i][j]) {\n            minPathSumGrid[i][j]\
    \ = minPathSumNeighbor;\n            minPathSumGridQueue.push([i, j]);\n     \
    \   }\n    }\n    let minPathSumGridQueue2 = [];\n    for (let i = 0; i < N; i++)\
    \ {\n        for (let j = 0; j < N; j++) {\n            minPathSumGridQueue2.push([i,\
    \ j]);\n        }\n    }\n    while (minPathSumGridQueue2.length > 0) {\n    \
    \    let [i, j] = minPathSumGridQueue2.shift", "    let minPath: number[] = [];\n\
    \    let minPathSum: number = Infinity;\n    let minPathSum2: number = Infinity;\n\
    \    let pathSum: number = 0;\n    let path: number[] = [];\n    let path2: number[]\
    \ = [];\n    let visited: boolean[][] = [];\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        visited.push([]);\n        for (let j = 0; j < grid[i].length;\
    \ j++) {\n            visited[i].push(false);\n        }\n    }\n    for (let\
    \ i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length;\
    \ j++) {\n            pathSum = 0;\n            path = [];\n            path2\
    \ = [];\n            visited[i][j] = true;\n            path.push(grid[i][j]);\n\
    \            pathSum += grid[i][j];\n            path2.push(grid[i][j]);\n   \
    \         dfs(grid, i, j, k - 1, pathSum, path, path2, visited);\n           \
    \ visited[i][j] = false;\n        }\n    }\n    return minPath;\n}\n", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let path = [];\n    let minPath\
    \ = [];\n    let minSum = Infinity;\n    let minSumPath = [];\n    let sum = 0;\n\
    \    let sumPath = [];\n    let min = Infinity;\n    let minPath = [];\n    let\
    \ minSum = Infinity;\n    let minSumPath = [];\n    let sum = 0;\n    let sumPath\
    \ = [];\n    let min = Infinity;\n    let minPath = [];\n    let minSum = Infinity;\n\
    \    let minSumPath = [];\n    let sum = 0;\n    let sumPath = [];\n    let min\
    \ = Infinity;\n    let minPath = [];\n    let minSum = Infinity;\n    let minSumPath\
    \ = [];\n    let sum = 0;\n    let sumPath = [];\n    let min = Infinity;\n  \
    \  let minPath = [];\n    let minSum = Infinity;\n    let minSumPath = [];\n \
    \   let sum = 0;\n    let sumPath = [];\n    let min = Infinity;\n    let minPath\
    \ = [];\n    let minSum = Infinity;\n    let minSumPath = [];\n    let sum = 0;\n\
    \    let sumPath = [];\n    let min = Infinity;\n    let minPath = [];\n    let\
    \ minSum = Infinity;\n    let minSumPath = [];\n    let sum = 0;\n    let sumPath\
    \ = [];\n    let min = Infinity;\n    let minPath = [];\n    let minSum = Infinity;\n\
    \    let minSumPath = [];\n    let sum = 0;\n    let sumPath = [];\n    let min\
    \ = Infinity;\n    let minPath = [];\n    let minSum = Infinity;\n    let minSumPath\
    \ = [];\n    let sum = 0;\n    let sumPath = [];\n    let min = Infinity;\n  \
    \  let minPath = [];\n    let minSum = Infinity;\n    let minSumPath = [];\n \
    \   let sum = 0;\n    let sumPath = [];\n    let min = Infinity;\n    let minPath\
    \ = [];\n    let minSum = Infinity;\n    let minSumPath = [];\n    let sum = 0;\n\
    \    let sumPath = [];\n    let min = Infinity;\n   ", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let minPath: number[] = [];\n    let minPathSum\
    \ = Infinity;\n    let visited: boolean[][] = [];\n    for (let i = 0; i < n;\
    \ i++) {\n        visited[i] = [];\n        for (let j = 0; j < m; j++) {\n  \
    \          visited[i][j] = false;\n        }\n    }\n    let dfs = (i: number,\
    \ j: number, path: number[], pathSum: number) => {\n        if (i < 0 || i >=\
    \ n || j < 0 || j >= m || visited[i][j]) {\n            return;\n        }\n \
    \       path.push(grid[i][j]);\n        pathSum += grid[i][j];\n        if (path.length\
    \ === k) {\n            if (pathSum < minPathSum) {\n                minPathSum\
    \ = pathSum;\n                minPath = path.slice();\n            }\n       \
    \     path.pop();\n            return;\n        }\n        visited[i][j] = true;\n\
    \        dfs(i - 1, j, path, pathSum);\n        dfs(i + 1, j, path, pathSum);\n\
    \        dfs(i, j - 1, path, pathSum);\n        dfs(i, j + 1, path, pathSum);\n\
    \        visited[i][j] = false;\n        path.pop();\n    }\n    for (let i =\
    \ 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i,\
    \ j, [], 0);\n        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Array(n);\n    for (let i\
    \ = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n\
    \    let minPath = [];\n    let minPathSum = Infinity;\n    for (let i = 0; i\
    \ < n; i++) {\n        for (let j = 0; j < m; j++) {\n            let path = [];\n\
    \            let pathSum = 0;\n            let pathLength = 0;\n            let\
    \ queue = [[i, j]];\n            while (queue.length > 0) {\n                let\
    \ [x, y] = queue.shift();\n                if (x < 0 || x >= n || y < 0 || y >=\
    \ m || visited[x][y]) {\n                    continue;\n                }\n  \
    \              visited[x][y] = true;\n                path.push(grid[x][y]);\n\
    \                pathSum += grid[x][y];\n                pathLength++;\n     \
    \           if (pathLength === k) {\n                    if (pathSum < minPathSum)\
    \ {\n                        minPathSum = pathSum;\n                        minPath\
    \ = path;\n                    }\n                    break;\n               \
    \ }\n                queue.push([x - 1, y]);\n                queue.push([x +\
    \ 1, y]);\n                queue.push([x, y - 1]);\n                queue.push([x,\
    \ y + 1]);\n            }\n        }\n    }\n    return minPath;\n}\n", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n    let\
    \ minPathSum = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2 =\
    \ [];\n    let minPathSum3 = Infinity;\n    let minPath3 = [];\n    let minPathSum4\
    \ = Infinity;\n    let minPath4 = [];\n    let minPathSum5 = Infinity;\n    let\
    \ minPath5 = [];\n    let minPathSum6 = Infinity;\n    let minPath6 = [];\n  \
    \  let minPathSum7 = Infinity;\n    let minPath7 = [];\n    let minPathSum8 =\
    \ Infinity;\n    let minPath8 = [];\n    let minPathSum9 = Infinity;\n    let\
    \ minPath9 = [];\n    let minPathSum10 = Infinity;\n    let minPath10 = [];\n\
    \    let minPathSum11 = Infinity;\n    let minPath11 = [];\n    let minPathSum12\
    \ = Infinity;\n    let minPath12 = [];\n    let minPathSum13 = Infinity;\n   \
    \ let minPath13 = [];\n    let minPathSum14 = Infinity;\n    let minPath14 = [];\n\
    \    let minPathSum15 = Infinity;\n    let minPath15 = [];\n    let minPathSum16\
    \ = Infinity;\n    let minPath16 = [];\n    let minPathSum17 = Infinity;\n   \
    \ let minPath17 = [];\n    let minPathSum18 = Infinity;\n    let minPath18 = [];\n\
    \    let minPathSum19 = Infinity;\n    let minPath19 = [];\n    let minPathSum20\
    \ = Infinity;\n    let minPath20 = [];\n    let minPathSum21 = Infinity;\n   \
    \ let minPath21 = [];\n    let minPathSum22 = Infinity;\n    let minPath22 = [];\n\
    \    let minPathSum23 = Infinity;\n    let minPath23 = [];\n    let minPathSum24\
    \ = Infinity;\n    let minPath24 = [];\n    let minPathSum25 = Infinity;\n   \
    \ let minPath25 = [];\n    let minPathSum26 = Infinity;\n    let minPath26 = [];\n\
    \    let minPathSum27 = Infinity;\n    let minPath27 = [];\n    let minPathSum28\
    \ =", "    let n = grid.length;\n    let m = grid[0].length;\n    let visited\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new\
    \ Array(m).fill(false);\n    }\n    let minPath = new Array(k);\n    let minPathSum\
    \ = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2 = new Array(k);\n\
    \    let minPathSum3 = Infinity;\n    let minPath3 = new Array(k);\n    let minPathSum4\
    \ = Infinity;\n    let minPath4 = new Array(k);\n    let minPathSum5 = Infinity;\n\
    \    let minPath5 = new Array(k);\n    let minPathSum6 = Infinity;\n    let minPath6\
    \ = new Array(k);\n    let minPathSum7 = Infinity;\n    let minPath7 = new Array(k);\n\
    \    let minPathSum8 = Infinity;\n    let minPath8 = new Array(k);\n    let minPathSum9\
    \ = Infinity;\n    let minPath9 = new Array(k);\n    let minPathSum10 = Infinity;\n\
    \    let minPath10 = new Array(k);\n    let minPathSum11 = Infinity;\n    let\
    \ minPath11 = new Array(k);\n    let minPathSum12 = Infinity;\n    let minPath12\
    \ = new Array(k);\n    let minPathSum13 = Infinity;\n    let minPath13 = new Array(k);\n\
    \    let minPathSum14 = Infinity;\n    let minPath14 = new Array(k);\n    let\
    \ minPathSum15 = Infinity;\n    let minPath15 = new Array(k);\n    let minPathSum16\
    \ = Infinity;\n    let minPath16 = new Array(k);\n    let minPathSum17 = Infinity;\n\
    \    let minPath17 = new Array(k);\n    let minPathSum18 = Infinity;\n    let\
    \ minPath18 = new Array(k);\n    let minPathSum19 = Infinity;\n    let minPath19\
    \ = new Array(k);\n    let minPathSum20 = Infinity;\n    let minPath20 = new Array(k);\n\
    \    let minPathSum21 = Infinity", "    const n = grid.length;\n    const m =\
    \ grid[0].length;\n    const visited = new Set<string>();\n    const queue = [[0,\
    \ 0, [grid[0][0]]]];\n    while (queue.length) {\n        const [i, j, path] =\
    \ queue.shift()!;\n        if (path.length === k) {\n            return path;\n\
    \        }\n        if (i > 0 && !visited.has(`${i - 1},${j}`)) {\n          \
    \  visited.add(`${i - 1},${j}`);\n            queue.push([i - 1, j, [...path,\
    \ grid[i - 1][j]]]);\n        }\n        if (i < n - 1 && !visited.has(`${i +\
    \ 1},${j}`)) {\n            visited.add(`${i + 1},${j}`);\n            queue.push([i\
    \ + 1, j, [...path, grid[i + 1][j]]]);\n        }\n        if (j > 0 && !visited.has(`${i},${j\
    \ - 1}`)) {\n            visited.add(`${i},${j - 1}`);\n            queue.push([i,\
    \ j - 1, [...path, grid[i][j - 1]]]);\n        }\n        if (j < m - 1 && !visited.has(`${i},${j\
    \ + 1}`)) {\n            visited.add(`${i},${j + 1}`);\n            queue.push([i,\
    \ j + 1, [...path, grid[i][j + 1]]]);\n        }\n    }\n    return [];\n}\n",
  "    // your code goes here\n    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minPathSum = Infinity;\n    let visited = new\
    \ Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let dfs = (i: number, j: number, path: number[], sum: number) => {\n\
    \        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j] || path.length\
    \ > k) {\n            return;\n        }\n        path.push(grid[i][j]);\n   \
    \     sum += grid[i][j];\n        visited[i][j] = true;\n        if (path.length\
    \ === k) {\n            if (sum < minPathSum) {\n                minPathSum =\
    \ sum;\n                minPath = path.slice();\n            }\n        } else\
    \ {\n            dfs(i - 1, j, path, sum);\n            dfs(i + 1, j, path, sum);\n\
    \            dfs(i, j - 1, path, sum);\n            dfs(i, j + 1, path, sum);\n\
    \        }\n        path.pop();\n        visited[i][j] = false;\n    }\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n         \
    \   dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n}\n", "    const\
    \ n = grid.length;\n    const m = grid[0].length;\n    const visited = new Array(n).fill(0).map(()\
    \ => new Array(m).fill(false));\n    const queue = [];\n    const path = [];\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let minPathLength = Infinity;\n    let minPathIndex = Infinity;\n    let\
    \ minPathIndexSum = Infinity;\n    let minPathIndexLength = Infinity;\n    let\
    \ minPathIndexIndex = Infinity;\n    let minPathIndexIndexSum = Infinity;\n  \
    \  let minPathIndexIndexLength = Infinity;\n    let minPathIndexIndexIndex = Infinity;\n\
    \    let minPathIndexIndexIndexSum = Infinity;\n    let minPathIndexIndexIndexLength\
    \ = Infinity;\n    let minPathIndexIndexIndexIndex = Infinity;\n    let minPathIndexIndexIndexIndexSum\
    \ = Infinity;\n    let minPathIndexIndexIndexIndexLength = Infinity;\n    let\
    \ minPathIndexIndexIndexIndexIndex = Infinity;\n    let minPathIndexIndexIndexIndexIndexSum\
    \ = Infinity;\n    let minPathIndexIndexIndexIndexIndexLength = Infinity;\n  \
    \  let minPathIndexIndexIndexIndexIndexIndex = Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexSum\
    \ = Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexLength = Infinity;\n\
    \    let minPathIndexIndexIndexIndexIndexIndexIndex = Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexIndexSum\
    \ = Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexIndexLength = Infinity;\n\
    \    let minPathIndexIndexIndexIndexIndexIndexIndexIndex = Infinity;\n    let\
    \ minPathIndexIndexIndexIndexIndexIndexIndexIndexSum = Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexIndexIndexLength\
    \ = Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexIndexIndexIndex =\
    \ Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexSum =\
    \ Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexLength\
    \ = Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexSum\
    \ = Infinity;\n    let minPathIndexIndexIndexIndexIndexIndexIndexIndexIndex",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    let visited = new Set();\n    let dfs = (i:\
    \ number, j: number, path: number[], pathSum: number) => {\n        if (path.length\
    \ === k) {\n            if (pathSum < minPathSum) {\n                minPathSum\
    \ = pathSum;\n                minPath = path;\n            }\n            return;\n\
    \        }\n        if (i < 0 || i >= n || j < 0 || j >= m) {\n            return;\n\
    \        }\n        if (visited.has(i + ',' + j)) {\n            return;\n   \
    \     }\n        visited.add(i + ',' + j);\n        dfs(i - 1, j, path.concat(grid[i][j]),\
    \ pathSum + grid[i][j]);\n        dfs(i + 1, j, path.concat(grid[i][j]), pathSum\
    \ + grid[i][j]);\n        dfs(i, j - 1, path.concat(grid[i][j]), pathSum + grid[i][j]);\n\
    \        dfs(i, j + 1, path.concat(grid[i][j]), pathSum + grid[i][j]);\n     \
    \   visited.delete(i + ',' + j);\n    };\n    for (let i = 0; i < n; i++) {\n\
    \        for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n      \
    \  }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let m =\
    \ grid[0].length;\n    let minPath = [];\n    let minPathCost = Infinity;\n  \
    \  let visited = new Set();\n    let dfs = (i: number, j: number, path: number[],\
    \ pathCost: number) => {\n        if (path.length === k) {\n            if (pathCost\
    \ < minPathCost) {\n                minPathCost = pathCost;\n                minPath\
    \ = path;\n            }\n            return;\n        }\n        if (pathCost\
    \ > minPathCost) {\n            return;\n        }\n        if (i < 0 || i >=\
    \ n || j < 0 || j >= m) {\n            return;\n        }\n        let key = `${i},${j}`;\n\
    \        if (visited.has(key)) {\n            return;\n        }\n        visited.add(key);\n\
    \        path.push(grid[i][j]);\n        dfs(i - 1, j, path.slice(), pathCost\
    \ + grid[i][j]);\n        dfs(i + 1, j, path.slice(), pathCost + grid[i][j]);\n\
    \        dfs(i, j - 1, path.slice(), pathCost + grid[i][j]);\n        dfs(i, j\
    \ + 1, path.slice(), pathCost + grid[i][j]);\n        visited.delete(key);\n \
    \   };\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n}\n",
  "    // your code here\n    return [];\n}\n", "    // Your code here\n    return\
    \ [];\n}\n", "    const n = grid.length;\n    const m = grid[0].length;\n    const\
    \ visited = new Set<string>();\n    const queue = [[0, 0, [grid[0][0]]]];\n  \
    \  while (queue.length > 0) {\n        const [i, j, path] = queue.shift()!;\n\
    \        if (path.length === k) {\n            return path;\n        }\n     \
    \   if (i > 0 && !visited.has(`${i - 1},${j}`)) {\n            queue.push([i -\
    \ 1, j, [...path, grid[i - 1][j]]]);\n            visited.add(`${i - 1},${j}`);\n\
    \        }\n        if (i < n - 1 && !visited.has(`${i + 1},${j}`)) {\n      \
    \      queue.push([i + 1, j, [...path, grid[i + 1][j]]]);\n            visited.add(`${i\
    \ + 1},${j}`);\n        }\n        if (j > 0 && !visited.has(`${i},${j - 1}`))\
    \ {\n            queue.push([i, j - 1, [...path, grid[i][j - 1]]]);\n        \
    \    visited.add(`${i},${j - 1}`);\n        }\n        if (j < m - 1 && !visited.has(`${i},${j\
    \ + 1}`)) {\n            queue.push([i, j + 1, [...path, grid[i][j + 1]]]);\n\
    \            visited.add(`${i},${j + 1}`);\n        }\n        queue.sort((a,\
    \ b) => {\n            for (let i = 0; i < a[2].length; i++) {\n             \
    \   if (a[2][i] < b[2][i]) {\n                    return -1;\n               \
    \ }\n                if (a[2][i] > b[2][i]) {\n                    return 1;\n\
    \                }\n            }\n            return 0;\n        });\n    }\n\
    \    return [];\n}\n", "    // Your code here\n    return [];\n}\n", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let minPath = new Array(k).fill(Infinity);\n    let minPathSum = Infinity;\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          dfs(i, j, 0, 0, 0);\n        }\n    }\n    return minPath;\n\n    function\
    \ dfs(i: number, j: number, sum: number, pathLen: number, pathIdx: number) {\n\
    \        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n        \
    \    return;\n        }\n        visited[i][j] = true;\n        sum += grid[i][j];\n\
    \        pathLen++;\n        if (pathLen > k) {\n            return;\n       \
    \ }\n        if (pathLen === k) {\n            if (sum < minPathSum) {\n     \
    \           minPathSum = sum;\n                minPath[pathIdx] = grid[i][j];\n\
    \            } else if (sum === minPathSum) {\n                minPath[pathIdx]\
    \ = Math.min(minPath[pathIdx], grid[i][j]);\n            }\n            return;\n\
    \        }\n        dfs(i + 1, j, sum, pathLen, pathIdx + 1);\n        dfs(i -\
    \ 1, j, sum, pathLen, pathIdx + 1);\n        dfs(i, j + 1, sum, pathLen, pathIdx\
    \ + 1);\n        dfs(i, j - 1, sum, pathLen, pathIdx + 1);\n        visited[i][j]\
    \ = false;\n    }\n}\n", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const visited = new Set<string>();\n    const queue = new PriorityQueue<Path>({\
    \ comparator: (a, b) => a.compareTo(b) });\n    queue.offer(new Path(0, 0, grid[0][0],\
    \ [grid[0][0]]));\n    while (!queue.isEmpty()) {\n        const path = queue.poll();\n\
    \        if (path.length === k) {\n            return path.list;\n        }\n\
    \        const key = path.x + ',' + path.y;\n        if (visited.has(key)) {\n\
    \            continue;\n        }\n        visited.add(key);\n        if (path.x\
    \ > 0) {\n            queue.offer(new Path(path.x - 1, path.y, grid[path.x - 1][path.y],\
    \ path.list));\n        }\n        if (path.x < n - 1) {\n            queue.offer(new\
    \ Path(path.x + 1, path.y, grid[path.x + 1][path.y], path.list));\n        }\n\
    \        if (path.y > 0) {\n            queue.offer(new Path(path.x, path.y -\
    \ 1, grid[path.x][path.y - 1], path.list));\n        }\n        if (path.y < m\
    \ - 1) {\n            queue.offer(new Path(path.x, path.y + 1, grid[path.x][path.y\
    \ + 1], path.list));\n        }\n    }\n    return [];\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n\
    \    let visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = new Array(m).fill(false);\n    }\n    let dfs = (i: number, j: number, path:\
    \ number[], pathSum: number) => {\n        if (i < 0 || i >= n || j < 0 || j >=\
    \ m || visited[i][j]) {\n            return;\n        }\n        path.push(grid[i][j]);\n\
    \        pathSum += grid[i][j];\n        visited[i][j] = true;\n        if (path.length\
    \ === k) {\n            if (pathSum < minPathSum) {\n                minPathSum\
    \ = pathSum;\n                minPath = path.slice();\n            }\n       \
    \ } else {\n            dfs(i - 1, j, path, pathSum);\n            dfs(i + 1,\
    \ j, path, pathSum);\n            dfs(i, j - 1, path, pathSum);\n            dfs(i,\
    \ j + 1, path, pathSum);\n        }\n        path.pop();\n        pathSum -= grid[i][j];\n\
    \        visited[i][j] = false;\n    };\n    for (let i = 0; i < n; i++) {\n \
    \       for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n       \
    \ }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let m =\
    \ grid[0].length;\n    let minPath = [];\n    let minSum = Infinity;\n    let\
    \ minPaths = [];\n    let minSums = [];\n    let visited = [];\n    for (let i\
    \ = 0; i < n; i++) {\n        visited[i] = [];\n        for (let j = 0; j < m;\
    \ j++) {\n            visited[i][j] = false;\n        }\n    }\n    let dfs =\
    \ function (i: number, j: number, sum: number, path: number[]) {\n        if (i\
    \ < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n            return;\n\
    \        }\n        path.push(grid[i][j]);\n        sum += grid[i][j];\n     \
    \   if (path.length === k) {\n            if (sum < minSum) {\n              \
    \  minSum = sum;\n                minPath = path.slice();\n            } else\
    \ if (sum === minSum) {\n                minPaths.push(path.slice());\n      \
    \          minSums.push(sum);\n            }\n            path.pop();\n      \
    \      return;\n        }\n        visited[i][j] = true;\n        dfs(i - 1, j,\
    \ sum, path);\n        dfs(i + 1, j, sum, path);\n        dfs(i, j - 1, sum, path);\n\
    \        dfs(i, j + 1, sum, path);\n        visited[i][j] = false;\n        path.pop();\n\
    \    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            dfs(i, j, 0, []);\n        }\n    }\n    if (minPaths.length\
    \ === 0) {\n        return minPath;\n    }\n    let min = minPaths[0];\n    for\
    \ (let i = 1; i < minPaths.length; i++) {\n        if (minPaths[i] < min) {\n\
    \            min = minPaths[i];\n        }\n    }\n    return min", "    let n\
    \ = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let minPath = [];\n    let minPathSum = Infinity;\n    let minPathSum2\
    \ = Infinity;\n    let minPath2 = [];\n    let minPathSum3 = Infinity;\n    let\
    \ minPath3 = [];\n    let minPathSum4 = Infinity;\n    let minPath4 = [];\n  \
    \  let minPathSum5 = Infinity;\n    let minPath5 = [];\n    let minPathSum6 =\
    \ Infinity;\n    let minPath6 = [];\n    let minPathSum7 = Infinity;\n    let\
    \ minPath7 = [];\n    let minPathSum8 = Infinity;\n    let minPath8 = [];\n  \
    \  let minPathSum9 = Infinity;\n    let minPath9 = [];\n    let minPathSum10 =\
    \ Infinity;\n    let minPath10 = [];\n    let minPathSum11 = Infinity;\n    let\
    \ minPath11 = [];\n    let minPathSum12 = Infinity;\n    let minPath12 = [];\n\
    \    let minPathSum13 = Infinity;\n    let minPath13 = [];\n    let minPathSum14\
    \ = Infinity;\n    let minPath14 = [];\n    let minPathSum15 = Infinity;\n   \
    \ let minPath15 = [];\n    let minPathSum16 = Infinity;\n    let minPath16 = [];\n\
    \    let minPathSum17 = Infinity;\n    let minPath17 = [];\n    let minPathSum18\
    \ = Infinity;\n    let minPath18 = [];\n    let minPathSum19 = Infinity;\n   \
    \ let minPath19 = [];\n    let minPathSum20 = Infinity;\n    let minPath20 = [];\n\
    \    let minPathSum21 = Infinity;\n    let minPath21 = [];\n    let minPathSum22\
    \ = Infinity;\n    let minPath22 = [];\n    let minPathSum23 = Infinity;\n   \
    \ let minPath23 = [];\n    let minPathSum24 = Infinity;\n    let minPath24 = [];\n\
    \    let minPathSum25 = Infinity;\n    let minPath25 =", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Array(n);\n    for (let i\
    \ = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n\
    \    let minPath = new Array(k);\n    let minPathSum = Infinity;\n    let minPathSumIndex\
    \ = 0;\n    let pathSum = 0;\n    let pathSumIndex = 0;\n    let path = new Array(k);\n\
    \    let pathIndex = 0;\n    let pathSumIndexes = new Array(n * m);\n    let pathIndexes\
    \ = new Array(n * m);\n    let pathSumIndexesIndex = 0;\n    let pathIndexesIndex\
    \ = 0;\n    let pathSumIndexesIndexes = new Array(n * m);\n    let pathIndexesIndexes\
    \ = new Array(n * m);\n    let pathSumIndexesIndexesIndex = 0;\n    let pathIndexesIndexesIndex\
    \ = 0;\n    let pathSumIndexesIndexesIndexes = new Array(n * m);\n    let pathIndexesIndexesIndexes\
    \ = new Array(n * m);\n    let pathSumIndexesIndexesIndexesIndex = 0;\n    let\
    \ pathIndexesIndexesIndexesIndex = 0;\n    let pathSumIndexesIndexesIndexesIndexes\
    \ = new Array(n * m);\n    let pathIndexesIndexesIndexesIndexes = new Array(n\
    \ * m);\n    let pathSumIndexesIndexesIndexesIndexesIndex = 0;\n    let pathIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    let pathSumIndexesIndexesIndexesIndexesIndexes = new Array(n * m);\n\
    \    let pathIndexesIndexesIndexesIndexesIndexes = new Array(n * m);\n    let\
    \ pathSumIndexesIndexesIndexesIndexesIndexesIndex = 0;\n    let pathIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    let pathSumIndexesIndexesIndexesIndexesIndexesIndexes = new Array(n\
    \ * m);\n    let pathIndexesIndexesIndexesIndexesIndexesIndexes = new Array(n\
    \ * m);\n    let", "    let n = grid.length;\n    let m = grid[0].length;\n  \
    \  let minPath: number[] = [];\n    let minPathSum = Infinity;\n    let visited\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new\
    \ Array(m).fill(false);\n    }\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            let path: number[] = [];\n          \
    \  let pathSum = 0;\n            dfs(i, j, k, path, pathSum);\n        }\n   \
    \ }\n    return minPath;\n\n    function dfs(i: number, j: number, k: number,\
    \ path: number[], pathSum: number) {\n        if (k === 0) {\n            if (pathSum\
    \ < minPathSum) {\n                minPathSum = pathSum;\n                minPath\
    \ = path.slice();\n            }\n            return;\n        }\n        if (i\
    \ < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n            return;\n\
    \        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n  \
    \      pathSum += grid[i][j];\n        dfs(i - 1, j, k - 1, path, pathSum);\n\
    \        dfs(i + 1, j, k - 1, path, pathSum);\n        dfs(i, j - 1, k - 1, path,\
    \ pathSum);\n        dfs(i, j + 1, k - 1, path, pathSum);\n        path.pop();\n\
    \        pathSum -= grid[i][j];\n        visited[i][j] = false;\n    }\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let result = [];\n    let min = Infinity;\n    for (let i = 0; i <\
    \ n; i++) {\n        for (let j = 0; j < m; j++) {\n            let curr = [];\n\
    \            dfs(i, j, k, curr, visited);\n            if (curr.length < min)\
    \ {\n                min = curr.length;\n                result = curr;\n    \
    \        } else if (curr.length === min) {\n                if (curr < result)\
    \ {\n                    result = curr;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let minPaths = [];\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            minPaths.push(getMinPath(grid,\
    \ i, j, k));\n        }\n    }\n    minPaths.sort((a, b) => {\n        for (let\
    \ i = 0; i < k; i++) {\n            if (a[i] < b[i]) {\n                return\
    \ -1;\n            } else if (a[i] > b[i]) {\n                return 1;\n    \
    \        }\n        }\n        return 0;\n    });\n    return minPaths[0];\n}\n",
  "    const n = grid.length;\n    const m = grid[0].length;\n    const visited =\
    \ new Set<string>();\n    const q = new Queue<[number, number, number[]]>();\n\
    \    q.enqueue([0, 0, [grid[0][0]]]);\n    visited.add(`${0}${0}`);\n    while\
    \ (!q.isEmpty()) {\n        const [i, j, path] = q.dequeue();\n        if (path.length\
    \ === k) {\n            return path;\n        }\n        if (i > 0 && !visited.has(`${i\
    \ - 1}${j}`)) {\n            q.enqueue([i - 1, j, [...path, grid[i - 1][j]]]);\n\
    \            visited.add(`${i - 1}${j}`);\n        }\n        if (i < n - 1 &&\
    \ !visited.has(`${i + 1}${j}`)) {\n            q.enqueue([i + 1, j, [...path,\
    \ grid[i + 1][j]]]);\n            visited.add(`${i + 1}${j}`);\n        }\n  \
    \      if (j > 0 && !visited.has(`${i}${j - 1}`)) {\n            q.enqueue([i,\
    \ j - 1, [...path, grid[i][j - 1]]]);\n            visited.add(`${i}${j - 1}`);\n\
    \        }\n        if (j < m - 1 && !visited.has(`${i}${j + 1}`)) {\n       \
    \     q.enqueue([i, j + 1, [...path, grid[i][j + 1]]]);\n            visited.add(`${i}${j\
    \ + 1}`);\n        }\n    }\n    return [];\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Array(n);\n    for (let i\
    \ = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    let minSumPath = [];\n\
    \    let dfs = (i: number, j: number, path: number[], sum: number) => {\n    \
    \    if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n            return;\n\
    \        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n  \
    \      sum += grid[i][j];\n        if (path.length === k) {\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n                minSumPath = path.slice();\n\
    \            } else if (sum === minSum) {\n                if (path.join('') <\
    \ minSumPath.join('')) {\n                    minSumPath = path.slice();\n   \
    \             }\n            }\n        } else {\n            dfs(i - 1, j, path,\
    \ sum);\n            dfs(i + 1, j, path, sum);\n            dfs(i, j - 1, path,\
    \ sum);\n            dfs(i, j + 1, path, sum);\n        }\n        path.pop();\n\
    \        visited[i][j] = false;\n    }\n    for (let i = 0; i < n; i++) {\n  \
    \      for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n\
    \    }\n    return minSumPath;\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath: number[] = [];\n    let minPathSum = Infinity;\n    let visited:\
    \ boolean[][] = [];\n    for (let i = 0; i < n; i++) {\n        visited[i] = [];\n\
    \        for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n \
    \       }\n    }\n    function dfs(i: number, j: number, path: number[], pathSum:\
    \ number) {\n        if (path.length === k) {\n            if (pathSum < minPathSum)\
    \ {\n                minPathSum = pathSum;\n                minPath = path.slice();\n\
    \            }\n            return;\n        }\n        if (i < 0 || i >= n ||\
    \ j < 0 || j >= m || visited[i][j]) {\n            return;\n        }\n      \
    \  visited[i][j] = true;\n        path.push(grid[i][j]);\n        pathSum += grid[i][j];\n\
    \        dfs(i - 1, j, path, pathSum);\n        dfs(i + 1, j, path, pathSum);\n\
    \        dfs(i, j - 1, path, pathSum);\n        dfs(i, j + 1, path, pathSum);\n\
    \        path.pop();\n        pathSum -= grid[i][j];\n        visited[i][j] =\
    \ false;\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j\
    \ < m; j++) {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath\
    \ = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n    let visited\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        visited[i] = [];\n       \
    \ for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n        }\n\
    \    }\n    let dfs = (i: number, j: number, path: number[], sum: number) => {\n\
    \        if (sum > minSum) {\n            return;\n        }\n        if (path.length\
    \ === k) {\n            if (sum < minPathSum) {\n                minPathSum =\
    \ sum;\n                minPath = path.slice();\n            }\n            return;\n\
    \        }\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n\
    \            return;\n        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n\
    \        sum += grid[i][j];\n        dfs(i - 1, j, path, sum);\n        dfs(i\
    \ + 1, j, path, sum);\n        dfs(i, j - 1, path, sum);\n        dfs(i, j + 1,\
    \ path, sum);\n        path.pop();\n        sum -= grid[i][j];\n        visited[i][j]\
    \ = false;\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            dfs(i, j, [], 0);\n            minSum = minPathSum;\n\
    \        }\n    }\n    return minPath;\n}\n", "    // your code here\n    return\
    \ [];\n}\n", "    const n = grid.length;\n    const visited = new Set<string>();\n\
    \    const queue = [[0, 0, [grid[0][0]]]];\n    while (queue.length > 0) {\n \
    \       const [i, j, path] = queue.shift()!;\n        if (path.length === k) {\n\
    \            return path;\n        }\n        if (i > 0 && !visited.has(`${i -\
    \ 1},${j}`)) {\n            queue.push([i - 1, j, [...path, grid[i - 1][j]]]);\n\
    \            visited.add(`${i - 1},${j}`);\n        }\n        if (i < n - 1 &&\
    \ !visited.has(`${i + 1},${j}`)) {\n            queue.push([i + 1, j, [...path,\
    \ grid[i + 1][j]]]);\n            visited.add(`${i + 1},${j}`);\n        }\n \
    \       if (j > 0 && !visited.has(`${i},${j - 1}`)) {\n            queue.push([i,\
    \ j - 1, [...path, grid[i][j - 1]]]);\n            visited.add(`${i},${j - 1}`);\n\
    \        }\n        if (j < n - 1 && !visited.has(`${i},${j + 1}`)) {\n      \
    \      queue.push([i, j + 1, [...path, grid[i][j + 1]]]);\n            visited.add(`${i},${j\
    \ + 1}`);\n        }\n        queue.sort((a, b) => {\n            for (let i =\
    \ 0; i < k; i++) {\n                if (a[2][i] < b[2][i]) {\n               \
    \     return -1;\n                }\n                if (a[2][i] > b[2][i]) {\n\
    \                    return 1;\n                }\n            }\n           \
    \ return 0;\n        });\n    }\n    return [];\n}\n", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const visited = new Array(n);\n    for (let\
    \ i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n\
    \    const queue = [];\n    const path = [];\n    let minPath = [];\n    queue.push({\n\
    \        x: 0,\n        y: 0,\n        path: [grid[0][0]]\n    });\n    visited[0][0]\
    \ = true;\n    while (queue.length > 0) {\n        const { x, y, path } = queue.shift();\n\
    \        if (path.length === k) {\n            if (minPath.length === 0 || path\
    \ < minPath) {\n                minPath = path;\n            }\n            continue;\n\
    \        }\n        if (x > 0 && !visited[x - 1][y]) {\n            visited[x\
    \ - 1][y] = true;\n            queue.push({\n                x: x - 1,\n     \
    \           y: y,\n                path: [...path, grid[x - 1][y]]\n         \
    \   });\n        }\n        if (x < n - 1 && !visited[x + 1][y]) {\n         \
    \   visited[x + 1][y] = true;\n            queue.push({\n                x: x\
    \ + 1,\n                y: y,\n                path: [...path, grid[x + 1][y]]\n\
    \            });\n        }\n        if (y > 0 && !visited[x][y - 1]) {\n    \
    \        visited[x][y - 1] = true;\n            queue.push({\n               \
    \ x: x,\n                y: y - 1,\n                path: [...path, grid[x][y\
    \ - 1]]\n            });\n        }\n        if (y < m - 1 && !visited[x][y +\
    \ 1]) {\n            visited[x][y + 1] = true;\n            queue.push({\n   \
    \             x: x,\n                y: y + 1,\n                path: [...path,\
    \ grid[x][y + 1]]\n            });\n        }\n    }\n    return minPath;\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let minPath = [];\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            let path = [];\n            let min =\
    \ Number.MAX_SAFE_INTEGER;\n            dfs(i, j, k, grid, visited, path, min);\n\
    \            if (minPath.length === 0 || path.length < minPath.length) {\n   \
    \             minPath = path;\n            }\n        }\n    }\n    return minPath;\n\
    }\n", "    let minPath: number[] = [];\n    let minPathSum: number = Infinity;\n\
    \    let minPathSum2: number = Infinity;\n    let minPath2: number[] = [];\n \
    \   let minPathSum3: number = Infinity;\n    let minPath3: number[] = [];\n  \
    \  let minPathSum4: number = Infinity;\n    let minPath4: number[] = [];\n   \
    \ let minPathSum5: number = Infinity;\n    let minPath5: number[] = [];\n    let\
    \ minPathSum6: number = Infinity;\n    let minPath6: number[] = [];\n    let minPathSum7:\
    \ number = Infinity;\n    let minPath7: number[] = [];\n    let minPathSum8: number\
    \ = Infinity;\n    let minPath8: number[] = [];\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ < minPathSum) {\n                minPathSum = grid[i][j];\n                minPath\
    \ = [grid[i][j]];\n            }\n            if (grid[i][j] < minPathSum2 &&\
    \ grid[i][j] > minPathSum) {\n                minPathSum2 = grid[i][j];\n    \
    \            minPath2 = [grid[i][j]];\n            }\n            if (grid[i][j]\
    \ < minPathSum3 && grid[i][j] > minPathSum2) {\n                minPathSum3 =\
    \ grid[i][j];\n                minPath3 = [grid[i][j]];\n            }\n     \
    \       if (grid[i][j] < minPathSum4 && grid[i][j] > minPathSum3) {\n        \
    \        minPathSum4 = grid[i][j];\n                minPath4 = [grid[i][j]];\n\
    \            }\n            if (grid[i][j] < minPathSum5 && grid[i][j] > minPathSum4)\
    \ {\n                minPathSum5 = grid[i][j];\n                minPath5 = [grid[i][j]];\n\
    \            }\n            if (grid[i][j] < minPath", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Array(n);\n    for (let i\
    \ = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n\
    \    let minPath = [];\n    let minPathSum = Infinity;\n    let minPathSum2 =\
    \ Infinity;\n    let minPathSum3 = Infinity;\n    let minPathSum4 = Infinity;\n\
    \    let minPathSum5 = Infinity;\n    let minPathSum6 = Infinity;\n    let minPathSum7\
    \ = Infinity;\n    let minPathSum8 = Infinity;\n    let minPathSum9 = Infinity;\n\
    \    let minPathSum10 = Infinity;\n    let minPathSum11 = Infinity;\n    let minPathSum12\
    \ = Infinity;\n    let minPathSum13 = Infinity;\n    let minPathSum14 = Infinity;\n\
    \    let minPathSum15 = Infinity;\n    let minPathSum16 = Infinity;\n    let minPathSum17\
    \ = Infinity;\n    let minPathSum18 = Infinity;\n    let minPathSum19 = Infinity;\n\
    \    let minPathSum20 = Infinity;\n    let minPathSum21 = Infinity;\n    let minPathSum22\
    \ = Infinity;\n    let minPathSum23 = Infinity;\n    let minPathSum24 = Infinity;\n\
    \    let minPathSum25 = Infinity;\n    let minPathSum26 = Infinity;\n    let minPathSum27\
    \ = Infinity;\n    let minPathSum28 = Infinity;\n    let minPathSum29 = Infinity;\n\
    \    let minPathSum30 = Infinity;\n    let minPathSum31 = Infinity;\n    let minPathSum32\
    \ = Infinity;\n    let minPathSum33 = Infinity;\n    let minPathSum34 = Infinity;\n\
    \    let minPathSum35 = Infinity;\n    let minPathSum36 = Infinity;\n    let minPathSum37\
    \ = Infinity;\n    let minPathSum38 = Infinity;\n    let minPathSum39 = Infinity;\n\
    \    let minPathSum40 = Infinity;\n    let minPathSum41 = Infinity;\n    let minPathSum42\
    \ = Infinity;\n    let minPathSum43 = Infinity;\n    let minPathSum44 = Infinity;\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            let path = [];\n            let pathSum\
    \ = 0;\n            let visited = new Set();\n            let dfs = (i: number,\
    \ j: number) => {\n                if (visited.has(`${i},${j}`)) {\n         \
    \           return;\n                }\n                if (path.length === k)\
    \ {\n                    if (pathSum < minPathSum) {\n                       \
    \ minPathSum = pathSum;\n                        minPath = path.slice();\n   \
    \                 } else if (pathSum === minPathSum) {\n                     \
    \   for (let i = 0; i < k; i++) {\n                            if (path[i] < minPath[i])\
    \ {\n                                minPath = path.slice();\n               \
    \                 break;\n                            } else if (path[i] > minPath[i])\
    \ {\n                                break;\n                            }\n \
    \                       }\n                    }\n                    return;\n\
    \                }\n                visited.add(`${i},${j}`);\n              \
    \  path.push(grid[i][j]);\n                pathSum += grid[i][j];\n          \
    \      if (i > 0) {\n                    dfs(i - 1, j);\n                }\n \
    \               if (i < n - 1) {\n                    dfs(i + 1, j);\n       \
    \         }\n                if (j > 0) {\n                    dfs(i, j - 1);\n\
    \                }\n                if (j < m - 1) {\n                    dfs(i,\
    \ j + 1);\n                }\n                path.pop();\n                pathSum\
    \ -= grid[i][j];\n                visited.delete(`${i},${j}`);\n            };\n\
    \            dfs(i, j);\n        }\n    }\n    return minPath;\n}\n", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let dp = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(m);\n        for\
    \ (let j = 0; j < m; j++) {\n            dp[i][j] = new Array(k + 1);\n      \
    \      for (let l = 0; l <= k; l++) {\n                dp[i][j][l] = new Array(2);\n\
    \                dp[i][j][l][0] = Number.MAX_SAFE_INTEGER;\n                dp[i][j][l][1]\
    \ = [];\n            }\n        }\n    }\n    dp[0][0][1][0] = grid[0][0];\n \
    \   dp[0][0][1][1] = [grid[0][0]];\n    for (let i = 0; i < n; i++) {\n      \
    \  for (let j = 0; j < m; j++) {\n            for (let l = 1; l <= k; l++) {\n\
    \                if (i > 0) {\n                    if (dp[i - 1][j][l - 1][0]\
    \ + grid[i][j] < dp[i][j][l][0]) {\n                        dp[i][j][l][0] = dp[i\
    \ - 1][j][l - 1][0] + grid[i][j];\n                        dp[i][j][l][1] = dp[i\
    \ - 1][j][l - 1][1].concat(grid[i][j]);\n                    } else if (dp[i -\
    \ 1][j][l - 1][0] + grid[i][j] === dp[i][j][l][0]) {\n                       \
    \ let tmp = dp[i - 1][j][l - 1][1].concat(grid[i][j]);\n                     \
    \   if (tmp.join(\"\") < dp[i][j][l][1].join(\"\")) {\n                      \
    \      dp[i][j][l][1] = tmp;\n                        }\n                    }\n\
    \                }\n                if (j >", "    const n = grid.length;\n  \
    \  const m = grid[0].length;\n    const visited = new Set<string>();\n    const\
    \ queue = new PriorityQueue<number[]>((a, b) => {\n        for (let i = 0; i <\
    \ k; i++) {\n            if (a[i] < b[i]) {\n                return -1;\n    \
    \        } else if (a[i] > b[i]) {\n                return 1;\n            }\n\
    \        }\n        return 0;\n    });\n    const dirs = [[-1, 0], [1, 0], [0,\
    \ -1], [0, 1]];\n    const start = [0, 0];\n    const startPath = [grid[0][0]];\n\
    \    queue.push(startPath);\n    visited.add(start.toString());\n    while (!queue.isEmpty())\
    \ {\n        const path = queue.pop();\n        if (path.length === k) {\n   \
    \         return path;\n        }\n        const [x, y] = path[path.length - 1];\n\
    \        for (const [dx, dy] of dirs) {\n            const newX = x + dx;\n  \
    \          const newY = y + dy;\n            if (newX < 0 || newX >= n || newY\
    \ < 0 || newY >= m) {\n                continue;\n            }\n            const\
    \ newPos = [newX, newY];\n            if (visited.has(newPos.toString())) {\n\
    \                continue;\n            }\n            visited.add(newPos.toString());\n\
    \            const newPath = [...path, grid[newX][newY]];\n            queue.push(newPath);\n\
    \        }\n    }\n    return [];\n}\n", "    let n = grid.length;\n    let m\
    \ = grid[0].length;\n    let path = [];\n    let min = Infinity;\n    let minPath\
    \ = [];\n    let visited = new Set();\n    let dfs = (i: number, j: number, path:\
    \ number[]) => {\n        if (i < 0 || i >= n || j < 0 || j >= m) return;\n  \
    \      if (visited.has(i * m + j)) return;\n        path.push(grid[i][j]);\n \
    \       if (path.length > k) return;\n        if (path.length === k) {\n     \
    \       if (path.join('') < min) {\n                min = path.join('');\n   \
    \             minPath = path.slice();\n            }\n            return;\n  \
    \      }\n        visited.add(i * m + j);\n        dfs(i + 1, j, path);\n    \
    \    dfs(i - 1, j, path);\n        dfs(i, j + 1, path);\n        dfs(i, j - 1,\
    \ path);\n        visited.delete(i * m + j);\n        path.pop();\n    }\n   \
    \ for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n     \
    \       dfs(i, j, path);\n        }\n    }\n    return minPath;\n}\n", "    const\
    \ n = grid.length;\n    const m = grid[0].length;\n    const visited = new Set<string>();\n\
    \    const queue = [[0, 0, [grid[0][0]]]];\n    while (queue.length > 0) {\n \
    \       const [i, j, path] = queue.shift()!;\n        if (path.length === k) {\n\
    \            return path;\n        }\n        if (i > 0 && !visited.has(`${i -\
    \ 1},${j}`)) {\n            queue.push([i - 1, j, [...path, grid[i - 1][j]]]);\n\
    \            visited.add(`${i - 1},${j}`);\n        }\n        if (i < n - 1 &&\
    \ !visited.has(`${i + 1},${j}`)) {\n            queue.push([i + 1, j, [...path,\
    \ grid[i + 1][j]]]);\n            visited.add(`${i + 1},${j}`);\n        }\n \
    \       if (j > 0 && !visited.has(`${i},${j - 1}`)) {\n            queue.push([i,\
    \ j - 1, [...path, grid[i][j - 1]]]);\n            visited.add(`${i},${j - 1}`);\n\
    \        }\n        if (j < m - 1 && !visited.has(`${i},${j + 1}`)) {\n      \
    \      queue.push([i, j + 1, [...path, grid[i][j + 1]]]);\n            visited.add(`${i},${j\
    \ + 1}`);\n        }\n        queue.sort((a, b) => {\n            for (let i =\
    \ 0; i < k; i++) {\n                if (a[2][i] < b[2][i]) {\n               \
    \     return -1;\n                }\n                if (a[2][i] > b[2][i]) {\n\
    \                    return 1;\n                }\n            }\n           \
    \ return 0;\n        });\n    }\n    return [];\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n\
    \    let minPathSum2 = Infinity;\n    let minPath2 = [];\n    let visited = [];\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = [];\n        for (let\
    \ j = 0; j < m; j++) {\n            visited[i][j] = false;\n        }\n    }\n\
    \    let path = [];\n    let pathSum = 0;\n    for (let i = 0; i < n; i++) {\n\
    \        for (let j = 0; j < m; j++) {\n            path = [];\n            pathSum\
    \ = 0;\n            visited[i][j] = true;\n            path.push(grid[i][j]);\n\
    \            pathSum += grid[i][j];\n            dfs(i, j, 1, path, pathSum);\n\
    \            visited[i][j] = false;\n        }\n    }\n    return minPath;\n\n\
    \    function dfs(i: number, j: number, depth: number, path: number[], pathSum:\
    \ number) {\n        if (depth === k) {\n            if (pathSum < minPathSum)\
    \ {\n                minPathSum = pathSum;\n                minPath = path.slice();\n\
    \            } else if (pathSum === minPathSum) {\n                if (path.join('')\
    \ < minPath.join('')) {\n                    minPath = path.slice();\n       \
    \         }\n            }\n            return;\n        }\n        if (i > 0\
    \ && !visited[i - 1][j]) {\n            visited[i - 1][j] = true;\n          \
    \  path.push(grid[i - 1][j]);\n            pathSum += grid[i - 1][j];\n      \
    \      dfs(i - 1, j, depth + 1, path, pathSum);\n            path.pop();\n   \
    \         pathSum -= grid[i - 1][j];\n            visited[i - 1][j] = false;\n\
    \        }\n        if (i < n - 1 && !visited[i + 1][j]) {\n            visited[i\
    \ +", "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath\
    \ = [];\n    let minSum = Infinity;\n    let visited = [];\n    for (let i = 0;\
    \ i < n; i++) {\n        visited[i] = [];\n        for (let j = 0; j < m; j++)\
    \ {\n            visited[i][j] = false;\n        }\n    }\n    for (let i = 0;\
    \ i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            let path =\
    \ [];\n            let sum = 0;\n            dfs(grid, i, j, k, path, sum, visited);\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            \
    \    minPath = path;\n            }\n        }\n    }\n    return minPath;\n}\n",
  "    // your code here\n    return [];\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let dp: number[][][] = [];\n    for (let i = 0; i <\
    \ n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n    \
    \        dp[i][j] = [];\n            for (let l = 0; l < k; l++) {\n         \
    \       dp[i][j][l] = -1;\n            }\n        }\n    }\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minPath: number[] = [];\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            let path = findPath(grid, dp, i, j, k);\n\
    \            if (path.length < min) {\n                min = path.length;\n  \
    \              minPath = path;\n            }\n        }\n    }\n    return minPath;\n\
    }\n", "    const N = grid.length;\n    const M = grid[0].length;\n    const visited\
    \ = new Set<string>();\n    const queue = new PriorityQueue<Path>({\n        comparator:\
    \ (a, b) => {\n            for (let i = 0; i < Math.min(a.values.length, b.values.length);\
    \ i++) {\n                if (a.values[i] < b.values[i]) {\n                 \
    \   return -1;\n                } else if (a.values[i] > b.values[i]) {\n    \
    \                return 1;\n                }\n            }\n            return\
    \ a.values.length - b.values.length;\n        }\n    });\n    queue.enqueue({\n\
    \        values: [],\n        row: 0,\n        col: 0\n    });\n    while (!queue.isEmpty())\
    \ {\n        const path = queue.dequeue();\n        if (path.values.length ===\
    \ k) {\n            return path.values;\n        }\n        const key = `${path.row},${path.col}`;\n\
    \        if (visited.has(key)) {\n            continue;\n        }\n        visited.add(key);\n\
    \        const value = grid[path.row][path.col];\n        const newPath = {\n\
    \            values: [...path.values, value],\n            row: path.row,\n  \
    \          col: path.col\n        };\n        if (path.row > 0) {\n          \
    \  queue.enqueue({\n                ...newPath,\n                row: path.row\
    \ - 1\n            });\n        }\n        if (path.row < N - 1) {\n         \
    \   queue.enqueue({\n                ...newPath,\n                row: path.row\
    \ + 1\n            });\n        }\n        if (path.col > 0) {\n            queue.enqueue({\n\
    \                ...newPath,\n                col: path.col - 1\n            });\n\
    \        }\n        if (path.col < M - 1) {\n            queue.enqueue({\n   \
    \             ...newPath,\n                col: path.col + 1\n            });\n\
    \        }\n    }\n    return [];\n}\n\ninterface Path {\n    values: number[];\n\
    \    row", "    let n = grid.length;\n    let m = grid[0].length;\n    let visited\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new\
    \ Array(m).fill(false);\n    }\n    let minPath = new Array(k);\n    let minPathSum\
    \ = Infinity;\n    let minPathSumIndex = -1;\n    let minPathSumIndex2 = -1;\n\
    \    let minPathSumIndex3 = -1;\n    let minPathSumIndex4 = -1;\n    let minPathSumIndex5\
    \ = -1;\n    let minPathSumIndex6 = -1;\n    let minPathSumIndex7 = -1;\n    let\
    \ minPathSumIndex8 = -1;\n    let minPathSumIndex9 = -1;\n    let minPathSumIndex10\
    \ = -1;\n    let minPathSumIndex11 = -1;\n    let minPathSumIndex12 = -1;\n  \
    \  let minPathSumIndex13 = -1;\n    let minPathSumIndex14 = -1;\n    let minPathSumIndex15\
    \ = -1;\n    let minPathSumIndex16 = -1;\n    let minPathSumIndex17 = -1;\n  \
    \  let minPathSumIndex18 = -1;\n    let minPathSumIndex19 = -1;\n    let minPathSumIndex20\
    \ = -1;\n    let minPathSumIndex21 = -1;\n    let minPathSumIndex22 = -1;\n  \
    \  let minPathSumIndex23 = -1;\n    let minPathSumIndex24 = -1;\n    let minPathSumIndex25\
    \ = -1;\n    let minPathSumIndex26 = -1;\n    let minPathSumIndex27 = -1;\n  \
    \  let minPathSumIndex28 = -1;\n    let minPathSumIndex29 = -1;\n    let minPathSumIndex30\
    \ = -1;\n    let minPathSumIndex31 = -1;\n    let minPathSumIndex32 = -1;\n  \
    \  let minPathSumIndex33 = -1;\n    let minPathSumIndex34 = -1;\n    let minPathSumIndex35\
    \ = -1;\n    let minPathSumIndex36", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPaths: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n   \
    \     minPaths[i] = [];\n        for (let j = 0; j < m; j++) {\n            minPaths[i][j]\
    \ = [];\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {\n            if (i == 0 && j == 0) {\n                minPaths[i][j][0]\
    \ = grid[i][j];\n            } else if (i == 0) {\n                minPaths[i][j][0]\
    \ = minPaths[i][j - 1][0];\n            } else if (j == 0) {\n               \
    \ minPaths[i][j][0] = minPaths[i - 1][j][0];\n            } else {\n         \
    \       minPaths[i][j][0] = Math.min(minPaths[i - 1][j][0], minPaths[i][j - 1][0]);\n\
    \            }\n        }\n    }\n    let minPath = minPaths[n - 1][m - 1][0];\n\
    \    let minPathsCount = 0;\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {\n            if (minPaths[i][j][0] == minPath) {\n    \
    \            minPathsCount++;\n            }\n        }\n    }\n    let minPathsIndex\
    \ = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            if (minPaths[i][j][0] == minPath) {\n                minPaths[i][j][1]\
    \ = minPathsIndex;\n                minPathsIndex++;\n            }\n        }\n\
    \    }\n    let minPathsLength = 1;\n    while (minPathsLength < k) {\n      \
    \  for (let i = 0; i < n;", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let min = Infinity;\n    let minPath = [];\n    let visited = [];\n    for\
    \ (let i = 0; i < n; i++) {\n        visited[i] = [];\n        for (let j = 0;\
    \ j < m; j++) {\n            visited[i][j] = false;\n        }\n    }\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n         \
    \   let path = [];\n            dfs(i, j, k, path, visited);\n            if (path.length\
    \ < min) {\n                min = path.length;\n                minPath = path;\n\
    \            }\n        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n\
    \    let visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = new Array(n).fill(false);\n    }\n    let minPath = new Array(k);\n    let\
    \ minPathSum = Infinity;\n    let dfs = (i: number, j: number, path: number[],\
    \ pathSum: number) => {\n        if (path.length === k) {\n            if (pathSum\
    \ < minPathSum) {\n                minPathSum = pathSum;\n                minPath\
    \ = path.slice();\n            }\n            return;\n        }\n        if (i\
    \ < 0 || i >= n || j < 0 || j >= n || visited[i][j]) {\n            return;\n\
    \        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n  \
    \      pathSum += grid[i][j];\n        dfs(i - 1, j, path, pathSum);\n       \
    \ dfs(i + 1, j, path, pathSum);\n        dfs(i, j - 1, path, pathSum);\n     \
    \   dfs(i, j + 1, path, pathSum);\n        path.pop();\n        pathSum -= grid[i][j];\n\
    \        visited[i][j] = false;\n    };\n    for (let i = 0; i < n; i++) {\n \
    \       for (let j = 0; j < n; j++) {\n            dfs(i, j, [], 0);\n       \
    \ }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let m =\
    \ grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n   \
    \ let minPathSumGrid = [];\n    for (let i = 0; i < n; i++) {\n        minPathSumGrid.push([]);\n\
    \        for (let j = 0; j < m; j++) {\n            minPathSumGrid[i].push(Infinity);\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            let path = [];\n            let pathSum = 0;\n  \
    \          let pathSumGrid = [];\n            for (let i = 0; i < n; i++) {\n\
    \                pathSumGrid.push([]);\n                for (let j = 0; j < m;\
    \ j++) {\n                    pathSumGrid[i].push(Infinity);\n               \
    \ }\n            }\n            findMinPath(i, j, k, path, pathSum, pathSumGrid);\n\
    \            if (pathSum < minPathSum) {\n                minPathSum = pathSum;\n\
    \                minPath = path;\n                minPathSumGrid = pathSumGrid;\n\
    \            }\n        }\n    }\n    return minPath;\n\n    function findMinPath(i:\
    \ number, j: number, k: number, path: number[], pathSum: number, pathSumGrid:\
    \ number[][]) {\n        if (k === 0) {\n            return;\n        }\n    \
    \    if (i < 0 || i >= n || j < 0 || j >= m) {\n            return;\n        }\n\
    \        if (pathSumGrid[i][j] <= pathSum) {\n            return;\n        }\n\
    \        pathSumGrid[i][j] = pathSum;\n        path.push(grid[i][j]);\n      \
    \  pathSum += grid[i][j];\n        if (pathSum < minPathSum) {\n            minPathSum\
    \ = pathSum;\n            minPath = path.slice();\n            minPathSumGrid\
    \ = pathSumGrid.map(row => row.slice());\n        }\n        findMinPath(i - 1,\
    \ j, k - 1, path, path", "    // your code goes here\n    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Array(n);\n    for (let i\
    \ = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    for (let i = 0; i < n;\
    \ i++) {\n        for (let j = 0; j < m; j++) {\n            let path = [];\n\
    \            let sum = 0;\n            dfs(grid, i, j, k, visited, path, sum);\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            \
    \    minPath = path;\n            }\n        }\n    }\n    return minPath;\n}\n",
  "    // your code here\n    return [];\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let dp: number[][][] = [];\n    for (let i = 0; i <\
    \ n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n    \
    \        dp[i][j] = [];\n            for (let l = 0; l < k; l++) {\n         \
    \       dp[i][j][l] = -1;\n            }\n        }\n    }\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minPath: number[] = [];\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            let path = minPathHelper(grid, i, j,\
    \ k, dp);\n            if (path[path.length - 1] < min) {\n                min\
    \ = path[path.length - 1];\n                minPath = path;\n            }\n \
    \       }\n    }\n    return minPath;\n}\n", "    let minPath: number[] = [];\n\
    \    let minSum: number = Number.MAX_SAFE_INTEGER;\n    let minSumPath: number[]\
    \ = [];\n    let N: number = grid.length;\n    let M: number = grid[0].length;\n\
    \    let visited: boolean[][] = [];\n    for (let i: number = 0; i < N; i++) {\n\
    \        visited[i] = [];\n        for (let j: number = 0; j < M; j++) {\n   \
    \         visited[i][j] = false;\n        }\n    }\n    for (let i: number = 0;\
    \ i < N; i++) {\n        for (let j: number = 0; j < M; j++) {\n            minPath\
    \ = [];\n            minSumPath = [];\n            minSum = Number.MAX_SAFE_INTEGER;\n\
    \            visited = [];\n            for (let i: number = 0; i < N; i++) {\n\
    \                visited[i] = [];\n                for (let j: number = 0; j <\
    \ M; j++) {\n                    visited[i][j] = false;\n                }\n \
    \           }\n            findMinPath(i, j, k, 0, grid, visited, minPath, minSumPath,\
    \ minSum);\n        }\n    }\n    return minSumPath;\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let minPath = [];\n    let minSum = Infinity;\n\
    \    let minPaths = [];\n    let visited = [];\n    for (let i = 0; i < n; i++)\
    \ {\n        visited[i] = [];\n        for (let j = 0; j < m; j++) {\n       \
    \     visited[i][j] = false;\n        }\n    }\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            let path = [];\n     \
    \       let sum = 0;\n            let paths = [];\n            dfs(i, j, 0, path,\
    \ sum, paths);\n            if (sum < minSum) {\n                minSum = sum;\n\
    \                minPath = path;\n                minPaths = paths;\n        \
    \    }\n        }\n    }\n    return minPath;\n\n    function dfs(i: number, j:\
    \ number, k: number, path: number[], sum: number, paths: number[][]) {\n     \
    \   if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j] || sum > minSum) {\n\
    \            return;\n        }\n        path.push(grid[i][j]);\n        sum +=\
    \ grid[i][j];\n        if (k === 0) {\n            paths.push(path.slice());\n\
    \        }\n        visited[i][j] = true;\n        dfs(i - 1, j, k - 1, path,\
    \ sum, paths);\n        dfs(i + 1, j, k - 1, path, sum, paths);\n        dfs(i,\
    \ j - 1, k - 1, path, sum, paths);\n        dfs(i, j + 1, k - 1, path, sum, paths);\n\
    \        visited[i][j] = false;\n        path.pop();\n    }\n}\n", "    let n\
    \ = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let minPath = new Array(k);\n    let minSum = Infinity;\n    let minPathSum\
    \ = Infinity;\n    let minPathIndex = 0;\n    let minPathSumIndex = 0;\n    let\
    \ dfs = (i: number, j: number, path: number[], pathSum: number, index: number)\
    \ => {\n        if (index === k) {\n            if (pathSum < minPathSum) {\n\
    \                minPathSum = pathSum;\n                minPathSumIndex = 0;\n\
    \                minPath[minPathSumIndex++] = path[0];\n            } else if\
    \ (pathSum === minPathSum) {\n                let i = 0;\n                while\
    \ (i < k && path[i] === minPath[minPathSumIndex - 1]) {\n                    i++;\n\
    \                }\n                if (i === k || path[i] < minPath[minPathSumIndex\
    \ - 1]) {\n                    minPath[minPathSumIndex++] = path[0];\n       \
    \         }\n            }\n            return;\n        }\n        if (i < 0\
    \ || i >= n || j < 0 || j >= m || visited[i][j]) {\n            return;\n    \
    \    }\n        visited[i][j] = true;\n        path[index] = grid[i][j];\n   \
    \     pathSum += grid[i][j];\n        if (pathSum < minSum) {\n            minSum\
    \ = pathSum;\n            minPathIndex = 0;\n            minPath[minPathIndex++]\
    \ = path[0];\n        } else if (pathSum === minSum) {\n            let i = 0;\n\
    \            while (i < k && path[i] === minPath[minPathIndex - 1]) {\n      \
    \          i++;\n            }\n            if (i === k || path[i] < minPath[minPathIndex\
    \ - 1]) {\n                minPath[minPathIndex++] = path[0];\n            }\n\
    \        }\n        dfs", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const visited = new Array(n).fill(0).map(() => new Array(m).fill(false));\n\
    \    const queue = [];\n    const result = [];\n    let min = Infinity;\n    let\
    \ minPath = [];\n    let minPaths = [];\n    let path = [];\n    let paths = [];\n\
    \    let pathLength = 0;\n    let pathLengths = [];\n    let pathValue = 0;\n\
    \    let pathValues = [];\n    let pathValuesList = [];\n    let pathValuesLists\
    \ = [];\n    let pathValuesListsList = [];\n    let pathValuesListsLists = [];\n\
    \    let pathValuesListsListsList = [];\n    let pathValuesListsListsLists = [];\n\
    \    let pathValuesListsListsListsList = [];\n    let pathValuesListsListsListsLists\
    \ = [];\n    let pathValuesListsListsListsListsList = [];\n    let pathValuesListsListsListsListsLists\
    \ = [];\n    let pathValuesListsListsListsListsListsList = [];\n    let pathValuesListsListsListsListsListsLists\
    \ = [];\n    let pathValuesListsListsListsListsListsListsList = [];\n    let pathValuesListsListsListsListsListsListsLists\
    \ = [];\n    let pathValuesListsListsListsListsListsListsListsList = [];\n   \
    \ let pathValuesListsListsListsListsListsListsListsLists = [];\n    let pathValuesListsListsListsListsListsListsListsListsList\
    \ = [];\n    let pathValuesListsListsListsListsListsListsListsListsLists = [];\n\
    \    let pathValuesListsListsListsListsListsListsListsListsListsList = [];\n \
    \   let pathValuesListsListsListsListsListsListsListsListsListsLists = [];\n \
    \   let pathValuesListsListsListsListsListsListsListsListsListsListsList = [];\n\
    \    let pathValuesListsListsL", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    for (let i = 0; i < n;\
    \ i++) {\n        for (let j = 0; j < m; j++) {\n            let path = [];\n\
    \            let sum = 0;\n            let visited = [];\n            for (let\
    \ i = 0; i < n; i++) {\n                visited.push([]);\n                for\
    \ (let j = 0; j < m; j++) {\n                    visited[i].push(false);\n   \
    \             }\n            }\n            dfs(i, j, k, path, sum, visited);\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            \
    \    minPath = path;\n            }\n        }\n    }\n    return minPath;\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let visited = new Set<string>();\n\
    \    let minPath = new Array<number>();\n    let minPathSum = Infinity;\n    let\
    \ minPathSum2 = Infinity;\n    let minPath2 = new Array<number>();\n    let minPathSum3\
    \ = Infinity;\n    let minPath3 = new Array<number>();\n    let minPathSum4 =\
    \ Infinity;\n    let minPath4 = new Array<number>();\n    let minPathSum5 = Infinity;\n\
    \    let minPath5 = new Array<number>();\n    let minPathSum6 = Infinity;\n  \
    \  let minPath6 = new Array<number>();\n    let minPathSum7 = Infinity;\n    let\
    \ minPath7 = new Array<number>();\n    let minPathSum8 = Infinity;\n    let minPath8\
    \ = new Array<number>();\n    let minPathSum9 = Infinity;\n    let minPath9 =\
    \ new Array<number>();\n    let minPathSum10 = Infinity;\n    let minPath10 =\
    \ new Array<number>();\n    let minPathSum11 = Infinity;\n    let minPath11 =\
    \ new Array<number>();\n    let minPathSum12 = Infinity;\n    let minPath12 =\
    \ new Array<number>();\n    let minPathSum13 = Infinity;\n    let minPath13 =\
    \ new Array<number>();\n    let minPathSum14 = Infinity;\n    let minPath14 =\
    \ new Array<number>();\n    let minPathSum15 = Infinity;\n    let minPath15 =\
    \ new Array<number>();\n    let minPathSum16 = Infinity;\n    let minPath16 =\
    \ new Array<number>();\n    let minPathSum17 = Infinity;\n    let minPath17 =\
    \ new Array<number>();\n    let minPathSum18 = Infinity;\n    let minPath18 =\
    \ new Array<number>();\n    let minPathSum19 = Infinity;\n    let minPath19 =\
    \ new Array<number>();\n    let minPathSum20 = Infinity;\n    let minPath20 =\
    \ new Array<number>();\n    let minPathSum21 = Infinity;\n    let minPath21 =\
    \ new Array<number>();", "    // your code goes here\n    return [];\n}\n", " \
    \   let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    let visited = new Array(n).fill(0).map(()\
    \ => new Array(m).fill(false));\n    let dfs = (i: number, j: number, path: number[],\
    \ pathSum: number) => {\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j])\
    \ {\n            return;\n        }\n        path.push(grid[i][j]);\n        pathSum\
    \ += grid[i][j];\n        visited[i][j] = true;\n        if (path.length === k)\
    \ {\n            if (pathSum < minPathSum) {\n                minPathSum = pathSum;\n\
    \                minPath = path.slice();\n            }\n        } else {\n  \
    \          dfs(i - 1, j, path, pathSum);\n            dfs(i + 1, j, path, pathSum);\n\
    \            dfs(i, j - 1, path, pathSum);\n            dfs(i, j + 1, path, pathSum);\n\
    \        }\n        path.pop();\n        pathSum -= grid[i][j];\n        visited[i][j]\
    \ = false;\n    };\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n\
    }\n", "    const n = grid.length;\n    const m = grid[0].length;\n    const visited\
    \ = new Set<string>();\n    const queue = [[0, 0, [grid[0][0]]]];\n    while (queue.length\
    \ > 0) {\n        const [i, j, path] = queue.shift()!;\n        if (path.length\
    \ === k) {\n            return path;\n        }\n        if (i > 0 && !visited.has(`${i\
    \ - 1},${j}`)) {\n            visited.add(`${i - 1},${j}`);\n            queue.push([i\
    \ - 1, j, [...path, grid[i - 1][j]]]);\n        }\n        if (i < n - 1 && !visited.has(`${i\
    \ + 1},${j}`)) {\n            visited.add(`${i + 1},${j}`);\n            queue.push([i\
    \ + 1, j, [...path, grid[i + 1][j]]]);\n        }\n        if (j > 0 && !visited.has(`${i},${j\
    \ - 1}`)) {\n            visited.add(`${i},${j - 1}`);\n            queue.push([i,\
    \ j - 1, [...path, grid[i][j - 1]]]);\n        }\n        if (j < m - 1 && !visited.has(`${i},${j\
    \ + 1}`)) {\n            visited.add(`${i},${j + 1}`);\n            queue.push([i,\
    \ j + 1, [...path, grid[i][j + 1]]]);\n        }\n    }\n    return [];\n}\n",
  "    // Your code here\n    return [];\n}\n", "    // your code here\n    return\
    \ [];\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let visited\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new\
    \ Array(m).fill(false);\n    }\n    let minPath = new Array(k);\n    let minPathSum\
    \ = Infinity;\n    let minPathSumIndex = -1;\n    let minPathSumIndex2 = -1;\n\
    \    let minPathSumIndex3 = -1;\n    let minPathSumIndex4 = -1;\n    let minPathSumIndex5\
    \ = -1;\n    let minPathSumIndex6 = -1;\n    let minPathSumIndex7 = -1;\n    let\
    \ minPathSumIndex8 = -1;\n    let minPathSumIndex9 = -1;\n    let minPathSumIndex10\
    \ = -1;\n    let minPathSumIndex11 = -1;\n    let minPathSumIndex12 = -1;\n  \
    \  let minPathSumIndex13 = -1;\n    let minPathSumIndex14 = -1;\n    let minPathSumIndex15\
    \ = -1;\n    let minPathSumIndex16 = -1;\n    let minPathSumIndex17 = -1;\n  \
    \  let minPathSumIndex18 = -1;\n    let minPathSumIndex19 = -1;\n    let minPathSumIndex20\
    \ = -1;\n    let minPathSumIndex21 = -1;\n    let minPathSumIndex22 = -1;\n  \
    \  let minPathSumIndex23 = -1;\n    let minPathSumIndex24 = -1;\n    let minPathSumIndex25\
    \ = -1;\n    let minPathSumIndex26 = -1;\n    let minPathSumIndex27 = -1;\n  \
    \  let minPathSumIndex28 = -1;\n    let minPathSumIndex29 = -1;\n    let minPathSumIndex30\
    \ = -1;\n    let minPathSumIndex31 = -1;\n    let minPathSumIndex32 = -1;\n  \
    \  let minPathSumIndex33 = -1;\n    let minPathSumIndex34 = -1;\n    let minPathSumIndex35\
    \ = -1;\n    let minPathSumIndex36", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = new Array(m).fill(false);\n    }\n    let minPath = new Array(k).fill(Infinity);\n\
    \    let minPathValue = Infinity;\n    for (let i = 0; i < n; i++) {\n       \
    \ for (let j = 0; j < m; j++) {\n            dfs(i, j, 0, grid[i][j], grid);\n\
    \        }\n    }\n    return minPath;\n\n    function dfs(i: number, j: number,\
    \ depth: number, currPathValue: number, grid: number[][]) {\n        if (depth\
    \ == k) {\n            if (currPathValue < minPathValue) {\n                minPathValue\
    \ = currPathValue;\n                minPath = new Array(k).fill(Infinity);\n \
    \           }\n            return;\n        }\n        if (currPathValue > minPathValue)\
    \ {\n            return;\n        }\n        visited[i][j] = true;\n        if\
    \ (i > 0 && !visited[i - 1][j]) {\n            dfs(i - 1, j, depth + 1, currPathValue\
    \ * 10 + grid[i - 1][j], grid);\n        }\n        if (i < n - 1 && !visited[i\
    \ + 1][j]) {\n            dfs(i + 1, j, depth + 1, currPathValue * 10 + grid[i\
    \ + 1][j], grid);\n        }\n        if (j > 0 && !visited[i][j - 1]) {\n   \
    \         dfs(i, j - 1, depth + 1, currPathValue * 10 + grid[i][j - 1], grid);\n\
    \        }\n        if (j < m - 1 && !visited[i][j + 1]) {\n            dfs(i,\
    \ j + 1, depth + 1, currPathValue * 10 + grid[i][j + 1], grid);\n        }\n \
    \       visited[i][j] = false;\n    }\n}", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n\
    \    let visited = [];\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = [];\n        for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n\
    \        }\n    }\n    function dfs(i: number, j: number, path: number[], pathSum:\
    \ number) {\n        if (path.length === k) {\n            if (pathSum < minPathSum)\
    \ {\n                minPathSum = pathSum;\n                minPath = path;\n\
    \            }\n            return;\n        }\n        if (i < 0 || i >= n ||\
    \ j < 0 || j >= m || visited[i][j]) {\n            return;\n        }\n      \
    \  visited[i][j] = true;\n        dfs(i - 1, j, path.concat(grid[i][j]), pathSum\
    \ + grid[i][j]);\n        dfs(i + 1, j, path.concat(grid[i][j]), pathSum + grid[i][j]);\n\
    \        dfs(i, j - 1, path.concat(grid[i][j]), pathSum + grid[i][j]);\n     \
    \   dfs(i, j + 1, path.concat(grid[i][j]), pathSum + grid[i][j]);\n        visited[i][j]\
    \ = false;\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n\
    }\n", "  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new\
    \ Array(n).fill(0).map(() => new Array(m).fill(0).map(() => new Array(k + 1).fill(Infinity)));\n\
    \  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][1]\
    \ = grid[i][j];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j =\
    \ 0; j < m; j++) {\n      for (let l = 2; l <= k; l++) {\n        if (i - 1 >=\
    \ 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n\
    \        }\n        if (i + 1 < n) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j - 1 >= 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n        }\n        if (j + 1\
    \ < m) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let\
    \ minJ = -1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      if (dp[i][j][k] < min) {\n        min = dp[i][j][k];\n        minI\
    \ = i;\n        minJ = j;\n      }\n    }\n  }\n  const res = [];\n  let i = minI;\n\
    \  let j = minJ", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp = Array(n).fill(null).map(() => Array(m).fill(null).map(() => Array(k\
    \ + 1).fill(Infinity)));\n    const path = Array(n).fill(null).map(() => Array(m).fill(null).map(()\
    \ => Array(k + 1).fill(null)));\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            dp[i][j][1] = grid[i][j];\n         \
    \   path[i][j][1] = grid[i][j];\n        }\n    }\n    for (let i = 0; i < n;\
    \ i++) {\n        for (let j = 0; j < m; j++) {\n            for (let l = 2; l\
    \ <= k; l++) {\n                if (i > 0) {\n                    if (dp[i - 1][j][l\
    \ - 1] < dp[i][j][l]) {\n                        dp[i][j][l] = dp[i - 1][j][l\
    \ - 1];\n                        path[i][j][l] = path[i - 1][j][l - 1].concat(grid[i][j]);\n\
    \                    }\n                }\n                if (j > 0) {\n    \
    \                if (dp[i][j - 1][l - 1] < dp[i][j][l]) {\n                  \
    \      dp[i][j][l] = dp[i][j - 1][l - 1];\n                        path[i][j][l]\
    \ = path[i][j - 1][l - 1].concat(grid[i][j]);\n                    }\n       \
    \         }\n                if (i < n - 1) {\n                    if (dp[i +\
    \ 1][j][l - 1] < dp[i][j][l]) {\n                        dp[i][j][l] = dp[i +\
    \ 1][j][l - 1];\n                        path[i][j][l] = path[i + 1][j][l - 1].concat(grid[",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2\
    \ = [];\n    let minPathSum3 = Infinity;\n    let minPath3 = [];\n    let minPathSum4\
    \ = Infinity;\n    let minPath4 = [];\n    let minPathSum5 = Infinity;\n    let\
    \ minPath5 = [];\n    let minPathSum6 = Infinity;\n    let minPath6 = [];\n  \
    \  let minPathSum7 = Infinity;\n    let minPath7 = [];\n    let minPathSum8 =\
    \ Infinity;\n    let minPath8 = [];\n    let minPathSum9 = Infinity;\n    let\
    \ minPath9 = [];\n    let minPathSum10 = Infinity;\n    let minPath10 = [];\n\
    \    let minPathSum11 = Infinity;\n    let minPath11 = [];\n    let minPathSum12\
    \ = Infinity;\n    let minPath12 = [];\n    let minPathSum13 = Infinity;\n   \
    \ let minPath13 = [];\n    let minPathSum14 = Infinity;\n    let minPath14 = [];\n\
    \    let minPathSum15 = Infinity;\n    let minPath15 = [];\n    let minPathSum16\
    \ = Infinity;\n    let minPath16 = [];\n    let minPathSum17 = Infinity;\n   \
    \ let minPath17 = [];\n    let minPathSum18 = Infinity;\n    let minPath18 = [];\n\
    \    let minPathSum19 = Infinity;\n    let minPath19 = [];\n    let minPathSum20\
    \ = Infinity;\n    let minPath20 = [];\n    let minPathSum21 = Infinity;\n   \
    \ let minPath21 = [];\n    let minPathSum22 = Infinity;\n    let minPath22 = [];\n\
    \    let minPathSum23 = Infinity;\n    let minPath23 = [];\n    let minPathSum24\
    \ = Infinity;\n    let minPath24 = [];\n    let minPathSum25 = Infinity;\n   \
    \ let minPath25 = [];\n    let minPathSum26 = Infinity;\n    let minPath26 = [];\n\
    \    let minPathSum27 = Infinity;\n    let minPath27 = [];\n    let minPathSum28\
    \ =", "    // TODO\n    return [];\n}\n", "    let n = grid.length;\n    let m\
    \ = grid[0].length;\n    let visited = new Array(n);\n    for (let i = 0; i <\
    \ n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n    let minPath\
    \ = new Array(k);\n    let minPathSum = Number.MAX_SAFE_INTEGER;\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i,\
    \ j, 0, 0, 0);\n        }\n    }\n    return minPath;\n\n    function dfs(i: number,\
    \ j: number, pathSum: number, pathLen: number, prev: number) {\n        if (i\
    \ < 0 || i >= n || j < 0 || j >= m || visited[i][j] || pathLen >= k) {\n     \
    \       return;\n        }\n        if (pathLen === k - 1) {\n            if (pathSum\
    \ < minPathSum) {\n                minPathSum = pathSum;\n                minPath[pathLen]\
    \ = grid[i][j];\n            } else if (pathSum === minPathSum) {\n          \
    \      if (grid[i][j] < minPath[pathLen]) {\n                    minPath[pathLen]\
    \ = grid[i][j];\n                }\n            }\n            return;\n     \
    \   }\n        visited[i][j] = true;\n        dfs(i - 1, j, pathSum + grid[i][j]\
    \ * (prev + 1), pathLen + 1, grid[i][j]);\n        dfs(i + 1, j, pathSum + grid[i][j]\
    \ * (prev + 1), pathLen + 1, grid[i][j]);\n        dfs(i, j - 1, pathSum + grid[i][j]\
    \ * (prev + 1), pathLen + 1, grid[i][j]);\n        dfs(i, j + 1, pathSum + grid[i][j]\
    \ * (prev + 1), pathLen + 1, grid[i][j]);\n        visited[i][j] = false;\n  \
    \  }\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let dp\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(m);\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j] = new Array(k + 1);\n\
    \            for (let l = 0; l <= k; l++) {\n                dp[i][j][l] = new\
    \ Array(2);\n                dp[i][j][l][0] = Infinity;\n                dp[i][j][l][1]\
    \ = [];\n            }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j][1][0] = grid[i][j];\n\
    \            dp[i][j][1][1] = [grid[i][j]];\n        }\n    }\n    for (let l\
    \ = 2; l <= k; l++) {\n        for (let i = 0; i < n; i++) {\n            for\
    \ (let j = 0; j < m; j++) {\n                let min = Infinity;\n           \
    \     let minPath = [];\n                if (i > 0) {\n                    let\
    \ val = dp[i - 1][j][l - 1][0];\n                    if (val < min) {\n      \
    \                  min = val;\n                        minPath = dp[i - 1][j][l\
    \ - 1][1];\n                    }\n                }\n                if (i <\
    \ n - 1) {\n                    let val = dp[i + 1][j][l - 1][0];\n          \
    \          if (val < min) {\n                        min = val;\n            \
    \            minPath = dp[i + 1][j][l - 1][1];\n                    }\n      \
    \          }\n                if (j > 0) {\n                    let val = dp[i][j\
    \ - 1][l - 1][0];\n                    if (val < min) {\n                    \
    \    min = val;\n                        minPath = dp[i][j - 1][l - 1][", "  \
    \  const n = grid.length;\n    const m = grid[0].length;\n    const visited =\
    \ new Set<number>();\n    const queue = new PriorityQueue<number>((a, b) => a\
    \ - b);\n    queue.push(grid[0][0]);\n    visited.add(grid[0][0]);\n    let path\
    \ = [grid[0][0]];\n    let minPath = path;\n    let minPathSum = path.reduce((a,\
    \ b) => a + b, 0);\n    while (queue.size() > 0) {\n        const curr = queue.pop();\n\
    \        const currPath = path.slice(0, path.indexOf(curr) + 1);\n        const\
    \ currPathSum = currPath.reduce((a, b) => a + b, 0);\n        if (currPath.length\
    \ === k) {\n            if (currPathSum < minPathSum) {\n                minPath\
    \ = currPath;\n                minPathSum = currPathSum;\n            }\n    \
    \        continue;\n        }\n        const currRow = Math.floor((curr - 1) /\
    \ n);\n        const currCol = (curr - 1) % n;\n        const neighbors = [\n\
    \            [currRow - 1, currCol],\n            [currRow + 1, currCol],\n  \
    \          [currRow, currCol - 1],\n            [currRow, currCol + 1],\n    \
    \    ];\n        for (const [row, col] of neighbors) {\n            if (row <\
    \ 0 || row >= n || col < 0 || col >= m) {\n                continue;\n       \
    \     }\n            const neighbor = grid[row][col];\n            if (visited.has(neighbor))\
    \ {\n                continue;\n            }\n            visited.add(neighbor);\n\
    \            queue.push(neighbor);\n            path = currPath.concat(neighbor);\n\
    \        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let visited = new Array(n);\n    for (let i = 0; i\
    \ < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n    let\
    \ minPath = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let minPaths = [];\n    let minPathsSum = [];\n    function dfs(i: number,\
    \ j: number, path: number[], sum: number) {\n        if (sum > minSum) {\n   \
    \         return;\n        }\n        if (path.length === k) {\n            if\
    \ (sum < minSum) {\n                minSum = sum;\n                minPath = path;\n\
    \            } else if (sum === minSum) {\n                if (path < minPath)\
    \ {\n                    minPath = path;\n                }\n            }\n \
    \           return;\n        }\n        if (i < 0 || i >= n || j < 0 || j >= m\
    \ || visited[i][j]) {\n            return;\n        }\n        visited[i][j] =\
    \ true;\n        dfs(i + 1, j, path.concat(grid[i][j]), sum + grid[i][j]);\n \
    \       dfs(i - 1, j, path.concat(grid[i][j]), sum + grid[i][j]);\n        dfs(i,\
    \ j + 1, path.concat(grid[i][j]), sum + grid[i][j]);\n        dfs(i, j - 1, path.concat(grid[i][j]),\
    \ sum + grid[i][j]);\n        visited[i][j] = false;\n    }\n    for (let i =\
    \ 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i,\
    \ j, [], 0);\n        }\n    }\n    return minPath;\n}\n", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const visited = new Array(n).fill(0).map(()\
    \ => new Array(m).fill(false));\n    const queue = [[0, 0, [grid[0][0]]]];\n \
    \   const res = [];\n    while (queue.length > 0) {\n        const [i, j, path]\
    \ = queue.shift();\n        if (path.length === k) {\n            if (res.length\
    \ === 0 || res.join('') > path.join('')) {\n                res.length = 0;\n\
    \                res.push(...path);\n            }\n            continue;\n  \
    \      }\n        if (i > 0 && !visited[i - 1][j]) {\n            visited[i -\
    \ 1][j] = true;\n            queue.push([i - 1, j, [...path, grid[i - 1][j]]]);\n\
    \        }\n        if (i < n - 1 && !visited[i + 1][j]) {\n            visited[i\
    \ + 1][j] = true;\n            queue.push([i + 1, j, [...path, grid[i + 1][j]]]);\n\
    \        }\n        if (j > 0 && !visited[i][j - 1]) {\n            visited[i][j\
    \ - 1] = true;\n            queue.push([i, j - 1, [...path, grid[i][j - 1]]]);\n\
    \        }\n        if (j < m - 1 && !visited[i][j + 1]) {\n            visited[i][j\
    \ + 1] = true;\n            queue.push([i, j + 1, [...path, grid[i][j + 1]]]);\n\
    \        }\n    }\n    return res;\n}\n", "    // your code here\n    return [];\n\
    }\n", "    const n = grid.length;\n    const m = grid[0].length;\n    const visited\
    \ = new Set<string>();\n    const queue = [[0, 0, [grid[0][0]]]];\n    while (queue.length\
    \ > 0) {\n        const [i, j, path] = queue.shift()!;\n        if (path.length\
    \ === k) {\n            return path;\n        }\n        if (i > 0 && !visited.has(`${i\
    \ - 1},${j}`)) {\n            visited.add(`${i - 1},${j}`);\n            queue.push([i\
    \ - 1, j, [...path, grid[i - 1][j]]]);\n        }\n        if (i < n - 1 && !visited.has(`${i\
    \ + 1},${j}`)) {\n            visited.add(`${i + 1},${j}`);\n            queue.push([i\
    \ + 1, j, [...path, grid[i + 1][j]]]);\n        }\n        if (j > 0 && !visited.has(`${i},${j\
    \ - 1}`)) {\n            visited.add(`${i},${j - 1}`);\n            queue.push([i,\
    \ j - 1, [...path, grid[i][j - 1]]]);\n        }\n        if (j < m - 1 && !visited.has(`${i},${j\
    \ + 1}`)) {\n            visited.add(`${i},${j + 1}`);\n            queue.push([i,\
    \ j + 1, [...path, grid[i][j + 1]]]);\n        }\n    }\n    return [];\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let dp: number[][][]\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let\
    \ j = 0; j < m; j++) {\n            dp[i][j] = [];\n            for (let l = 0;\
    \ l < k; l++) {\n                dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n    \
    \        }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n   \
    \ }\n    for (let l = 1; l < k; l++) {\n        for (let i = 0; i < n; i++) {\n\
    \            for (let j = 0; j < m; j++) {\n                if (i > 0) {\n   \
    \                 dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n\
    \                }\n                if (i < n - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n         \
    \       if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n                }\n                if (j < m - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \                }\n            }\n        }\n    }\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minI = -1;\n    let minJ = -1;\n    for (let i = 0; i < n; i++) {\n \
    \       for (let j = 0; j < m; j++) {", "    const n = grid.length;\n    const\
    \ m = grid[0].length;\n    const visited = new Array(n).fill(0).map(() => new\
    \ Array(m).fill(false));\n    const queue = [[0, 0, [grid[0][0]]]];\n    let minPath:\
    \ number[] = [];\n    let minSum = Infinity;\n    while (queue.length) {\n   \
    \     const [i, j, path] = queue.shift()!;\n        if (path.length === k) {\n\
    \            const sum = path.reduce((a, b) => a + b, 0);\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n                minPath = path;\n\
    \            }\n            continue;\n        }\n        if (i > 0 && !visited[i\
    \ - 1][j]) {\n            visited[i - 1][j] = true;\n            queue.push([i\
    \ - 1, j, [...path, grid[i - 1][j]]]);\n        }\n        if (i < n - 1 && !visited[i\
    \ + 1][j]) {\n            visited[i + 1][j] = true;\n            queue.push([i\
    \ + 1, j, [...path, grid[i + 1][j]]]);\n        }\n        if (j > 0 && !visited[i][j\
    \ - 1]) {\n            visited[i][j - 1] = true;\n            queue.push([i, j\
    \ - 1, [...path, grid[i][j - 1]]]);\n        }\n        if (j < m - 1 && !visited[i][j\
    \ + 1]) {\n            visited[i][j + 1] = true;\n            queue.push([i, j\
    \ + 1, [...path, grid[i][j + 1]]]);\n        }\n    }\n    return minPath;\n}\n",
  "    const n = grid.length;\n    const m = grid[0].length;\n    const dp = Array(n).fill(null).map(()\
    \ => Array(m).fill(null).map(() => Array(k + 1).fill(Infinity)));\n    const path\
    \ = Array(n).fill(null).map(() => Array(m).fill(null).map(() => Array(k + 1).fill(null)));\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          dp[i][j][1] = grid[i][j];\n            path[i][j][1] = [grid[i][j]];\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            for (let l = 2; l <= k; l++) {\n                const\
    \ neighbors = getNeighbors(i, j, n, m);\n                for (const [ni, nj] of\
    \ neighbors) {\n                    const newPath = [...path[ni][nj][l - 1], grid[i][j]];\n\
    \                    if (newPath < path[i][j][l]) {\n                        path[i][j][l]\
    \ = newPath;\n                        dp[i][j][l] = dp[ni][nj][l - 1] + grid[i][j];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   let min = Infinity;\n    let minPath = null;\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            if (dp[i][j][k] < min)\
    \ {\n                min = dp[i][j][k];\n                minPath = path[i][j][k];\n\
    \            }\n        }\n    }\n    return minPath;\n}\n", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const visited = new Set<number>();\n    const\
    \ queue = new PriorityQueue<number>();\n    const path = new PriorityQueue<number>();\n\
    \    const pathMap = new Map<number, number>();\n    const pathList = new Array<number>();\n\
    \    const result = new Array<number>();\n    for (let i = 0; i < n; i++) {\n\
    \        for (let j = 0; j < m; j++) {\n            const key = i * m + j;\n \
    \           queue.enqueue(key, grid[i][j]);\n            pathMap.set(key, key);\n\
    \        }\n    }\n    while (!queue.isEmpty()) {\n        const key = queue.dequeue();\n\
    \        const i = Math.floor(key / m);\n        const j = key % m;\n        if\
    \ (visited.has(key)) {\n            continue;\n        }\n        visited.add(key);\n\
    \        path.enqueue(key, grid[i][j]);\n        pathList.push(key);\n       \
    \ if (pathList.length === k) {\n            break;\n        }\n        if (i >\
    \ 0) {\n            const up = (i - 1) * m + j;\n            if (!visited.has(up))\
    \ {\n                queue.enqueue(up, grid[i - 1][j]);\n                pathMap.set(up,\
    \ key);\n            }\n        }\n        if (i < n - 1) {\n            const\
    \ down = (i + 1) * m + j;\n            if (!visited.has(down)) {\n           \
    \     queue.enqueue(down, grid[i + 1][j]);\n                pathMap.set(down,\
    \ key);\n            }\n        }\n        if (j > 0) {\n            const left\
    \ = i * m + j - 1;\n            if (!visited.has(left)) {\n                queue.enqueue(left,\
    \ grid[i][j - 1]);\n                pathMap.set(left, key);\n            }\n \
    \       }\n        if (j < m - 1) {\n            const right = i * m + j + 1",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minSum = Infinity;\n    let minPaths = [];\n    let visited = [];\n \
    \   for (let i = 0; i < n; i++) {\n        visited[i] = [];\n        for (let\
    \ j = 0; j < m; j++) {\n            visited[i][j] = false;\n        }\n    }\n\
    \    let dfs = (i: number, j: number, sum: number, path: number[]) => {\n    \
    \    if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n            return;\n\
    \        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n  \
    \      sum += grid[i][j];\n        if (path.length === k) {\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n                minPath = path.slice();\n\
    \                minPaths = [];\n            } else if (sum === minSum) {\n  \
    \              minPaths.push(path.slice());\n            }\n        } else {\n\
    \            dfs(i - 1, j, sum, path);\n            dfs(i + 1, j, sum, path);\n\
    \            dfs(i, j - 1, sum, path);\n            dfs(i, j + 1, sum, path);\n\
    \        }\n        path.pop();\n        visited[i][j] = false;\n    };\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n         \
    \   dfs(i, j, 0, []);\n        }\n    }\n    if (minPaths.length === 0) {\n  \
    \      return minPath;\n    }\n    minPaths.sort((a, b) => {\n        for (let\
    \ i = 0; i < k; i++) {\n            if (a[i] < b[i]) {\n                return\
    \ -1;\n            } else if (a[i] > b[i]) {\n                return 1;\n    \
    \        }\n        }\n        return 0", "    let n = grid.length;\n    let m\
    \ = grid[0].length;\n    let minPath = [];\n    let minSum = Infinity;\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n         \
    \   let path = [];\n            let sum = 0;\n            let visited = [];\n\
    \            for (let i = 0; i < n; i++) {\n                visited.push([]);\n\
    \                for (let j = 0; j < m; j++) {\n                    visited[i].push(false);\n\
    \                }\n            }\n            dfs(i, j, k, grid, path, sum, visited);\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            \
    \    minPath = path;\n            }\n        }\n    }\n    return minPath;\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let dp = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(m);\n        for\
    \ (let j = 0; j < m; j++) {\n            dp[i][j] = new Array(k + 1);\n      \
    \      for (let l = 0; l <= k; l++) {\n                dp[i][j][l] = new Array(2);\n\
    \                dp[i][j][l][0] = Number.MAX_SAFE_INTEGER;\n                dp[i][j][l][1]\
    \ = Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n    dp[0][0][1][0]\
    \ = grid[0][0];\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j\
    \ < m; j++) {\n            for (let l = 1; l <= k; l++) {\n                if\
    \ (i > 0) {\n                    if (dp[i - 1][j][l - 1][0] < dp[i][j][l][0])\
    \ {\n                        dp[i][j][l][0] = dp[i - 1][j][l - 1][0];\n      \
    \                  dp[i][j][l][1] = dp[i - 1][j][l - 1][1];\n                \
    \    } else if (dp[i - 1][j][l - 1][0] === dp[i][j][l][0]) {\n               \
    \         dp[i][j][l][1] = Math.min(dp[i - 1][j][l - 1][1], dp[i][j][l][1]);\n\
    \                    }\n                }\n                if (j > 0) {\n    \
    \                if (dp[i][j - 1][l - 1][0] < dp[i][j][l][0]) {\n            \
    \            dp[i][j][l][0] = dp[i][j - 1][l - 1][0];\n                      \
    \  dp[i][j][l", "    let n = grid.length;\n    let m = grid[0].length;\n    let\
    \ visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = new Array(m).fill(false);\n    }\n    let minPath = new Array(k);\n    let\
    \ minPathSum = Infinity;\n    let minPathSumIndex = -1;\n    let minPathSumIndexI\
    \ = -1;\n    let minPathSumIndexJ = -1;\n    let dfs = function (i: number, j:\
    \ number, path: number[], pathSum: number, pathSumIndex: number) {\n        if\
    \ (pathSum > minPathSum) {\n            return;\n        }\n        if (path.length\
    \ === k) {\n            if (pathSum < minPathSum) {\n                minPathSum\
    \ = pathSum;\n                minPathSumIndex = pathSumIndex;\n              \
    \  minPathSumIndexI = i;\n                minPathSumIndexJ = j;\n            \
    \    for (let i = 0; i < k; i++) {\n                    minPath[i] = path[i];\n\
    \                }\n            } else if (pathSum === minPathSum) {\n       \
    \         let i = 0;\n                while (i < k && path[i] === minPath[i])\
    \ {\n                    i++;\n                }\n                if (i < k &&\
    \ path[i] < minPath[i]) {\n                    minPathSumIndex = pathSumIndex;\n\
    \                    minPathSumIndexI = i;\n                    minPathSumIndexJ\
    \ = j;\n                    for (let i = 0; i < k; i++) {\n                  \
    \      minPath[i] = path[i];\n                    }\n                }\n     \
    \       }\n            return;\n        }\n        if (i > 0 && !visited[i - 1][j])\
    \ {\n            visited[i - 1][j] = true;\n            path[pathSumIndex] = grid[i\
    \ - 1][j];\n            dfs(i - 1, j, path, pathSum + grid[i - 1][j], pathSumIndex\
    \ + 1);\n            visited[i - 1][j] = false;\n        }\n        if (i < n\
    \ - 1 &&", "    let rows = grid.length;\n    let cols = grid[0].length;\n    let\
    \ minPath: number[] = [];\n    let minPathSum = Number.MAX_SAFE_INTEGER;\n   \
    \ let visited: boolean[][] = [];\n    for (let i = 0; i < rows; i++) {\n     \
    \   visited[i] = [];\n        for (let j = 0; j < cols; j++) {\n            visited[i][j]\
    \ = false;\n        }\n    }\n    for (let i = 0; i < rows; i++) {\n        for\
    \ (let j = 0; j < cols; j++) {\n            let path: number[] = [];\n       \
    \     let pathSum = 0;\n            dfs(i, j, k, path, pathSum);\n        }\n\
    \    }\n    return minPath;\n\n    function dfs(i: number, j: number, k: number,\
    \ path: number[], pathSum: number) {\n        if (i < 0 || i >= rows || j < 0\
    \ || j >= cols || visited[i][j]) {\n            return;\n        }\n        if\
    \ (path.length === k) {\n            if (pathSum < minPathSum) {\n           \
    \     minPathSum = pathSum;\n                minPath = path.slice();\n       \
    \     }\n            return;\n        }\n        visited[i][j] = true;\n     \
    \   path.push(grid[i][j]);\n        pathSum += grid[i][j];\n        dfs(i - 1,\
    \ j, k, path, pathSum);\n        dfs(i + 1, j, k, path, pathSum);\n        dfs(i,\
    \ j - 1, k, path, pathSum);\n        dfs(i, j + 1, k, path, pathSum);\n      \
    \  path.pop();\n        pathSum -= grid[i][j];\n        visited[i][j] = false;\n\
    \    }\n}\n", "    const n = grid.length;\n    const m = grid[0].length;\n   \
    \ const visited = new Set<string>();\n    const queue = new Queue<[number[], number[]]>();\n\
    \    queue.enqueue([[], []]);\n    while (!queue.isEmpty()) {\n        const [path,\
    \ pos] = queue.dequeue();\n        if (path.length === k) {\n            return\
    \ path;\n        }\n        const [x, y] = pos;\n        const key = `${x},${y}`;\n\
    \        if (visited.has(key)) {\n            continue;\n        }\n        visited.add(key);\n\
    \        for (const [dx, dy] of [[-1, 0], [1, 0], [0, -1], [0, 1]]) {\n      \
    \      const nx = x + dx;\n            const ny = y + dy;\n            if (nx\
    \ < 0 || nx >= n || ny < 0 || ny >= m) {\n                continue;\n        \
    \    }\n            queue.enqueue([[...path, grid[nx][ny]], [nx, ny]]);\n    \
    \    }\n    }\n    return [];\n}\n", "    let minPath = [];\n    let minPathValue\
    \ = Infinity;\n    let currentPath = [];\n    let currentPathValue = 0;\n    let\
    \ visited = [];\n    for (let i = 0; i < grid.length; i++) {\n        visited.push([]);\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            visited[i].push(false);\n\
    \        }\n    }\n    for (let i = 0; i < grid.length; i++) {\n        for (let\
    \ j = 0; j < grid[i].length; j++) {\n            currentPath = [];\n         \
    \   currentPathValue = 0;\n            visited = [];\n            for (let i =\
    \ 0; i < grid.length; i++) {\n                visited.push([]);\n            \
    \    for (let j = 0; j < grid[i].length; j++) {\n                    visited[i].push(false);\n\
    \                }\n            }\n            dfs(grid, i, j, k, currentPath,\
    \ currentPathValue, visited);\n            if (currentPathValue < minPathValue)\
    \ {\n                minPathValue = currentPathValue;\n                minPath\
    \ = currentPath;\n            }\n        }\n    }\n    return minPath;\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    let visited = [];\n    for (let i = 0; i\
    \ < n; i++) {\n        visited[i] = [];\n        for (let j = 0; j < m; j++) {\n\
    \            visited[i][j] = false;\n        }\n    }\n    function dfs(i: number,\
    \ j: number, path: number[], pathSum: number) {\n        if (path.length === k)\
    \ {\n            if (pathSum < minPathSum) {\n                minPathSum = pathSum;\n\
    \                minPath = path;\n            }\n            return;\n       \
    \ }\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n    \
    \        return;\n        }\n        visited[i][j] = true;\n        dfs(i - 1,\
    \ j, path.concat(grid[i][j]), pathSum + grid[i][j]);\n        dfs(i + 1, j, path.concat(grid[i][j]),\
    \ pathSum + grid[i][j]);\n        dfs(i, j - 1, path.concat(grid[i][j]), pathSum\
    \ + grid[i][j]);\n        dfs(i, j + 1, path.concat(grid[i][j]), pathSum + grid[i][j]);\n\
    \        visited[i][j] = false;\n    }\n    for (let i = 0; i < n; i++) {\n  \
    \      for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n\
    \    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i]\
    \ = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n \
    \           for (let l = 0; l < k; l++) {\n                dp[i][j][l] = Infinity;\n\
    \            }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n\
    \    }\n    for (let l = 1; l < k; l++) {\n        for (let i = 0; i < n; i++)\
    \ {\n            for (let j = 0; j < m; j++) {\n                if (i > 0) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n\
    \                }\n                if (i < n - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n         \
    \       if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n                }\n                if (j < m - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \                }\n            }\n        }\n    }\n    let min = Infinity;\n\
    \    let minI = -1;\n    let minJ = -1;\n    for (let i = 0; i < n; i++) {\n \
    \       for (let j = 0; j < m; j++) {\n            if (dp[i][j][k - 1] < min)\
    \ {", "    const n = grid.length;\n    const m = grid[0].length;\n    const visited\
    \ = new Set<string>();\n    const queue = [[0, 0, 0, []]];\n    while (queue.length\
    \ > 0) {\n        const [i, j, l, path] = queue.shift()!;\n        if (l === k)\
    \ {\n            return path;\n        }\n        if (i > 0 && !visited.has(`${i\
    \ - 1},${j}`)) {\n            visited.add(`${i - 1},${j}`);\n            queue.push([i\
    \ - 1, j, l + 1, [...path, grid[i - 1][j]]]);\n        }\n        if (i < n -\
    \ 1 && !visited.has(`${i + 1},${j}`)) {\n            visited.add(`${i + 1},${j}`);\n\
    \            queue.push([i + 1, j, l + 1, [...path, grid[i + 1][j]]]);\n     \
    \   }\n        if (j > 0 && !visited.has(`${i},${j - 1}`)) {\n            visited.add(`${i},${j\
    \ - 1}`);\n            queue.push([i, j - 1, l + 1, [...path, grid[i][j - 1]]]);\n\
    \        }\n        if (j < m - 1 && !visited.has(`${i},${j + 1}`)) {\n      \
    \      visited.add(`${i},${j + 1}`);\n            queue.push([i, j + 1, l + 1,\
    \ [...path, grid[i][j + 1]]]);\n        }\n    }\n    return [];\n}\n", "    const\
    \ n = grid.length;\n    const m = grid[0].length;\n    const visited = new Set<string>();\n\
    \    const queue = [[0, 0, [grid[0][0]]]];\n    while (queue.length > 0) {\n \
    \       const [i, j, path] = queue.shift()!;\n        if (path.length === k) {\n\
    \            return path;\n        }\n        if (i > 0 && !visited.has(`${i -\
    \ 1},${j}`)) {\n            visited.add(`${i - 1},${j}`);\n            queue.push([i\
    \ - 1, j, [...path, grid[i - 1][j]]]);\n        }\n        if (i < n - 1 && !visited.has(`${i\
    \ + 1},${j}`)) {\n            visited.add(`${i + 1},${j}`);\n            queue.push([i\
    \ + 1, j, [...path, grid[i + 1][j]]]);\n        }\n        if (j > 0 && !visited.has(`${i},${j\
    \ - 1}`)) {\n            visited.add(`${i},${j - 1}`);\n            queue.push([i,\
    \ j - 1, [...path, grid[i][j - 1]]]);\n        }\n        if (j < m - 1 && !visited.has(`${i},${j\
    \ + 1}`)) {\n            visited.add(`${i},${j + 1}`);\n            queue.push([i,\
    \ j + 1, [...path, grid[i][j + 1]]]);\n        }\n    }\n    return [];\n}\n",
  "    // your code here\n    return [];\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let minPath: number[] = [];\n    let minSum = Infinity;\n\
    \    let minPaths: number[][] = [];\n    let visited: boolean[][] = [];\n    for\
    \ (let i = 0; i < n; i++) {\n        visited[i] = [];\n        for (let j = 0;\
    \ j < m; j++) {\n            visited[i][j] = false;\n        }\n    }\n    function\
    \ dfs(i: number, j: number, path: number[], sum: number) {\n        if (sum >\
    \ minSum) {\n            return;\n        }\n        if (path.length === k) {\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            \
    \    minPaths = [];\n            }\n            minPaths.push(path);\n       \
    \     return;\n        }\n        if (i > 0 && !visited[i - 1][j]) {\n       \
    \     visited[i - 1][j] = true;\n            dfs(i - 1, j, path.concat(grid[i\
    \ - 1][j]), sum + grid[i - 1][j]);\n            visited[i - 1][j] = false;\n \
    \       }\n        if (i < n - 1 && !visited[i + 1][j]) {\n            visited[i\
    \ + 1][j] = true;\n            dfs(i + 1, j, path.concat(grid[i + 1][j]), sum\
    \ + grid[i + 1][j]);\n            visited[i + 1][j] = false;\n        }\n    \
    \    if (j > 0 && !visited[i][j - 1]) {\n            visited[i][j - 1] = true;\n\
    \            dfs(i, j - 1, path.concat(grid[i][j - 1]), sum + grid[i][j - 1]);\n\
    \            visited[i][j - 1] = false;\n        }\n        if (j < m - 1 && !visited[i][j\
    \ + 1]) {\n            visited[i][j + 1] = true;\n            dfs(i, j + 1, path.concat",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2\
    \ = [];\n    let visited = [];\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = [];\n        for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n\
    \        }\n    }\n    let dfs = function (i: number, j: number, path: number[],\
    \ pathSum: number) {\n        if (path.length === k) {\n            if (pathSum\
    \ < minPathSum) {\n                minPathSum = pathSum;\n                minPath\
    \ = path.slice();\n            } else if (pathSum === minPathSum) {\n        \
    \        if (path < minPath) {\n                    minPath = path.slice();\n\
    \                }\n            }\n            return;\n        }\n        if\
    \ (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n            return;\n\
    \        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n  \
    \      pathSum += grid[i][j];\n        dfs(i + 1, j, path, pathSum);\n       \
    \ dfs(i - 1, j, path, pathSum);\n        dfs(i, j + 1, path, pathSum);\n     \
    \   dfs(i, j - 1, path, pathSum);\n        path.pop();\n        pathSum -= grid[i][j];\n\
    \        visited[i][j] = false;\n    }\n    for (let i = 0; i < n; i++) {\n  \
    \      for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n\
    \    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath: number[] = [];\n    let minPathSum = Infinity;\n    let visited:\
    \ boolean[][] = [];\n    for (let i = 0; i < n; i++) {\n        visited[i] = [];\n\
    \        for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n \
    \       }\n    }\n    function dfs(i: number, j: number, path: number[], pathSum:\
    \ number) {\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j])\
    \ {\n            return;\n        }\n        if (path.length === k) {\n      \
    \      if (pathSum < minPathSum) {\n                minPathSum = pathSum;\n  \
    \              minPath = path.slice();\n            }\n            return;\n \
    \       }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n   \
    \     pathSum += grid[i][j];\n        dfs(i - 1, j, path, pathSum);\n        dfs(i\
    \ + 1, j, path, pathSum);\n        dfs(i, j - 1, path, pathSum);\n        dfs(i,\
    \ j + 1, path, pathSum);\n        path.pop();\n        pathSum -= grid[i][j];\n\
    \        visited[i][j] = false;\n    }\n    for (let i = 0; i < n; i++) {\n  \
    \      for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n\
    \    }\n    return minPath;\n}\n", "    const n = grid.length;\n    const m =\
    \ grid[0].length;\n    const visited = new Array(n).fill(0).map(() => new Array(m).fill(false));\n\
    \    const queue = [[0, 0, 0, [grid[0][0]]]];\n    let minPath = null;\n    while\
    \ (queue.length > 0) {\n        const [i, j, pathLength, path] = queue.shift();\n\
    \        if (pathLength === k) {\n            if (minPath === null || path < minPath)\
    \ {\n                minPath = path;\n            }\n            continue;\n \
    \       }\n        if (minPath !== null && path > minPath) {\n            continue;\n\
    \        }\n        if (i > 0 && !visited[i - 1][j]) {\n            visited[i\
    \ - 1][j] = true;\n            queue.push([i - 1, j, pathLength + 1, [...path,\
    \ grid[i - 1][j]]]);\n        }\n        if (i < n - 1 && !visited[i + 1][j])\
    \ {\n            visited[i + 1][j] = true;\n            queue.push([i + 1, j,\
    \ pathLength + 1, [...path, grid[i + 1][j]]]);\n        }\n        if (j > 0 &&\
    \ !visited[i][j - 1]) {\n            visited[i][j - 1] = true;\n            queue.push([i,\
    \ j - 1, pathLength + 1, [...path, grid[i][j - 1]]]);\n        }\n        if (j\
    \ < m - 1 && !visited[i][j + 1]) {\n            visited[i][j + 1] = true;\n  \
    \          queue.push([i, j + 1, pathLength + 1, [...path, grid[i][j + 1]]]);\n\
    \        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let minPath: number[] = [];\n    let minSum = Infinity;\n\
    \    let visited: boolean[][] = [];\n    for (let i = 0; i < n; i++) {\n     \
    \   visited[i] = [];\n        for (let j = 0; j < m; j++) {\n            visited[i][j]\
    \ = false;\n        }\n    }\n    function dfs(i: number, j: number, sum: number,\
    \ path: number[]) {\n        if (sum > minSum) {\n            return;\n      \
    \  }\n        if (path.length === k) {\n            if (sum < minSum) {\n    \
    \            minSum = sum;\n                minPath = path.slice();\n        \
    \    }\n            return;\n        }\n        if (i > 0 && !visited[i - 1][j])\
    \ {\n            visited[i - 1][j] = true;\n            dfs(i - 1, j, sum + grid[i\
    \ - 1][j], path.concat(grid[i - 1][j]));\n            visited[i - 1][j] = false;\n\
    \        }\n        if (i < n - 1 && !visited[i + 1][j]) {\n            visited[i\
    \ + 1][j] = true;\n            dfs(i + 1, j, sum + grid[i + 1][j], path.concat(grid[i\
    \ + 1][j]));\n            visited[i + 1][j] = false;\n        }\n        if (j\
    \ > 0 && !visited[i][j - 1]) {\n            visited[i][j - 1] = true;\n      \
    \      dfs(i, j - 1, sum + grid[i][j - 1], path.concat(grid[i][j - 1]));\n   \
    \         visited[i][j - 1] = false;\n        }\n        if (j < m - 1 && !visited[i][j\
    \ + 1]) {\n            visited[i][j + 1] = true;\n            dfs(i, j + 1, sum\
    \ + grid[i][j + 1], path.concat(grid[i][j + 1", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const dp = Array.from({ length: n }, () =>\
    \ Array(m).fill(Infinity));\n    const pq = new PriorityQueue<[number, number,\
    \ number[]]>((a, b) => a[2].join() < b[2].join());\n    const dirs = [[-1, 0],\
    \ [1, 0], [0, -1], [0, 1]];\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {\n            dp[i][j] = [grid[i][j]];\n            pq.push([i,\
    \ j, dp[i][j]]);\n        }\n    }\n    while (pq.size() > 0) {\n        const\
    \ [i, j, path] = pq.pop();\n        if (path.length === k) {\n            return\
    \ path;\n        }\n        for (const [di, dj] of dirs) {\n            const\
    \ ni = i + di;\n            const nj = j + dj;\n            if (ni < 0 || ni >=\
    \ n || nj < 0 || nj >= m) {\n                continue;\n            }\n      \
    \      const npath = [...path, grid[ni][nj]];\n            if (npath.length <\
    \ dp[ni][nj].length) {\n                dp[ni][nj] = npath;\n                pq.push([ni,\
    \ nj, npath]);\n            }\n        }\n    }\n    return [];\n}\n", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n    let\
    \ minPathSum = Infinity;\n    let visited = new Set();\n    let dfs = (i: number,\
    \ j: number, path: number[], pathSum: number) => {\n        if (i < 0 || i >=\
    \ n || j < 0 || j >= m || visited.has(i * m + j)) {\n            return;\n   \
    \     }\n        if (path.length === k) {\n            if (pathSum < minPathSum)\
    \ {\n                minPathSum = pathSum;\n                minPath = path;\n\
    \            }\n            return;\n        }\n        visited.add(i * m + j);\n\
    \        path.push(grid[i][j]);\n        pathSum += grid[i][j];\n        dfs(i\
    \ + 1, j, path.slice(), pathSum);\n        dfs(i - 1, j, path.slice(), pathSum);\n\
    \        dfs(i, j + 1, path.slice(), pathSum);\n        dfs(i, j - 1, path.slice(),\
    \ pathSum);\n        visited.delete(i * m + j);\n    };\n    for (let i = 0; i\
    \ < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i, j, [],\
    \ 0);\n        }\n    }\n    return minPath;\n}\n", "    // your code here\n \
    \   return [];\n}\n", "    // Your code here\n    return [];\n}\n", "    let n\
    \ = grid.length;\n    let m = grid[0].length;\n    let dp: number[][][] = [];\n\
    \    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j =\
    \ 0; j < m; j++) {\n            dp[i][j] = [];\n        }\n    }\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dp[i][j][0]\
    \ = grid[i][j];\n        }\n    }\n    for (let i = 0; i < n; i++) {\n       \
    \ for (let j = 0; j < m; j++) {\n            for (let l = 1; l < k; l++) {\n \
    \               let min = Infinity;\n                if (i > 0) {\n          \
    \          min = Math.min(min, dp[i - 1][j][l - 1]);\n                }\n    \
    \            if (i < n - 1) {\n                    min = Math.min(min, dp[i +\
    \ 1][j][l - 1]);\n                }\n                if (j > 0) {\n          \
    \          min = Math.min(min, dp[i][j - 1][l - 1]);\n                }\n    \
    \            if (j < m - 1) {\n                    min = Math.min(min, dp[i][j\
    \ + 1][l - 1]);\n                }\n                dp[i][j][l] = min;\n     \
    \       }\n        }\n    }\n    let min = Infinity;\n    let minI = 0;\n    let\
    \ minJ = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m;\
    \ j++) {\n            if (dp[i][j][k - 1] < min) {\n                min = dp[i][j][k\
    \ - 1];\n                minI = i;\n                minJ = j;\n            }\n\
    \        }\n    }\n    let res: number[] = [];\n    let i = minI;\n    let j =\
    \ minJ;\n    for (let l =", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = new Array(m).fill(false);\n    }\n    let minPath = [];\n    let minSum =\
    \ Infinity;\n    let minPathSum = Infinity;\n    let minPaths = [];\n    let minPathsSum\
    \ = [];\n    let minPathsVisited = [];\n    let minPathsVisitedSum = [];\n   \
    \ let dfs = (i: number, j: number, path: number[], sum: number, visited: boolean[][])\
    \ => {\n        if (path.length === k) {\n            if (sum < minSum) {\n  \
    \              minSum = sum;\n                minPath = path;\n            } else\
    \ if (sum === minSum) {\n                if (path < minPath) {\n             \
    \       minPath = path;\n                }\n            }\n            return;\n\
    \        }\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n\
    \            return;\n        }\n        visited[i][j] = true;\n        dfs(i\
    \ - 1, j, path.concat(grid[i][j]), sum + grid[i][j], visited);\n        dfs(i\
    \ + 1, j, path.concat(grid[i][j]), sum + grid[i][j], visited);\n        dfs(i,\
    \ j - 1, path.concat(grid[i][j]), sum + grid[i][j], visited);\n        dfs(i,\
    \ j + 1, path.concat(grid[i][j]), sum + grid[i][j], visited);\n        visited[i][j]\
    \ = false;\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            dfs(i, j, [grid[i][j]], grid[i][j], visited);\n \
    \       }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n\
    \    let visited = new Set();\n    let queue = [[0, 0, 0, [grid[0][0]]]];\n  \
    \  while (queue.length > 0) {\n        let [i, j, sum, path] = queue.shift();\n\
    \        if (sum > minPathSum) {\n            continue;\n        }\n        if\
    \ (path.length === k) {\n            if (sum < minPathSum) {\n               \
    \ minPathSum = sum;\n                minPath = path;\n            } else if (path\
    \ < minPath) {\n                minPath = path;\n            }\n            continue;\n\
    \        }\n        let key = `${i} ${j}`;\n        if (visited.has(key)) {\n\
    \            continue;\n        }\n        visited.add(key);\n        if (i >\
    \ 0) {\n            queue.push([i - 1, j, sum + grid[i - 1][j], [...path, grid[i\
    \ - 1][j]]]);\n        }\n        if (i < n - 1) {\n            queue.push([i\
    \ + 1, j, sum + grid[i + 1][j], [...path, grid[i + 1][j]]]);\n        }\n    \
    \    if (j > 0) {\n            queue.push([i, j - 1, sum + grid[i][j - 1], [...path,\
    \ grid[i][j - 1]]]);\n        }\n        if (j < m - 1) {\n            queue.push([i,\
    \ j + 1, sum + grid[i][j + 1], [...path, grid[i][j + 1]]]);\n        }\n    }\n\
    \    return minPath;\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minPathValue = Infinity;\n    let visited = new\
    \ Set();\n    let dfs = (i: number, j: number, path: number[], pathValue: number)\
    \ => {\n        if (i < 0 || i >= n || j < 0 || j >= m || visited.has(i + ','\
    \ + j)) {\n            return;\n        }\n        if (path.length === k) {\n\
    \            if (pathValue < minPathValue) {\n                minPathValue = pathValue;\n\
    \                minPath = path;\n            }\n            return;\n       \
    \ }\n        visited.add(i + ',' + j);\n        path.push(grid[i][j]);\n     \
    \   pathValue = pathValue * 10 + grid[i][j];\n        dfs(i - 1, j, path.slice(),\
    \ pathValue);\n        dfs(i + 1, j, path.slice(), pathValue);\n        dfs(i,\
    \ j - 1, path.slice(), pathValue);\n        dfs(i, j + 1, path.slice(), pathValue);\n\
    \        visited.delete(i + ',' + j);\n    };\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n  \
    \      }\n    }\n    return minPath;\n}\n", "    const n = grid.length;\n    const\
    \ m = grid[0].length;\n    const visited = new Set<number>();\n    const queue\
    \ = new PriorityQueue<number[]>((a, b) => {\n        for (let i = 0; i < k; i++)\
    \ {\n            if (a[i] < b[i]) {\n                return -1;\n            }\
    \ else if (a[i] > b[i]) {\n                return 1;\n            }\n        }\n\
    \        return 0;\n    });\n    const start = [0, 0, grid[0][0]];\n    queue.enqueue(start);\n\
    \    while (!queue.isEmpty()) {\n        const [i, j, val] = queue.dequeue();\n\
    \        if (visited.has(i * m + j)) {\n            continue;\n        }\n   \
    \     visited.add(i * m + j);\n        if (visited.size === k) {\n           \
    \ return Array.from({ length: k }, (_, i) => start[i]);\n        }\n        if\
    \ (i > 0) {\n            queue.enqueue([i - 1, j, grid[i - 1][j]]);\n        }\n\
    \        if (i < n - 1) {\n            queue.enqueue([i + 1, j, grid[i + 1][j]]);\n\
    \        }\n        if (j > 0) {\n            queue.enqueue([i, j - 1, grid[i][j\
    \ - 1]]);\n        }\n        if (j < m - 1) {\n            queue.enqueue([i,\
    \ j + 1, grid[i][j + 1]]);\n        }\n    }\n    return [];\n}\n", "    const\
    \ n = grid.length;\n    const m = grid[0].length;\n    const dp = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(m);\n        for\
    \ (let j = 0; j < m; j++) {\n            dp[i][j] = new Array(k + 1);\n      \
    \      for (let l = 0; l <= k; l++) {\n                dp[i][j][l] = {\n     \
    \               path: [],\n                    min: Infinity\n               \
    \ };\n            }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n   \
    \     for (let j = 0; j < m; j++) {\n            dp[i][j][1].path = [grid[i][j]];\n\
    \            dp[i][j][1].min = grid[i][j];\n        }\n    }\n    for (let l =\
    \ 2; l <= k; l++) {\n        for (let i = 0; i < n; i++) {\n            for (let\
    \ j = 0; j < m; j++) {\n                for (let di = -1; di <= 1; di++) {\n \
    \                   for (let dj = -1; dj <= 1; dj++) {\n                     \
    \   if (di === 0 && dj === 0) {\n                            continue;\n     \
    \                   }\n                        const ni = i + di;\n          \
    \              const nj = j + dj;\n                        if (ni < 0 || ni >=\
    \ n || nj < 0 || nj >= m) {\n                            continue;\n         \
    \               }\n                        const curr = dp[i][j][l];\n       \
    \                 const next = dp[ni][nj][l - 1];\n                        if\
    \ (curr.min > next.min) {\n                            curr.min = next.min;\n\
    \                            curr.path = next.path.slice();\n                \
    \        } else if (curr.min === next.min) {\n                            curr.path\
    \ = min(curr.path, next.path);\n                        }\n                  \
    \  }\n                }\n                curr.path.push(grid[i][j]);\n       \
    \         curr.", "    let n = grid.length;\n    let m = grid[0].length;\n   \
    \ let minPath = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let visited = [];\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = [];\n        for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n\
    \        }\n    }\n    let dfs = function (i: number, j: number, path: number[],\
    \ sum: number) {\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j])\
    \ {\n            return;\n        }\n        path.push(grid[i][j]);\n        sum\
    \ += grid[i][j];\n        if (path.length === k) {\n            if (sum < minPathSum)\
    \ {\n                minPathSum = sum;\n                minPath = path.slice();\n\
    \            } else if (sum === minPathSum) {\n                if (path < minPath)\
    \ {\n                    minPath = path.slice();\n                }\n        \
    \    }\n            path.pop();\n            return;\n        }\n        visited[i][j]\
    \ = true;\n        dfs(i - 1, j, path, sum);\n        dfs(i + 1, j, path, sum);\n\
    \        dfs(i, j - 1, path, sum);\n        dfs(i, j + 1, path, sum);\n      \
    \  visited[i][j] = false;\n        path.pop();\n    }\n    for (let i = 0; i <\
    \ n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i, j, [],\
    \ 0);\n        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Array(n);\n    for (let i\
    \ = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n\
    \    let minPath = new Array(k);\n    let minSum = Infinity;\n    let minPathSum\
    \ = Infinity;\n    let minPathIndex = 0;\n    let minPathSumIndex = 0;\n    let\
    \ minPathIndexes = [];\n    let minPathSumIndexes = [];\n    let minPaths = [];\n\
    \    let minPathSums = [];\n    let path = new Array(k);\n    let pathSum = 0;\n\
    \    let pathIndex = 0;\n    let pathSumIndex = 0;\n    let pathIndexes = [];\n\
    \    let pathSumIndexes = [];\n    let paths = [];\n    let pathSums = [];\n \
    \   let minPathsIndex = 0;\n    let minPathSumsIndex = 0;\n    let pathIndexesIndex\
    \ = 0;\n    let pathSumIndexesIndex = 0;\n    let pathsIndex = 0;\n    let pathSumsIndex\
    \ = 0;\n    let minPathIndexesIndex = 0;\n    let minPathSumIndexesIndex = 0;\n\
    \    let minPathsIndexIndex = 0;\n    let minPathSumsIndexIndex = 0;\n    let\
    \ minPathIndexesIndexIndex = 0;\n    let minPathSumIndexesIndexIndex = 0;\n  \
    \  let minPathsIndexIndexIndex = 0;\n    let minPathSumsIndexIndexIndex = 0;\n\
    \    let minPathIndexesIndexIndexIndex = 0;\n    let minPathSumIndexesIndexIndexIndex\
    \ = 0;\n    let minPathsIndexIndexIndexIndex = 0;\n    let minPathSumsIndexIndexIndexIndex\
    \ = 0;\n    let minPathIndexesIndexIndexIndexIndex = 0;\n    let minPathSumIndexesIndexIndexIndexIndex\
    \ = 0;\n    let minPathsIndexIndexIndexIndexIndex = 0;\n    let minPathSumsIndexIndexIndexIndexIndex\
    \ = 0;\n    let minPathIndexesIndexIndexIndexIndexIndex = 0;\n    let minPathSumIndexesIndexIndexIndexIndexIndex\
    \ = 0", "    // your code here\n    return [];\n}\n", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const dp = new Array(n).fill(0).map(() =>\
    \ new Array(m).fill(0).map(() => new Array(k + 1).fill(Infinity)));\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dp[i][j][1]\
    \ = grid[i][j];\n        }\n    }\n    for (let kk = 2; kk <= k; kk++) {\n   \
    \     for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n\
    \                if (i > 0) {\n                    dp[i][j][kk] = Math.min(dp[i][j][kk],\
    \ dp[i - 1][j][kk - 1]);\n                }\n                if (i < n - 1) {\n\
    \                    dp[i][j][kk] = Math.min(dp[i][j][kk], dp[i + 1][j][kk - 1]);\n\
    \                }\n                if (j > 0) {\n                    dp[i][j][kk]\
    \ = Math.min(dp[i][j][kk], dp[i][j - 1][kk - 1]);\n                }\n       \
    \         if (j < m - 1) {\n                    dp[i][j][kk] = Math.min(dp[i][j][kk],\
    \ dp[i][j + 1][kk - 1]);\n                }\n            }\n        }\n    }\n\
    \    let min = Infinity;\n    let minI = -1;\n    let minJ = -1;\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if\
    \ (dp[i][j][k] < min) {\n                min = dp[i][j][k];\n                minI\
    \ = i;\n                minJ = j;\n            }\n        }\n    }\n    const\
    \ res = [];\n    for (let kk = k; kk >= 1; k", "    const n = grid.length;\n \
    \   const m = grid[0].length;\n    const visited = new Set<string>();\n    const\
    \ queue = [[0, 0, [grid[0][0]]]];\n    while (queue.length > 0) {\n        const\
    \ [i, j, path] = queue.shift()!;\n        if (path.length === k) {\n         \
    \   return path;\n        }\n        if (i > 0 && !visited.has(`${i - 1} ${j}`))\
    \ {\n            queue.push([i - 1, j, [...path, grid[i - 1][j]]]);\n        \
    \    visited.add(`${i - 1} ${j}`);\n        }\n        if (i < n - 1 && !visited.has(`${i\
    \ + 1} ${j}`)) {\n            queue.push([i + 1, j, [...path, grid[i + 1][j]]]);\n\
    \            visited.add(`${i + 1} ${j}`);\n        }\n        if (j > 0 && !visited.has(`${i}\
    \ ${j - 1}`)) {\n            queue.push([i, j - 1, [...path, grid[i][j - 1]]]);\n\
    \            visited.add(`${i} ${j - 1}`);\n        }\n        if (j < m - 1 &&\
    \ !visited.has(`${i} ${j + 1}`)) {\n            queue.push([i, j + 1, [...path,\
    \ grid[i][j + 1]]]);\n            visited.add(`${i} ${j + 1}`);\n        }\n \
    \       queue.sort((a, b) => {\n            for (let i = 0; i < k; i++) {\n  \
    \              if (a[2][i] !== b[2][i]) {\n                    return a[2][i]\
    \ - b[2][i];\n                }\n            }\n            return 0;\n      \
    \  });\n    }\n    return [];\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let visited = new Array(n).fill(0).map(() => new Array(m).fill(false));\n\
    \    let minPath = new Array(k).fill(Infinity);\n    let minPathSum = Infinity;\n\
    \    let minPathSumIndex = -1;\n    let dfs = (i: number, j: number, path: number[],\
    \ pathSum: number, pathSumIndex: number) => {\n        if (i < 0 || i >= n ||\
    \ j < 0 || j >= m || visited[i][j]) {\n            return;\n        }\n      \
    \  visited[i][j] = true;\n        path[pathSumIndex] = grid[i][j];\n        pathSum\
    \ += grid[i][j];\n        if (pathSumIndex === k - 1) {\n            if (pathSum\
    \ < minPathSum) {\n                minPathSum = pathSum;\n                minPathSumIndex\
    \ = 0;\n                for (let i = 0; i < k; i++) {\n                    minPath[i]\
    \ = path[i];\n                }\n            } else if (pathSum === minPathSum)\
    \ {\n                let i = 0;\n                while (i < k && path[i] === minPath[i])\
    \ {\n                    i++;\n                }\n                if (i < k &&\
    \ path[i] < minPath[i]) {\n                    minPathSumIndex = i;\n        \
    \            for (let i = 0; i < k; i++) {\n                        minPath[i]\
    \ = path[i];\n                    }\n                }\n            }\n      \
    \  } else {\n            dfs(i + 1, j, path, pathSum, pathSumIndex + 1);\n   \
    \         dfs(i - 1, j, path, pathSum, pathSumIndex + 1);\n            dfs(i,\
    \ j + 1, path, pathSum, pathSumIndex + 1);\n            dfs(i, j - 1, path, pathSum,\
    \ pathSumIndex + 1);\n        }\n        visited[i][j] = false;\n    };\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m;", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const dp = new Array(n).fill(null).map(()\
    \ => new Array(m).fill(null).map(() => new Array(k + 1).fill(Infinity)));\n  \
    \  const get = (i: number, j: number, k: number) => {\n        if (i < 0 || i\
    \ >= n || j < 0 || j >= m) {\n            return Infinity;\n        }\n      \
    \  return dp[i][j][k];\n    };\n    const set = (i: number, j: number, k: number,\
    \ v: number) => {\n        if (i < 0 || i >= n || j < 0 || j >= m) {\n       \
    \     return;\n        }\n        dp[i][j][k] = v;\n    };\n    const getMin =\
    \ (i: number, j: number, k: number) => {\n        if (k === 0) {\n           \
    \ return 0;\n        }\n        if (get(i, j, k) !== Infinity) {\n           \
    \ return get(i, j, k);\n        }\n        const min = Math.min(\n           \
    \ getMin(i - 1, j, k - 1),\n            getMin(i + 1, j, k - 1),\n           \
    \ getMin(i, j - 1, k - 1),\n            getMin(i, j + 1, k - 1),\n        );\n\
    \        set(i, j, k, min + grid[i][j]);\n        return get(i, j, k);\n    };\n\
    \    let min = Infinity;\n    let minI = -1;\n    let minJ = -1;\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            const\
    \ v = getMin(i, j, k);\n            if (v < min) {\n                min = v;\n\
    \                minI = i;\n                minJ = j;\n            }\n       \
    \ }\n    }\n    const path = [];\n    let i = minI;\n    let j = minJ;\n    for\
    \ (let k = 0; k", "    let n = grid.length;\n    let m = grid[0].length;\n   \
    \ let minPath = [];\n    let minSum = Infinity;\n    let minSumPath = [];\n  \
    \  let visited = new Set();\n    let dfs = (i: number, j: number, path: number[],\
    \ sum: number) => {\n        if (i < 0 || i >= n || j < 0 || j >= m || visited.has(i\
    \ * m + j)) {\n            return;\n        }\n        if (path.length === k)\
    \ {\n            if (sum < minSum) {\n                minSum = sum;\n        \
    \        minSumPath = path;\n            }\n            return;\n        }\n \
    \       visited.add(i * m + j);\n        path.push(grid[i][j]);\n        sum +=\
    \ grid[i][j];\n        dfs(i + 1, j, path, sum);\n        dfs(i - 1, j, path,\
    \ sum);\n        dfs(i, j + 1, path, sum);\n        dfs(i, j - 1, path, sum);\n\
    \        path.pop();\n        visited.delete(i * m + j);\n    }\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i,\
    \ j, [], 0);\n        }\n    }\n    return minSumPath;\n}\n", "    let N = grid.length;\n\
    \    let minPath: number[] = [];\n    let minPathSum = Infinity;\n    let minPathSum2\
    \ = Infinity;\n    let minPath2: number[] = [];\n    let visited: boolean[][]\
    \ = [];\n    for (let i = 0; i < N; i++) {\n        visited[i] = [];\n       \
    \ for (let j = 0; j < N; j++) {\n            visited[i][j] = false;\n        }\n\
    \    }\n    function dfs(i: number, j: number, path: number[], pathSum: number)\
    \ {\n        if (path.length === k) {\n            if (pathSum < minPathSum) {\n\
    \                minPathSum = pathSum;\n                minPath = path.slice();\n\
    \            } else if (pathSum === minPathSum) {\n                if (path <\
    \ minPath) {\n                    minPath = path.slice();\n                }\n\
    \            }\n            return;\n        }\n        if (i < 0 || i >= N ||\
    \ j < 0 || j >= N || visited[i][j]) {\n            return;\n        }\n      \
    \  visited[i][j] = true;\n        path.push(grid[i][j]);\n        pathSum += grid[i][j];\n\
    \        dfs(i - 1, j, path, pathSum);\n        dfs(i + 1, j, path, pathSum);\n\
    \        dfs(i, j - 1, path, pathSum);\n        dfs(i, j + 1, path, pathSum);\n\
    \        path.pop();\n        pathSum -= grid[i][j];\n        visited[i][j] =\
    \ false;\n    }\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j\
    \ < N; j++) {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let visited\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new\
    \ Array(m).fill(false);\n    }\n    let minPath: number[] = [];\n    let minSum\
    \ = Infinity;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j <\
    \ m; j++) {\n            let path: number[] = [];\n            let sum = 0;\n\
    \            dfs(grid, i, j, k, path, sum, visited);\n            if (sum < minSum)\
    \ {\n                minSum = sum;\n                minPath = path;\n        \
    \    }\n        }\n    }\n    return minPath;\n}\n", "    // Your code here\n\
    \    return [];\n}\n", "    const N = grid.length;\n    const M = grid[0].length;\n\
    \    const visited = new Set<string>();\n    const queue = new PriorityQueue<[number[],\
    \ number[]]>((a, b) => {\n        for (let i = 0; i < k; i++) {\n            if\
    \ (a[0][i] < b[0][i]) return true;\n            if (a[0][i] > b[0][i]) return\
    \ false;\n        }\n        return false;\n    });\n    queue.push([[], [0, 0]]);\n\
    \    while (queue.size() > 0) {\n        const [path, [x, y]] = queue.pop();\n\
    \        if (path.length === k) return path;\n        if (visited.has(`${x},${y}`))\
    \ continue;\n        visited.add(`${x},${y}`);\n        for (const [dx, dy] of\
    \ [[-1, 0], [1, 0], [0, -1], [0, 1]]) {\n            const nx = x + dx;\n    \
    \        const ny = y + dy;\n            if (nx < 0 || nx >= N || ny < 0 || ny\
    \ >= M) continue;\n            queue.push([[...path, grid[nx][ny]], [nx, ny]]);\n\
    \        }\n    }\n    return [];\n}\n", "    let n = grid.length;\n    let m\
    \ = grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n \
    \   let minPathSum2 = Infinity;\n    let minPath2 = [];\n    let visited = new\
    \ Array(n).fill(0).map(() => new Array(m).fill(false));\n    let dfs = (i: number,\
    \ j: number, path: number[], pathSum: number) => {\n        if (path.length ===\
    \ k) {\n            if (pathSum < minPathSum) {\n                minPathSum =\
    \ pathSum;\n                minPath = path;\n            } else if (pathSum ===\
    \ minPathSum) {\n                if (path.join('') < minPath.join('')) {\n   \
    \                 minPath = path;\n                }\n            }\n        \
    \    return;\n        }\n        if (pathSum > minPathSum) {\n            return;\n\
    \        }\n        if (i > 0 && !visited[i - 1][j]) {\n            visited[i\
    \ - 1][j] = true;\n            dfs(i - 1, j, path.concat(grid[i - 1][j]), pathSum\
    \ + grid[i - 1][j]);\n            visited[i - 1][j] = false;\n        }\n    \
    \    if (i < n - 1 && !visited[i + 1][j]) {\n            visited[i + 1][j] = true;\n\
    \            dfs(i + 1, j, path.concat(grid[i + 1][j]), pathSum + grid[i + 1][j]);\n\
    \            visited[i + 1][j] = false;\n        }\n        if (j > 0 && !visited[i][j\
    \ - 1]) {\n            visited[i][j - 1] = true;\n            dfs(i, j - 1, path.concat(grid[i][j\
    \ - 1]), pathSum + grid[i][j - 1]);\n            visited[i][j - 1] = false;\n\
    \        }\n        if (j < m - 1 && !visited[i][j + 1]) {\n            visited[i][j\
    \ + 1] = true;\n            dfs(i, j", "    let n = grid.length;\n    let m =\
    \ grid[0].length;\n    let visited = new Array(n);\n    for (let i = 0; i < n;\
    \ i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n    let minPath\
    \ = [];\n    let minPathSum = Infinity;\n    for (let i = 0; i < n; i++) {\n \
    \       for (let j = 0; j < m; j++) {\n            let path = [];\n          \
    \  let pathSum = 0;\n            dfs(i, j, k, path, pathSum);\n        }\n   \
    \ }\n    return minPath;\n\n    function dfs(i: number, j: number, k: number,\
    \ path: number[], pathSum: number) {\n        if (k === 0) {\n            if (pathSum\
    \ < minPathSum) {\n                minPathSum = pathSum;\n                minPath\
    \ = path.slice();\n            }\n            return;\n        }\n        if (i\
    \ < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n            return;\n\
    \        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n  \
    \      pathSum += grid[i][j];\n        dfs(i + 1, j, k - 1, path, pathSum);\n\
    \        dfs(i - 1, j, k - 1, path, pathSum);\n        dfs(i, j + 1, k - 1, path,\
    \ pathSum);\n        dfs(i, j - 1, k - 1, path, pathSum);\n        path.pop();\n\
    \        pathSum -= grid[i][j];\n        visited[i][j] = false;\n    }\n}\n",
  "    // Your code here\n    return [];\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let visited = new Set<string>();\n    let minPath:\
    \ number[] = [];\n    let minSum = Infinity;\n    let minSumPath: number[] = [];\n\
    \    let minSumPaths: number[][] = [];\n    let minSumPathsSet = new Set<string>();\n\
    \    let minSumPathsSet2 = new Set<string>();\n    let minSumPathsSet3 = new Set<string>();\n\
    \    let minSumPathsSet4 = new Set<string>();\n    let minSumPathsSet5 = new Set<string>();\n\
    \    let minSumPathsSet6 = new Set<string>();\n    let minSumPathsSet7 = new Set<string>();\n\
    \    let minSumPathsSet8 = new Set<string>();\n    let minSumPathsSet9 = new Set<string>();\n\
    \    let minSumPathsSet10 = new Set<string>();\n    let minSumPathsSet11 = new\
    \ Set<string>();\n    let minSumPathsSet12 = new Set<string>();\n    let minSumPathsSet13\
    \ = new Set<string>();\n    let minSumPathsSet14 = new Set<string>();\n    let\
    \ minSumPathsSet15 = new Set<string>();\n    let minSumPathsSet16 = new Set<string>();\n\
    \    let minSumPathsSet17 = new Set<string>();\n    let minSumPathsSet18 = new\
    \ Set<string>();\n    let minSumPathsSet19 = new Set<string>();\n    let minSumPathsSet20\
    \ = new Set<string>();\n    let minSumPathsSet21 = new Set<string>();\n    let\
    \ minSumPathsSet22 = new Set<string>();\n    let minSumPathsSet23 = new Set<string>();\n\
    \    let minSumPathsSet24 = new Set<string>();\n    let minSumPathsSet25 = new\
    \ Set<string>();\n    let minSumPathsSet26 = new Set<string>();\n    let minSumPathsSet27\
    \ = new Set<string>();\n    let minSumPaths", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let visited = new Array(n);\n    for (let i = 0; i\
    \ < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n    let\
    \ minPath = [];\n    let minSum = Infinity;\n    let minSumPath = [];\n    let\
    \ path = [];\n    function dfs(x: number, y: number, sum: number, path: number[])\
    \ {\n        if (sum > minSum) {\n            return;\n        }\n        if (path.length\
    \ === k) {\n            if (sum < minSum) {\n                minSum = sum;\n \
    \               minSumPath = path.slice();\n            } else if (sum === minSum)\
    \ {\n                if (path.join() < minSumPath.join()) {\n                \
    \    minSumPath = path.slice();\n                }\n            }\n          \
    \  return;\n        }\n        if (x < 0 || x >= n || y < 0 || y >= m || visited[x][y])\
    \ {\n            return;\n        }\n        visited[x][y] = true;\n        path.push(grid[x][y]);\n\
    \        dfs(x - 1, y, sum + grid[x][y], path);\n        dfs(x + 1, y, sum + grid[x][y],\
    \ path);\n        dfs(x, y - 1, sum + grid[x][y], path);\n        dfs(x, y + 1,\
    \ sum + grid[x][y], path);\n        path.pop();\n        visited[x][y] = false;\n\
    \    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            dfs(i, j, 0, []);\n        }\n    }\n    return minSumPath;\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let visited\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new\
    \ Array(m).fill(false);\n    }\n    let minPath: number[] = [];\n    let minSum\
    \ = Infinity;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j <\
    \ m; j++) {\n            let path: number[] = [];\n            let sum = 0;\n\
    \            dfs(i, j, k, path, sum);\n        }\n    }\n    return minPath;\n\
    \n    function dfs(i: number, j: number, k: number, path: number[], sum: number)\
    \ {\n        if (k === 0) {\n            if (sum < minSum) {\n               \
    \ minSum = sum;\n                minPath = path.slice();\n            }\n    \
    \        return;\n        }\n        if (i < 0 || i >= n || j < 0 || j >= m ||\
    \ visited[i][j]) {\n            return;\n        }\n        visited[i][j] = true;\n\
    \        path.push(grid[i][j]);\n        sum += grid[i][j];\n        dfs(i - 1,\
    \ j, k - 1, path, sum);\n        dfs(i + 1, j, k - 1, path, sum);\n        dfs(i,\
    \ j - 1, k - 1, path, sum);\n        dfs(i, j + 1, k - 1, path, sum);\n      \
    \  path.pop();\n        visited[i][j] = false;\n    }\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          let path = [];\n            let pathSum = 0;\n            let queue\
    \ = [[i, j]];\n            let visited = new Set();\n            while (queue.length\
    \ > 0) {\n                let [x, y] = queue.shift();\n                if (visited.has(x\
    \ + ',' + y)) {\n                    continue;\n                }\n          \
    \      visited.add(x + ',' + y);\n                path.push(grid[x][y]);\n   \
    \             pathSum += grid[x][y];\n                if (path.length === k) {\n\
    \                    if (pathSum < minPathSum) {\n                        minPathSum\
    \ = pathSum;\n                        minPath = path;\n                    }\n\
    \                    break;\n                }\n                if (x > 0) {\n\
    \                    queue.push([x - 1, y]);\n                }\n            \
    \    if (x < n - 1) {\n                    queue.push([x + 1, y]);\n         \
    \       }\n                if (y > 0) {\n                    queue.push([x, y\
    \ - 1]);\n                }\n                if (y < m - 1) {\n              \
    \      queue.push([x, y + 1]);\n                }\n            }\n        }\n\
    \    }\n    return minPath;\n}\n", "    // Your code here\n    return [];\n}\n",
  "    const n = grid.length;\n    const m = grid[0].length;\n    const visited =\
    \ new Set<string>();\n    const queue = new PriorityQueue<Path>();\n    const\
    \ start = new Path(0, 0, grid[0][0], [grid[0][0]]);\n    queue.push(start);\n\
    \    while (!queue.isEmpty()) {\n        const path = queue.pop();\n        if\
    \ (path.length === k) {\n            return path.values;\n        }\n        const\
    \ x = path.x;\n        const y = path.y;\n        if (x > 0 && !visited.has(`${x\
    \ - 1}-${y}`)) {\n            const newPath = new Path(x - 1, y, grid[x - 1][y],\
    \ [...path.values, grid[x - 1][y]]);\n            queue.push(newPath);\n     \
    \       visited.add(`${x - 1}-${y}`);\n        }\n        if (x < n - 1 && !visited.has(`${x\
    \ + 1}-${y}`)) {\n            const newPath = new Path(x + 1, y, grid[x + 1][y],\
    \ [...path.values, grid[x + 1][y]]);\n            queue.push(newPath);\n     \
    \       visited.add(`${x + 1}-${y}`);\n        }\n        if (y > 0 && !visited.has(`${x}-${y\
    \ - 1}`)) {\n            const newPath = new Path(x, y - 1, grid[x][y - 1], [...path.values,\
    \ grid[x][y - 1]]);\n            queue.push(newPath);\n            visited.add(`${x}-${y\
    \ - 1}`);\n        }\n        if (y < m - 1 && !visited.has(`${x}-${y + 1}`))\
    \ {\n            const newPath = new Path(x, y + 1, grid[x][y + 1], [...path.values,\
    \ grid[x][y + 1]]);\n            queue.push(newPath);\n            visited.add(`${x}-${y\
    \ +", "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath:\
    \ number[] = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = new Array(m).fill(false);\n    }\n    let dfs = (i: number, j: number, path:\
    \ number[], sum: number) => {\n        if (i < 0 || i >= n || j < 0 || j >= m\
    \ || visited[i][j]) {\n            return;\n        }\n        path.push(grid[i][j]);\n\
    \        sum += grid[i][j];\n        if (path.length === k) {\n            if\
    \ (sum < minPathSum) {\n                minPathSum = sum;\n                minPath\
    \ = path.slice();\n            } else if (sum === minPathSum) {\n            \
    \    if (path.slice().sort((a, b) => a - b).join('') < minPath.slice().sort((a,\
    \ b) => a - b).join('')) {\n                    minPath = path.slice();\n    \
    \            }\n            }\n            path.pop();\n            return;\n\
    \        }\n        visited[i][j] = true;\n        dfs(i + 1, j, path, sum);\n\
    \        dfs(i - 1, j, path, sum);\n        dfs(i, j + 1, path, sum);\n      \
    \  dfs(i, j - 1, path, sum);\n        visited[i][j] = false;\n        path.pop();\n\
    \    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n}\n",
  "    const n = grid.length;\n    const m = grid[0].length;\n    const visited =\
    \ new Array(n).fill(0).map(() => new Array(m).fill(false));\n    const queue =\
    \ [];\n    const path = [];\n    let minPath = [];\n    let minSum = Infinity;\n\
    \    let minPathSum = Infinity;\n    let minPathLength = Infinity;\n    let minPathLengthSum\
    \ = Infinity;\n    let minPathLengthSumIndex = Infinity;\n    let minPathSumIndex\
    \ = Infinity;\n    let minPathIndex = Infinity;\n    let minPathLengthIndex =\
    \ Infinity;\n    let minPathLengthSumIndex = Infinity;\n    let minPathSumIndex\
    \ = Infinity;\n    let minPathIndex = Infinity;\n    let minPathLengthIndex =\
    \ Infinity;\n    let minPathLengthSumIndex = Infinity;\n    let minPathSumIndex\
    \ = Infinity;\n    let minPathIndex = Infinity;\n    let minPathLengthIndex =\
    \ Infinity;\n    let minPathLengthSumIndex = Infinity;\n    let minPathSumIndex\
    \ = Infinity;\n    let minPathIndex = Infinity;\n    let minPathLengthIndex =\
    \ Infinity;\n    let minPathLengthSumIndex = Infinity;\n    let minPathSumIndex\
    \ = Infinity;\n    let minPathIndex = Infinity;\n    let minPathLengthIndex =\
    \ Infinity;\n    let minPathLengthSumIndex = Infinity;\n    let minPathSumIndex\
    \ = Infinity;\n    let minPathIndex = Infinity;\n    let minPathLengthIndex =\
    \ Infinity;\n    let minPathLengthSumIndex = Infinity;\n    let minPathSumIndex\
    \ = Infinity;\n    let minPathIndex = Infinity;\n    let minPathLengthIndex =\
    \ Infinity;\n    let minPathLengthSumIndex = Infinity;\n    let minPathSumIndex\
    \ = Infinity;\n    let minPathIndex = Infinity;\n    let minPathLengthIndex =\
    \ Infinity;\n    let minPathLengthSumIndex = Infinity;\n    let minPathSumIndex\
    \ = Infinity;\n    let minPathIndex = Infinity;\n    let minPathLengthIndex =\
    \ Infinity;\n    let minPathLengthSumIndex = Infinity;\n    let minPathSumIndex\
    \ = Infinity;\n    let minPathIndex = Infinity;\n    let minPathLengthIndex =\
    \ Infinity;\n    let minPathLengthSumIndex = Infinity", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let dp = Array(n).fill(0).map(() => Array(m).fill(0).map(()\
    \ => Array(k + 1).fill(Infinity)));\n    for (let i = 0; i < n; i++) {\n     \
    \   for (let j = 0; j < m; j++) {\n            dp[i][j][1] = grid[i][j];\n   \
    \     }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j <\
    \ m; j++) {\n            for (let l = 2; l <= k; l++) {\n                if (i\
    \ > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n                }\n                if (j > 0) {\n                  \
    \  dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n               \
    \ }\n                if (i < n - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n                }\n                if (j < m - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \                }\n                dp[i][j][l] += grid[i][j];\n            }\n\
    \        }\n    }\n    let min = Infinity;\n    let minI = -1;\n    let minJ =\
    \ -1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            if (dp[i][j][k] < min) {\n                min = dp[i][j][k];\n\
    \                minI = i;\n                minJ = j;\n            }\n       \
    \ }\n    }\n    let res = [];\n    let i", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let minPath: number[] = [];\n    let minPathSum = Infinity;\n\
    \    let visited: boolean[][] = [];\n    for (let i = 0; i < n; i++) {\n     \
    \   visited[i] = [];\n        for (let j = 0; j < m; j++) {\n            visited[i][j]\
    \ = false;\n        }\n    }\n    function dfs(i: number, j: number, path: number[],\
    \ pathSum: number) {\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j])\
    \ {\n            return;\n        }\n        path.push(grid[i][j]);\n        pathSum\
    \ += grid[i][j];\n        if (path.length === k) {\n            if (pathSum <\
    \ minPathSum) {\n                minPathSum = pathSum;\n                minPath\
    \ = path.slice();\n            }\n            return;\n        }\n        visited[i][j]\
    \ = true;\n        dfs(i - 1, j, path, pathSum);\n        dfs(i + 1, j, path,\
    \ pathSum);\n        dfs(i, j - 1, path, pathSum);\n        dfs(i, j + 1, path,\
    \ pathSum);\n        visited[i][j] = false;\n    }\n    for (let i = 0; i < n;\
    \ i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n\
    \        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let minPaths = new Array(n);\n    for (let i = 0; i\
    \ < n; i++) {\n        minPaths[i] = new Array(m);\n        for (let j = 0; j\
    \ < m; j++) {\n            minPaths[i][j] = new Array(k + 1);\n            for\
    \ (let l = 0; l <= k; l++) {\n                minPaths[i][j][l] = [];\n      \
    \      }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {\n            for (let l = 1; l <= k; l++) {\n         \
    \       let minPath = [];\n                if (i > 0) {\n                    let\
    \ path = minPaths[i - 1][j][l - 1].slice();\n                    path.push(grid[i][j]);\n\
    \                    if (minPath.length === 0 || path < minPath) {\n         \
    \               minPath = path;\n                    }\n                }\n  \
    \              if (j > 0) {\n                    let path = minPaths[i][j - 1][l\
    \ - 1].slice();\n                    path.push(grid[i][j]);\n                \
    \    if (minPath.length === 0 || path < minPath) {\n                        minPath\
    \ = path;\n                    }\n                }\n                if (i < n\
    \ - 1) {\n                    let path = minPaths[i + 1][j][l - 1].slice();\n\
    \                    path.push(grid[i][j]);\n                    if (minPath.length\
    \ === 0 || path < minPath) {\n                        minPath = path;\n      \
    \              }\n                }\n                if (j < m - 1) {\n      \
    \              let path = minPaths[i][j + 1][l - 1].slice();\n               \
    \     path.push(grid[i][j]);\n                    if (minPath.length === 0 ||\
    \ path < minPath) {\n                        minPath = path;\n               \
    \     }\n                }\n                minPaths[i][j][l] = minPath;\n   \
    \         }\n        }\n    }\n    return minPath", "    // Your code here\n \
    \   return [];\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i]\
    \ = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n \
    \           for (let l = 0; l < k; l++) {\n                dp[i][j][l] = -1;\n\
    \            }\n        }\n    }\n    let min = Infinity;\n    let minPath = [];\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          let path = minPathHelper(grid, i, j, k, dp);\n            if (path\
    \ < min) {\n                min = path;\n                minPath = dp[i][j];\n\
    \            }\n        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n\
    \    let visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = new Array(m).fill(false);\n    }\n    for (let i = 0; i < n; i++) {\n    \
    \    for (let j = 0; j < m; j++) {\n            let path = [];\n            let\
    \ pathSum = 0;\n            let pathSumMin = Infinity;\n            let pathMin\
    \ = [];\n            let visited = new Array(n);\n            for (let i = 0;\
    \ i < n; i++) {\n                visited[i] = new Array(m).fill(false);\n    \
    \        }\n            dfs(i, j, k, grid, visited, path, pathSum, pathSumMin,\
    \ pathMin);\n            if (pathSumMin < minPathSum) {\n                minPathSum\
    \ = pathSumMin;\n                minPath = pathMin;\n            }\n        }\n\
    \    }\n    return minPath;\n}\n", "    const n = grid.length;\n    const m =\
    \ grid[0].length;\n    const visited = new Set<string>();\n    const queue = [[0,\
    \ 0, grid[0][0], [grid[0][0]]]];\n    let minPath = null;\n    while (queue.length\
    \ > 0) {\n        const [i, j, sum, path] = queue.shift();\n        if (sum >\
    \ k) continue;\n        if (sum === k) {\n            if (minPath === null ||\
    \ minPath.length > path.length) {\n                minPath = path;\n         \
    \   } else if (minPath.length === path.length) {\n                for (let i =\
    \ 0; i < minPath.length; i++) {\n                    if (minPath[i] > path[i])\
    \ {\n                        minPath = path;\n                        break;\n\
    \                    } else if (minPath[i] < path[i]) {\n                    \
    \    break;\n                    }\n                }\n            }\n       \
    \     continue;\n        }\n        if (i > 0 && !visited.has(`${i - 1}-${j}`))\
    \ {\n            visited.add(`${i - 1}-${j}`);\n            queue.push([i - 1,\
    \ j, sum + grid[i - 1][j], [...path, grid[i - 1][j]]]);\n        }\n        if\
    \ (i < n - 1 && !visited.has(`${i + 1}-${j}`)) {\n            visited.add(`${i\
    \ + 1}-${j}`);\n            queue.push([i + 1, j, sum + grid[i + 1][j], [...path,\
    \ grid[i + 1][j]]]);\n        }\n        if (j > 0 && !visited.has(`${i}-${j -\
    \ 1}`)) {\n            visited.add(`${i}-${j - 1}`);\n            queue.push([i,\
    \ j - 1, sum + grid[i][j - 1], [...path, grid[i][j - 1]]]);\n        }\n     \
    \   if (j < m - 1 && !visited.has(`${i}-${j + 1}", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Array(n);\n    for (let i\
    \ = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n\
    \    let minPath = [];\n    let minPathSum = Infinity;\n    for (let i = 0; i\
    \ < n; i++) {\n        for (let j = 0; j < m; j++) {\n            let path = [];\n\
    \            let pathSum = 0;\n            dfs(i, j, 0, path, pathSum);\n    \
    \    }\n    }\n    return minPath;\n\n    function dfs(i: number, j: number, k:\
    \ number, path: number[], pathSum: number) {\n        if (k === 0) {\n       \
    \     if (pathSum < minPathSum) {\n                minPathSum = pathSum;\n   \
    \             minPath = path.slice();\n            }\n            return;\n  \
    \      }\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n\
    \            return;\n        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n\
    \        pathSum += grid[i][j];\n        dfs(i - 1, j, k - 1, path, pathSum);\n\
    \        dfs(i + 1, j, k - 1, path, pathSum);\n        dfs(i, j - 1, k - 1, path,\
    \ pathSum);\n        dfs(i, j + 1, k - 1, path, pathSum);\n        path.pop();\n\
    \        pathSum -= grid[i][j];\n        visited[i][j] = false;\n    }\n}\n",
  "    const n = grid.length;\n    const m = grid[0].length;\n    const dp = new Array(n).fill(0).map(()\
    \ => new Array(m).fill(0).map(() => new Array(k + 1).fill(Infinity)));\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n         \
    \   dp[i][j][1] = grid[i][j];\n        }\n    }\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            for (let l = 2; l <= k;\
    \ l++) {\n                if (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n                }\n                if (j > 0) {\n   \
    \                 dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n\
    \                }\n                if (i < n - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n         \
    \       if (j < m - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n                }\n                dp[i][j][l] += grid[i][j];\n\
    \            }\n        }\n    }\n    let min = Infinity;\n    let minI = -1;\n\
    \    let minJ = -1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            if (dp[i][j][k] < min) {\n                min = dp[i][j][k];\n\
    \                minI = i;\n                minJ = j;\n            }\n       \
    \ }\n    }\n    const res = [];\n", "    // Your code here\n    return [];\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let minPath = [];\n    let minSum = Infinity;\n    for (let i = 0;\
    \ i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            let path =\
    \ [];\n            let sum = 0;\n            dfs(i, j, 0, k, path, sum);\n   \
    \         visited[i][j] = false;\n        }\n    }\n    return minPath;\n\n  \
    \  function dfs(i: number, j: number, step: number, k: number, path: number[],\
    \ sum: number) {\n        if (step === k) {\n            if (sum < minSum) {\n\
    \                minSum = sum;\n                minPath = path.slice();\n    \
    \        }\n            return;\n        }\n        if (i < 0 || i >= n || j <\
    \ 0 || j >= m || visited[i][j]) {\n            return;\n        }\n        visited[i][j]\
    \ = true;\n        path.push(grid[i][j]);\n        sum += grid[i][j];\n      \
    \  dfs(i - 1, j, step + 1, k, path, sum);\n        dfs(i + 1, j, step + 1, k,\
    \ path, sum);\n        dfs(i, j - 1, step + 1, k, path, sum);\n        dfs(i,\
    \ j + 1, step + 1, k, path, sum);\n        path.pop();\n        sum -= grid[i][j];\n\
    \        visited[i][j] = false;\n    }\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let visited = new Array(n);\n    for (let i = 0; i\
    \ < n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n    let\
    \ minPath = [];\n    let minSum = Number.MAX_SAFE_INTEGER;\n    for (let i = 0;\
    \ i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            let path =\
    \ [];\n            let sum = 0;\n            dfs(i, j, k, grid, visited, path,\
    \ sum);\n            if (sum < minSum) {\n                minSum = sum;\n    \
    \            minPath = path;\n            }\n        }\n    }\n    return minPath;\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let minPaths:\
    \ number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        minPaths[i] =\
    \ [];\n        for (let j = 0; j < m; j++) {\n            minPaths[i][j] = [];\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            let minPathsToHere: number[][] = [];\n          \
    \  if (i > 0) {\n                let minPathsToHereUp = minPaths[i - 1][j];\n\
    \                for (let path of minPathsToHereUp) {\n                    if\
    \ (path.length < k) {\n                        minPathsToHere.push(path.concat(grid[i][j]));\n\
    \                    }\n                }\n            }\n            if (j >\
    \ 0) {\n                let minPathsToHereLeft = minPaths[i][j - 1];\n       \
    \         for (let path of minPathsToHereLeft) {\n                    if (path.length\
    \ < k) {\n                        minPathsToHere.push(path.concat(grid[i][j]));\n\
    \                    }\n                }\n            }\n            if (i ==\
    \ 0 && j == 0) {\n                minPathsToHere.push([grid[i][j]]);\n       \
    \     }\n            minPathsToHere.sort((a, b) => {\n                for (let\
    \ i = 0; i < k; i++) {\n                    if (a[i] < b[i]) {\n             \
    \           return -1;\n                    }\n                    if (a[i] >\
    \ b[i]) {\n                        return 1;\n                    }\n        \
    \        }\n                return 0;\n            });\n            minPaths[i][j]\
    \ = minPathsToHere.slice(0, 1);\n        }\n    }\n    return minPaths[n - 1][m\
    \ - 1][0];\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n   \
    \ let res: number[] = [];\n    let min: number[] = [];\n    let visited: boolean[][]\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        visited[i] = [];\n       \
    \ for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n        }\n\
    \    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            res = [];\n            dfs(i, j, k, grid, visited, res);\n  \
    \          if (min.length === 0 || less(res, min)) {\n                min = res;\n\
    \            }\n        }\n    }\n    return min;\n}\n", "    let N = grid.length;\n\
    \    let M = grid[0].length;\n    let minPath: number[] = [];\n    let minPathSum\
    \ = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2: number[] = [];\n\
    \    let minPathSum3 = Infinity;\n    let minPath3: number[] = [];\n    let minPathSum4\
    \ = Infinity;\n    let minPath4: number[] = [];\n    let minPathSum5 = Infinity;\n\
    \    let minPath5: number[] = [];\n    let minPathSum6 = Infinity;\n    let minPath6:\
    \ number[] = [];\n    let minPathSum7 = Infinity;\n    let minPath7: number[]\
    \ = [];\n    let minPathSum8 = Infinity;\n    let minPath8: number[] = [];\n \
    \   let minPathSum9 = Infinity;\n    let minPath9: number[] = [];\n    let minPathSum10\
    \ = Infinity;\n    let minPath10: number[] = [];\n    let minPathSum11 = Infinity;\n\
    \    let minPath11: number[] = [];\n    let minPathSum12 = Infinity;\n    let\
    \ minPath12: number[] = [];\n    let minPathSum13 = Infinity;\n    let minPath13:\
    \ number[] = [];\n    let minPathSum14 = Infinity;\n    let minPath14: number[]\
    \ = [];\n    let minPathSum15 = Infinity;\n    let minPath15: number[] = [];\n\
    \    let minPathSum16 = Infinity;\n    let minPath16: number[] = [];\n    let\
    \ minPathSum17 = Infinity;\n    let minPath17: number[] = [];\n    let minPathSum18\
    \ = Infinity;\n    let minPath18: number[] = [];\n    let minPathSum19 = Infinity;\n\
    \    let minPath19: number[] = [];\n    let minPathSum20 = Infinity;\n    let\
    \ minPath20: number[] = [];\n    let minPathSum21 = Infinity;\n    let minPath21:\
    \ number[] = [];\n    let minPathSum22 = Infinity;\n    let minPath22: number[]\
    \ = [];\n    let minPathSum23 = Infinity;\n    let minPath23: number[] = [];\n\
    \    let minPathSum24 = Infinity;\n", "    // your code here\n    return [];\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let visited\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new\
    \ Array(m).fill(false);\n    }\n    let minPath = new Array(k);\n    let minPathValue\
    \ = Infinity;\n    let minPathIndex = 0;\n    let dfs = (i: number, j: number,\
    \ path: number[], pathValue: number, pathIndex: number) => {\n        if (pathIndex\
    \ === k) {\n            if (pathValue < minPathValue) {\n                minPath\
    \ = path.slice();\n                minPathValue = pathValue;\n               \
    \ minPathIndex = pathIndex;\n            }\n            return;\n        }\n \
    \       if (pathValue > minPathValue) {\n            return;\n        }\n    \
    \    visited[i][j] = true;\n        path[pathIndex] = grid[i][j];\n        pathValue\
    \ += grid[i][j];\n        if (i > 0 && !visited[i - 1][j]) {\n            dfs(i\
    \ - 1, j, path, pathValue, pathIndex + 1);\n        }\n        if (i < n - 1 &&\
    \ !visited[i + 1][j]) {\n            dfs(i + 1, j, path, pathValue, pathIndex\
    \ + 1);\n        }\n        if (j > 0 && !visited[i][j - 1]) {\n            dfs(i,\
    \ j - 1, path, pathValue, pathIndex + 1);\n        }\n        if (j < m - 1 &&\
    \ !visited[i][j + 1]) {\n            dfs(i, j + 1, path, pathValue, pathIndex\
    \ + 1);\n        }\n        visited[i][j] = false;\n    }\n    for (let i = 0;\
    \ i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i, j,\
    \ [], 0, 0);\n        }\n    }\n    return minPath;\n}\n", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const visited = new Set<string>();\n    const\
    \ queue = new PriorityQueue<[number[], number[]]>((a, b) => {\n        for (let\
    \ i = 0; i < a[1].length; i++) {\n            if (a[1][i] < b[1][i]) {\n     \
    \           return -1;\n            } else if (a[1][i] > b[1][i]) {\n        \
    \        return 1;\n            }\n        }\n        return 0;\n    });\n   \
    \ queue.enqueue([[0, 0], [grid[0][0]]]);\n    while (!queue.isEmpty()) {\n   \
    \     const [curr, path] = queue.dequeue();\n        if (path.length === k) {\n\
    \            return path;\n        }\n        const [i, j] = curr;\n        if\
    \ (i > 0 && !visited.has(`${i - 1},${j}`)) {\n            queue.enqueue([[i -\
    \ 1, j], [...path, grid[i - 1][j]]]);\n            visited.add(`${i - 1},${j}`);\n\
    \        }\n        if (i < n - 1 && !visited.has(`${i + 1},${j}`)) {\n      \
    \      queue.enqueue([[i + 1, j], [...path, grid[i + 1][j]]]);\n            visited.add(`${i\
    \ + 1},${j}`);\n        }\n        if (j > 0 && !visited.has(`${i},${j - 1}`))\
    \ {\n            queue.enqueue([[i, j - 1], [...path, grid[i][j - 1]]]);\n   \
    \         visited.add(`${i},${j - 1}`);\n        }\n        if (j < m - 1 && !visited.has(`${i},${j\
    \ + 1}`)) {\n            queue.enqueue([[i, j + 1], [...path, grid[i][j + 1]]]);\n\
    \            visited.add(`${i},${j + 1}`);\n        }\n   ", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n\
    \    let visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = new Array(m).fill(false);\n    }\n    let dfs = (i: number, j: number, path:\
    \ number[], pathSum: number) => {\n        if (path.length === k) {\n        \
    \    if (pathSum < minPathSum) {\n                minPathSum = pathSum;\n    \
    \            minPath = path;\n            }\n            return;\n        }\n\
    \        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n        \
    \    return;\n        }\n        visited[i][j] = true;\n        dfs(i - 1, j,\
    \ path.concat(grid[i][j]), pathSum + grid[i][j]);\n        dfs(i + 1, j, path.concat(grid[i][j]),\
    \ pathSum + grid[i][j]);\n        dfs(i, j - 1, path.concat(grid[i][j]), pathSum\
    \ + grid[i][j]);\n        dfs(i, j + 1, path.concat(grid[i][j]), pathSum + grid[i][j]);\n\
    \        visited[i][j] = false;\n    }\n    for (let i = 0; i < n; i++) {\n  \
    \      for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n\
    \    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let result:\
    \ number[] = [];\n    let min = Infinity;\n    let visited: boolean[][] = [];\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = [];\n        for (let\
    \ j = 0; j < n; j++) {\n            visited[i][j] = false;\n        }\n    }\n\
    \    function dfs(i: number, j: number, path: number[], sum: number) {\n     \
    \   if (sum > min) {\n            return;\n        }\n        if (path.length\
    \ === k) {\n            if (sum < min) {\n                min = sum;\n       \
    \         result = path.slice();\n            }\n            return;\n       \
    \ }\n        if (i < 0 || i >= n || j < 0 || j >= n || visited[i][j]) {\n    \
    \        return;\n        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n\
    \        dfs(i - 1, j, path, sum + grid[i][j]);\n        dfs(i + 1, j, path, sum\
    \ + grid[i][j]);\n        dfs(i, j - 1, path, sum + grid[i][j]);\n        dfs(i,\
    \ j + 1, path, sum + grid[i][j]);\n        path.pop();\n        visited[i][j]\
    \ = false;\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < n; j++) {\n            dfs(i, j, [], 0);\n        }\n    }\n    return result;\n\
    }\n", "    const n = grid.length;\n    const m = grid[0].length;\n    const dp\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(m);\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j] = new Array(k + 1);\n\
    \            for (let l = 0; l <= k; l++) {\n                dp[i][j][l] = new\
    \ Array(2);\n                dp[i][j][l][0] = Infinity;\n                dp[i][j][l][1]\
    \ = [];\n            }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j][1][0] = grid[i][j];\n\
    \            dp[i][j][1][1] = [grid[i][j]];\n        }\n    }\n    for (let l\
    \ = 2; l <= k; l++) {\n        for (let i = 0; i < n; i++) {\n            for\
    \ (let j = 0; j < m; j++) {\n                if (i > 0) {\n                  \
    \  const val = dp[i - 1][j][l - 1][0] + grid[i][j];\n                    if (val\
    \ < dp[i][j][l][0]) {\n                        dp[i][j][l][0] = val;\n       \
    \                 dp[i][j][l][1] = [...dp[i - 1][j][l - 1][1], grid[i][j]];\n\
    \                    }\n                }\n                if (j > 0) {\n    \
    \                const val = dp[i][j - 1][l - 1][0] + grid[i][j];\n          \
    \          if (val < dp[i][j][l][0]) {\n                        dp[i][j][l][0]\
    \ = val;\n                        dp[i][j][l][1] = [...dp[i][j - 1][l - 1][1],\
    \ grid[i][j", "    let n = grid.length;\n    let m = grid[0].length;\n    let\
    \ minPath: number[] = [];\n    let minSum = Infinity;\n    let minPaths: number[][]\
    \ = [];\n    let visited: boolean[][] = [];\n    for (let i = 0; i < n; i++) {\n\
    \        visited[i] = [];\n        for (let j = 0; j < m; j++) {\n           \
    \ visited[i][j] = false;\n        }\n    }\n    function dfs(i: number, j: number,\
    \ path: number[], sum: number) {\n        if (i < 0 || i >= n || j < 0 || j >=\
    \ m || visited[i][j]) {\n            return;\n        }\n        if (path.length\
    \ === k) {\n            if (sum < minSum) {\n                minSum = sum;\n \
    \               minPaths = [];\n                minPaths.push(path);\n       \
    \     } else if (sum === minSum) {\n                minPaths.push(path);\n   \
    \         }\n            return;\n        }\n        visited[i][j] = true;\n \
    \       path.push(grid[i][j]);\n        sum += grid[i][j];\n        dfs(i + 1,\
    \ j, path.slice(), sum);\n        dfs(i - 1, j, path.slice(), sum);\n        dfs(i,\
    \ j + 1, path.slice(), sum);\n        dfs(i, j - 1, path.slice(), sum);\n    \
    \    visited[i][j] = false;\n    }\n    for (let i = 0; i < n; i++) {\n      \
    \  for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n \
    \   }\n    minPaths.sort((a, b) => {\n        for (let i = 0; i < k; i++) {\n\
    \            if (a[i] < b[i]) {\n                return -1;\n            } else\
    \ if (a[i] > b[i]) {\n                return 1;\n            }\n        }\n  \
    \      return 0;\n    });\n    return minPaths[", "    // your code here\n   \
    \ return [];\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n \
    \   let minPath: number[] = [];\n    let minPathSum = Infinity;\n    let visited:\
    \ boolean[][] = [];\n    for (let i = 0; i < n; i++) {\n        visited[i] = [];\n\
    \        for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n \
    \       }\n    }\n    function dfs(i: number, j: number, path: number[], pathSum:\
    \ number) {\n        if (path.length === k) {\n            if (pathSum < minPathSum)\
    \ {\n                minPathSum = pathSum;\n                minPath = path.slice();\n\
    \            }\n            return;\n        }\n        if (i < 0 || i >= n ||\
    \ j < 0 || j >= m || visited[i][j]) {\n            return;\n        }\n      \
    \  visited[i][j] = true;\n        path.push(grid[i][j]);\n        pathSum += grid[i][j];\n\
    \        dfs(i - 1, j, path, pathSum);\n        dfs(i + 1, j, path, pathSum);\n\
    \        dfs(i, j - 1, path, pathSum);\n        dfs(i, j + 1, path, pathSum);\n\
    \        path.pop();\n        pathSum -= grid[i][j];\n        visited[i][j] =\
    \ false;\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j\
    \ < m; j++) {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let minPaths:\
    \ number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        minPaths[i] =\
    \ [];\n        for (let j = 0; j < m; j++) {\n            minPaths[i][j] = [];\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            if (i == 0 && j == 0) {\n                minPaths[i][j][0]\
    \ = grid[i][j];\n            } else if (i == 0) {\n                minPaths[i][j][0]\
    \ = grid[i][j] + minPaths[i][j - 1][0];\n            } else if (j == 0) {\n  \
    \              minPaths[i][j][0] = grid[i][j] + minPaths[i - 1][j][0];\n     \
    \       } else {\n                minPaths[i][j][0] = grid[i][j] + Math.min(minPaths[i\
    \ - 1][j][0], minPaths[i][j - 1][0]);\n            }\n        }\n    }\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n         \
    \   for (let l = 1; l < k; l++) {\n                if (i == 0 && j == 0) {\n \
    \                   minPaths[i][j][l] = grid[i][j];\n                } else if\
    \ (i == 0) {\n                    minPaths[i][j][l] = grid[i][j] + minPaths[i][j\
    \ - 1][l];\n                } else if (j == 0) {\n                    minPaths[i][j][l]\
    \ = grid[i][j] + minPaths[i - 1][j][l];\n                } else {\n          \
    \          minPaths[i][j][l] = grid[i][j] + Math.min(minPaths[i - 1][j][l", " \
    \   let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    let visited = [];\n    for (let i = 0; i\
    \ < n; i++) {\n        visited[i] = [];\n        for (let j = 0; j < m; j++) {\n\
    \            visited[i][j] = false;\n        }\n    }\n    let dfs = (i: number,\
    \ j: number, path: number[], sum: number) => {\n        if (i < 0 || i >= n ||\
    \ j < 0 || j >= m || visited[i][j]) {\n            return;\n        }\n      \
    \  path.push(grid[i][j]);\n        sum += grid[i][j];\n        if (path.length\
    \ === k) {\n            if (sum < minPathSum) {\n                minPathSum =\
    \ sum;\n                minPath = path.slice();\n            }\n            return;\n\
    \        }\n        visited[i][j] = true;\n        dfs(i - 1, j, path, sum);\n\
    \        dfs(i + 1, j, path, sum);\n        dfs(i, j - 1, path, sum);\n      \
    \  dfs(i, j + 1, path, sum);\n        visited[i][j] = false;\n    }\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i,\
    \ j, [], 0);\n        }\n    }\n    return minPath;\n}\n", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const visited = new Array(n).fill(0).map(()\
    \ => new Array(m).fill(false));\n    const queue = [[0, 0, 0, []]];\n    let minPath\
    \ = null;\n    while (queue.length) {\n        const [i, j, length, path] = queue.shift();\n\
    \        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) continue;\n\
    \        visited[i][j] = true;\n        const newPath = [...path, grid[i][j]];\n\
    \        if (length === k - 1) {\n            if (!minPath || minPath > newPath)\
    \ minPath = newPath;\n            continue;\n        }\n        queue.push([i\
    \ - 1, j, length + 1, newPath]);\n        queue.push([i + 1, j, length + 1, newPath]);\n\
    \        queue.push([i, j - 1, length + 1, newPath]);\n        queue.push([i,\
    \ j + 1, length + 1, newPath]);\n    }\n    return minPath;\n}\n", "    let n\
    \ = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let minPath = [];\n    let minSum = Infinity;\n    let minPathSum\
    \ = Infinity;\n    let dfs = (i: number, j: number, path: number[], sum: number)\
    \ => {\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n \
    \           return;\n        }\n        path.push(grid[i][j]);\n        sum +=\
    \ grid[i][j];\n        if (path.length === k) {\n            if (sum < minPathSum)\
    \ {\n                minPathSum = sum;\n                minPath = path.slice();\n\
    \            } else if (sum === minPathSum) {\n                if (path.join('')\
    \ < minPath.join('')) {\n                    minPath = path.slice();\n       \
    \         }\n            }\n            path.pop();\n            return;\n   \
    \     }\n        visited[i][j] = true;\n        dfs(i - 1, j, path, sum);\n  \
    \      dfs(i + 1, j, path, sum);\n        dfs(i, j - 1, path, sum);\n        dfs(i,\
    \ j + 1, path, sum);\n        visited[i][j] = false;\n        path.pop();\n  \
    \  }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n\
    \            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n}\n", " \
    \   let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2\
    \ = [];\n    let visited: boolean[][] = [];\n    for (let i = 0; i < n; i++) {\n\
    \        visited[i] = [];\n        for (let j = 0; j < m; j++) {\n           \
    \ visited[i][j] = false;\n        }\n    }\n    function dfs(i: number, j: number,\
    \ path: number[], sum: number) {\n        if (sum > minPathSum) {\n          \
    \  return;\n        }\n        if (path.length === k) {\n            if (sum <\
    \ minPathSum) {\n                minPathSum = sum;\n                minPath =\
    \ path;\n            }\n            return;\n        }\n        if (i > 0 && !visited[i\
    \ - 1][j]) {\n            visited[i - 1][j] = true;\n            dfs(i - 1, j,\
    \ path.concat(grid[i - 1][j]), sum + grid[i - 1][j]);\n            visited[i -\
    \ 1][j] = false;\n        }\n        if (i < n - 1 && !visited[i + 1][j]) {\n\
    \            visited[i + 1][j] = true;\n            dfs(i + 1, j, path.concat(grid[i\
    \ + 1][j]), sum + grid[i + 1][j]);\n            visited[i + 1][j] = false;\n \
    \       }\n        if (j > 0 && !visited[i][j - 1]) {\n            visited[i][j\
    \ - 1] = true;\n            dfs(i, j - 1, path.concat(grid[i][j - 1]), sum + grid[i][j\
    \ - 1]);\n            visited[i][j - 1] = false;\n        }\n        if (j < m\
    \ - 1 && !visited[i][j + 1]) {\n            visited[i][j + 1] = true;\n      \
    \      dfs(i, j + 1, path.concat(grid[i", "    let n = grid.length;\n    let m\
    \ = grid[0].length;\n    let visited = new Array(n);\n    for (let i = 0; i <\
    \ n; i++) {\n        visited[i] = new Array(m).fill(false);\n    }\n    let minPath\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            let path = [];\n            let pathSum = 0;\n            dfs(i,\
    \ j, k, path, pathSum, grid, visited, minPath);\n        }\n    }\n    return\
    \ minPath;\n}\n", "    // your code here\n    return [];\n}\n", "    const N =\
    \ grid.length;\n    const M = grid[0].length;\n    const visited = new Array(N).fill(0).map(()\
    \ => new Array(M).fill(false));\n    const queue = [[0, 0, 0, []]];\n    let minPath\
    \ = null;\n    while (queue.length > 0) {\n        const [i, j, pathLength, path]\
    \ = queue.shift();\n        if (pathLength === k) {\n            if (minPath ===\
    \ null || path < minPath) {\n                minPath = path;\n            }\n\
    \            continue;\n        }\n        if (i < 0 || i >= N || j < 0 || j >=\
    \ M || visited[i][j]) {\n            continue;\n        }\n        visited[i][j]\
    \ = true;\n        queue.push([i - 1, j, pathLength + 1, [...path, grid[i][j]]]);\n\
    \        queue.push([i + 1, j, pathLength + 1, [...path, grid[i][j]]]);\n    \
    \    queue.push([i, j - 1, pathLength + 1, [...path, grid[i][j]]]);\n        queue.push([i,\
    \ j + 1, pathLength + 1, [...path, grid[i][j]]]);\n    }\n    return minPath;\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let dp = new\
    \ Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(m);\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j] = new Array(k + 1);\n\
    \            for (let l = 0; l <= k; l++) {\n                dp[i][j][l] = new\
    \ Array(2);\n                dp[i][j][l][0] = Infinity;\n                dp[i][j][l][1]\
    \ = [];\n            }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j][1][0] = grid[i][j];\n\
    \            dp[i][j][1][1] = [grid[i][j]];\n        }\n    }\n    for (let l\
    \ = 2; l <= k; l++) {\n        for (let i = 0; i < n; i++) {\n            for\
    \ (let j = 0; j < m; j++) {\n                for (let di = -1; di <= 1; di++)\
    \ {\n                    for (let dj = -1; dj <= 1; dj++) {\n                \
    \        if (Math.abs(di) + Math.abs(dj) === 1) {\n                          \
    \  let ni = i + di;\n                            let nj = j + dj;\n          \
    \                  if (ni >= 0 && ni < n && nj >= 0 && nj < m) {\n           \
    \                     let min = dp[ni][nj][l - 1][0];\n                      \
    \          let path = dp[ni][nj][l - 1][1];\n                                if\
    \ (min < dp[i][j][l][0]) {\n                                    dp[i][j][l][0]\
    \ = min;\n                                    dp[i][j][l][1] = path.slice();\n\
    \                                }\n                                if (min ===\
    \ dp[i][j][l][0]) {", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let min = Infinity;\n    let minPath = [];\n    let visited = new Set();\n\
    \    let queue = [];\n    let start = {\n        x: 0,\n        y: 0,\n      \
    \  path: [],\n        length: 0\n    };\n    queue.push(start);\n    while (queue.length)\
    \ {\n        let current = queue.shift();\n        if (current.length === k) {\n\
    \            if (current.path.length < min) {\n                min = current.path.length;\n\
    \                minPath = current.path;\n            }\n            continue;\n\
    \        }\n        let neighbors = getNeighbors(current.x, current.y, n, m);\n\
    \        for (let neighbor of neighbors) {\n            let x = neighbor[0];\n\
    \            let y = neighbor[1];\n            let key = `${x},${y}`;\n      \
    \      if (visited.has(key)) {\n                continue;\n            }\n   \
    \         visited.add(key);\n            let path = current.path.slice();\n  \
    \          path.push(grid[x][y]);\n            let length = current.length + 1;\n\
    \            let next = {\n                x: x,\n                y: y,\n    \
    \            path: path,\n                length: length\n            };\n   \
    \         queue.push(next);\n        }\n    }\n    return minPath;\n}\n", "  \
    \  let n = grid.length;\n    let m = grid[0].length;\n    let minPath: number[]\
    \ = [];\n    let minPathSum = Infinity;\n    let visited: boolean[][] = [];\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = [];\n        for (let\
    \ j = 0; j < m; j++) {\n            visited[i][j] = false;\n        }\n    }\n\
    \    function dfs(i: number, j: number, path: number[], pathSum: number) {\n \
    \       if (path.length === k) {\n            if (pathSum < minPathSum) {\n  \
    \              minPathSum = pathSum;\n                minPath = path.slice();\n\
    \            }\n            return;\n        }\n        if (i < 0 || i >= n ||\
    \ j < 0 || j >= m || visited[i][j]) {\n            return;\n        }\n      \
    \  visited[i][j] = true;\n        path.push(grid[i][j]);\n        pathSum += grid[i][j];\n\
    \        dfs(i - 1, j, path, pathSum);\n        dfs(i + 1, j, path, pathSum);\n\
    \        dfs(i, j - 1, path, pathSum);\n        dfs(i, j + 1, path, pathSum);\n\
    \        path.pop();\n        pathSum -= grid[i][j];\n        visited[i][j] =\
    \ false;\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j\
    \ < m; j++) {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let visited\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        visited.push([]);\n      \
    \  for (let j = 0; j < m; j++) {\n            visited[i].push(false);\n      \
    \  }\n    }\n    let minPath = [];\n    let minSum = Infinity;\n    let dfs =\
    \ (i: number, j: number, path: number[], sum: number) => {\n        if (i < 0\
    \ || i >= n || j < 0 || j >= m || visited[i][j]) {\n            return;\n    \
    \    }\n        path.push(grid[i][j]);\n        sum += grid[i][j];\n        if\
    \ (path.length === k) {\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n                minPath = path.slice();\n            }\n           \
    \ return;\n        }\n        visited[i][j] = true;\n        dfs(i - 1, j, path,\
    \ sum);\n        dfs(i + 1, j, path, sum);\n        dfs(i, j - 1, path, sum);\n\
    \        dfs(i, j + 1, path, sum);\n        visited[i][j] = false;\n        path.pop();\n\
    \    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2\
    \ = [];\n    let visited = new Array(n).fill(0).map(() => new Array(m).fill(false));\n\
    \    function dfs(i: number, j: number, path: number[], pathSum: number) {\n \
    \       if (path.length === k) {\n            if (pathSum < minPathSum) {\n  \
    \              minPathSum = pathSum;\n                minPath = path;\n      \
    \      } else if (pathSum === minPathSum) {\n                if (path < minPath)\
    \ {\n                    minPath = path;\n                }\n            }\n \
    \           return;\n        }\n        if (i > 0 && !visited[i - 1][j]) {\n \
    \           visited[i - 1][j] = true;\n            dfs(i - 1, j, path.concat(grid[i\
    \ - 1][j]), pathSum + grid[i - 1][j]);\n            visited[i - 1][j] = false;\n\
    \        }\n        if (i < n - 1 && !visited[i + 1][j]) {\n            visited[i\
    \ + 1][j] = true;\n            dfs(i + 1, j, path.concat(grid[i + 1][j]), pathSum\
    \ + grid[i + 1][j]);\n            visited[i + 1][j] = false;\n        }\n    \
    \    if (j > 0 && !visited[i][j - 1]) {\n            visited[i][j - 1] = true;\n\
    \            dfs(i, j - 1, path.concat(grid[i][j - 1]), pathSum + grid[i][j -\
    \ 1]);\n            visited[i][j - 1] = false;\n        }\n        if (j < m -\
    \ 1 && !visited[i][j + 1]) {\n            visited[i][j + 1] = true;\n        \
    \    dfs(i, j + 1, path.concat(grid[i][j + 1]), pathSum + grid[i][j + 1]);\n \
    \           visited", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n      \
    \  visited[i] = new Array(m).fill(false);\n    }\n    const queue = new PriorityQueue<[number,\
    \ number, number[]]>();\n    queue.enqueue([0, 0, [grid[0][0]]]);\n    visited[0][0]\
    \ = true;\n    while (!queue.isEmpty()) {\n        const [i, j, path] = queue.dequeue();\n\
    \        if (path.length === k) {\n            return path;\n        }\n     \
    \   if (i > 0 && !visited[i - 1][j]) {\n            visited[i - 1][j] = true;\n\
    \            queue.enqueue([i - 1, j, [...path, grid[i - 1][j]]]);\n        }\n\
    \        if (i < n - 1 && !visited[i + 1][j]) {\n            visited[i + 1][j]\
    \ = true;\n            queue.enqueue([i + 1, j, [...path, grid[i + 1][j]]]);\n\
    \        }\n        if (j > 0 && !visited[i][j - 1]) {\n            visited[i][j\
    \ - 1] = true;\n            queue.enqueue([i, j - 1, [...path, grid[i][j - 1]]]);\n\
    \        }\n        if (j < m - 1 && !visited[i][j + 1]) {\n            visited[i][j\
    \ + 1] = true;\n            queue.enqueue([i, j + 1, [...path, grid[i][j + 1]]]);\n\
    \        }\n    }\n    return [];\n}\n", "    let n = grid.length;\n    let m\
    \ = grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n \
    \   let minPathSum2 = Infinity;\n    let minPath2 = [];\n    let visited = [];\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = [];\n        for (let\
    \ j = 0; j < m; j++) {\n            visited[i][j] = false;\n        }\n    }\n\
    \    let dfs = function (i: number, j: number, path: number[], pathSum: number)\
    \ {\n        if (path.length === k) {\n            if (pathSum < minPathSum) {\n\
    \                minPathSum = pathSum;\n                minPath = path.slice();\n\
    \            } else if (pathSum === minPathSum) {\n                if (path.toString()\
    \ < minPath.toString()) {\n                    minPath = path.slice();\n     \
    \           }\n            }\n            return;\n        }\n        if (i >\
    \ 0 && !visited[i - 1][j]) {\n            visited[i - 1][j] = true;\n        \
    \    dfs(i - 1, j, path.concat(grid[i - 1][j]), pathSum + grid[i - 1][j]);\n \
    \           visited[i - 1][j] = false;\n        }\n        if (i < n - 1 && !visited[i\
    \ + 1][j]) {\n            visited[i + 1][j] = true;\n            dfs(i + 1, j,\
    \ path.concat(grid[i + 1][j]), pathSum + grid[i + 1][j]);\n            visited[i\
    \ + 1][j] = false;\n        }\n        if (j > 0 && !visited[i][j - 1]) {\n  \
    \          visited[i][j - 1] = true;\n            dfs(i, j - 1, path.concat(grid[i][j\
    \ - 1]), pathSum + grid[i][j - 1]);\n            visited[i][j - 1] = false;\n\
    \        }\n        if (j < m - 1 && !visited[i][j + 1]) {\n           ", "  \
    \  let n = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let minPath = new Array(k).fill(Infinity);\n    let minPaths = [];\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          dfs(i, j, 0, grid[i][j], [grid[i][j]]);\n        }\n    }\n    return\
    \ minPaths[0];\n\n    function dfs(i: number, j: number, step: number, sum: number,\
    \ path: number[]) {\n        if (step === k) {\n            if (sum < minPath[k\
    \ - 1]) {\n                minPath = path.slice();\n                minPaths =\
    \ [path];\n            } else if (sum === minPath[k - 1]) {\n                minPaths.push(path);\n\
    \            }\n            return;\n        }\n        if (sum >= minPath[step])\
    \ {\n            return;\n        }\n        visited[i][j] = true;\n        if\
    \ (i > 0 && !visited[i - 1][j]) {\n            dfs(i - 1, j, step + 1, sum + grid[i\
    \ - 1][j], path.concat(grid[i - 1][j]));\n        }\n        if (i < n - 1 &&\
    \ !visited[i + 1][j]) {\n            dfs(i + 1, j, step + 1, sum + grid[i + 1][j],\
    \ path.concat(grid[i + 1][j]));\n        }\n        if (j > 0 && !visited[i][j\
    \ - 1]) {\n            dfs(i, j - 1, step + 1, sum + grid[i][j - 1], path.concat(grid[i][j\
    \ - 1]));\n        }\n        if (j < m - 1 && !visited[i][j + 1]) {\n       \
    \     dfs(i, j + 1", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let visited = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = new Array(m).fill(false);\n    }\n    let minPath = new Array(k).fill(Infinity);\n\
    \    let minPaths = [];\n    for (let i = 0; i < n; i++) {\n        for (let j\
    \ = 0; j < m; j++) {\n            dfs(i, j, k, 0, grid, visited, [], minPath,\
    \ minPaths);\n        }\n    }\n    return minPaths[0];\n}\n", "    const n =\
    \ grid.length;\n    const m = grid[0].length;\n    const visited = new Set<number>();\n\
    \    const queue = new PriorityQueue<number>((a, b) => a < b);\n    queue.enqueue(grid[0][0]);\n\
    \    visited.add(grid[0][0]);\n    const path = [grid[0][0]];\n    let i = 0;\n\
    \    let j = 0;\n    while (k > 0) {\n        const current = queue.dequeue();\n\
    \        if (i > 0 && !visited.has(grid[i - 1][j])) {\n            queue.enqueue(grid[i\
    \ - 1][j]);\n            visited.add(grid[i - 1][j]);\n        }\n        if (i\
    \ < n - 1 && !visited.has(grid[i + 1][j])) {\n            queue.enqueue(grid[i\
    \ + 1][j]);\n            visited.add(grid[i + 1][j]);\n        }\n        if (j\
    \ > 0 && !visited.has(grid[i][j - 1])) {\n            queue.enqueue(grid[i][j\
    \ - 1]);\n            visited.add(grid[i][j - 1]);\n        }\n        if (j <\
    \ m - 1 && !visited.has(grid[i][j + 1])) {\n            queue.enqueue(grid[i][j\
    \ + 1]);\n            visited.add(grid[i][j + 1]);\n        }\n        if (current\
    \ === grid[i - 1][j]) {\n            i--;\n        } else if (current === grid[i\
    \ + 1][j]) {\n            i++;\n        } else if (current === grid[i][j - 1])\
    \ {\n            j--;\n        } else if (current === grid[i][j + 1]) {\n    \
    \        j++;\n        }\n        path.push(current);\n        k--;\n    }\n \
    \   return path;\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minPathSum = Infinity;\n    let minPathSum2 =\
    \ Infinity;\n    let minPath2 = [];\n    let visited = new Array(n);\n    for\
    \ (let i = 0; i < n; i++) {\n        visited[i] = new Array(m);\n        for (let\
    \ j = 0; j < m; j++) {\n            visited[i][j] = false;\n        }\n    }\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          let path = [];\n            let pathSum = 0;\n            let pathSum2\
    \ = 0;\n            let path2 = [];\n            let visited2 = new Array(n);\n\
    \            for (let i = 0; i < n; i++) {\n                visited2[i] = new\
    \ Array(m);\n                for (let j = 0; j < m; j++) {\n                 \
    \   visited2[i][j] = false;\n                }\n            }\n            dfs(grid,\
    \ i, j, k, path, pathSum, pathSum2, path2, visited, visited2);\n            if\
    \ (pathSum < minPathSum) {\n                minPathSum = pathSum;\n          \
    \      minPath = path;\n            }\n            if (pathSum2 < minPathSum2)\
    \ {\n                minPathSum2 = pathSum2;\n                minPath2 = path2;\n\
    \            }\n        }\n    }\n    if (minPathSum < minPathSum2) {\n      \
    \  return minPath;\n    } else {\n        return minPath2;\n    }\n}\n", "   \
    \ const n = grid.length;\n    const m = grid[0].length;\n    const visited = new\
    \ Array(n).fill(0).map(() => new Array(m).fill(false));\n    const queue = [[0,\
    \ 0, 0, [grid[0][0]]]];\n    let minPath = null;\n    while (queue.length > 0)\
    \ {\n        const [i, j, l, path] = queue.shift();\n        if (l === k) {\n\
    \            if (minPath === null || path.join('') < minPath.join('')) {\n   \
    \             minPath = path;\n            }\n            continue;\n        }\n\
    \        if (i > 0 && !visited[i - 1][j]) {\n            visited[i - 1][j] = true;\n\
    \            queue.push([i - 1, j, l + 1, [...path, grid[i - 1][j]]]);\n     \
    \   }\n        if (i < n - 1 && !visited[i + 1][j]) {\n            visited[i +\
    \ 1][j] = true;\n            queue.push([i + 1, j, l + 1, [...path, grid[i + 1][j]]]);\n\
    \        }\n        if (j > 0 && !visited[i][j - 1]) {\n            visited[i][j\
    \ - 1] = true;\n            queue.push([i, j - 1, l + 1, [...path, grid[i][j -\
    \ 1]]]);\n        }\n        if (j < m - 1 && !visited[i][j + 1]) {\n        \
    \    visited[i][j + 1] = true;\n            queue.push([i, j + 1, l + 1, [...path,\
    \ grid[i][j + 1]]]);\n        }\n    }\n    return minPath;\n}\n", "    let n\
    \ = grid.length;\n    let m = grid[0].length;\n    let dp: number[][][] = [];\n\
    \    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j =\
    \ 0; j < m; j++) {\n            dp[i][j] = [];\n            for (let l = 0; l\
    \ < k; l++) {\n                dp[i][j][l] = Infinity;\n            }\n      \
    \  }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m;\
    \ j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n    }\n    for (let\
    \ l = 1; l < k; l++) {\n        for (let i = 0; i < n; i++) {\n            for\
    \ (let j = 0; j < m; j++) {\n                let min = Infinity;\n           \
    \     if (i > 0) {\n                    min = Math.min(min, dp[i - 1][j][l - 1]);\n\
    \                }\n                if (i < n - 1) {\n                    min\
    \ = Math.min(min, dp[i + 1][j][l - 1]);\n                }\n                if\
    \ (j > 0) {\n                    min = Math.min(min, dp[i][j - 1][l - 1]);\n \
    \               }\n                if (j < m - 1) {\n                    min =\
    \ Math.min(min, dp[i][j + 1][l - 1]);\n                }\n                dp[i][j][l]\
    \ = min;\n            }\n        }\n    }\n    let min = Infinity;\n    let minI\
    \ = -1;\n    let minJ = -1;\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {\n            if (dp[i][j][k - 1] < min) {\n           \
    \     min = dp[i][j][k - 1];\n                minI = i;\n                minJ\
    \ = j;\n            }\n        }", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i]\
    \ = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n \
    \           for (let l = 0; l < k; l++) {\n                dp[i][j][l] = -1;\n\
    \            }\n        }\n    }\n    let min = Infinity;\n    let minPath = [];\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          let path = minPathHelper(grid, dp, i, j, k);\n            if (path[0]\
    \ < min) {\n                min = path[0];\n                minPath = path[1];\n\
    \            }\n        }\n    }\n    return minPath;\n}\n", "  let n = grid.length;\n\
    \  let m = grid[0].length;\n  let visited = new Array(n);\n  for (let i = 0; i\
    \ < n; i++) {\n    visited[i] = new Array(m).fill(false);\n  }\n  let minPath\
    \ = [];\n  let minPathSum = Infinity;\n  let minPathSum2 = Infinity;\n  let minPath2\
    \ = [];\n  let dfs = (i: number, j: number, path: number[], pathSum: number) =>\
    \ {\n    if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n      return;\n\
    \    }\n    if (path.length === k) {\n      if (pathSum < minPathSum) {\n    \
    \    minPathSum = pathSum;\n        minPath = path;\n      } else if (pathSum\
    \ === minPathSum) {\n        if (path.join(\"\") < minPath.join(\"\")) {\n   \
    \       minPath = path;\n        }\n      }\n      return;\n    }\n    visited[i][j]\
    \ = true;\n    path.push(grid[i][j]);\n    pathSum += grid[i][j];\n    dfs(i +\
    \ 1, j, path.slice(), pathSum);\n    dfs(i - 1, j, path.slice(), pathSum);\n \
    \   dfs(i, j + 1, path.slice(), pathSum);\n    dfs(i, j - 1, path.slice(), pathSum);\n\
    \    visited[i][j] = false;\n  };\n  for (let i = 0; i < n; i++) {\n    for (let\
    \ j = 0; j < m; j++) {\n      dfs(i, j, [], 0);\n    }\n  }\n  return minPath;\n\
    }\n", "    // your code goes here\n}\n", "    // your code goes here\n    return\
    \ [];\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let visited\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new\
    \ Array(m).fill(false);\n    }\n    let minPath = new Array(k);\n    let minSum\
    \ = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {\n            let path = new Array(k);\n            let\
    \ sum = 0;\n            visited[i][j] = true;\n            path[0] = grid[i][j];\n\
    \            sum += grid[i][j];\n            dfs(grid, visited, path, sum, i,\
    \ j, 1, k, minPath, minSum);\n            visited[i][j] = false;\n        }\n\
    \    }\n    return minPath;\n}\n", "    // your code here\n    return [];\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let minPath = [];\n    let minPathSum = Infinity;\n    let minPathSum2\
    \ = Infinity;\n    let minPath2 = [];\n    let dfs = (i: number, j: number, path:\
    \ number[], pathSum: number) => {\n        if (i < 0 || i >= n || j < 0 || j >=\
    \ m || visited[i][j]) {\n            return;\n        }\n        if (path.length\
    \ === k) {\n            if (pathSum < minPathSum) {\n                minPathSum\
    \ = pathSum;\n                minPath = path.slice();\n            } else if (pathSum\
    \ === minPathSum) {\n                if (path.toString() < minPath.toString())\
    \ {\n                    minPath = path.slice();\n                }\n        \
    \    }\n            return;\n        }\n        visited[i][j] = true;\n      \
    \  path.push(grid[i][j]);\n        pathSum += grid[i][j];\n        dfs(i - 1,\
    \ j, path, pathSum);\n        dfs(i + 1, j, path, pathSum);\n        dfs(i, j\
    \ - 1, path, pathSum);\n        dfs(i, j + 1, path, pathSum);\n        path.pop();\n\
    \        pathSum -= grid[i][j];\n        visited[i][j] = false;\n    }\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n         \
    \   dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n}\n", "    const\
    \ n = grid.length;\n    const m = grid[0].length;\n    const visited = new Array(n).fill(0).map(()\
    \ => new Array(m).fill(false));\n    const queue = [[0, 0, [grid[0][0]]]];\n \
    \   const ans = [Infinity, Infinity];\n    while (queue.length) {\n        const\
    \ [x, y, path] = queue.shift();\n        if (path.length === k) {\n          \
    \  if (path.join('') < ans.join('')) {\n                ans.splice(0, ans.length,\
    \ ...path);\n            }\n            continue;\n        }\n        if (x >\
    \ 0 && !visited[x - 1][y]) {\n            visited[x - 1][y] = true;\n        \
    \    queue.push([x - 1, y, [...path, grid[x - 1][y]]]);\n        }\n        if\
    \ (x < n - 1 && !visited[x + 1][y]) {\n            visited[x + 1][y] = true;\n\
    \            queue.push([x + 1, y, [...path, grid[x + 1][y]]]);\n        }\n \
    \       if (y > 0 && !visited[x][y - 1]) {\n            visited[x][y - 1] = true;\n\
    \            queue.push([x, y - 1, [...path, grid[x][y - 1]]]);\n        }\n \
    \       if (y < m - 1 && !visited[x][y + 1]) {\n            visited[x][y + 1]\
    \ = true;\n            queue.push([x, y + 1, [...path, grid[x][y + 1]]]);\n  \
    \      }\n    }\n    return ans;\n}\n", "    const n = grid.length;\n    const\
    \ m = grid[0].length;\n    const visited = new Set<string>();\n    const queue\
    \ = [[0, 0, 0, []]];\n    let minPath: number[] = [];\n    while (queue.length\
    \ > 0) {\n        const [i, j, l, path] = queue.shift()!;\n        if (l === k)\
    \ {\n            if (minPath.length === 0 || path < minPath) {\n             \
    \   minPath = path;\n            }\n            continue;\n        }\n       \
    \ if (i < 0 || i >= n || j < 0 || j >= m) {\n            continue;\n        }\n\
    \        const key = `${i},${j}`;\n        if (visited.has(key)) {\n         \
    \   continue;\n        }\n        visited.add(key);\n        queue.push([i - 1,\
    \ j, l + 1, [...path, grid[i][j]]]);\n        queue.push([i + 1, j, l + 1, [...path,\
    \ grid[i][j]]]);\n        queue.push([i, j - 1, l + 1, [...path, grid[i][j]]]);\n\
    \        queue.push([i, j + 1, l + 1, [...path, grid[i][j]]]);\n    }\n    return\
    \ minPath;\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n   \
    \ let visited = new Set<string>();\n    let minPath = new Array<number>();\n \
    \   let minSum = Infinity;\n    let minPathSum = Infinity;\n    let path = new\
    \ Array<number>();\n    let pathSum = 0;\n    for (let i = 0; i < n; i++) {\n\
    \        for (let j = 0; j < m; j++) {\n            dfs(i, j, k);\n        }\n\
    \    }\n    return minPath;\n\n    function dfs(i: number, j: number, k: number)\
    \ {\n        if (i < 0 || i >= n || j < 0 || j >= m) return;\n        if (k <\
    \ 0) return;\n        let key = `${i},${j}`;\n        if (visited.has(key)) return;\n\
    \        visited.add(key);\n        path.push(grid[i][j]);\n        pathSum +=\
    \ grid[i][j];\n        if (k === 0) {\n            if (pathSum < minPathSum) {\n\
    \                minPathSum = pathSum;\n                minPath = path.slice();\n\
    \            } else if (pathSum === minPathSum) {\n                if (path.join('')\
    \ < minPath.join('')) {\n                    minPath = path.slice();\n       \
    \         }\n            }\n        } else {\n            dfs(i - 1, j, k - 1);\n\
    \            dfs(i + 1, j, k - 1);\n            dfs(i, j - 1, k - 1);\n      \
    \      dfs(i, j + 1, k - 1);\n        }\n        path.pop();\n        pathSum\
    \ -= grid[i][j];\n        visited.delete(key);\n    }\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let matrix = [];\n    for (let i = 0; i < n;\
    \ i++) {\n        matrix[i] = [];\n        for (let j = 0; j < m; j++) {\n   \
    \         matrix[i][j] = {\n                value: grid[i][j],\n             \
    \   visited: false,\n                path: [],\n                minPath: [],\n\
    \                minPathLength: Infinity\n            };\n        }\n    }\n \
    \   let minPath = [];\n    let minPathLength = Infinity;\n    for (let i = 0;\
    \ i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            let cell =\
    \ matrix[i][j];\n            cell.visited = true;\n            cell.path.push(cell.value);\n\
    \            let pathLength = 1;\n            let path = [cell.value];\n     \
    \       let queue = [cell];\n            while (queue.length > 0) {\n        \
    \        let cell = queue.shift();\n                let i = cell.i;\n        \
    \        let j = cell.j;\n                if (i > 0 && !matrix[i - 1][j].visited)\
    \ {\n                    matrix[i - 1][j].visited = true;\n                  \
    \  matrix[i - 1][j].path = cell.path.slice();\n                    matrix[i -\
    \ 1][j].path.push(matrix[i - 1][j].value);\n                    queue.push(matrix[i\
    \ - 1][j]);\n                }\n                if (i < n - 1 && !matrix[i + 1][j].visited)\
    \ {\n                    matrix[i + 1][j].visited = true;\n                  \
    \  matrix[i + 1][j].path = cell.path.slice();\n                    matrix[i +\
    \ 1][j].path.push(matrix[i + 1][j].value);\n                    queue.push(matrix[i\
    \ + 1][j]);\n                }\n                if (j > 0 && !matrix[i][j - 1].visited)\
    \ {\n                    matrix[i][j - 1].visited = true;\n                  \
    \  matrix[i][j - 1].path =", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath: number[] = [];\n    let minPathSum = Infinity;\n    let visited\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        visited[i] = new\
    \ Array(m).fill(false);\n    }\n    let dfs = (i: number, j: number, path: number[],\
    \ pathSum: number) => {\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j])\
    \ {\n            return;\n        }\n        path.push(grid[i][j]);\n        pathSum\
    \ += grid[i][j];\n        visited[i][j] = true;\n        if (path.length === k)\
    \ {\n            if (pathSum < minPathSum) {\n                minPathSum = pathSum;\n\
    \                minPath = path.slice();\n            }\n        } else {\n  \
    \          dfs(i - 1, j, path, pathSum);\n            dfs(i + 1, j, path, pathSum);\n\
    \            dfs(i, j - 1, path, pathSum);\n            dfs(i, j + 1, path, pathSum);\n\
    \        }\n        path.pop();\n        pathSum -= grid[i][j];\n        visited[i][j]\
    \ = false;\n    };\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n\
    }\n", "    const n = grid.length;\n    const m = grid[0].length;\n    const visited\
    \ = new Array(n).fill(0).map(() => new Array(m).fill(false));\n    const queue\
    \ = [[0, 0, 0, [grid[0][0]]]];\n    let minPath = [];\n    while (queue.length)\
    \ {\n        const [i, j, len, path] = queue.shift();\n        if (len === k)\
    \ {\n            if (!minPath.length || path.join('') < minPath.join('')) {\n\
    \                minPath = path;\n            }\n            continue;\n     \
    \   }\n        if (i > 0 && !visited[i - 1][j]) {\n            visited[i - 1][j]\
    \ = true;\n            queue.push([i - 1, j, len + 1, [...path, grid[i - 1][j]]]);\n\
    \        }\n        if (i < n - 1 && !visited[i + 1][j]) {\n            visited[i\
    \ + 1][j] = true;\n            queue.push([i + 1, j, len + 1, [...path, grid[i\
    \ + 1][j]]]);\n        }\n        if (j > 0 && !visited[i][j - 1]) {\n       \
    \     visited[i][j - 1] = true;\n            queue.push([i, j - 1, len + 1, [...path,\
    \ grid[i][j - 1]]]);\n        }\n        if (j < m - 1 && !visited[i][j + 1])\
    \ {\n            visited[i][j + 1] = true;\n            queue.push([i, j + 1,\
    \ len + 1, [...path, grid[i][j + 1]]]);\n        }\n    }\n    return minPath;\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath:\
    \ number[] = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let minPaths: number[][] = [];\n    let minPathsSum: number[] = [];\n   \
    \ let visited: boolean[][] = [];\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = [];\n        for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n\
    \        }\n    }\n    let dfs = (i: number, j: number, path: number[], sum: number,\
    \ pathSum: number) => {\n        if (sum > k) {\n            return;\n       \
    \ }\n        if (sum === k) {\n            if (pathSum < minPathSum) {\n     \
    \           minPathSum = pathSum;\n                minPaths = [path];\n      \
    \          minPathsSum = [pathSum];\n            } else if (pathSum === minPathSum)\
    \ {\n                minPaths.push(path);\n                minPathsSum.push(pathSum);\n\
    \            }\n            return;\n        }\n        if (i > 0 && !visited[i\
    \ - 1][j]) {\n            visited[i - 1][j] = true;\n            dfs(i - 1, j,\
    \ path.concat(grid[i - 1][j]), sum + 1, pathSum + grid[i - 1][j]);\n         \
    \   visited[i - 1][j] = false;\n        }\n        if (i < n - 1 && !visited[i\
    \ + 1][j]) {\n            visited[i + 1][j] = true;\n            dfs(i + 1, j,\
    \ path.concat(grid[i + 1][j]), sum + 1, pathSum + grid[i + 1][j]);\n         \
    \   visited[i + 1][j] = false;\n        }\n        if (j > 0 && !visited[i][j\
    \ - 1]) {\n            visited[i][j - 1] = true;\n            dfs(i, j - 1, path.concat(grid[i][j"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
