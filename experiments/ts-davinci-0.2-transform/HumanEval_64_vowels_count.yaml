name: HumanEval_64_vowels_count
language: ts
prompt: "//Write a function vowels_count which takes a string representing\n// a word\
  \ as input and returns the number of vowels in the string.\n// Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is\
  \ at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n//\
  \ 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s: string): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = vowels_count;\n  assert.deepEqual(candidate(\"abcde\"\
  ),2);\n  assert.deepEqual(candidate(\"Alone\"),3);\n  assert.deepEqual(candidate(\"\
  key\"),2);\n  assert.deepEqual(candidate(\"bye\"),1);\n  assert.deepEqual(candidate(\"\
  keY\"),2);\n  assert.deepEqual(candidate(\"bYe\"),1);\n  assert.deepEqual(candidate(\"\
  ACEDY\"),3);\n}\n\ntest();"
completions: ["  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]\
    \ === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] ===\
    \ \"u\") {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === \"y\") {\n \
    \   count++;\n  }\n  return count;\n}\n", "    let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n      \
    \  if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nconsole.log(vowels_count(\"abcde\"));\nconsole.log(vowels_count(\"\
    ACEDY\"));\n", "  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n   \
    \ if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" ||\
    \ s[i] === \"u\") {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === \"\
    y\") {\n    count++;\n  }\n  return count;\n}\n", "    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++)\
    \ {\n        if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n \
    \       if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\n", "    let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n      \
    \  if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n", "    let count = 0;\n    for (let i = 0; i <\
    \ s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' ||\
    \ s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n", "    let count = 0;\n    for (let i =\
    \ 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] ===\
    \ 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n \
    \       if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\n", "    let count = 0;\n    for (let i =\
    \ 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] ===\
    \ 'i' || s[i] === 'o' || s[i] === 'u' || (s[i] === 'y' && i === s.length - 1))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a'\
    \ || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] ===\
    \ 'y') {\n            count++;\n        }\n    }\n    return count;\n}\n", " \
    \   let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a'\
    \ || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] ===\
    \ 'y') {\n            count++;\n        }\n    }\n    return count;\n}\n", " \
    \   let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]\
    \ === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i]\
    \ === 'y') {\n            count++;\n        }\n    }\n    return count;\n}\n",
  "    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]\
    \ === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || (s[i]\
    \ === 'y' && i === s.length - 1)) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"\
    o\" || s[i] === \"u\") {\n      count++;\n    }\n  }\n  if (s[s.length - 1] ===\
    \ \"y\") {\n    count++;\n  }\n  return count;\n}\n", "    let count = 0;\n  \
    \  for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] ===\
    \ 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n", "  let count =\
    \ 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"a\" || s[i] ===\
    \ \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\") {\n      count++;\n\
    \    }\n  }\n  if (s[s.length - 1] === \"y\") {\n    count++;\n  }\n  return count;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if\
    \ (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'\
    \ || s[i] === 'y') {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if\
    \ (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'\
    \ || (s[i] === 'y' && i === s.length - 1)) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
