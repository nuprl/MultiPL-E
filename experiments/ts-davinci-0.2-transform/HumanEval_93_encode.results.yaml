language: ts
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmxc86tff.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmxc86tff.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738256
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        result +=\
    \ char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjmxwd0cs.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjmxwd0cs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char = message[i];\n        if (char\
    \ === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n            encodedMessage += message[i + 2];\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqhfiztrl.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqhfiztrl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738258
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let char: string = message[i];\n        if (char === char.toUpperCase()) {\n\
    \            result += char.toLowerCase();\n        } else {\n            result\
    \ += char.toUpperCase();\n        }\n        if (vowels.includes(char)) {\n  \
    \          let index: number = vowels.indexOf(char);\n            result = result.slice(0,\
    \ result.length - 1) + vowels[(index + 2) % 5];\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmdvty3pz.ts(21,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    let vowels: string\
    \ = 'aeiou';\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter)\
    \ !== -1) {\n            let indexOfVowel: number = vowels.indexOf(currentLetter);\n\
    \            let newIndexOfVowel: number = indexOfVowel + 2;\n            if (newIndexOfVowel\
    \ > 4) {\n                newIndexOfVowel = newIndexOfVowel - 5;\n           \
    \ }\n            encodedMessage += vowels[newIndexOfVowel];\n        } else {\n\
    \            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiy77vh2_.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiy77vh2_.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'tost

    Thus us i mossigo

    '
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    const vowels = \"aeiou\";\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n \
    \       let char = message[i];\n        if (char === char.toUpperCase()) {\n \
    \           char = char.toLowerCase();\n            encoded += alphabet[(alphabet.indexOf(char)\
    \ + 2) % 26].toUpperCase();\n        } else {\n            encoded += alphabet[(alphabet.indexOf(char)\
    \ + 2) % 26];\n        }\n    }\n    return encoded;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsmcsw9um.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsmcsw9um.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar)\
    \ !== -1) {\n            let indexOfVowel: number = vowels.indexOf(currentChar);\n\
    \            let newIndex: number = (indexOfVowel + 2) % 5;\n            encodedMessage\
    \ += vowels[newIndex];\n        } else {\n            encodedMessage += currentChar;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp966dto6z.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp966dto6z.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase())\
    \ !== -1) {\n            let indexOfVowel: number = vowels.indexOf(char.toLowerCase());\n\
    \            let newIndexOfVowel: number = (indexOfVowel + 2) % 5;\n         \
    \   encodedMessage += vowels[newIndexOfVowel];\n        } else {\n           \
    \ encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptlahawws.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptlahawws.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n\
    \    }\n    if (char === \"a\") {\n      char = \"c\";\n    } else if (char ===\
    \ \"e\") {\n      char = \"g\";\n    } else if (char === \"i\") {\n      char\
    \ = \"k\";\n    } else if (char === \"o\") {\n      char = \"q\";\n    } else\
    \ if (char === \"u\") {\n      char = \"y\";\n    }\n    encodedMessage += char;\n\
    \  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmps1gbtwuc.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmps1gbtwuc.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    const vowels:\
    \ string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0;\
    \ i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase())\
    \ {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n\
    \            encodedMessage += message[i].toUpperCase();\n        }\n        if\
    \ (vowels.includes(encodedMessage[i])) {\n            encodedMessage = encodedMessage.replace(encodedMessage[i],\
    \ vowels[(vowels.indexOf(encodedMessage[i]) + 2) % 5]);\n        }\n    }\n  \
    \  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5htd3n6i.ts(20,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpy9z4wsou.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy9z4wsou.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738255
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let\
    \ vowels = \"aeiou\";\n    let encoded = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n            encoded += alphabet[(alphabet.indexOf(char)\
    \ + 2) % 26].toUpperCase();\n        } else {\n            if (vowels.includes(char))\
    \ {\n                encoded += alphabet[(alphabet.indexOf(char) + 2) % 26];\n\
    \            } else {\n                encoded += char;\n            }\n     \
    \   }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaywdgqpn.ts(21,24): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpy9z4wsou.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy9z4wsou.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738255
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n\
    \        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n\
    \        } else {\n            let encodedChar: string = \"\";\n            if\
    \ (vowels.indexOf(currentChar.toLowerCase()) !== -1) {\n                encodedChar\
    \ = alphabet[(currentCharIndex + 2) % 26];\n            } else {\n           \
    \     encodedChar = alphabet[currentCharIndex];\n            }\n            if\
    \ (currentChar === currentChar.toUpperCase()) {\n                encodedChar =\
    \ encodedChar.toUpperCase();\n            }\n            encodedMessage += encodedChar;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk1z1dmr6.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk1z1dmr6.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n    \
    \    let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ if (index === 4) {\n                encoded += vowels[0];\n            } else\
    \ {\n                encoded += vowels[index + 2];\n            }\n        } else\
    \ {\n            if (char === char.toUpperCase()) {\n                encoded +=\
    \ char.toLowerCase();\n            } else {\n                encoded += char.toUpperCase();\n\
    \            }\n        }\n    }\n    return encoded;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx8c62sso.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738361
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    const vowels: string[]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        const char: string = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            const index: number = vowels.indexOf(char.toLowerCase());\n \
    \           const newIndex: number = (index + 2) % vowels.length;\n          \
    \  result += vowels[newIndex];\n        } else {\n            result += char.toUpperCase();\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4sbbwmv4.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738361
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded\
    \ = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter =\
    \ message[i];\n        if (vowels.includes(letter.toLowerCase())) {\n        \
    \    let index = vowels.indexOf(letter.toLowerCase());\n            let newIndex\
    \ = (index + 2) % 5;\n            encoded += vowels[newIndex];\n        } else\
    \ {\n            encoded += letter;\n        }\n    }\n    return encoded;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpckc8qm5_.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmxc86tff.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmxc86tff.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738256
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n            let index: number = message.indexOf(char);\n\
    \            encodedMessage += message[index + 2];\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0fz8y5k7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0fz8y5k7.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let result: string = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char: string = message[i];\n    if (char === char.toUpperCase())\
    \ {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n\
    \    }\n    if (char === 'a') {\n      char = 'c';\n    } else if (char === 'e')\
    \ {\n      char = 'g';\n    } else if (char === 'i') {\n      char = 'k';\n  \
    \  } else if (char === 'o') {\n      char = 'q';\n    } else if (char === 'u')\
    \ {\n      char = 'y';\n    }\n    result += char;\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp6bs1k2fi.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6bs1k2fi.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n\
    \        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage\
    \ += currentLetter.toLowerCase();\n        } else {\n            encodedMessage\
    \ += currentLetter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzfy4mthd.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzfy4mthd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase())\
    \ {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n\
    \            encodedMessage += message[i].toUpperCase();\n        }\n    }\n \
    \   return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplc5gag0n.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplc5gag0n.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1659738256
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n            let index: number = message.indexOf(char);\n\
    \            let nextChar: string = message[index + 2];\n            encodedMessage\
    \ += nextChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp50ysq1j0.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp50ysq1j0.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n\
    \            let index: number = alphabet.indexOf(currentLetter);\n          \
    \  let newIndex: number = index + 2;\n            if (newIndex > 25) {\n     \
    \           newIndex = newIndex - 26;\n            }\n            encodedMessage\
    \ += alphabet[newIndex];\n        } else if (currentLetter === currentLetter.toUpperCase())\
    \ {\n            encodedMessage += currentLetter.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n \
    \   }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz7et3y6h.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz7et3y6h.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n            encodedMessage += message[i + 2];\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpirusu7qr.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpirusu7qr.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 0
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char.match(/[a-z]/i))\
    \ {\n            let charCode: number = char.charCodeAt(0);\n            if (charCode\
    \ >= 65 && charCode <= 90) {\n                charCode += 32;\n            } else\
    \ if (charCode >= 97 && charCode <= 122) {\n                charCode -= 32;\n\
    \            }\n            char = String.fromCharCode(charCode);\n        }\n\
    \        if (char.match(/[aeiou]/i)) {\n            let charCode: number = char.charCodeAt(0);\n\
    \            charCode += 2;\n            if (charCode > 122) {\n             \
    \   charCode -= 26;\n            }\n            char = String.fromCharCode(charCode);\n\
    \        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n\
    \        if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage\
    \ += currentChar.toLowerCase();\n        } else {\n            encodedMessage\
    \ += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptrhgmg85.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptrhgmg85.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738255
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    const vowels: string[]\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n\
    \        let char: string = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index: number = vowels.indexOf(char.toLowerCase());\n   \
    \         if (index === 4) {\n                index = -1;\n            }\n   \
    \         char = vowels[index + 2];\n        }\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        encodedMessage += char;\n    }\n \
    \   return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnph3viak.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \ for (let i: number = 0; i < message.length; i++) {\n        let letter: string\
    \ = message[i];\n        if (vowels.indexOf(letter) !== -1) {\n            let\
    \ index: number = alphabet.indexOf(letter);\n            result += alphabet[index\
    \ + 2];\n        } else {\n            result += letter;\n        }\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpllrc1zr3.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpllrc1zr3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n        if (vowels.includes(encodedMessage[i])) {\n            let\
    \ index: number = alphabet.indexOf(encodedMessage[i]);\n            encodedMessage\
    \ = encodedMessage.slice(0, i) + alphabet[index + 2] + encodedMessage.slice(i\
    \ + 1);\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"\
    This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0f53z4gy.ts(21,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encoded: string = \"\";\n    for (let i = 0; i <\
    \ message.length; i++) {\n        let char: string = message[i];\n        if (char\
    \ === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n    \
    \    } else {\n            encoded += char.toUpperCase();\n        }\n       \
    \ if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" ||\
    \ char === \"u\") {\n            encoded += char;\n        }\n    }\n    return\
    \ encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo3aiv38i.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3aiv38i.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    let alphabet: string\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    let vowels: string = 'aeiou';\n    for\
    \ (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n\
    \            encodedMessage += currentLetter.toLowerCase();\n        } else {\n\
    \            encodedMessage += currentLetter.toUpperCase();\n        }\n     \
    \   if (vowels.includes(currentLetter)) {\n            let index: number = alphabet.indexOf(currentLetter);\n\
    \            encodedMessage += alphabet[index + 2];\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1e1v7iz2.ts(22,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738361
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let vowels = \"aeiou\";\n  let result = \"\";\n  for (let\
    \ i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (vowels.includes(char.toLowerCase()))\
    \ {\n      let index = vowels.indexOf(char.toLowerCase());\n      let newIndex\
    \ = index + 2;\n      if (newIndex >= vowels.length) {\n        newIndex -= vowels.length;\n\
    \      }\n      result += vowels[newIndex];\n    } else {\n      if (char ===\
    \ char.toUpperCase()) {\n        result += char.toLowerCase();\n      } else {\n\
    \        result += char.toUpperCase();\n      }\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqo1npjcu.ts(16,16): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738363
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpy9z4wsou.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy9z4wsou.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738255
- exit_code: 0
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char.match(/[a-z]/i)) {\n            if (char.match(/[a-z]/)) {\n   \
    \             char = char.toUpperCase();\n            } else {\n             \
    \   char = char.toLowerCase();\n            }\n            if (char.match(/[aeiou]/i))\
    \ {\n                char = String.fromCharCode(char.charCodeAt(0) + 2);\n   \
    \         }\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738364
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encoded: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let char: string = message[i];\n        if (char === char.toUpperCase()) {\n\
    \            char = char.toLowerCase();\n            encoded += char;\n      \
    \  } else {\n            char = char.toUpperCase();\n            encoded += char;\n\
    \        }\n        if (vowels.includes(char)) {\n            let index: number\
    \ = vowels.indexOf(char);\n            if (index === 4) {\n                encoded\
    \ += vowels[0];\n            } else {\n                encoded += vowels[index\
    \ + 2];\n            }\n        }\n    }\n    return encoded;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9ah0looz.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738363
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === 'a') {\n            char\
    \ = 'c';\n        } else if (char === 'e') {\n            char = 'g';\n      \
    \  } else if (char === 'i') {\n            char = 'k';\n        } else if (char\
    \ === 'o') {\n            char = 'q';\n        } else if (char === 'u') {\n  \
    \          char = 'y';\n        }\n        result += char;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpbzwrudbs.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbzwrudbs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738364
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    const vowels:\
    \ string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0;\
    \ i < message.length; i++) {\n        let char: string = message[i];\n       \
    \ if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \            encodedMessage += char;\n        } else if (char === char.toLowerCase())\
    \ {\n            char = char.toUpperCase();\n            encodedMessage += char;\n\
    \        }\n        if (vowels.includes(char)) {\n            let index: number\
    \ = vowels.indexOf(char);\n            index += 2;\n            if (index > 4)\
    \ {\n                index -= 5;\n            }\n            encodedMessage +=\
    \ vowels[index];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzwsp8qvz.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        if (message[i] === message[i].toUpperCase()) {\n           \
    \ encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage\
    \ += message[i].toUpperCase();\n        }\n    }\n    for (let i: number = 0;\
    \ i < encodedMessage.length; i++) {\n        if (encodedMessage[i] === \"a\")\
    \ {\n            encodedMessage = encodedMessage.replace(\"a\", \"c\");\n    \
    \    } else if (encodedMessage[i] === \"e\") {\n            encodedMessage = encodedMessage.replace(\"\
    e\", \"g\");\n        } else if (encodedMessage[i] === \"i\") {\n            encodedMessage\
    \ = encodedMessage.replace(\"i\", \"k\");\n        } else if (encodedMessage[i]\
    \ === \"o\") {\n            encodedMessage = encodedMessage.replace(\"o\", \"\
    q\");\n        } else if (encodedMessage[i] === \"u\") {\n            encodedMessage\
    \ = encodedMessage.replace(\"u\", \"w\");\n        }\n    }\n    return encodedMessage;\n\
    }\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpp3i013s9.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp3i013s9.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else {\n            let newLetterIndex: number = currentLetterIndex\
    \ + 2;\n            if (newLetterIndex > 25) {\n                newLetterIndex\
    \ -= 26;\n            }\n            let newLetter: string = alphabet[newLetterIndex];\n\
    \            if (vowels.indexOf(newLetter) !== -1) {\n                newLetter\
    \ = newLetter.toUpperCase();\n            }\n            encodedMessage += newLetter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vgUv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz7_csiml.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz7_csiml.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vgUv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738256
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char == char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char == \"a\" || char == \"e\" || char == \"i\" || char == \"\
    o\" || char == \"u\") {\n            encodedMessage = encodedMessage.slice(0,\
    \ -1);\n            let index: number = message.indexOf(char);\n            encodedMessage\
    \ += message[index + 2];\n        }\n    }\n    return encodedMessage;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpb2aptesv.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb2aptesv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    let vowels: string\
    \ = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for\
    \ (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else if (currentLetter === currentLetter.toUpperCase()) {\n       \
    \     encodedMessage += alphabet[currentLetterIndex].toUpperCase();\n        }\
    \ else if (vowels.indexOf(currentLetter) !== -1) {\n            encodedMessage\
    \ += alphabet[(currentLetterIndex + 2) % alphabet.length];\n        } else {\n\
    \            encodedMessage += alphabet[currentLetterIndex];\n        }\n    }\n\
    \    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwg0mr0_z.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwg0mr0_z.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \ for (let i: number = 0; i < message.length; i++) {\n        let letter: string\
    \ = message[i];\n        let index: number = alphabet.indexOf(letter.toLowerCase());\n\
    \        if (index === -1) {\n            result += letter;\n        } else {\n\
    \            let newIndex: number = index + 2;\n            if (newIndex >= alphabet.length)\
    \ {\n                newIndex -= alphabet.length;\n            }\n           \
    \ let newLetter: string = alphabet[newIndex];\n            if (vowels.indexOf(newLetter)\
    \ !== -1) {\n                newLetter = newLetter.toUpperCase();\n          \
    \  }\n            result += newLetter;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vgUv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgwvqllkc.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgwvqllkc.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vgUv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let letter: string = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            letter = letter.toLowerCase();\n            let index: number\
    \ = alphabet.indexOf(letter);\n            index += 2;\n            if (index\
    \ > 25) {\n                index -= 26;\n            }\n            letter = alphabet[index];\n\
    \            letter = letter.toUpperCase();\n        } else {\n            let\
    \ index: number = alphabet.indexOf(letter);\n            index += 2;\n       \
    \     if (index > 25) {\n                index -= 26;\n            }\n       \
    \     letter = alphabet[index];\n        }\n        encodedMessage += letter;\n\
    \    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe5e4rz0r.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe5e4rz0r.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738364
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let char: string = message[i];\n        if (char === char.toUpperCase()) {\n\
    \            char = char.toLowerCase();\n            encodedMessage += char;\n\
    \        } else {\n            char = char.toUpperCase();\n            encodedMessage\
    \ += char;\n        }\n        if (vowels.includes(char)) {\n            let index:\
    \ number = vowels.indexOf(char);\n            if (index === vowels.length - 1)\
    \ {\n                encodedMessage += vowels[0];\n            } else {\n    \
    \            encodedMessage += vowels[index + 1];\n            }\n        }\n\
    \    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkbtg6q6d.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738364
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++)\
    \ {\n        const char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ index += 2;\n            if (index >= vowels.length) {\n                index\
    \ -= vowels.length;\n            }\n            encodedMessage += vowels[index];\n\
    \        } else {\n            encodedMessage += char;\n        }\n    }\n   \
    \ return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpixpdlpc1.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738363
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    const vowels:\
    \ string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0;\
    \ i < message.length; i++) {\n        if (vowels.includes(message[i].toLowerCase()))\
    \ {\n            encodedMessage += getNextVowel(message[i]);\n        } else {\n\
    \            encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplhbphpac.ts(15,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmplhbphpac.ts(16,31): error TS2304: Cannot find name ''getNextVowel''.

    '
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    test\"));\nconsole.log(encode(\"This is a message\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpua0i8dx_.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpua0i8dx_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1659738259
- exit_code: 0
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char.match(/[a-z]/i)) {\n\
    \            let charCode = char.charCodeAt(0);\n            if (charCode >= 65\
    \ && charCode <= 90) {\n                charCode += 32;\n            } else if\
    \ (charCode >= 97 && charCode <= 122) {\n                charCode -= 32;\n   \
    \         }\n            char = String.fromCharCode(charCode);\n        }\n  \
    \      if (char.match(/[aeiou]/i)) {\n            let charCode = char.charCodeAt(0);\n\
    \            charCode += 2;\n            if (charCode > 122) {\n             \
    \   charCode -= 26;\n            }\n            char = String.fromCharCode(charCode);\n\
    \        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char.toLowerCase() === \"a\") {\n            encodedMessage += \"c\"\
    ;\n        } else if (char.toLowerCase() === \"e\") {\n            encodedMessage\
    \ += \"g\";\n        } else if (char.toLowerCase() === \"i\") {\n            encodedMessage\
    \ += \"k\";\n        } else if (char.toLowerCase() === \"o\") {\n            encodedMessage\
    \ += \"q\";\n        } else if (char.toLowerCase() === \"u\") {\n            encodedMessage\
    \ += \"y\";\n        } else if (char.toLowerCase() === char) {\n            encodedMessage\
    \ += char.toUpperCase();\n        } else {\n            encodedMessage += char.toLowerCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'myDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpwf3qsd5m.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwf3qsd5m.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'myDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        result +=\
    \ char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjmxwd0cs.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjmxwd0cs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprkw75rdi.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprkw75rdi.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char == char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char == \"a\") {\n           \
    \ char = \"c\";\n        } else if (char == \"e\") {\n            char = \"g\"\
    ;\n        } else if (char == \"i\") {\n            char = \"k\";\n        } else\
    \ if (char == \"o\") {\n            char = \"q\";\n        } else if (char ==\
    \ \"u\") {\n            char = \"y\";\n        }\n        result += char;\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjmchd7dh.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjmchd7dh.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738261
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encodedMessage = '';\n   \
    \ for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        if (vowels.includes(letter.toLowerCase())) {\n            let index =\
    \ alphabet.indexOf(letter.toLowerCase());\n            index += 2;\n         \
    \   if (index > 25) {\n                index -= 26;\n            }\n         \
    \   letter = alphabet[index];\n        }\n        if (letter === letter.toUpperCase())\
    \ {\n            letter = letter.toLowerCase();\n        } else {\n          \
    \  letter = letter.toUpperCase();\n        }\n        encodedMessage += letter;\n\
    \    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb78isz66.ts(17,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738364
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n  for (let i = 0; i < message.length; i++) {\n    let\
    \ char = message[i];\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n\
    \      encodedMessage += char;\n    } else if (char === char.toLowerCase()) {\n\
    \      char = char.toUpperCase();\n      encodedMessage += char;\n    }\n    if\
    \ (vowels.includes(char)) {\n      encodedMessage += vowels[(vowels.indexOf(char)\
    \ + 2) % 5];\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjv95ltfs.ts(23,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    let vowels: string\
    \ = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for\
    \ (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase())\
    \ {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n\
    \            encodedMessage += message[i].toUpperCase();\n        }\n        if\
    \ (vowels.indexOf(encodedMessage[i]) !== -1) {\n            let index: number\
    \ = alphabet.indexOf(encodedMessage[i]);\n            encodedMessage = encodedMessage.slice(0,\
    \ i) + alphabet[index + 2] + encodedMessage.slice(i + 1);\n        }\n    }\n\
    \    return encodedMessage;\n}\n\nconsole.log(encode('test'));\nconsole.log(encode('This\
    \ is a message'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp11aecoqc.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmp11aecoqc.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex !== -1) {\n            let encodedLetter: string\
    \ = \"\";\n            if (vowels.indexOf(currentLetter.toLowerCase()) !== -1)\
    \ {\n                encodedLetter = alphabet[(currentLetterIndex + 2) % 26];\n\
    \            } else {\n                encodedLetter = alphabet[currentLetterIndex];\n\
    \            }\n            if (currentLetter === currentLetter.toUpperCase())\
    \ {\n                encodedLetter = encodedLetter.toUpperCase();\n          \
    \  }\n            encodedMessage += encodedLetter;\n        } else {\n       \
    \     encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8m_lbzyw.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8m_lbzyw.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let currentLetter: string = message[i];\n        let currentLetterIndex:\
    \ number = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex\
    \ === -1) {\n            encodedMessage += currentLetter;\n        } else {\n\
    \            let encodedLetterIndex: number = currentLetterIndex + 2;\n      \
    \      if (encodedLetterIndex > 25) {\n                encodedLetterIndex -= 26;\n\
    \            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n\
    \            if (currentLetter === currentLetter.toUpperCase()) {\n          \
    \      encodedLetter = encodedLetter.toUpperCase();\n            }\n         \
    \   encodedMessage += encodedLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprza4lfdb.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprza4lfdb.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738253
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprkw75rdi.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprkw75rdi.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n        for (let j: number = 0; j < vowels.length; j++) {\n       \
    \     if (encodedMessage[i] === vowels[j]) {\n                encodedMessage =\
    \ encodedMessage.slice(0, i) + alphabet[(alphabet.indexOf(vowels[j]) + 2) % 26]\
    \ + encodedMessage.slice(i + 1);\n            }\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp_7w4s2fv.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_7w4s2fv.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738364
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        if (currentChar === currentChar.toUpperCase())\
    \ {\n            currentChar = currentChar.toLowerCase();\n            encodedMessage\
    \ += currentChar;\n        } else if (currentChar === currentChar.toLowerCase())\
    \ {\n            currentChar = currentChar.toUpperCase();\n            encodedMessage\
    \ += currentChar;\n        }\n        if (vowels.includes(currentChar)) {\n  \
    \          let currentVowelIndex: number = alphabet.indexOf(currentChar);\n  \
    \          let encodedVowelIndex: number = currentVowelIndex + 2;\n          \
    \  let encodedVowel: string = alphabet[encodedVowelIndex];\n            encodedMessage\
    \ += encodedVowel;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_zy_ayok.ts(24,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738364
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n    \
    \    let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ let newIndex = (index + 2) % 5;\n            encoded += vowels[newIndex];\n\
    \        } else {\n            encoded += char;\n        }\n    }\n    return\
    \ encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqxbll_jc.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char = message[i];\n        let charCode\
    \ = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n   \
    \         charCode += 32;\n        } else if (charCode >= 97 && charCode <= 122)\
    \ {\n            charCode -= 32;\n        }\n        if (charCode === 97) {\n\
    \            charCode = 99;\n        } else if (charCode === 101) {\n        \
    \    charCode = 103;\n        } else if (charCode === 105) {\n            charCode\
    \ = 107;\n        } else if (charCode === 111) {\n            charCode = 113;\n\
    \        } else if (charCode === 117) {\n            charCode = 119;\n       \
    \ }\n        encodedMessage += String.fromCharCode(charCode);\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpmha5emmw.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmha5emmw.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738364
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let currentChar: string = message[i];\n        if (currentChar === currentChar.toUpperCase())\
    \ {\n            currentChar = currentChar.toLowerCase();\n            encodedMessage\
    \ += currentChar;\n        } else {\n            currentChar = currentChar.toUpperCase();\n\
    \            encodedMessage += currentChar;\n        }\n        if (vowels.includes(currentChar))\
    \ {\n            let index: number = vowels.indexOf(currentChar);\n          \
    \  if (index + 2 > 4) {\n                encodedMessage += vowels[index + 2 -\
    \ 5];\n            } else {\n                encodedMessage += vowels[index +\
    \ 2];\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp73gl59xn.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738365
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let alphabet: string\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n   \
    \ for (let i: number = 0; i < message.length; i++) {\n        let letter: string\
    \ = message[i];\n        if (letter === letter.toUpperCase()) {\n            result\
    \ += letter.toLowerCase();\n        } else {\n            result += letter.toUpperCase();\n\
    \        }\n        if (vowels.includes(letter)) {\n            let index: number\
    \ = alphabet.indexOf(letter);\n            result = result.slice(0, result.length\
    \ - 1) + alphabet[index + 2];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvc838djd.ts(22,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738365
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let vowels = \"aeiou\";\n    let encodedMessage = \"\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter =\
    \ message[i];\n        if (vowels.includes(currentLetter.toLowerCase())) {\n \
    \           let index = vowels.indexOf(currentLetter.toLowerCase());\n       \
    \     let newIndex = (index + 2) % 5;\n            encodedMessage += vowels[newIndex];\n\
    \        } else {\n            encodedMessage += currentLetter;\n        }\n \
    \   }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxoce1p02.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpy9z4wsou.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy9z4wsou.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738255
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let letter: string\
    \ = message[i];\n        if (vowels.indexOf(letter) > -1) {\n            let index:\
    \ number = alphabet.indexOf(letter);\n            let newLetter: string = alphabet[index\
    \ + 2];\n            encodedMessage += newLetter;\n        } else {\n        \
    \    encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxi1swdu2.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxi1swdu2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n\
    \            let index: number = alphabet.indexOf(currentLetter);\n          \
    \  let newIndex: number = index + 2;\n            if (newIndex > 25) {\n     \
    \           newIndex = newIndex - 26;\n            }\n            encodedMessage\
    \ += alphabet[newIndex];\n        } else if (currentLetter === currentLetter.toUpperCase())\
    \ {\n            encodedMessage += currentLetter.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n \
    \   }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz7et3y6h.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz7et3y6h.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char = message[i];\n        if (char\
    \ === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n            encodedMessage += message[i + 2];\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqhfiztrl.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqhfiztrl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738258
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    const vowels:\
    \ string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0;\
    \ i < message.length; i++) {\n        let char: string = message[i];\n       \
    \ if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \            encodedMessage += char;\n        } else if (char === char.toLowerCase())\
    \ {\n            char = char.toUpperCase();\n            encodedMessage += char;\n\
    \        }\n        if (vowels.includes(char)) {\n            if (char === \"\
    u\") {\n                encodedMessage = encodedMessage.slice(0, -1);\n      \
    \          encodedMessage += \"a\";\n            } else {\n                encodedMessage\
    \ = encodedMessage.slice(0, -1);\n                encodedMessage += vowels[vowels.indexOf(char)\
    \ + 1];\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5h2vkxpx.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encoded: string = \"\";\n    for (let i = 0; i <\
    \ message.length; i++) {\n        let char: string = message[i];\n        if (char\
    \ === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n    \
    \    } else {\n            encoded += char.toUpperCase();\n        }\n       \
    \ if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" ||\
    \ char === \"u\") {\n            encoded += char;\n        }\n    }\n    return\
    \ encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo3aiv38i.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3aiv38i.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \ for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.indexOf(char) !== -1) {\n            let index:\
    \ number = alphabet.indexOf(char);\n            result += alphabet[index + 2];\n\
    \        } else {\n            result += char;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1js52p00.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1js52p00.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738253
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encoded: string = '';\n    let vowels: string = 'aeiou';\n\
    \    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n\
    \        } else {\n            encoded += char.toUpperCase();\n        }\n   \
    \     if (vowels.includes(char.toLowerCase())) {\n            let index: number\
    \ = vowels.indexOf(char.toLowerCase());\n            encoded += vowels[(index\
    \ + 2) % 5];\n        }\n    }\n    return encoded;\n}\n\nconsole.log(encode('test'));\n\
    console.log(encode('This is a message'));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpba57gd2g.ts(21,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738366
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let char: string = message[i];\n        if (char === char.toUpperCase()) {\n\
    \            char = char.toLowerCase();\n            encodedMessage += char;\n\
    \        } else {\n            char = char.toUpperCase();\n            encodedMessage\
    \ += char;\n        }\n        if (vowels.includes(char)) {\n            let index:\
    \ number = vowels.indexOf(char);\n            let newIndex: number = (index +\
    \ 2) % 5;\n            encodedMessage = encodedMessage.replace(char, vowels[newIndex]);\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6docwfmn.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n\
    \        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n\
    \        } else {\n            if (currentChar === currentChar.toUpperCase())\
    \ {\n                if (vowels.indexOf(currentChar.toLowerCase()) !== -1) {\n\
    \                    encodedMessage += alphabet[(currentCharIndex + 2) % alphabet.length].toUpperCase();\n\
    \                } else {\n                    encodedMessage += alphabet[currentCharIndex].toUpperCase();\n\
    \                }\n            } else {\n                if (vowels.indexOf(currentChar)\
    \ !== -1) {\n                    encodedMessage += alphabet[(currentCharIndex\
    \ + 2) % alphabet.length];\n                } else {\n                    encodedMessage\
    \ += alphabet[currentCharIndex];\n                }\n            }\n        }\n\
    \    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7ysp_jq4.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ysp_jq4.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n\
    \        if (currentChar === currentChar.toUpperCase()) {\n            currentChar\
    \ = currentChar.toLowerCase();\n        } else {\n            currentChar = currentChar.toUpperCase();\n\
    \        }\n        if (currentChar === \"a\") {\n            currentChar = \"\
    c\";\n        } else if (currentChar === \"e\") {\n            currentChar = \"\
    g\";\n        } else if (currentChar === \"i\") {\n            currentChar = \"\
    k\";\n        } else if (currentChar === \"o\") {\n            currentChar = \"\
    q\";\n        } else if (currentChar === \"u\") {\n            currentChar = \"\
    y\";\n        }\n        encodedMessage += currentChar;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpnsk_sx8h.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnsk_sx8h.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        const char: string = message[i];\n  \
    \      if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\n\
    console.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp78du69al.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp78du69al.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"\
    test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprgh_s74m.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprgh_s74m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1659738366
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    const vowels: string[]\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n\
    \        let currentLetter: string = message[i];\n        if (currentLetter ===\
    \ currentLetter.toUpperCase()) {\n            currentLetter = currentLetter.toLowerCase();\n\
    \            encodedMessage += currentLetter;\n        } else if (currentLetter\
    \ === currentLetter.toLowerCase()) {\n            currentLetter = currentLetter.toUpperCase();\n\
    \            encodedMessage += currentLetter;\n        }\n        if (vowels.includes(currentLetter))\
    \ {\n            encodedMessage = encodedMessage.slice(0, -1);\n            let\
    \ index: number = vowels.indexOf(currentLetter);\n            if (index === 4)\
    \ {\n                encodedMessage += vowels[0];\n            } else {\n    \
    \            encodedMessage += vowels[index + 2];\n            }\n        }\n\
    \    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmri2h81k.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        result +=\
    \ char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjmxwd0cs.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjmxwd0cs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let letter: string\
    \ = message[i];\n        if (vowels.indexOf(letter) > -1) {\n            let index:\
    \ number = alphabet.indexOf(letter);\n            let newIndex: number = index\
    \ + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex\
    \ - 26;\n            }\n            encodedMessage += alphabet[newIndex];\n  \
    \      } else if (alphabet.indexOf(letter) > -1) {\n            let index: number\
    \ = alphabet.indexOf(letter);\n            let newIndex: number = index + 2;\n\
    \            if (newIndex > 25) {\n                newIndex = newIndex - 26;\n\
    \            }\n            encodedMessage += alphabet[newIndex].toUpperCase();\n\
    \        } else {\n            encodedMessage += letter;\n        }\n    }\n \
    \   return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptc3xtj2n.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptc3xtj2n.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738366
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (currentLetter === currentLetter.toUpperCase())\
    \ {\n            currentLetter = currentLetter.toLowerCase();\n            encodedMessage\
    \ += currentLetter;\n        } else {\n            currentLetter = currentLetter.toUpperCase();\n\
    \            encodedMessage += currentLetter;\n        }\n        if (vowels.includes(currentLetter))\
    \ {\n            let indexOfVowel: number = alphabet.indexOf(currentLetter);\n\
    \            let indexOfEncodedVowel: number = indexOfVowel + 2;\n           \
    \ let encodedVowel: string = alphabet[indexOfEncodedVowel];\n            encodedMessage\
    \ = encodedMessage.replace(currentLetter, encodedVowel);\n        }\n    }\n \
    \   return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpouodtlw9.ts(24,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (alphabet.indexOf(currentLetter) !== -1) {\n\
    \            let currentLetterIndex: number = alphabet.indexOf(currentLetter);\n\
    \            let encodedLetterIndex: number = currentLetterIndex + 2;\n      \
    \      if (encodedLetterIndex > 25) {\n                encodedLetterIndex -= 26;\n\
    \            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n\
    \            if (vowels.indexOf(currentLetter) !== -1) {\n                encodedMessage\
    \ += encodedLetter.toUpperCase();\n            } else {\n                encodedMessage\
    \ += encodedLetter;\n            }\n        } else {\n            encodedMessage\
    \ += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzm_l2d6y.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzm_l2d6y.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n\
    \        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n\
    \        } else if (currentChar === currentChar.toUpperCase()) {\n           \
    \ encodedMessage += alphabet[currentCharIndex].toUpperCase();\n        } else\
    \ if (vowels.indexOf(currentChar) !== -1) {\n            encodedMessage += alphabet[(currentCharIndex\
    \ + 2) % 26];\n        } else {\n            encodedMessage += alphabet[currentCharIndex];\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6olr5yr1.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6olr5yr1.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738250
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let vowels = \"aeiou\";\n    let encodedMessage = \"\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n\
    \            let newChar = vowels[(index + 2) % 5];\n            encodedMessage\
    \ += newChar.toUpperCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjbv0mxu2.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage\
    \ += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"\
    test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3wlji5fe.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3wlji5fe.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1659738253
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    const vowels:\
    \ string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0;\
    \ i < message.length; i++) {\n        if (vowels.includes(message[i].toLowerCase()))\
    \ {\n            encodedMessage += String.fromCharCode(message.charCodeAt(i) +\
    \ 2);\n        } else {\n            encodedMessage += message[i];\n        }\n\
    \    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbay3x_r1.ts(15,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        result +=\
    \ char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjmxwd0cs.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjmxwd0cs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar)\
    \ !== -1) {\n            let indexOfVowel: number = vowels.indexOf(currentChar);\n\
    \            let nextVowel: string = vowels[(indexOfVowel + 2) % 5];\n       \
    \     encodedMessage += nextVowel;\n        } else if (currentChar === currentChar.toUpperCase())\
    \ {\n            encodedMessage += currentChar.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentChar.toUpperCase();\n        }\n   \
    \ }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjgiwu2ld.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjgiwu2ld.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'ToST

    tHuS uS i MoSSiGo

    '
  timestamp: 1659738366
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encoded = '';\n    for (let\
    \ i = 0; i < message.length; i++) {\n        const char = message[i];\n      \
    \  if (vowels.includes(char.toLowerCase())) {\n            const index = alphabet.indexOf(char.toLowerCase());\n\
    \            encoded += alphabet[index + 2];\n        } else {\n            encoded\
    \ += char;\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp07ao1jy3.ts(17,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === letter.toUpperCase())\
    \ {\n      encodedMessage += letter.toLowerCase();\n    } else {\n      encodedMessage\
    \ += letter.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmw67pqpv.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmw67pqpv.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char = message[i];\n        if (char\
    \ === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplef9yoq6.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplef9yoq6.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n\
    \        if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage\
    \ += currentChar.toLowerCase();\n        } else {\n            encodedMessage\
    \ += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptrhgmg85.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptrhgmg85.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738255
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded\
    \ = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (vowels.includes(char.toLowerCase())) {\n            encoded += String.fromCharCode(char.charCodeAt(0)\
    \ + 2);\n        } else {\n            encoded += char;\n        }\n    }\n  \
    \  return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7iz5x244.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   if (vowels.indexOf(message[i]) !== -1) {\n            encodedMessage += vowels[(vowels.indexOf(message[i])\
    \ + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n\
    \            encodedMessage += message[i].toLowerCase();\n        } else {\n \
    \           encodedMessage += message[i].toUpperCase();\n        }\n    }\n  \
    \  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptrgfw1j3.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptrgfw1j3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738265
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n\
    \    }\n    if (char === \"a\") {\n      char = \"c\";\n    } else if (char ===\
    \ \"e\") {\n      char = \"g\";\n    } else if (char === \"i\") {\n      char\
    \ = \"k\";\n    } else if (char === \"o\") {\n      char = \"q\";\n    } else\
    \ if (char === \"u\") {\n      char = \"y\";\n    }\n    encodedMessage += char;\n\
    \  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmps1gbtwuc.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmps1gbtwuc.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738361
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    for (let i = 0;\
    \ i < message.length; i++) {\n        let char: string = message[i];\n       \
    \ if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === 'a' || char === 'A') {\n            encodedMessage +=\
    \ 'c';\n        } else if (char === 'e' || char === 'E') {\n            encodedMessage\
    \ += 'g';\n        } else if (char === 'i' || char === 'I') {\n            encodedMessage\
    \ += 'k';\n        } else if (char === 'o' || char === 'O') {\n            encodedMessage\
    \ += 'q';\n        } else if (char === 'u' || char === 'U') {\n            encodedMessage\
    \ += 'y';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"\
    test\"));\nconsole.log(encode(\"This is a message\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf7nhlz22.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf7nhlz22.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEgST

    tHIkS IkS Ac MEgSSAcGEg

    '
  timestamp: 1659738366
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter: string = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            result += letter.toLowerCase();\n        } else {\n         \
    \   result += letter.toUpperCase();\n        }\n    }\n    return result;\n}\n\
    \nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6uj7xret.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6uj7xret.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1659738367
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase());\n           \
    \ if (index === 4) {\n                index = -1;\n            }\n           \
    \ char = vowels[index + 2];\n        }\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        encodedMessage += char;\n    }\n \
    \   return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgepbj5j6.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738367
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = \"\";\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    if (letter === letter.toUpperCase()) {\n      letter = letter.toLowerCase();\n\
    \      let index = alphabet.indexOf(letter);\n      let newLetter = alphabet[index\
    \ + 2];\n      encodedMessage += newLetter.toUpperCase();\n    } else {\n    \
    \  let index = alphabet.indexOf(letter);\n      let newLetter = alphabet[index\
    \ + 2];\n      encodedMessage += newLetter;\n    }\n  }\n  return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2f60_mto.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2f60_mto.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738367
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar)\
    \ !== -1) {\n            let index: number = vowels.indexOf(currentChar);\n  \
    \          encodedMessage += vowels[(index + 2) % 5];\n        } else if (currentChar\
    \ === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n\
    \        } else {\n            encodedMessage += currentChar.toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6rzr4q1h.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6rzr4q1h.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738368
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let encodedMessage: string = \"\";\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase())\
    \ !== -1) {\n            encodedMessage += vowels[(vowels.indexOf(message[i].toLowerCase())\
    \ + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n\
    \            encodedMessage += message[i].toLowerCase();\n        } else {\n \
    \           encodedMessage += message[i].toUpperCase();\n        }\n    }\n  \
    \  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiipeqkdk.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiipeqkdk.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738368
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let letter: string = message[i];\n  \
    \      if (letter === letter.toUpperCase()) {\n            encodedMessage += letter.toLowerCase();\n\
    \        } else {\n            encodedMessage += letter.toUpperCase();\n     \
    \   }\n        if (letter === \"a\" || letter === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (letter === \"e\" || letter === \"E\") {\n    \
    \        encodedMessage += \"g\";\n        } else if (letter === \"i\" || letter\
    \ === \"I\") {\n            encodedMessage += \"k\";\n        } else if (letter\
    \ === \"o\" || letter === \"O\") {\n            encodedMessage += \"q\";\n   \
    \     } else if (letter === \"u\" || letter === \"U\") {\n            encodedMessage\
    \ += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbn53iklm.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbn53iklm.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738264
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char ===\
    \ \"o\" || char === \"u\") {\n            encodedMessage += char;\n        }\n\
    \    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe7j14d4s.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe7j14d4s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase())\
    \ !== -1) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n\
    \            if (index + 2 > vowels.length - 1) {\n                index = (index\
    \ + 2) % vowels.length;\n            } else {\n                index += 2;\n \
    \           }\n            result += vowels[index];\n        } else {\n      \
    \      if (char === char.toUpperCase()) {\n                result += char.toLowerCase();\n\
    \            } else {\n                result += char.toUpperCase();\n       \
    \     }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_xqiw0j4.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_xqiw0j4.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"\
    test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprgh_s74m.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprgh_s74m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    tHIS IS A MESSAGE

    '
  timestamp: 1659738366
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n        if (vowels.includes(encodedMessage[i])) {\n            encodedMessage\
    \ = encodedMessage.slice(0, i) + alphabet[alphabet.indexOf(encodedMessage[i])\
    \ + 2] + encodedMessage.slice(i + 1);\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp57qut8qn.ts(21,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747128
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let vowels = \"aeiou\";\n  let encoded = \"\";\n  for (let\
    \ i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (vowels.includes(char.toLowerCase()))\
    \ {\n      let index = vowels.indexOf(char.toLowerCase());\n      let newIndex\
    \ = (index + 2) % 5;\n      encoded += vowels[newIndex].toUpperCase();\n    }\
    \ else {\n      encoded += char.toUpperCase();\n    }\n  }\n  return encoded;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdh3c80l8.ts(16,16): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747128
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n\
    \        let currentLetterCode: number = message.charCodeAt(i);\n        if (currentLetterCode\
    \ >= 65 && currentLetterCode <= 90) {\n            encodedMessage += String.fromCharCode(currentLetterCode\
    \ + 32);\n        } else if (currentLetterCode >= 97 && currentLetterCode <= 122)\
    \ {\n            encodedMessage += String.fromCharCode(currentLetterCode - 32);\n\
    \        } else {\n            encodedMessage += currentLetter;\n        }\n \
    \   }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpoyn4gm66.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoyn4gm66.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \ for (let i: number = 0; i < message.length; i++) {\n        let letter: string\
    \ = message[i];\n        if (vowels.indexOf(letter) >= 0) {\n            let index:\
    \ number = alphabet.indexOf(letter);\n            result += alphabet[index + 2];\n\
    \        } else {\n            result += letter;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphibpxyjf.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphibpxyjf.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let currentLetter: string = message[i];\n        let currentLetterIndex:\
    \ number = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex\
    \ === -1) {\n            encodedMessage += currentLetter;\n        } else {\n\
    \            let encodedLetterIndex: number = currentLetterIndex + 2;\n      \
    \      if (encodedLetterIndex > 25) {\n                encodedLetterIndex -= 26;\n\
    \            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n\
    \            if (currentLetter === currentLetter.toUpperCase()) {\n          \
    \      encodedLetter = encodedLetter.toUpperCase();\n            }\n         \
    \   encodedMessage += encodedLetter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprza4lfdb.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprza4lfdb.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738253
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter)\
    \ !== -1) {\n            encodedMessage += vowels[(vowels.indexOf(currentLetter)\
    \ + 2) % 5];\n        } else if (currentLetter === currentLetter.toUpperCase())\
    \ {\n            encodedMessage += currentLetter.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n \
    \   }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpci2aqxuk.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpci2aqxuk.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase())\
    \ {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n\
    \            encodedMessage += message[i].toUpperCase();\n        }\n    }\n \
    \   return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeu_7q0hw.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeu_7q0hw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let letter: string = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            result += letter.toLowerCase();\n        } else {\n         \
    \   result += letter.toUpperCase();\n        }\n        if (vowels.includes(letter))\
    \ {\n            result = result.slice(0, -1) + vowels[(vowels.indexOf(letter)\
    \ + 2) % 5];\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvitp3g1_.ts(21,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747128
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encoded: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ if (vowels.indexOf(message[i]) !== -1) {\n            encoded += vowels[(vowels.indexOf(message[i])\
    \ + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n\
    \            encoded += message[i].toLowerCase();\n        } else {\n        \
    \    encoded += message[i].toUpperCase();\n        }\n    }\n    return encoded;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7udcpqi1.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7udcpqi1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmviirur2.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmviirur2.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    let charCode: number = char.charCodeAt(0);\n        if (charCode >= 65 &&\
    \ charCode <= 90) {\n            charCode += 32;\n        } else if (charCode\
    \ >= 97 && charCode <= 122) {\n            charCode -= 32;\n        }\n      \
    \  if (charCode === 97) {\n            charCode = 99;\n        } else if (charCode\
    \ === 101) {\n            charCode = 103;\n        } else if (charCode === 105)\
    \ {\n            charCode = 107;\n        } else if (charCode === 111) {\n   \
    \         charCode = 113;\n        } else if (charCode === 117) {\n          \
    \  charCode = 119;\n        }\n        encodedMessage += String.fromCharCode(charCode);\n\
    \    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpbb915woj.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbb915woj.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase())\
    \ >= 0) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n\
    \            index += 2;\n            if (index >= vowels.length) {\n        \
    \        index -= vowels.length;\n            }\n            char = vowels[index];\n\
    \        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9r5_brbc.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9r5_brbc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        let charCode: number\
    \ = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n   \
    \         charCode += 32;\n        } else if (charCode >= 97 && charCode <= 122)\
    \ {\n            charCode -= 32;\n        }\n        if (charCode === 97) {\n\
    \            charCode = 99;\n        } else if (charCode === 101) {\n        \
    \    charCode = 103;\n        } else if (charCode === 105) {\n            charCode\
    \ = 107;\n        } else if (charCode === 111) {\n            charCode = 113;\n\
    \        } else if (charCode === 117) {\n            charCode = 119;\n       \
    \ }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpmnjq0s_d.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmnjq0s_d.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        if (message[i] === message[i].toUpperCase()) {\n           \
    \ encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage\
    \ += message[i].toUpperCase();\n        }\n    }\n    for (let i: number = 0;\
    \ i < encodedMessage.length; i++) {\n        if (encodedMessage[i] === \"a\")\
    \ {\n            encodedMessage = encodedMessage.replace(\"a\", \"c\");\n    \
    \    } else if (encodedMessage[i] === \"e\") {\n            encodedMessage = encodedMessage.replace(\"\
    e\", \"g\");\n        } else if (encodedMessage[i] === \"i\") {\n            encodedMessage\
    \ = encodedMessage.replace(\"i\", \"k\");\n        } else if (encodedMessage[i]\
    \ === \"o\") {\n            encodedMessage = encodedMessage.replace(\"o\", \"\
    q\");\n        } else if (encodedMessage[i] === \"u\") {\n            encodedMessage\
    \ = encodedMessage.replace(\"u\", \"w\");\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpyvqr2zna.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyvqr2zna.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    let vowels: string\
    \ = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for\
    \ (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n\
    \            currentLetter = currentLetter.toLowerCase();\n            encodedMessage\
    \ += currentLetter;\n        } else if (currentLetter === currentLetter.toLowerCase())\
    \ {\n            currentLetter = currentLetter.toUpperCase();\n            encodedMessage\
    \ += currentLetter;\n        }\n        if (vowels.indexOf(currentLetter) !==\
    \ -1) {\n            let index: number = alphabet.indexOf(currentLetter);\n  \
    \          let newVowel: string = alphabet[index + 2];\n            encodedMessage\
    \ = encodedMessage.replace(currentLetter, newVowel);\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmprh33xtxn.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmprh33xtxn.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encoded = '';\n    for (let\
    \ i = 0; i < message.length; i++) {\n        let char = message[i];\n        if\
    \ (vowels.includes(char.toLowerCase())) {\n            let index = alphabet.indexOf(char.toLowerCase());\n\
    \            index += 2;\n            if (index > 25) {\n                index\
    \ -= 26;\n            }\n            char = alphabet[index];\n        }\n    \
    \    if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ encoded += char;\n    }\n    return encoded;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvq7dvk26.ts(17,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659747129
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let vowels = 'aeiou';\n    let encoded = '';\n    for\
    \ (let i = 0; i < message.length; i++) {\n        let char = message[i];\n   \
    \     if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n\
    \            if (index === 4) {\n                encoded += vowels[0];\n     \
    \       } else {\n                encoded += vowels[index + 2];\n            }\n\
    \        } else if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n\
    \        } else {\n            encoded += char.toUpperCase();\n        }\n   \
    \ }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy4khj0bu.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n\
    \        let currentCharCode: number = message.charCodeAt(i);\n        if (currentCharCode\
    \ >= 65 && currentCharCode <= 90) {\n            encodedMessage += String.fromCharCode(currentCharCode\
    \ + 32);\n        } else if (currentCharCode >= 97 && currentCharCode <= 122)\
    \ {\n            encodedMessage += String.fromCharCode(currentCharCode - 32);\n\
    \        } else {\n            encodedMessage += currentChar;\n        }\n   \
    \ }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc4k8tm39.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc4k8tm39.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encodedMessage = '';\n   \
    \ for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n\
    \        if (vowels.includes(currentLetter.toLowerCase())) {\n            let\
    \ index = alphabet.indexOf(currentLetter.toLowerCase());\n            let newIndex\
    \ = index + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex\
    \ - 26;\n            }\n            if (currentLetter === currentLetter.toUpperCase())\
    \ {\n                encodedMessage += alphabet[newIndex].toUpperCase();\n   \
    \         } else {\n                encodedMessage += alphabet[newIndex];\n  \
    \          }\n        } else {\n            if (currentLetter === currentLetter.toUpperCase())\
    \ {\n                encodedMessage += currentLetter.toLowerCase();\n        \
    \    } else {\n                encodedMessage += currentLetter.toUpperCase();\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp56k_axch.ts(17,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n\
    \            let indexOfVowel: number = vowels.indexOf(currentLetter);\n     \
    \       let indexOfEncodedVowel: number = indexOfVowel + 2;\n            if (indexOfEncodedVowel\
    \ > 4) {\n                indexOfEncodedVowel = indexOfEncodedVowel - 5;\n   \
    \         }\n            encodedMessage += vowels[indexOfEncodedVowel];\n    \
    \    } else if (alphabet.indexOf(currentLetter) !== -1) {\n            let indexOfLetter:\
    \ number = alphabet.indexOf(currentLetter);\n            let indexOfEncodedLetter:\
    \ number = indexOfLetter + 2;\n            if (indexOfEncodedLetter > 25) {\n\
    \                indexOfEncodedLetter = indexOfEncodedLetter - 26;\n         \
    \   }\n            encodedMessage += alphabet[indexOfEncodedLetter];\n       \
    \ } else {\n            encodedMessage += currentLetter;\n        }\n    }\n \
    \   return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp12njh_yc.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp12njh_yc.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    const vowels = \"aeiou\";\n    let result = \"\";\n \
    \   for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n\
    \            index += 2;\n            if (index >= vowels.length) {\n        \
    \        index -= vowels.length;\n            }\n            char = vowels[index];\n\
    \        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4eehfqt2.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase())\
    \ !== -1) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n\
    \            index += 2;\n            if (index >= vowels.length) {\n        \
    \        index -= vowels.length;\n            }\n            result += vowels[index];\n\
    \        } else {\n            if (char === char.toUpperCase()) {\n          \
    \      result += char.toLowerCase();\n            } else {\n                result\
    \ += char.toUpperCase();\n            }\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7tx00u_7.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7tx00u_7.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   if (vowels.indexOf(message[i].toLowerCase()) !== -1) {\n            if (message[i]\
    \ === \"u\") {\n                encodedMessage += \"a\";\n            } else {\n\
    \                encodedMessage += String.fromCharCode(message.charCodeAt(i) +\
    \ 2);\n            }\n        } else if (message[i] === message[i].toUpperCase())\
    \ {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n\
    \            encodedMessage += message[i].toUpperCase();\n        }\n    }\n \
    \   return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp85uxxfyr.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp85uxxfyr.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n\
    \        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n\
    \        } else {\n            let encodedChar: string = \"\";\n            if\
    \ (vowels.indexOf(currentChar.toLowerCase()) !== -1) {\n                encodedChar\
    \ = alphabet[(currentCharIndex + 2) % alphabet.length];\n            } else {\n\
    \                encodedChar = alphabet[currentCharIndex];\n            }\n  \
    \          if (currentChar === currentChar.toUpperCase()) {\n                encodedChar\
    \ = encodedChar.toUpperCase();\n            }\n            encodedMessage += encodedChar;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7xs4ucq_.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7xs4ucq_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        if (message[i] == message[i].toUpperCase()) {\n            encodedMessage\
    \ += message[i].toLowerCase();\n        } else {\n            encodedMessage +=\
    \ message[i].toUpperCase();\n        }\n    }\n    for (let i: number = 0; i <\
    \ encodedMessage.length; i++) {\n        if (encodedMessage[i] == \"a\") {\n \
    \           encodedMessage = encodedMessage.replace(\"a\", \"c\");\n        }\
    \ else if (encodedMessage[i] == \"e\") {\n            encodedMessage = encodedMessage.replace(\"\
    e\", \"g\");\n        } else if (encodedMessage[i] == \"i\") {\n            encodedMessage\
    \ = encodedMessage.replace(\"i\", \"k\");\n        } else if (encodedMessage[i]\
    \ == \"o\") {\n            encodedMessage = encodedMessage.replace(\"o\", \"q\"\
    );\n        } else if (encodedMessage[i] == \"u\") {\n            encodedMessage\
    \ = encodedMessage.replace(\"u\", \"w\");\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmphe4c4l97.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmphe4c4l97.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let c: string = message[i];\n        if (c == c.toUpperCase()) {\n         \
    \   c = c.toLowerCase();\n            result += c;\n        } else if (c == c.toLowerCase())\
    \ {\n            c = c.toUpperCase();\n            result += c;\n        }\n \
    \       if (vowels.indexOf(c) != -1) {\n            result = result.slice(0, -1);\n\
    \            let newVowel: string = vowels[(vowels.indexOf(c) + 2) % vowels.length];\n\
    \            result += newVowel;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzuz4iloz.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzuz4iloz.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \ for (let i: number = 0; i < message.length; i++) {\n        let letter: string\
    \ = message[i];\n        if (vowels.indexOf(letter) !== -1) {\n            let\
    \ index: number = alphabet.indexOf(letter);\n            result += alphabet[index\
    \ + 2];\n        } else {\n            result += letter;\n        }\n    }\n \
    \   return result;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4juq27l8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4juq27l8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'tgst

    Thks ks c mgsscgg

    '
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char = message[i];\n        if (char\
    \ === char.toUpperCase()) {\n            char = char.toLowerCase();\n        }\
    \ else {\n            char = char.toUpperCase();\n        }\n        if (char\
    \ === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\")\
    \ {\n            char = \"g\";\n        } else if (char === \"i\") {\n       \
    \     char = \"k\";\n        } else if (char === \"o\") {\n            char =\
    \ \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n  \
    \      }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp1nl92ru3.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1nl92ru3.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   if (vowels.indexOf(message[i].toLowerCase()) != -1) {\n            encodedMessage\
    \ += vowels[(vowels.indexOf(message[i].toLowerCase()) + 2) % 5];\n        } else\
    \ {\n            encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmps7jxpre5.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps7jxpre5.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter)\
    \ !== -1) {\n            let newIndex: number = vowels.indexOf(currentLetter)\
    \ + 2;\n            if (newIndex > 4) {\n                newIndex -= 5;\n    \
    \        }\n            encodedMessage += vowels[newIndex];\n        } else if\
    \ (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage\
    \ += currentLetter.toLowerCase();\n        } else {\n            encodedMessage\
    \ += currentLetter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaqnr1kfy.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpaqnr1kfy.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        if (vowels.indexOf(currentChar) !== -1) {\n  \
    \          let indexOfVowel: number = vowels.indexOf(currentChar);\n         \
    \   let indexOfEncodedVowel: number = (indexOfVowel + 2) % 5;\n            encodedMessage\
    \ += vowels[indexOfEncodedVowel];\n        } else if (alphabet.indexOf(currentChar)\
    \ !== -1) {\n            let indexOfChar: number = alphabet.indexOf(currentChar);\n\
    \            let indexOfEncodedChar: number = (indexOfChar + 2) % 26;\n      \
    \      encodedMessage += alphabet[indexOfEncodedChar];\n        } else {\n   \
    \         encodedMessage += currentChar;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkeyx8mgn.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkeyx8mgn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   if (vowels.indexOf(message[i]) !== -1) {\n            newMessage += vowels[(vowels.indexOf(message[i])\
    \ + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n\
    \            newMessage += message[i].toLowerCase();\n        } else {\n     \
    \       newMessage += message[i].toUpperCase();\n        }\n    }\n    return\
    \ newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgpux327b.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgpux327b.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = '';\n    let vowels: string = 'aeiou';\n\
    \    for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.indexOf(char.toLowerCase()) !== -1) {\n  \
    \          let index: number = vowels.indexOf(char.toLowerCase());\n         \
    \   index += 2;\n            if (index >= vowels.length) {\n                index\
    \ -= vowels.length;\n            }\n            char = vowels[index];\n      \
    \  }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvi1tzbpo.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvi1tzbpo.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        result +=\
    \ char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjmxwd0cs.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjmxwd0cs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    let alphabet: string\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n            encodedMessage += alphabet[(alphabet.indexOf(char)\
    \ + 2) % alphabet.length].toUpperCase();\n        } else {\n            encodedMessage\
    \ += alphabet[(alphabet.indexOf(char) + 2) % alphabet.length];\n        }\n  \
    \  }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzycn92a2.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzycn92a2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded\
    \ = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n\
    \            let newChar = vowels[(index + 2) % 5];\n            if (char ===\
    \ char.toUpperCase()) {\n                newChar = newChar.toUpperCase();\n  \
    \          }\n            encoded += newChar;\n        } else {\n            if\
    \ (char === char.toUpperCase()) {\n                encoded += char.toLowerCase();\n\
    \            } else {\n                encoded += char.toUpperCase();\n      \
    \      }\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnjvy6gjt.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprkw75rdi.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprkw75rdi.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        result +=\
    \ char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjmxwd0cs.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjmxwd0cs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n        for (let j: number = 0; j < vowels.length; j++) {\n       \
    \     if (encodedMessage[i] === vowels[j]) {\n                encodedMessage =\
    \ encodedMessage.slice(0, i) + alphabet[(alphabet.indexOf(vowels[j]) + 2) % 26]\
    \ + encodedMessage.slice(i + 1);\n            }\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp_7w4s2fv.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_7w4s2fv.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738364
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = '';\n    let vowels: string = 'aeiou';\n\
    \    for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (char === char.toUpperCase()) {\n            char\
    \ = char.toLowerCase();\n            result += char;\n        } else {\n     \
    \       char = char.toUpperCase();\n            result += char;\n        }\n \
    \       if (vowels.indexOf(char) !== -1) {\n            let index: number = vowels.indexOf(char);\n\
    \            let newIndex: number = index + 2;\n            if (newIndex > 4)\
    \ {\n                newIndex -= 5;\n            }\n            result = result.slice(0,\
    \ result.length - 1) + vowels[newIndex];\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaqv9sr7i.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpaqv9sr7i.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar)\
    \ >= 0) {\n            let index: number = vowels.indexOf(currentChar);\n    \
    \        let nextIndex: number = (index + 2) % vowels.length;\n            encodedMessage\
    \ += vowels[nextIndex];\n        } else {\n            encodedMessage += currentChar;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_rdjevj_.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_rdjevj_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        result +=\
    \ char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjmxwd0cs.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjmxwd0cs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char.toLowerCase() === \"a\") {\n            encodedMessage +=\
    \ \"c\";\n        } else if (char.toLowerCase() === \"e\") {\n            encodedMessage\
    \ += \"g\";\n        } else if (char.toLowerCase() === \"i\") {\n            encodedMessage\
    \ += \"k\";\n        } else if (char.toLowerCase() === \"o\") {\n            encodedMessage\
    \ += \"q\";\n        } else if (char.toLowerCase() === \"u\") {\n            encodedMessage\
    \ += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"\
    test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpppbs91fk.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpppbs91fk.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEgST

    tHIkS IkS Ac MEgSSAcGEg

    '
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   if (vowels.indexOf(message[i]) !== -1) {\n            encodedMessage += vowels[(vowels.indexOf(message[i])\
    \ + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n\
    \            encodedMessage += message[i].toLowerCase();\n        } else {\n \
    \           encodedMessage += message[i].toUpperCase();\n        }\n    }\n  \
    \  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptrgfw1j3.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptrgfw1j3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738265
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let char: string = message[i];\n        if (char === char.toUpperCase()) {\n\
    \            char = char.toLowerCase();\n            result += char;\n       \
    \ } else {\n            char = char.toUpperCase();\n            result += char;\n\
    \        }\n        if (vowels.includes(char)) {\n            let index: number\
    \ = vowels.indexOf(char);\n            let newIndex: number = index + 2;\n   \
    \         if (newIndex > 4) {\n                newIndex = newIndex - 5;\n    \
    \        }\n            result = result.slice(0, result.length - 1) + vowels[newIndex];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1v6fahpl.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        result +=\
    \ char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjmxwd0cs.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjmxwd0cs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n\
    \            let indexOfVowel: number = vowels.indexOf(currentLetter);\n     \
    \       let indexOfEncodedVowel: number = indexOfVowel + 2;\n            if (indexOfEncodedVowel\
    \ > 4) {\n                indexOfEncodedVowel = indexOfEncodedVowel - 5;\n   \
    \         }\n            encodedMessage += vowels[indexOfEncodedVowel];\n    \
    \    } else if (alphabet.indexOf(currentLetter) !== -1) {\n            let indexOfLetter:\
    \ number = alphabet.indexOf(currentLetter);\n            if (currentLetter ===\
    \ currentLetter.toUpperCase()) {\n                encodedMessage += alphabet[indexOfLetter].toUpperCase();\n\
    \            } else {\n                encodedMessage += alphabet[indexOfLetter];\n\
    \            }\n        } else {\n            encodedMessage += currentLetter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpykgms4vq.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpykgms4vq.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar)\
    \ > -1) {\n            let index: number = vowels.indexOf(currentChar);\n    \
    \        if (index + 2 > vowels.length - 1) {\n                index = index -\
    \ vowels.length + 2;\n            } else {\n                index += 2;\n    \
    \        }\n            encodedMessage += vowels[index];\n        } else if (currentChar\
    \ === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n\
    \        } else {\n            encodedMessage += currentChar.toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4g502iwy.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4g502iwy.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let char: string = message[i];\n        if (char === char.toUpperCase()) {\n\
    \            char = char.toLowerCase();\n            result += char;\n       \
    \ } else {\n            char = char.toUpperCase();\n            result += char;\n\
    \        }\n        if (vowels.includes(char)) {\n            let index: number\
    \ = vowels.indexOf(char);\n            let newIndex: number = index + 2;\n   \
    \         if (newIndex > 4) {\n                newIndex = newIndex - 5;\n    \
    \        }\n            result = result.slice(0, result.length - 1) + vowels[newIndex];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1v6fahpl.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n\
    \        } else {\n            let encodedLetterIndex: number = currentLetterIndex\
    \ + 2;\n            if (encodedLetterIndex > 25) {\n                encodedLetterIndex\
    \ -= 26;\n            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n\
    \            if (vowels.indexOf(encodedLetter) !== -1) {\n                encodedLetter\
    \ = encodedLetter.toUpperCase();\n            }\n            if (currentLetter\
    \ === currentLetter.toUpperCase()) {\n                encodedLetter = encodedLetter.toUpperCase();\n\
    \            }\n            encodedMessage += encodedLetter;\n        }\n    }\n\
    \    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv7gifbar.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv7gifbar.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let letter: string = message[i];\n        if (vowels.indexOf(letter.toLowerCase())\
    \ !== -1) {\n            let index: number = vowels.indexOf(letter.toLowerCase());\n\
    \            if (index === 4) {\n                result += vowels[0];\n      \
    \      } else {\n                result += vowels[index + 2];\n            }\n\
    \        } else {\n            if (letter === letter.toUpperCase()) {\n      \
    \          result += letter.toLowerCase();\n            } else {\n           \
    \     result += letter.toUpperCase();\n            }\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnq2hfshi.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnq2hfshi.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase())\
    \ >= 0) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n\
    \            let newIndex: number = (index + 2) % 5;\n            char = vowels[newIndex];\n\
    \        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa6wdise7.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa6wdise7.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747132
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    let vowels: string\
    \ = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for\
    \ (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string\
    \ = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n       \
    \     let currentVowelIndex: number = vowels.indexOf(currentLetter);\n       \
    \     let newVowelIndex: number = (currentVowelIndex + 2) % 5;\n            let\
    \ newVowel: string = vowels[newVowelIndex];\n            encodedMessage += newVowel;\n\
    \        } else if (alphabet.indexOf(currentLetter) !== -1) {\n            let\
    \ currentLetterIndex: number = alphabet.indexOf(currentLetter);\n            let\
    \ newLetterIndex: number = (currentLetterIndex + 13) % 26;\n            let newLetter:\
    \ string = alphabet[newLetterIndex];\n            encodedMessage += newLetter;\n\
    \        } else {\n            encodedMessage += currentLetter;\n        }\n \
    \   }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9mmjv4j2.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9mmjv4j2.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747132
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let currentLetter: string = message[i];\n        if (currentLetter === currentLetter.toUpperCase())\
    \ {\n            encodedMessage += currentLetter.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n \
    \       if (vowels.indexOf(currentLetter) !== -1) {\n            let indexOfVowel:\
    \ number = vowels.indexOf(currentLetter);\n            if (indexOfVowel === 4)\
    \ {\n                encodedMessage = encodedMessage.slice(0, -1) + vowels[0];\n\
    \            } else {\n                encodedMessage = encodedMessage.slice(0,\
    \ -1) + vowels[indexOfVowel + 2];\n            }\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3a1ajohk.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3a1ajohk.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747133
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let newMessage: string = \"\";\n    for (let i = 0; i\
    \ < message.length; i++) {\n        let char = message[i];\n        if (char ==\
    \ char.toUpperCase()) {\n            newMessage += char.toLowerCase();\n     \
    \   } else {\n            newMessage += char.toUpperCase();\n        }\n    }\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i = 0; i\
    \ < vowels.length; i++) {\n        let vowel = vowels[i];\n        let index =\
    \ newMessage.indexOf(vowel);\n        while (index != -1) {\n            newMessage\
    \ = newMessage.substring(0, index) + vowels[(i + 2) % 5] + newMessage.substring(index\
    \ + 1);\n            index = newMessage.indexOf(vowel, index + 1);\n        }\n\
    \    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tast'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4ozjrkiv.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4ozjrkiv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tast',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747133
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase())\
    \ !== -1) {\n            let index: number = alphabet.indexOf(message[i].toLowerCase());\n\
    \            if (index + 2 > alphabet.length - 1) {\n                encodedMessage\
    \ += alphabet[index + 2 - alphabet.length];\n            } else {\n          \
    \      encodedMessage += alphabet[index + 2];\n            }\n        } else {\n\
    \            if (message[i] === message[i].toUpperCase()) {\n                encodedMessage\
    \ += message[i].toLowerCase();\n            } else {\n                encodedMessage\
    \ += message[i].toUpperCase();\n            }\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mwDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmplwgb9q4g.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmplwgb9q4g.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mwDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let letter: string = message[i];\n        if (vowels.indexOf(letter.toLowerCase())\
    \ >= 0) {\n            let index: number = vowels.indexOf(letter.toLowerCase());\n\
    \            let newIndex: number = (index + 2) % 5;\n            encodedMessage\
    \ += vowels[newIndex];\n        } else {\n            encodedMessage += letter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr2m4pn3q.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr2m4pn3q.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \ for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.indexOf(char) !== -1) {\n            let index:\
    \ number = alphabet.indexOf(char);\n            result += alphabet[index + 2];\n\
    \        } else {\n            result += char;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1js52p00.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1js52p00.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738253
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encodedMessage = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  for (let i = 0; i < message.length; i++) {\n    let currentLetter = message[i];\n\
    \    if (currentLetter === currentLetter.toUpperCase()) {\n      encodedMessage\
    \ += currentLetter.toLowerCase();\n    } else {\n      encodedMessage += currentLetter.toUpperCase();\n\
    \    }\n    if (currentLetter === 'a' || currentLetter === 'e' || currentLetter\
    \ === 'i' || currentLetter === 'o' || currentLetter === 'u') {\n      let index\
    \ = alphabet.indexOf(currentLetter);\n      encodedMessage += alphabet[index +\
    \ 2];\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbsn7uqvj.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbsn7uqvj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let letter: string = message[i];\n  \
    \      if (letter === letter.toUpperCase()) {\n            encodedMessage += letter.toLowerCase();\n\
    \        } else {\n            encodedMessage += letter.toUpperCase();\n     \
    \   }\n        if (letter === \"a\" || letter === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (letter === \"e\" || letter === \"E\") {\n    \
    \        encodedMessage += \"g\";\n        } else if (letter === \"i\" || letter\
    \ === \"I\") {\n            encodedMessage += \"k\";\n        } else if (letter\
    \ === \"o\" || letter === \"O\") {\n            encodedMessage += \"q\";\n   \
    \     } else if (letter === \"u\" || letter === \"U\") {\n            encodedMessage\
    \ += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbn53iklm.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbn53iklm.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738264
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char = message[i];\n        if (char\
    \ === char.toUpperCase()) {\n            char = char.toLowerCase();\n        }\
    \ else {\n            char = char.toUpperCase();\n        }\n        if (char\
    \ === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\")\
    \ {\n            char = \"g\";\n        } else if (char === \"i\") {\n       \
    \     char = \"k\";\n        } else if (char === \"o\") {\n            char =\
    \ \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n  \
    \      }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp1nl92ru3.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1nl92ru3.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747131
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n    }\n    for (let i: number = 0; i < encodedMessage.length; i++)\
    \ {\n        if (vowels.indexOf(encodedMessage[i]) !== -1) {\n            let\
    \ index: number = alphabet.indexOf(encodedMessage[i]);\n            if (index\
    \ + 2 > alphabet.length - 1) {\n                encodedMessage = encodedMessage.replace(encodedMessage[i],\
    \ alphabet[index + 2 - alphabet.length]);\n            } else {\n            \
    \    encodedMessage = encodedMessage.replace(encodedMessage[i], alphabet[index\
    \ + 2]);\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpu4cgziv9.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu4cgziv9.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"test\"\
    ));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8griiusw.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8griiusw.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEgST

    tHIkS IkS Ac MEgSSAcGEg

    '
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprkw75rdi.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprkw75rdi.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (currentLetter === currentLetter.toUpperCase())\
    \ {\n            encodedMessage += currentLetter.toLowerCase();\n        } else\
    \ {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n \
    \       if (vowels.includes(currentLetter)) {\n            let indexOfVowel: number\
    \ = alphabet.indexOf(currentLetter);\n            let indexOfNextVowel: number\
    \ = indexOfVowel + 2;\n            if (indexOfNextVowel > 25) {\n            \
    \    indexOfNextVowel = indexOfNextVowel - 26;\n            }\n            encodedMessage\
    \ += alphabet[indexOfNextVowel];\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdcng5r1i.ts(22,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let letter: string = message[i];\n        if (vowels.indexOf(letter.toLowerCase())\
    \ !== -1) {\n            let index: number = vowels.indexOf(letter.toLowerCase());\n\
    \            let newIndex: number = index + 2;\n            if (newIndex >= vowels.length)\
    \ {\n                newIndex = newIndex - vowels.length;\n            }\n   \
    \         encodedMessage += vowels[newIndex];\n        } else {\n            if\
    \ (letter === letter.toUpperCase()) {\n                encodedMessage += letter.toLowerCase();\n\
    \            } else {\n                encodedMessage += letter.toUpperCase();\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl9maa7bc.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl9maa7bc.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        const char = message[i];\n        if\
    \ (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk2wfxhnj.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk2wfxhnj.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   if (vowels.indexOf(message[i]) !== -1) {\n            encodedMessage += vowels[(vowels.indexOf(message[i])\
    \ + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n\
    \            encodedMessage += message[i].toLowerCase();\n        } else {\n \
    \           encodedMessage += message[i].toUpperCase();\n        }\n    }\n  \
    \  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptrgfw1j3.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptrgfw1j3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738265
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n            encodedMessage += alphabet[(alphabet.indexOf(char)\
    \ + 2) % 26].toUpperCase();\n        } else {\n            encodedMessage += alphabet[(alphabet.indexOf(char)\
    \ + 2) % 26];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9fhq_4rg.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9fhq_4rg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase())\
    \ !== -1) {\n            let index: number = alphabet.indexOf(message[i].toLowerCase());\n\
    \            encodedMessage += alphabet[index + 2];\n        } else {\n      \
    \      encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwf3c2fs5.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwf3c2fs5.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let letter:\
    \ string = message[i];\n        if (letter === letter.toUpperCase()) {\n     \
    \       letter = letter.toLowerCase();\n            encodedMessage += letter;\n\
    \        } else if (letter === letter.toLowerCase()) {\n            letter = letter.toUpperCase();\n\
    \            encodedMessage += letter;\n        }\n        if (vowels.includes(letter))\
    \ {\n            let index: number = alphabet.indexOf(letter);\n            let\
    \ newLetter: string = alphabet[index + 2];\n            encodedMessage += newLetter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp19j_ih2e.ts(24,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar:\
    \ string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n\
    \        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n\
    \        } else {\n            let newCharIndex: number = currentCharIndex + 2;\n\
    \            if (newCharIndex > 25) {\n                newCharIndex -= 26;\n \
    \           }\n            let newChar: string = alphabet[newCharIndex];\n   \
    \         if (vowels.indexOf(newChar) !== -1) {\n                newChar = newChar.toUpperCase();\n\
    \            }\n            encodedMessage += newChar;\n        }\n    }\n   \
    \ return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vgUv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzmex9rpk.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzmex9rpk.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vgUv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let currentLetter: string = message[i];\n        if (currentLetter\
    \ === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n\
    \        } else {\n            encodedMessage += currentLetter.toUpperCase();\n\
    \        }\n        if (alphabet.indexOf(currentLetter) !== -1) {\n          \
    \  let index: number = alphabet.indexOf(currentLetter);\n            if (index\
    \ === 25) {\n                encodedMessage += alphabet[1];\n            } else\
    \ if (index === 24) {\n                encodedMessage += alphabet[0];\n      \
    \      } else {\n                encodedMessage += alphabet[index + 2];\n    \
    \        }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcn1gcfbb.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcn1gcfbb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n        } else {\n            char\
    \ = char.toUpperCase();\n        }\n        if (char === \"a\") {\n          \
    \  char = \"c\";\n        } else if (char === \"e\") {\n            char = \"\
    g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n      \
    \  } else if (char === \"o\") {\n            char = \"q\";\n        } else if\
    \ (char === \"u\") {\n            char = \"y\";\n        }\n        result +=\
    \ char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjmxwd0cs.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjmxwd0cs.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpy9z4wsou.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy9z4wsou.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738255
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char.toLowerCase()\
    \ === \"a\") {\n            result += \"c\";\n        } else if (char.toLowerCase()\
    \ === \"e\") {\n            result += \"g\";\n        } else if (char.toLowerCase()\
    \ === \"i\") {\n            result += \"k\";\n        } else if (char.toLowerCase()\
    \ === \"o\") {\n            result += \"q\";\n        } else if (char.toLowerCase()\
    \ === \"u\") {\n            result += \"y\";\n        } else if (char.toLowerCase()\
    \ === char) {\n            result += char.toUpperCase();\n        } else {\n \
    \           result += char.toLowerCase();\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'myDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpaxw6oqlk.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaxw6oqlk.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'myDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let charCode: number = message.charCodeAt(i);\n\
    \        if (charCode >= 65 && charCode <= 90) {\n            encodedMessage +=\
    \ String.fromCharCode(charCode + 32);\n        } else if (charCode >= 97 && charCode\
    \ <= 122) {\n            encodedMessage += String.fromCharCode(charCode - 32);\n\
    \        } else {\n            encodedMessage += message[i];\n        }\n    }\n\
    \    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9xi9ox0y.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xi9ox0y.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encoded: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let letter: string = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            encoded += letter.toLowerCase();\n        } else {\n        \
    \    encoded += letter.toUpperCase();\n        }\n        if (vowels.includes(letter))\
    \ {\n            let index: number = vowels.indexOf(letter);\n            let\
    \ newIndex: number = index + 2;\n            if (newIndex >= vowels.length) {\n\
    \                newIndex -= vowels.length;\n            }\n            encoded\
    \ += vowels[newIndex];\n        }\n    }\n    return encoded;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr_gjc1we.ts(21,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = '';\n    let alphabet: string\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    let vowels: string = 'aeiou';\n    for\
    \ (let i: number = 0; i < message.length; i++) {\n        let letter: string =\
    \ message[i];\n        if (vowels.indexOf(letter) !== -1) {\n            let index:\
    \ number = alphabet.indexOf(letter);\n            let newLetter: string = alphabet[index\
    \ + 2];\n            encodedMessage += newLetter;\n        } else {\n        \
    \    encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpse1jr1n3.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpse1jr1n3.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprkw75rdi.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprkw75rdi.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char.toLowerCase()\
    \ === \"a\") {\n            result += \"c\";\n        } else if (char.toLowerCase()\
    \ === \"e\") {\n            result += \"g\";\n        } else if (char.toLowerCase()\
    \ === \"i\") {\n            result += \"k\";\n        } else if (char.toLowerCase()\
    \ === \"o\") {\n            result += \"q\";\n        } else if (char.toLowerCase()\
    \ === \"u\") {\n            result += \"y\";\n        } else if (char.toLowerCase()\
    \ === char) {\n            result += char.toUpperCase();\n        } else {\n \
    \           result += char.toLowerCase();\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'myDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpaxw6oqlk.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaxw6oqlk.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'myDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n        if (vowels.includes(encodedMessage[i])) {\n            encodedMessage\
    \ = encodedMessage.slice(0, i) + alphabet[alphabet.indexOf(encodedMessage[i])\
    \ + 2] + encodedMessage.slice(i + 1);\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp57qut8qn.ts(21,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747128
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.indexOf(char.toLowerCase()) !== -1) {\n  \
    \          let index: number = alphabet.indexOf(char.toLowerCase());\n       \
    \     let newIndex: number = index + 2;\n            if (newIndex > 25) {\n  \
    \              newIndex = newIndex - 26;\n            }\n            if (char\
    \ === char.toUpperCase()) {\n                encodedMessage += alphabet[newIndex].toUpperCase();\n\
    \            } else {\n                encodedMessage += alphabet[newIndex];\n\
    \            }\n        } else {\n            if (char === char.toUpperCase())\
    \ {\n                encodedMessage += char.toLowerCase();\n            } else\
    \ {\n                encodedMessage += char.toUpperCase();\n            }\n  \
    \      }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdryjfd6l.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdryjfd6l.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage\
    \ += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n        \
    \    encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"\
    I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\"\
    \ || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if\
    \ (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprkw75rdi.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprkw75rdi.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738251
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n\
    \        if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage\
    \ += currentChar.toLowerCase();\n        } else {\n            encodedMessage\
    \ += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptrhgmg85.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptrhgmg85.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738255
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encodedMessage = '';\n   \
    \ for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else if (char === char.toLowerCase()) {\n            encodedMessage\
    \ += char.toUpperCase();\n        } else {\n            encodedMessage += char;\n\
    \        }\n    }\n    for (let i = 0; i < encodedMessage.length; i++) {\n   \
    \     const char = encodedMessage[i];\n        if (vowels.includes(char)) {\n\
    \            const index = alphabet.indexOf(char);\n            encodedMessage\
    \ = encodedMessage.replace(char, alphabet[index + 2]);\n        }\n    }\n   \
    \ return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx4gh2cfy.ts(27,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659747134
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (let i: number = 0; i < message.length; i++) {\n        let currentLetter:\
    \ string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n\
    \            let indexOfVowel: number = alphabet.indexOf(currentLetter);\n   \
    \         let indexOfEncodedVowel: number = indexOfVowel + 2;\n            let\
    \ encodedVowel: string = alphabet[indexOfEncodedVowel];\n            encodedMessage\
    \ += encodedVowel;\n        } else {\n            encodedMessage += currentLetter;\n\
    \        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptqls5dk8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptqls5dk8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747134
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let vowels = \"aeiou\";\n    let encodedMessage = \"\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n\
    \            let newIndex = (index + 2) % 5;\n            encodedMessage += vowels[newIndex].toUpperCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq2qi75f7.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747134
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let char: string = message[i];\n        if (char === char.toUpperCase()) {\n\
    \            char = char.toLowerCase();\n            encodedMessage += char;\n\
    \        } else {\n            char = char.toUpperCase();\n            encodedMessage\
    \ += char;\n        }\n        if (vowels.includes(char)) {\n            let index:\
    \ number = vowels.indexOf(char);\n            encodedMessage = encodedMessage.slice(0,\
    \ -1);\n            encodedMessage += vowels[(index + 2) % 5];\n        }\n  \
    \  }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0kjvb99q.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659747135
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encodedMessage: string = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        let char: string = message[i];\n    \
    \    if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ if (char === \"a\") {\n            char = \"c\";\n        } else if (char ===\
    \ \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n\
    \            char = \"k\";\n        } else if (char === \"o\") {\n           \
    \ char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\"\
    ;\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpy9z4wsou.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy9z4wsou.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738255
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n  let encoded = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n\
    \      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n\
    \    }\n    if (char === \"a\") {\n      char = \"c\";\n    } else if (char ===\
    \ \"e\") {\n      char = \"g\";\n    } else if (char === \"i\") {\n      char\
    \ = \"k\";\n    } else if (char === \"o\") {\n      char = \"q\";\n    } else\
    \ if (char === \"u\") {\n      char = \"y\";\n    }\n    encoded += char;\n  }\n\
    \  return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmptjol8dxf.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmptjol8dxf.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747135
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let encoded: string = \"\";\n    let vowels: string =\
    \ \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n       \
    \ let char: string = message[i];\n        if (char === char.toUpperCase()) {\n\
    \            char = char.toLowerCase();\n            encoded += char;\n      \
    \  } else {\n            char = char.toUpperCase();\n            encoded += char;\n\
    \        }\n        if (vowels.includes(char)) {\n            let index: number\
    \ = vowels.indexOf(char);\n            if (index === 4) {\n                encoded\
    \ += vowels[0];\n            } else {\n                encoded += vowels[index\
    \ + 2];\n            }\n        }\n    }\n    return encoded;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9ah0looz.ts(23,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738363
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            result += char.toLowerCase();\n        } else {\n           \
    \ result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjc89d4hz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjc89d4hz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747135
