name: HumanEval_37_sort_even
language: ts
prompt: "//This function takes a list l and returns a list l' such that\n// l' is\
  \ identical to l in the odd indicies, while its values at the even indicies are\
  \ equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
  \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
  \ sort_even(l: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_even;\n  assert.deepEqual(candidate([1, 2, 3]),[1,\
  \ 2, 3]);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10,\
  \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n  assert.deepEqual(candidate([5, 8, -12,\
  \ 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n\ntest();"
completions: ["    let evens = l.filter((_, i) => i % 2 === 0);\n    evens.sort((a,\
    \ b) => a - b);\n    let odds = l.filter((_, i) => i % 2 === 1);\n    return evens.concat(odds);\n\
    }\n", "    let evens = l.filter((x, i) => i % 2 == 0);\n    let odds = l.filter((x,\
    \ i) => i % 2 == 1);\n    evens.sort((a, b) => a - b);\n    return evens.concat(odds);\n\
    }\n", "    let evens = l.filter((_, i) => i % 2 === 0);\n    evens.sort((a, b)\
    \ => a - b);\n    return l.map((_, i) => i % 2 === 0 ? evens.shift() : l[i]);\n\
    }\n", "    let evens: number[] = [];\n    let odds: number[] = [];\n    for (let\
    \ i = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n            odds.push(l[i]);\n\
    \        } else {\n            evens.push(l[i]);\n        }\n    }\n    evens.sort();\n\
    \    let result: number[] = [];\n    for (let i = 0; i < odds.length; i++) {\n\
    \        result.push(odds[i]);\n        result.push(evens[i]);\n    }\n    return\
    \ result;\n}\n", "    let even_indicies = l.filter((_, i) => i % 2 == 0);\n  \
    \  even_indicies.sort((a, b) => a - b);\n    return l.map((_, i) => (i % 2 ==\
    \ 0) ? even_indicies.shift() : l[i]);\n}\n", "    let evens: number[] = [];\n\
    \    let odds: number[] = [];\n    let result: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            odds.push(l[i]);\n\
    \        } else {\n            evens.push(l[i]);\n        }\n    }\n    evens.sort();\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n      \
    \      result.push(odds[i / 2]);\n        } else {\n            result.push(evens[(i\
    \ - 1) / 2]);\n        }\n    }\n    return result;\n}\n", "    let evens: number[]\
    \ = [];\n    let odds: number[] = [];\n    let result: number[] = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n            odds.push(l[i]);\n\
    \        } else {\n            evens.push(l[i]);\n        }\n    }\n    evens.sort();\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push(odds[i / 2]);\n        } else {\n            result.push(evens[(i\
    \ - 1) / 2]);\n        }\n    }\n    return result;\n}\n", "    let evens = l.filter((_,\
    \ i) => i % 2 === 0);\n    evens.sort((a, b) => a - b);\n    return l.map((_,\
    \ i) => i % 2 === 0 ? evens.shift() : l[i]);\n}\n", "    let evens = l.filter((_,\
    \ i) => i % 2 === 0);\n    evens.sort((a, b) => a - b);\n    return l.map((_,\
    \ i) => i % 2 === 0 ? evens.shift() : l[i]);\n}\n", "    let evens = l.filter((x,\
    \ i) => i % 2 === 0);\n    let odds = l.filter((x, i) => i % 2 === 1);\n    evens.sort((a,\
    \ b) => a - b);\n    return evens.concat(odds);\n}\n", "    let even_indicies\
    \ = l.filter((_, i) => i % 2 === 0);\n    let odd_indicies = l.filter((_, i) =>\
    \ i % 2 !== 0);\n    even_indicies.sort((a, b) => a - b);\n    return even_indicies.concat(odd_indicies);\n\
    }\n", "    let evens = l.filter((v, i) => i % 2 === 0);\n    evens.sort((a, b)\
    \ => a - b);\n    return l.map((v, i) => i % 2 === 0 ? evens.shift() : v);\n}\n",
  "    let evens: number[] = [];\n    let odds: number[] = [];\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n\
    \            odds.push(l[i]);\n        } else {\n            evens.push(l[i]);\n\
    \        }\n    }\n    evens.sort();\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (i % 2 == 0) {\n            result.push(odds[i / 2]);\n        } else\
    \ {\n            result.push(evens[(i - 1) / 2]);\n        }\n    }\n    return\
    \ result;\n}\n", "    let evens = l.filter((_, i) => i % 2 === 0);\n    let odds\
    \ = l.filter((_, i) => i % 2 === 1);\n    evens.sort((a, b) => a - b);\n    return\
    \ evens.concat(odds);\n}\n", "    let evens: number[] = [];\n    let odds: number[]\
    \ = [];\n    let result: number[] = [];\n    for (let i: number = 0; i < l.length;\
    \ i++) {\n        if (i % 2 == 0) {\n            odds.push(l[i]);\n        } else\
    \ {\n            evens.push(l[i]);\n        }\n    }\n    evens.sort();\n    for\
    \ (let i: number = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push(odds[i / 2]);\n        } else {\n            result.push(evens[(i\
    \ - 1) / 2]);\n        }\n    }\n    return result;\n}\n", "    let evens: number[]\
    \ = [];\n    let odds: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (i % 2 == 0) {\n            odds.push(l[i]);\n        } else {\n\
    \            evens.push(l[i]);\n        }\n    }\n    evens.sort();\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < odds.length; i++) {\n        result.push(odds[i]);\n\
    \        result.push(evens[i]);\n    }\n    return result;\n}\n", "    let even\
    \ = l.filter((v, i) => i % 2 === 0);\n    even.sort((a, b) => a - b);\n    let\
    \ odd = l.filter((v, i) => i % 2 === 1);\n    return even.concat(odd);\n}\n",
  "    let even: number[] = [];\n    let odd: number[] = [];\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n\
    \            odd.push(l[i]);\n        } else {\n            even.push(l[i]);\n\
    \        }\n    }\n    even.sort();\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (i % 2 == 0) {\n            result.push(odd[i / 2]);\n        } else\
    \ {\n            result.push(even[(i - 1) / 2]);\n        }\n    }\n    return\
    \ result;\n}\n", "    let evens: number[] = [];\n    let odds: number[] = [];\n\
    \    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n  \
    \      if (i % 2 == 0) {\n            odds.push(l[i]);\n        } else {\n   \
    \         evens.push(l[i]);\n        }\n    }\n    evens.sort();\n    for (let\
    \ i = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n            result.push(odds[i\
    \ / 2]);\n        } else {\n            result.push(evens[(i - 1) / 2]);\n   \
    \     }\n    }\n    return result;\n}\n", "    let evens: number[] = [];\n   \
    \ let odds: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n       \
    \ if (i % 2 == 0) {\n            odds.push(l[i]);\n        } else {\n        \
    \    evens.push(l[i]);\n        }\n    }\n    evens.sort();\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < odds.length; i++) {\n        result.push(odds[i]);\n\
    \        result.push(evens[i]);\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
