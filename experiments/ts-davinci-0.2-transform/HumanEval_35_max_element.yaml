name: HumanEval_35_max_element
language: ts
prompt: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n//\
  \ 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
  \ max_element(l: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
  \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
  }\n\ntest();"
completions: ["    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    return Math.max(...l);\n}\n", "    let max = l[0];\n    for\
    \ (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;\n}\n", "    let max = l[0];\n   \
    \ for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\n", "  let max = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;\n}\n", "    return Math.max(...l);\n}\n", "    return\
    \ l.reduce((a, b) => Math.max(a, b));\n}\n", "    let max = l[0];\n    for (let\
    \ i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    return l.reduce((a, b) => Math.max(a,\
    \ b));\n}\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n\
    \        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n\
    \        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    return l.reduce((a, b) => Math.max(a, b));\n}\n", "    return\
    \ l.reduce((a, b) => Math.max(a, b));\n}\n", "    let max = l[0];\n    for (let\
    \ i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    let max = l[0];\n    for (let i\
    \ = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    let max = l[0];\n    for (let i\
    \ = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    let max = l[0];\n    for (let i\
    \ = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    return Math.max(...l);\n}\n", " \
    \   return l.reduce((a, b) => Math.max(a, b));\n}\n", "    let max = l[0];\n \
    \   for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n        \
    \    max = l[i];\n        }\n    }\n    return max;\n}\n", "    let max = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;\n}\n", "    let max = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;\n}\n", "    let max = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;\n}\n", "    let max: number\
    \ = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n", "    let max\
    \ = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n", "    let max\
    \ = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n", "    let max\
    \ = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n", "    let max\
    \ = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n", "    return\
    \ Math.max(...l);\n}\n", "    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n", "    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n", "    return Math.max(...l);\n}\n", "    let max = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;\n}\n", "    return Math.max(...l);\n\
    }\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n", "    return l.reduce((a, b) => Math.max(a, b));\n}\n", "    let max = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;\n}\n", "    return Math.max(...l);\n\
    }\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n", "    return l.reduce((a, b) => Math.max(a, b));\n}\n", "    let max = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;\n}\n", "    return Math.max(...l);\n\
    }\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n", "    return l.reduce((a, b) => Math.max(a, b));\n}\n", "    return Math.max(...l);\n\
    }\n", "    return l.reduce((a, b) => Math.max(a, b));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
