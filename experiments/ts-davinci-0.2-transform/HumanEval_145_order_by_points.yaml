name: HumanEval_145_order_by_points
language: ts
prompt: "//Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums:\
  \ number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["    let result: number[] = [];\n    let sum: number = 0;\n    let sums:\
    \ number[] = [];\n    for (let i: number = 0; i < nums.length; i++) {\n      \
    \  sum = 0;\n        for (let j: number = 0; j < nums[i].toString().length; j++)\
    \ {\n            sum += parseInt(nums[i].toString()[j]);\n        }\n        sums.push(sum);\n\
    \    }\n    for (let i: number = 0; i < sums.length; i++) {\n        for (let\
    \ j: number = 0; j < sums.length; j++) {\n            if (sums[i] < sums[j]) {\n\
    \                let temp: number = sums[i];\n                sums[i] = sums[j];\n\
    \                sums[j] = temp;\n                temp = nums[i];\n          \
    \      nums[i] = nums[j];\n                nums[j] = temp;\n            }\n  \
    \      }\n    }\n    return nums;\n}\n", "    let result: number[] = [];\n   \
    \ let sum: number = 0;\n    let sum_dict: { [key: number]: number } = {};\n  \
    \  for (let i = 0; i < nums.length; i++) {\n        sum = 0;\n        for (let\
    \ j = 0; j < nums[i].toString().length; j++) {\n            sum += parseInt(nums[i].toString()[j]);\n\
    \        }\n        sum_dict[nums[i]] = sum;\n    }\n    let sorted_keys = Object.keys(sum_dict).sort(function\
    \ (a, b) { return sum_dict[a] - sum_dict[b] });\n    for (let i = 0; i < sorted_keys.length;\
    \ i++) {\n        result.push(parseInt(sorted_keys[i]));\n    }\n    return result;\n\
    }\n", "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        const sumB = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        return sumA - sumB;\n    });\n}\n",
  "  let sum = 0;\n  let result: number[] = [];\n  let result2: number[] = [];\n \
    \ let result3: number[] = [];\n  let result4: number[] = [];\n  let result5: number[]\
    \ = [];\n  let result6: number[] = [];\n  let result7: number[] = [];\n  let result8:\
    \ number[] = [];\n  let result9: number[] = [];\n  let result10: number[] = [];\n\
    \  let result11: number[] = [];\n  let result12: number[] = [];\n  let result13:\
    \ number[] = [];\n  let result14: number[] = [];\n  let result15: number[] = [];\n\
    \  let result16: number[] = [];\n  let result17: number[] = [];\n  let result18:\
    \ number[] = [];\n  let result19: number[] = [];\n  let result20: number[] = [];\n\
    \  let result21: number[] = [];\n  let result22: number[] = [];\n  let result23:\
    \ number[] = [];\n  let result24: number[] = [];\n  let result25: number[] = [];\n\
    \  let result26: number[] = [];\n  let result27: number[] = [];\n  let result28:\
    \ number[] = [];\n  let result29: number[] = [];\n  let result30: number[] = [];\n\
    \  let result31: number[] = [];\n  let result32: number[] = [];\n  let result33:\
    \ number[] = [];\n  let result34: number[] = [];\n  let result35: number[] = [];\n\
    \  let result36: number[] = [];\n  let result37: number[] = [];\n  let result38:\
    \ number[] = [];\n  let result39: number[] = [];\n  let result40: number[] = [];\n\
    \  let result41: number[] = [];\n  let result42: number[] = [];\n  let result43:\
    \ number[] = [];\n  let result44: number[] = [];\n  let result45: number[] = [];\n\
    \  let result46: number[] = [];\n  let result47: number[] = [];\n  let result48:\
    \ number[] = [];\n  let result49: number[] = [];\n  let result50: number[] = [];\n\
    \  let result51:", "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const sumB = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return sumA - sumB;\n  });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "  return\
    \ nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \ return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \ return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \   return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = sumDigits(a);\n        let\
    \ bSum = sumDigits(b);\n        if (aSum === bSum) {\n            return nums.indexOf(a)\
    \ - nums.indexOf(b);\n        }\n        return aSum - bSum;\n    });\n}\n", " \
    \ return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
