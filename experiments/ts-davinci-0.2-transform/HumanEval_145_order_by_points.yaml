name: HumanEval_145_order_by_points
language: ts
prompt: "//Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums:\
  \ number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["    let result: number[] = [];\n    let sum: number = 0;\n    let sums:\
    \ number[] = [];\n    for (let i: number = 0; i < nums.length; i++) {\n      \
    \  sum = 0;\n        for (let j: number = 0; j < nums[i].toString().length; j++)\
    \ {\n            sum += parseInt(nums[i].toString()[j]);\n        }\n        sums.push(sum);\n\
    \    }\n    for (let i: number = 0; i < sums.length; i++) {\n        for (let\
    \ j: number = 0; j < sums.length; j++) {\n            if (sums[i] < sums[j]) {\n\
    \                let temp: number = sums[i];\n                sums[i] = sums[j];\n\
    \                sums[j] = temp;\n                temp = nums[i];\n          \
    \      nums[i] = nums[j];\n                nums[j] = temp;\n            }\n  \
    \      }\n    }\n    return nums;\n}\n", "    let result: number[] = [];\n   \
    \ let sum: number = 0;\n    let sum_dict: { [key: number]: number } = {};\n  \
    \  for (let i = 0; i < nums.length; i++) {\n        sum = 0;\n        for (let\
    \ j = 0; j < nums[i].toString().length; j++) {\n            sum += parseInt(nums[i].toString()[j]);\n\
    \        }\n        sum_dict[nums[i]] = sum;\n    }\n    let sorted_keys = Object.keys(sum_dict).sort(function\
    \ (a, b) { return sum_dict[a] - sum_dict[b] });\n    for (let i = 0; i < sorted_keys.length;\
    \ i++) {\n        result.push(parseInt(sorted_keys[i]));\n    }\n    return result;\n\
    }\n", "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        const sumB = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        return sumA - sumB;\n    });\n}\n",
  "  let sum = 0;\n  let result: number[] = [];\n  let result2: number[] = [];\n \
    \ let result3: number[] = [];\n  let result4: number[] = [];\n  let result5: number[]\
    \ = [];\n  let result6: number[] = [];\n  let result7: number[] = [];\n  let result8:\
    \ number[] = [];\n  let result9: number[] = [];\n  let result10: number[] = [];\n\
    \  let result11: number[] = [];\n  let result12: number[] = [];\n  let result13:\
    \ number[] = [];\n  let result14: number[] = [];\n  let result15: number[] = [];\n\
    \  let result16: number[] = [];\n  let result17: number[] = [];\n  let result18:\
    \ number[] = [];\n  let result19: number[] = [];\n  let result20: number[] = [];\n\
    \  let result21: number[] = [];\n  let result22: number[] = [];\n  let result23:\
    \ number[] = [];\n  let result24: number[] = [];\n  let result25: number[] = [];\n\
    \  let result26: number[] = [];\n  let result27: number[] = [];\n  let result28:\
    \ number[] = [];\n  let result29: number[] = [];\n  let result30: number[] = [];\n\
    \  let result31: number[] = [];\n  let result32: number[] = [];\n  let result33:\
    \ number[] = [];\n  let result34: number[] = [];\n  let result35: number[] = [];\n\
    \  let result36: number[] = [];\n  let result37: number[] = [];\n  let result38:\
    \ number[] = [];\n  let result39: number[] = [];\n  let result40: number[] = [];\n\
    \  let result41: number[] = [];\n  let result42: number[] = [];\n  let result43:\
    \ number[] = [];\n  let result44: number[] = [];\n  let result45: number[] = [];\n\
    \  let result46: number[] = [];\n  let result47: number[] = [];\n  let result48:\
    \ number[] = [];\n  let result49: number[] = [];\n  let result50: number[] = [];\n\
    \  let result51:", "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const sumB = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return sumA - sumB;\n  });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "  return\
    \ nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \ return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \ return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \   return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = sumDigits(a);\n        let\
    \ bSum = sumDigits(b);\n        if (aSum === bSum) {\n            return nums.indexOf(a)\
    \ - nums.indexOf(b);\n        }\n        return aSum - bSum;\n    });\n}\n", " \
    \ return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
    \ val) => acc + parseInt(val), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ val) => acc + parseInt(val), 0);\n        return sumA - sumB;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + +curr, 0);\n    let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + +curr, 0);\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "  return\
    \ nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \ return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \   return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \   let nums_with_points = nums.map((num, index) => {\n        return {\n    \
    \        num: num,\n            points: num.toString().split('').reduce((a, b)\
    \ => parseInt(a) + parseInt(b), 0),\n            index: index\n        }\n   \
    \ });\n    nums_with_points.sort((a, b) => {\n        if (a.points === b.points)\
    \ {\n            return a.index - b.index;\n        }\n        return a.points\
    \ - b.points;\n    });\n    return nums_with_points.map(num_with_points => num_with_points.num);\n\
    }\n", "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \   return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    const sum = (num: number): number => {\n        let sum = 0;\n        while\
    \ (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num\
    \ / 10);\n        }\n        return sum;\n    };\n    const sums = nums.map(num\
    \ => sum(num));\n    const sorted = nums.sort((a, b) => {\n        if (sums[nums.indexOf(a)]\
    \ > sums[nums.indexOf(b)]) {\n            return 1;\n        } else if (sums[nums.indexOf(a)]\
    \ < sums[nums.indexOf(b)]) {\n            return -1;\n        } else {\n     \
    \       return 0;\n        }\n    });\n    return sorted;\n}\n", "    const sum\
    \ = (n: number) => n.toString().split('').reduce((a, b) => a + +b, 0);\n    return\
    \ nums.sort((a, b) => sum(a) - sum(b) || nums.indexOf(a) - nums.indexOf(b));\n\
    }\n", "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
    \ cur) => acc + Number(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + Number(cur), 0);\n        return sumA - sumB;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const sumB = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return sumA - sumB;\n  });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + +curr, 0);\n    let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + +curr, 0);\n    return aSum - bSum;\n  });\n}\n", "    return\
    \ nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        const bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \   let result: number[] = [];\n    let sum: number = 0;\n    let sum_array: number[]\
    \ = [];\n    let index_array: number[] = [];\n    let index: number = 0;\n   \
    \ let temp: number = 0;\n    let temp_index: number = 0;\n    for (let i: number\
    \ = 0; i < nums.length; i++) {\n        sum = 0;\n        for (let j: number =\
    \ 0; j < nums[i].toString().length; j++) {\n            sum += parseInt(nums[i].toString()[j]);\n\
    \        }\n        sum_array.push(sum);\n        index_array.push(i);\n    }\n\
    \    for (let i: number = 0; i < sum_array.length; i++) {\n        for (let j:\
    \ number = 0; j < sum_array.length - 1; j++) {\n            if (sum_array[j] >\
    \ sum_array[j + 1]) {\n                temp = sum_array[j];\n                sum_array[j]\
    \ = sum_array[j + 1];\n                sum_array[j + 1] = temp;\n            \
    \    temp_index = index_array[j];\n                index_array[j] = index_array[j\
    \ + 1];\n                index_array[j + 1] = temp_index;\n            }\n   \
    \     }\n    }\n    for (let i: number = 0; i < index_array.length; i++) {\n \
    \       result.push(nums[index_array[i]]);\n    }\n    return result;\n}\n", " \
    \ return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const sumB = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return sumA - sumB;\n  });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = sumDigits(a);\n        let\
    \ bSum = sumDigits(b);\n        if (aSum === bSum) {\n            return nums.indexOf(a)\
    \ - nums.indexOf(b);\n        }\n        return aSum - bSum;\n    });\n}\n", " \
    \ return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \ return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \   return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    let sumA = a.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n    let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n    return sumA - sumB;\n  });\n}\n", "  return\
    \ nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \ return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \ return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \ return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n    const bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n    return aSum - bSum;\n  });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \   let sum_of_digits = (num: number): number => {\n        let sum = 0;\n   \
    \     while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num\
    \ / 10);\n        }\n        return sum;\n    };\n    let sums = nums.map(sum_of_digits);\n\
    \    let sorted_nums = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    let min_sum = Math.min(...sums);\n        let min_index = sums.indexOf(min_sum);\n\
    \        sorted_nums.push(nums[min_index]);\n        sums[min_index] = Infinity;\n\
    \    }\n    return sorted_nums;\n}\n", "  return nums.sort((a, b) => {\n    const\
    \ aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n\
    \    const bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a, b) => {\n\
    \    const aSum = a.toString().split('').reduce((sum, num) => sum + parseInt(num),\
    \ 0);\n    const bSum = b.toString().split('').reduce((sum, num) => sum + parseInt(num),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "    return nums.sort((a, b) => {\n\
    \        const aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n        const bSum = b.toString().split('').reduce((acc, curr) => acc +\
    \ parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n", "    return\
    \ nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
    \ b) => a + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
    \ b) => a + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n", "  return\
    \ nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "  return\
    \ nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const sumB = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return sumA - sumB;\n  });\n}\n", "  \
    \  let result: number[] = [];\n    let sum: number = 0;\n    let sum_arr: number[]\
    \ = [];\n    let index_arr: number[] = [];\n    let index: number = 0;\n    let\
    \ sum_index: number = 0;\n    let temp: number = 0;\n    let temp_index: number\
    \ = 0;\n    for (let i: number = 0; i < nums.length; i++) {\n        sum = 0;\n\
    \        index = i;\n        while (nums[i] > 0) {\n            sum += nums[i]\
    \ % 10;\n            nums[i] = Math.floor(nums[i] / 10);\n        }\n        sum_arr.push(sum);\n\
    \        index_arr.push(index);\n    }\n    for (let i: number = 0; i < sum_arr.length;\
    \ i++) {\n        for (let j: number = i + 1; j < sum_arr.length; j++) {\n   \
    \         if (sum_arr[i] > sum_arr[j]) {\n                temp = sum_arr[i];\n\
    \                sum_arr[i] = sum_arr[j];\n                sum_arr[j] = temp;\n\
    \                temp_index = index_arr[i];\n                index_arr[i] = index_arr[j];\n\
    \                index_arr[j] = temp_index;\n            }\n        }\n    }\n\
    \    for (let i: number = 0; i < index_arr.length; i++) {\n        result.push(nums[index_arr[i]]);\n\
    \    }\n    return result;\n}\n", "    return nums.sort((a, b) => {\n        let\
    \ aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n\
    \        let bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n        return aSum - bSum;\n    });\n}\n", "    return nums.sort((a, b)\
    \ => {\n        let aSum = a.toString().split('').reduce((a, b) => a + parseInt(b),\
    \ 0);\n        let bSum = b.toString().split('').reduce((a, b) => a + parseInt(b),\
    \ 0);\n        return aSum - bSum;\n    });\n}\n", "  return nums.sort((a, b)\
    \ => {\n    let aSum = a.toString().split('').reduce((sum, num) => sum + +num,\
    \ 0);\n    let bSum = b.toString().split('').reduce((sum, num) => sum + +num,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a, b) => {\n\
    \    let aSum = a.toString().split('').reduce((acc, curr) => acc + +curr, 0);\n\
    \    let bSum = b.toString().split('').reduce((acc, curr) => acc + +curr, 0);\n\
    \    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a, b) => {\n    let\
    \ aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n\
    \    let bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "  const sum = (num: number): number\
    \ => {\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n    \
    \  num = Math.floor(num / 10);\n    }\n    return sum;\n  };\n  return nums.sort((a,\
    \ b) => {\n    const sumA = sum(a);\n    const sumB = sum(b);\n    if (sumA ===\
    \ sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return\
    \ sumA - sumB;\n  });\n}\n", "    let result: number[] = [];\n    let sum: number\
    \ = 0;\n    let sumOfDigits: number[] = [];\n    for (let i: number = 0; i < nums.length;\
    \ i++) {\n        sum = 0;\n        for (let j: number = 0; j < nums[i].toString().length;\
    \ j++) {\n            sum += parseInt(nums[i].toString().charAt(j));\n       \
    \ }\n        sumOfDigits.push(sum);\n    }\n    for (let i: number = 0; i < sumOfDigits.length;\
    \ i++) {\n        for (let j: number = 0; j < sumOfDigits.length; j++) {\n   \
    \         if (sumOfDigits[i] < sumOfDigits[j]) {\n                let temp: number\
    \ = sumOfDigits[i];\n                sumOfDigits[i] = sumOfDigits[j];\n      \
    \          sumOfDigits[j] = temp;\n                temp = nums[i];\n         \
    \       nums[i] = nums[j];\n                nums[j] = temp;\n            }\n \
    \       }\n    }\n    return nums;\n}\n", "  return nums.sort((a, b) => {\n  \
    \  const aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "    return nums.sort((a, b) => {\n\
    \        let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return sumA - sumB;\n    });\n}\n", "  return nums.sort((a, b)\
    \ => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc + Number(curr),\
    \ 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + Number(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a, b) => {\n\
    \    const aSum = a.toString().split('').reduce((sum, num) => sum + parseInt(num),\
    \ 0);\n    const bSum = b.toString().split('').reduce((sum, num) => sum + parseInt(num),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "    return nums.sort((a, b) => {\n\
    \        let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return sumA - sumB;\n    });\n}\n", "    let result: number[] =\
    \ [];\n    let sum: number = 0;\n    let sum_dict: { [key: number]: number[] }\
    \ = {};\n    for (let i = 0; i < nums.length; i++) {\n        sum = 0;\n     \
    \   for (let j = 0; j < nums[i].toString().length; j++) {\n            sum +=\
    \ parseInt(nums[i].toString()[j]);\n        }\n        if (sum_dict[sum] === undefined)\
    \ {\n            sum_dict[sum] = [nums[i]];\n        } else {\n            sum_dict[sum].push(nums[i]);\n\
    \        }\n    }\n    let keys: number[] = Object.keys(sum_dict).map(Number);\n\
    \    keys.sort((a, b) => a - b);\n    for (let i = 0; i < keys.length; i++) {\n\
    \        for (let j = 0; j < sum_dict[keys[i]].length; j++) {\n            result.push(sum_dict[keys[i]][j]);\n\
    \        }\n    }\n    return result;\n}\n", "    return nums.sort((a, b) => {\n\
    \        let sumA = 0;\n        let sumB = 0;\n        for (let i = 0; i < a.toString().length;\
    \ i++) {\n            sumA += parseInt(a.toString()[i]);\n        }\n        for\
    \ (let i = 0; i < b.toString().length; i++) {\n            sumB += parseInt(b.toString()[i]);\n\
    \        }\n        if (sumA === sumB) {\n            return a - b;\n        }\n\
    \        return sumA - sumB;\n    });\n}\n", "    return nums.sort((a, b) => {\n\
    \        let aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n        let bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n        return aSum - bSum;\n    });\n}\n", "  return nums.sort((a, b)\
    \ => {\n    let aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a, b) => {\n\
    \    const aSum = a.toString().split('').reduce((acc, curr) => acc + Number(curr),\
    \ 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + Number(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "    return nums.sort((a, b) => {\n\
    \        let aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n        let bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n        return aSum - bSum;\n    });\n}\n", "  return nums.sort((a, b)\
    \ => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "    return nums.sort((a, b) => {\n\
    \        let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return sumA - sumB;\n    });\n}\n", "    return nums.sort((a, b)\
    \ => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return sumA - sumB;\n    });\n}\n", "    return nums.sort((a, b)\
    \ => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return sumA - sumB;\n    });\n}\n", "  return nums.sort((a, b)\
    \ => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "    return nums.sort((a, b) => {\n\
    \        let aSum = a.toString().split('').reduce((a, b) => a + parseInt(b), 0);\n\
    \        let bSum = b.toString().split('').reduce((a, b) => a + parseInt(b), 0);\n\
    \        return aSum - bSum;\n    });\n}\n", "    return nums.sort((a, b) => {\n\
    \        let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return sumA - sumB;\n    });\n}\n", "  return nums.sort((a, b)\
    \ => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "    return nums.sort((a, b) => {\n\
    \        let aSum = sumDigits(a);\n        let bSum = sumDigits(b);\n        if\
    \ (aSum === bSum) {\n            return a - b;\n        }\n        return aSum\
    \ - bSum;\n    });\n}\n", "  return nums.sort((a, b) => {\n    let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + +curr, 0);\n    let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + +curr, 0);\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "    let\
    \ result: number[] = [];\n    let sums: number[] = [];\n    let sum: number =\
    \ 0;\n    for (let i: number = 0; i < nums.length; i++) {\n        sum = 0;\n\
    \        for (let j: number = 0; j < nums[i].toString().length; j++) {\n     \
    \       sum += parseInt(nums[i].toString()[j]);\n        }\n        sums.push(sum);\n\
    \    }\n    for (let i: number = 0; i < sums.length; i++) {\n        for (let\
    \ j: number = 0; j < sums.length; j++) {\n            if (sums[i] < sums[j]) {\n\
    \                let temp: number = sums[i];\n                sums[i] = sums[j];\n\
    \                sums[j] = temp;\n                temp = nums[i];\n          \
    \      nums[i] = nums[j];\n                nums[j] = temp;\n            }\n  \
    \      }\n    }\n    return nums;\n}\n", "  return nums.sort((a, b) => {\n   \
    \ const aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "    return nums.sort((a, b) => {\n\
    \        let aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n        let bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n        return aSum - bSum;\n    });\n}\n", "    return nums.sort((a, b)\
    \ => {\n        let aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
    \ b) => a + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
    \ b) => a + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b), 0);\n        return aSum - bSum;\n    });\n\
    }\n", "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
    \ b) => a + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a,\
    \ b) => a + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n", "    return\
    \ nums.sort((a, b) => {\n        let aSum = sumDigits(a);\n        let bSum =\
    \ sumDigits(b);\n        if (aSum === bSum) {\n            return nums.indexOf(a)\
    \ - nums.indexOf(b);\n        }\n        return aSum - bSum;\n    });\n}\n", " \
    \ return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + Number(num), 0);\n    const bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + Number(num), 0);\n    return aSum - bSum;\n  });\n}\n", "    return\
    \ nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
    \ b) => +a + +b, 0);\n        let bSum = b.toString().split('').reduce((a, b)\
    \ => +a + +b, 0);\n        return aSum - bSum;\n    });\n}\n", "    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        let sumB = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return sumA - sumB;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    let aSum = sumDigits(a);\n    let bSum = sumDigits(b);\n\
    \    if (aSum === bSum) {\n      return nums.indexOf(a) - nums.indexOf(b);\n \
    \   }\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a, b) => {\n\
    \    let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return sumA - sumB;\n  });\n}\n", "  return nums.sort((a, b) => {\n\
    \    const aSum = a.toString().split('').reduce((acc, curr) => acc + Number(curr),\
    \ 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + Number(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "  return nums.sort((a, b) => {\n\
    \    const sumA = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    const sumB = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    return sumA - sumB;\n  });\n}\n", "    return nums.sort((a, b) => {\n\
    \        const aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n        const bSum = b.toString().split('').reduce((acc, curr) => acc +\
    \ parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n", "  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "    return\
    \ nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
    \ b) => +a + +b, 0);\n        let bSum = b.toString().split('').reduce((a, b)\
    \ => +a + +b, 0);\n        return aSum - bSum;\n    });\n}\n", "    let result:\
    \ number[] = [];\n    let sum: number[] = [];\n    let num: number;\n    let temp:\
    \ number;\n    let index: number;\n    for (let i: number = 0; i < nums.length;\
    \ i++) {\n        num = nums[i];\n        temp = 0;\n        while (num > 0) {\n\
    \            temp += num % 10;\n            num = Math.floor(num / 10);\n    \
    \    }\n        sum.push(temp);\n    }\n    for (let i: number = 0; i < nums.length;\
    \ i++) {\n        index = sum.indexOf(Math.min(...sum));\n        result.push(nums[index]);\n\
    \        sum[index] = Infinity;\n    }\n    return result;\n}\n", "    return\
    \ nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    let result: number[] = [];\n    let sums: number[] = [];\n    let sum: number\
    \ = 0;\n    let index: number = 0;\n    for (let i: number = 0; i < nums.length;\
    \ i++) {\n        sum = 0;\n        for (let j: number = 0; j < nums[i].toString().length;\
    \ j++) {\n            sum += parseInt(nums[i].toString()[j]);\n        }\n   \
    \     sums.push(sum);\n    }\n    for (let i: number = 0; i < sums.length; i++)\
    \ {\n        index = 0;\n        for (let j: number = 0; j < sums.length; j++)\
    \ {\n            if (sums[j] < sums[index]) {\n                index = j;\n  \
    \          }\n        }\n        result.push(nums[index]);\n        sums[index]\
    \ = Infinity;\n    }\n    return result;\n}\n", "    return nums.sort((a, b) =>\
    \ {\n        const aSum = a.toString().split('').reduce((sum, num) => sum + parseInt(num),\
    \ 0);\n        const bSum = b.toString().split('').reduce((sum, num) => sum +\
    \ parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n", "    return\
    \ nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((sum,\
    \ curr) => sum + parseInt(curr), 0);\n        let sumB = b.toString().split('').reduce((sum,\
    \ curr) => sum + parseInt(curr), 0);\n        return sumA - sumB;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    return aSum - bSum;\n  });\n}\n", " \
    \   return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b), 0);\n        let sumB = b.toString().split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b), 0);\n        return sumA - sumB;\n    });\n\
    }\n", "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n",
  "    let result: number[] = [];\n    let sum: number = 0;\n    let index: number\
    \ = 0;\n    let nums_copy: number[] = nums.slice();\n    nums_copy.sort((a, b)\
    \ => a - b);\n    for (let i: number = 0; i < nums_copy.length; i++) {\n     \
    \   for (let j: number = 0; j < nums_copy[i].toString().length; j++) {\n     \
    \       sum += parseInt(nums_copy[i].toString()[j]);\n        }\n        result.push(sum);\n\
    \        sum = 0;\n    }\n    for (let i: number = 0; i < result.length; i++)\
    \ {\n        for (let j: number = 0; j < result.length; j++) {\n            if\
    \ (result[i] < result[j]) {\n                index = result[i];\n            \
    \    result[i] = result[j];\n                result[j] = index;\n            \
    \    index = nums_copy[i];\n                nums_copy[i] = nums_copy[j];\n   \
    \             nums_copy[j] = index;\n            }\n        }\n    }\n    return\
    \ nums_copy;\n}\n", "    return nums.sort((a, b) => {\n        const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n",
  "  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n", "  \
    \  return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        return aSum - bSum;\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
