name: HumanEval_42_incr_list
language: ts
prompt: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
  // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4,\
  \ 4, 10, 1, 124]\nfunction incr_list(l: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
completions: ["    return l.map(x => x + 1);\n}\n", "    return l.map(x => x + 1);\n\
    }\n", "    return l.map(x => x + 1);\n}\n", "    return l.map(x => x + 1);\n}\n",
  "    return l.map(x => x + 1);\n}\n", "    return l.map(x => x + 1);\n}\n", "  \
    \  return l.map(x => x + 1);\n}\n", "    return l.map(x => x + 1);\n}\n", "  \
    \  return l.map(x => x + 1);\n}\n", "    return l.map(x => x + 1);\n}\n", "  \
    \  return l.map(x => x + 1);\n}\n", "    return l.map(x => x + 1);\n}\n", "  \
    \  return l.map(x => x + 1);\n}\n", "    return l.map(x => x + 1);\n}\n", "  \
    \  return l.map(x => x + 1);\n}\n", "    return l.map(x => x + 1);\n}\n", "  \
    \  return l.map(x => x + 1);\n}\n", "    return l.map(x => x + 1);\n}\n", "  \
    \  return l.map(x => x + 1);\n}\n", "    return l.map(x => x + 1);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
