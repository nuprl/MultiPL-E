language: ts
name: HumanEval_105_by_length
results:
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(numToWord(sorted[i]));\n \
    \       }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp8w0xlr3.ts(18,25): error TS2304: Cannot find name
    ''numToWord''.

    '
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const sorted = arr.filter(num => num >= 1 && num <= 9).sort((a,\
    \ b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(num\
    \ => {\n    switch (num) {\n      case 1:\n        return \"One\";\n      case\
    \ 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n    \
    \  case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n\
    \      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\"\
    ;\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"\
    Nine\";\n    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const nums = arr.filter(n => n >= 1 && n <= 9).sort((a, b) =>\
    \ b - a);\n  const names = nums.map(n => {\n    switch (n) {\n      case 1:\n\
    \        return \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n\
    \        return \"Three\";\n      case 4:\n        return \"Four\";\n      case\
    \ 5:\n        return \"Five\";\n      case 6:\n        return \"Six\";\n     \
    \ case 7:\n        return \"Seven\";\n      case 8:\n        return \"Eight\"\
    ;\n      case 9:\n        return \"Nine\";\n    }\n  });\n  return names;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    return arr.filter(x => x >= 1 && x <= 9).sort().reverse().map(x\
    \ => {\n        switch (x) {\n            case 1: return \"One\";\n          \
    \  case 2: return \"Two\";\n            case 3: return \"Three\";\n          \
    \  case 4: return \"Four\";\n            case 5: return \"Five\";\n          \
    \  case 6: return \"Six\";\n            case 7: return \"Seven\";\n          \
    \  case 8: return \"Eight\";\n            case 9: return \"Nine\";\n        }\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let temp: number[] = [];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n \
    \     temp.push(arr[i]);\n    }\n  }\n  temp.sort((a, b) => a - b);\n  for (let\
    \ i = 0; i < temp.length; i++) {\n    switch (temp[i]) {\n      case 1:\n    \
    \    result.push(\"One\");\n        break;\n      case 2:\n        result.push(\"\
    Two\");\n        break;\n      case 3:\n        result.push(\"Three\");\n    \
    \    break;\n      case 4:\n        result.push(\"Four\");\n        break;\n \
    \     case 5:\n        result.push(\"Five\");\n        break;\n      case 6:\n\
    \        result.push(\"Six\");\n        break;\n      case 7:\n        result.push(\"\
    Seven\");\n        break;\n      case 8:\n        result.push(\"Eight\");\n  \
    \      break;\n      case 9:\n        result.push(\"Nine\");\n        break;\n\
    \    }\n  }\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const names =\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (nums.includes(arr[i])) {\n            result.push(names[nums.indexOf(arr[i])]);\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprqnv9a3f.ts(18,18): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i: number = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i]\
    \ === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i]\
    \ === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i]\
    \ === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            sorted.push(arr[i]);\n        }\n    }\n    sorted.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        switch\
    \ (sorted[i]) {\n            case 1:\n                result.push(\"One\");\n\
    \                break;\n            case 2:\n                result.push(\"Two\"\
    );\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i: number = 0; i < sorted.length; i++) {\n     \
    \   if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n\
    \                case 1:\n                    result.push(\"One\");\n        \
    \            break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b).filter(num => num >= 1 && num <= 9);\n    for (let i = sortedArr.length\
    \ - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n\
    \                result.push(\"One\");\n                break;\n            case\
    \ 2:\n                result.push(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push(\"Three\");\n                break;\n\
    \            case 4:\n                result.push(\"Four\");\n               \
    \ break;\n            case 5:\n                result.push(\"Five\");\n      \
    \          break;\n            case 6:\n                result.push(\"Six\");\n\
    \                break;\n            case 7:\n                result.push(\"Seven\"\
    );\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const nums: number[] = [];\n\
    \    const words: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n\
    \        if (arr[i] >= 1 && arr[i] <= 9) {\n            nums.push(arr[i]);\n \
    \       }\n    }\n    nums.sort((a, b) => a - b);\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case 1:\n                words.push(\"\
    One\");\n                break;\n            case 2:\n                words.push(\"\
    Two\");\n                break;\n            case 3:\n                words.push(\"\
    Three\");\n                break;\n            case 4:\n                words.push(\"\
    Four\");\n                break;\n            case 5:\n                words.push(\"\
    Five\");\n                break;\n            case 6:\n                words.push(\"\
    Six\");\n                break;\n            case 7:\n                words.push(\"\
    Seven\");\n                break;\n            case 8:\n                words.push(\"\
    Eight\");\n                break;\n            case 9:\n                words.push(\"\
    Nine\");\n                break;\n        }\n    }\n    for (let i = words.length\
    \ - 1; i >= 0; i--) {\n        result.push(words[i]);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    return arr.filter(x => x > 0 && x < 10).sort((a, b) => a - b).reverse().map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let res: string[] = [];\n    let arr1: number[] = [];\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9)\
    \ {\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort((a, b) =>\
    \ a - b);\n    for (let i = 0; i < arr1.length; i++) {\n        switch (arr1[i])\
    \ {\n            case 1:\n                res.push(\"One\");\n               \
    \ break;\n            case 2:\n                res.push(\"Two\");\n          \
    \      break;\n            case 3:\n                res.push(\"Three\");\n   \
    \             break;\n            case 4:\n                res.push(\"Four\");\n\
    \                break;\n            case 5:\n                res.push(\"Five\"\
    );\n                break;\n            case 6:\n                res.push(\"Six\"\
    );\n                break;\n            case 7:\n                res.push(\"Seven\"\
    );\n                break;\n            case 8:\n                res.push(\"Eight\"\
    );\n                break;\n            case 9:\n                res.push(\"Nine\"\
    );\n                break;\n        }\n    }\n    return res.reverse();\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b)\
    \ => a - b);\n    const reversed = sorted.reverse();\n    const result = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted = arr.sort((a, b)\
    \ => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            sorted.push(arr[i]);\n        }\n    }\n    sorted.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        switch\
    \ (sorted[i]) {\n            case 1:\n                result.push(\"One\");\n\
    \                break;\n            case 2:\n                result.push(\"Two\"\
    );\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let newArr: string[] = [];\n    let nums: number[] = [];\n \
    \   let nums2: number[] = [];\n    let nums3: number[] = [];\n    let nums4: number[]\
    \ = [];\n    let nums5: number[] = [];\n    let nums6: number[] = [];\n    let\
    \ nums7: number[] = [];\n    let nums8: number[] = [];\n    let nums9: number[]\
    \ = [];\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === 1) {\n            nums.push(arr[i]);\n        } else if (arr[i] === 2) {\n\
    \            nums2.push(arr[i]);\n        } else if (arr[i] === 3) {\n       \
    \     nums3.push(arr[i]);\n        } else if (arr[i] === 4) {\n            nums4.push(arr[i]);\n\
    \        } else if (arr[i] === 5) {\n            nums5.push(arr[i]);\n       \
    \ } else if (arr[i] === 6) {\n            nums6.push(arr[i]);\n        } else\
    \ if (arr[i] === 7) {\n            nums7.push(arr[i]);\n        } else if (arr[i]\
    \ === 8) {\n            nums8.push(arr[i]);\n        } else if (arr[i] === 9)\
    \ {\n            nums9.push(arr[i]);\n        }\n    }\n    for (let i: number\
    \ = 0; i < nums9.length; i++) {\n        newArr.push(\"Nine\");\n    }\n    for\
    \ (let i: number = 0; i < nums8.length; i++) {\n        newArr.push(\"Eight\"\
    );\n    }\n    for (let i: number = 0; i < nums7.length; i++) {\n        newArr.push(\"\
    Seven\");\n    }\n    for (let i: number = 0; i < nums6.length; i++) {\n     \
    \   newArr.push(\"Six\");\n    }\n    for (let i\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkas94jmd.ts(58,1): error TS1005: '';'' expected.

    ../../../../../tmp/tmpkas94jmd.ts(58,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpkas94jmd.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const numbers: string[] =\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    const sorted: number[] = arr.sort((a, b) => a - b);\n    for\
    \ (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i]\
    \ <= 9) {\n            result.push(numbers[sorted[i] - 1]);\n        }\n    }\n\
    \    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(sortedArr[i].toString());\n\
    \        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case \"1\":\n            \
    \    result[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let arr1: number[] = [];\n    let arr2: string[] = [];\n   \
    \ for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <=\
    \ 9) {\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort((a, b)\
    \ => a - b);\n    for (let i = 0; i < arr1.length; i++) {\n        switch (arr1[i])\
    \ {\n            case 1:\n                arr2.push(\"One\");\n              \
    \  break;\n            case 2:\n                arr2.push(\"Two\");\n        \
    \        break;\n            case 3:\n                arr2.push(\"Three\");\n\
    \                break;\n            case 4:\n                arr2.push(\"Four\"\
    );\n                break;\n            case 5:\n                arr2.push(\"\
    Five\");\n                break;\n            case 6:\n                arr2.push(\"\
    Six\");\n                break;\n            case 7:\n                arr2.push(\"\
    Seven\");\n                break;\n            case 8:\n                arr2.push(\"\
    Eight\");\n                break;\n            case 9:\n                arr2.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return arr2.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n \
    \   }\n    result.reverse();\n    let result2: string[] = [];\n    for (let i\
    \ = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case\
    \ 1:\n                result2.push(\"One\");\n                break;\n       \
    \     case 2:\n                result2.push(\"Two\");\n                break;\n\
    \            case 3:\n                result2.push(\"Three\");\n             \
    \   break;\n            case 4:\n                result2.push(\"Four\");\n   \
    \             break;\n            case 5:\n                result2.push(\"Five\"\
    );\n                break;\n            case 6:\n                result2.push(\"\
    Six\");\n                break;\n            case 7:\n                result2.push(\"\
    Seven\");\n                break;\n            case 8:\n                result2.push(\"\
    Eight\");\n                break;\n            case 9:\n                result2.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result2;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpudywf8w2.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpudywf8w2.ts(25,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpudywf8w2.ts(28,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpudywf8w2.ts(31,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpudywf8w2.ts(34,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpudywf8w2.ts(37,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpudywf8w2.ts(40,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpudywf8w2.ts(43,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpudywf8w2.ts(46,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpudywf8w2.ts(49,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let filtered: number[] = sorted.filter(num => num >= 1 &&\
    \ num <= 9);\n    let reversed: number[] = filtered.reverse();\n    for (let i\
    \ = 0; i < reversed.length; i++) {\n        switch (reversed[i]) {\n         \
    \   case 1:\n                result.push(\"One\");\n                break;\n \
    \           case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    reversed.forEach(num\
    \ => {\n        if (num === 1) {\n            result.push(\"One\");\n        }\
    \ else if (num === 2) {\n            result.push(\"Two\");\n        } else if\
    \ (num === 3) {\n            result.push(\"Three\");\n        } else if (num ===\
    \ 4) {\n            result.push(\"Four\");\n        } else if (num === 5) {\n\
    \            result.push(\"Five\");\n        } else if (num === 6) {\n       \
    \     result.push(\"Six\");\n        } else if (num === 7) {\n            result.push(\"\
    Seven\");\n        } else if (num === 8) {\n            result.push(\"Eight\"\
    );\n        } else if (num === 9) {\n            result.push(\"Nine\");\n    \
    \    }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let num: number = 0;\n    let\
    \ str: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        if\
    \ (arr[i] >= 1 && arr[i] <= 9) {\n            num = arr[i];\n            switch\
    \ (num) {\n                case 1:\n                    str = \"One\";\n     \
    \               break;\n                case 2:\n                    str = \"\
    Two\";\n                    break;\n                case 3:\n                \
    \    str = \"Three\";\n                    break;\n                case 4:\n \
    \                   str = \"Four\";\n                    break;\n            \
    \    case 5:\n                    str = \"Five\";\n                    break;\n\
    \                case 6:\n                    str = \"Six\";\n               \
    \     break;\n                case 7:\n                    str = \"Seven\";\n\
    \                    break;\n                case 8:\n                    str\
    \ = \"Eight\";\n                    break;\n                case 9:\n        \
    \            str = \"Nine\";\n                    break;\n            }\n    \
    \        result.push(str);\n        }\n    }\n    result.sort();\n    result.reverse();\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Two',\n  'Three',\n  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmppce709v5.js:59:12)\n\
    \    at Object.<anonymous> (/tmp/tmppce709v5.js:65:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \   'Two',\n    'Three', 'One',\n    'One',   'Four',\n    'Five',  'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n  let filtered: number[] = sorted.filter(num => num >= 1 && num\
    \ <= 9);\n  let reversed: number[] = filtered.reverse();\n  for (let num of reversed)\
    \ {\n    switch (num) {\n      case 1:\n        result.push(\"One\");\n      \
    \  break;\n      case 2:\n        result.push(\"Two\");\n        break;\n    \
    \  case 3:\n        result.push(\"Three\");\n        break;\n      case 4:\n \
    \       result.push(\"Four\");\n        break;\n      case 5:\n        result.push(\"\
    Five\");\n        break;\n      case 6:\n        result.push(\"Six\");\n     \
    \   break;\n      case 7:\n        result.push(\"Seven\");\n        break;\n \
    \     case 8:\n        result.push(\"Eight\");\n        break;\n      case 9:\n\
    \        result.push(\"Nine\");\n        break;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b).filter(item => item >= 1 && item <= 9);\n    for (let i = sortedArr.length\
    \ - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n\
    \                result.push(\"One\");\n                break;\n            case\
    \ 2:\n                result.push(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push(\"Three\");\n                break;\n\
    \            case 4:\n                result.push(\"Four\");\n               \
    \ break;\n            case 5:\n                result.push(\"Five\");\n      \
    \          break;\n            case 6:\n                result.push(\"Six\");\n\
    \                break;\n            case 7:\n                result.push(\"Seven\"\
    );\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738826
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    result.reverse();\n    let result2: string[] = [];\n    for (let i\
    \ = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case\
    \ 1:\n                result2.push(\"One\");\n                break;\n       \
    \     case 2:\n                result2.push(\"Two\");\n                break;\n\
    \            case 3:\n                result2.push(\"Three\");\n             \
    \   break;\n            case 4:\n                result2.push(\"Four\");\n   \
    \             break;\n            case 5:\n                result2.push(\"Five\"\
    );\n                break;\n            case 6:\n                result2.push(\"\
    Six\");\n                break;\n            case 7:\n                result2.push(\"\
    Seven\");\n                break;\n            case 8:\n                result2.push(\"\
    Eight\");\n                break;\n            case 9:\n                result2.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result2;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmporbrooiu.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmporbrooiu.ts(25,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmporbrooiu.ts(28,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmporbrooiu.ts(31,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmporbrooiu.ts(34,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmporbrooiu.ts(37,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmporbrooiu.ts(40,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmporbrooiu.ts(43,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmporbrooiu.ts(46,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmporbrooiu.ts(49,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738942
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    sortedArr.forEach(element => {\n        if (element >= 1\
    \ && element <= 9) {\n            result.push(getNumberName(element));\n     \
    \   }\n    });\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaxk1bb6w.ts(18,25): error TS2304: Cannot find name
    ''getNumberName''.

    '
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1)\
    \ {\n            result.push(\"One\");\n        } else if (reversedArr[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] ===\
    \ 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const numbers: number[] = arr.filter(num => num >= 1 && num\
    \ <= 9);\n    const sorted: number[] = numbers.sort((a, b) => a - b);\n    const\
    \ reversed: number[] = sorted.reverse();\n    const names: string[] = reversed.map(num\
    \ => {\n        switch (num) {\n            case 1:\n                return \"\
    One\";\n            case 2:\n                return \"Two\";\n            case\
    \ 3:\n                return \"Three\";\n            case 4:\n               \
    \ return \"Four\";\n            case 5:\n                return \"Five\";\n  \
    \          case 6:\n                return \"Six\";\n            case 7:\n   \
    \             return \"Seven\";\n            case 8:\n                return \"\
    Eight\";\n            case 9:\n                return \"Nine\";\n        }\n \
    \   });\n    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] < 1 || sortedArr[i] > 9) {\n            continue;\n        }\n\
    \        switch (sortedArr[i]) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqbt1xl1o.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b)\
    \ => a - b);\n    const reversed = sorted.reverse();\n    const names = reversed.map(x\
    \ => {\n        switch (x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    \    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738831
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    temp.reverse();\n    for (let i = 0; i < temp.length; i++)\
    \ {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversedArr: number[] = sortedArr.reverse();\n  for (let\
    \ i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] === 1) {\n   \
    \   result.push(\"One\");\n    } else if (reversedArr[i] === 2) {\n      result.push(\"\
    Two\");\n    } else if (reversedArr[i] === 3) {\n      result.push(\"Three\");\n\
    \    } else if (reversedArr[i] === 4) {\n      result.push(\"Four\");\n    } else\
    \ if (reversedArr[i] === 5) {\n      result.push(\"Five\");\n    } else if (reversedArr[i]\
    \ === 6) {\n      result.push(\"Six\");\n    } else if (reversedArr[i] === 7)\
    \ {\n      result.push(\"Seven\");\n    } else if (reversedArr[i] === 8) {\n \
    \     result.push(\"Eight\");\n    } else if (reversedArr[i] === 9) {\n      result.push(\"\
    Nine\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(getName(sortedArr[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv3dddi75.ts(18,25): error TS2304: Cannot find name
    ''getName''.

    '
  timestamp: 1659738942
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let newArr: string[] = [];\n    let num: number;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n \
    \           switch (arr[i]) {\n                case 1:\n                    newArr.push(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     newArr.push(\"Two\");\n                    break;\n                case\
    \ 3:\n                    newArr.push(\"Three\");\n                    break;\n\
    \                case 4:\n                    newArr.push(\"Four\");\n       \
    \             break;\n                case 5:\n                    newArr.push(\"\
    Five\");\n                    break;\n                case 6:\n              \
    \      newArr.push(\"Six\");\n                    break;\n                case\
    \ 7:\n                    newArr.push(\"Seven\");\n                    break;\n\
    \                case 8:\n                    newArr.push(\"Eight\");\n      \
    \              break;\n                case 9:\n                    newArr.push(\"\
    Nine\");\n                    break;\n            }\n        }\n    }\n    return\
    \ newArr.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpa4a4nrl5.js:54:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa4a4nrl5.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let res: string[] = [];\n    let nums: number[] = [];\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9)\
    \ {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort((a, b) =>\
    \ a - b);\n    for (let i = nums.length - 1; i >= 0; i--) {\n        switch (nums[i])\
    \ {\n            case 1:\n                res.push(\"One\");\n               \
    \ break;\n            case 2:\n                res.push(\"Two\");\n          \
    \      break;\n            case 3:\n                res.push(\"Three\");\n   \
    \             break;\n            case 4:\n                res.push(\"Four\");\n\
    \                break;\n            case 5:\n                res.push(\"Five\"\
    );\n                break;\n            case 6:\n                res.push(\"Six\"\
    );\n                break;\n            case 7:\n                res.push(\"Seven\"\
    );\n                break;\n            case 8:\n                res.push(\"Eight\"\
    );\n                break;\n            case 9:\n                res.push(\"Nine\"\
    );\n                break;\n        }\n    }\n    return res;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const filtered = arr.filter(x =>\
    \ x >= 1 && x <= 9);\n  const sorted = filtered.sort((a, b) => a - b);\n  const\
    \ reversed = sorted.reverse();\n  const result = reversed.map(x => names[x - 1]);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) =>\
    \ a - b).reverse();\n    let result = [];\n    for (let i = 0; i < sorted.length;\
    \ i++) {\n        switch (sorted[i]) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const result: string[] = [];\n  const sortedArr = arr.sort((a,\
    \ b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  for (let i = 0;\
    \ i < reversedArr.length; i++) {\n    if (reversedArr[i] >= 1 && reversedArr[i]\
    \ <= 9) {\n      switch (reversedArr[i]) {\n        case 1:\n          result.push(\"\
    One\");\n          break;\n        case 2:\n          result.push(\"Two\");\n\
    \          break;\n        case 3:\n          result.push(\"Three\");\n      \
    \    break;\n        case 4:\n          result.push(\"Four\");\n          break;\n\
    \        case 5:\n          result.push(\"Five\");\n          break;\n       \
    \ case 6:\n          result.push(\"Six\");\n          break;\n        case 7:\n\
    \          result.push(\"Seven\");\n          break;\n        case 8:\n      \
    \    result.push(\"Eight\");\n          break;\n        case 9:\n          result.push(\"\
    Nine\");\n          break;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n \
    \   }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmwefhr74.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i: number = 0; i <\
    \ arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch\
    \ (arr[i]) {\n                case 1:\n                    result.push(\"One\"\
    );\n                    break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpaloy0o87.js:53:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaloy0o87.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(getName(sorted[i]));\n   \
    \     }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphxlnjmqv.ts(18,25): error TS2304: Cannot find name
    ''getName''.

    '
  timestamp: 1659738947
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            result.push(sortedArr[i]);\n\
    \        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuh84xs6w.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpuh84xs6w.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpuh84xs6w.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpuh84xs6w.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpuh84xs6w.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpuh84xs6w.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpuh84xs6w.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpuh84xs6w.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpuh84xs6w.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpuh84xs6w.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1)\
    \ {\n            result.push(\"One\");\n        } else if (reversedArr[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] ===\
    \ 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp572gorcj.js:53:12)\n\
    \    at Object.<anonymous> (/tmp/tmp572gorcj.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(getName(sortedArr[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv3dddi75.ts(18,25): error TS2304: Cannot find name
    ''getName''.

    '
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const sorted = arr.filter(num => num >= 1 && num <= 9).sort((a,\
    \ b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(num\
    \ => {\n    switch (num) {\n      case 1:\n        return \"One\";\n      case\
    \ 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n    \
    \  case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n\
    \      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\"\
    ;\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"\
    Nine\";\n    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const numbers = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"\
    Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\"\
    ,\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n  const result = [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n     \
    \ result.push(numbers[arr[i]]);\n    }\n  }\n  return result.reverse();\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpcj8dq5rd.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcj8dq5rd.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let newArr: string[] = [];\n    let numArr: number[] = [];\n\
    \    let num: number;\n    for (let i = 0; i < arr.length; i++) {\n        num\
    \ = arr[i];\n        if (num > 0 && num < 10) {\n            numArr.push(num);\n\
    \        }\n    }\n    numArr.sort((a, b) => a - b);\n    numArr.reverse();\n\
    \    for (let i = 0; i < numArr.length; i++) {\n        num = numArr[i];\n   \
    \     switch (num) {\n            case 1:\n                newArr.push(\"One\"\
    );\n                break;\n            case 2:\n                newArr.push(\"\
    Two\");\n                break;\n            case 3:\n                newArr.push(\"\
    Three\");\n                break;\n            case 4:\n                newArr.push(\"\
    Four\");\n                break;\n            case 5:\n                newArr.push(\"\
    Five\");\n                break;\n            case 6:\n                newArr.push(\"\
    Six\");\n                break;\n            case 7:\n                newArr.push(\"\
    Seven\");\n                break;\n            case 8:\n                newArr.push(\"\
    Eight\");\n                break;\n            case 9:\n                newArr.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return newArr;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp572gorcj.js:53:12)\n\
    \    at Object.<anonymous> (/tmp/tmp572gorcj.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    let reversed: number[] = result.reverse();\n    let final: string[]\
    \ = [];\n    for (let i = 0; i < reversed.length; i++) {\n        switch (reversed[i])\
    \ {\n            case 1:\n                final.push(\"One\");\n             \
    \   break;\n            case 2:\n                final.push(\"Two\");\n      \
    \          break;\n            case 3:\n                final.push(\"Three\");\n\
    \                break;\n            case 4:\n                final.push(\"Four\"\
    );\n                break;\n            case 5:\n                final.push(\"\
    Five\");\n                break;\n            case 6:\n                final.push(\"\
    Six\");\n                break;\n            case 7:\n                final.push(\"\
    Seven\");\n                break;\n            case 8:\n                final.push(\"\
    Eight\");\n                break;\n            case 9:\n                final.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return final;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpszyhqvj3.ts(18,25): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmpszyhqvj3.ts(21,9):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n"
  timestamp: 1659738817
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n\
    \    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqbt1xl1o.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpqbt1xl1o.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(sortedArr[i]);\n\
    \        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp04b6nqt5.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmp04b6nqt5.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmp04b6nqt5.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmp04b6nqt5.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmp04b6nqt5.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmp04b6nqt5.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmp04b6nqt5.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmp04b6nqt5.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmp04b6nqt5.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmp04b6nqt5.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i: number = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i]\
    \ === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i]\
    \ === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i]\
    \ === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let sorted: number[] = arr.filter(num => num > 0 && num < 10).sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    let names:\
    \ string[] = reversed.map(num => {\n        switch (num) {\n            case 1:\n\
    \                return \"One\";\n            case 2:\n                return\
    \ \"Two\";\n            case 3:\n                return \"Three\";\n         \
    \   case 4:\n                return \"Four\";\n            case 5:\n         \
    \       return \"Five\";\n            case 6:\n                return \"Six\"\
    ;\n            case 7:\n                return \"Seven\";\n            case 8:\n\
    \                return \"Eight\";\n            case 9:\n                return\
    \ \"Nine\";\n        }\n    });\n    return names;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let nums: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort();\n\
    \    for (let i = nums.length - 1; i >= 0; i--) {\n        switch (nums[i]) {\n\
    \            case 1:\n                result.push(\"One\");\n                break;\n\
    \            case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let newArr: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            newArr.push(sortedArr[i].toString());\n\
    \        }\n    }\n    newArr.reverse();\n    for (let i = 0; i < newArr.length;\
    \ i++) {\n        switch (newArr[i]) {\n            case \"1\":\n            \
    \    newArr[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               newArr[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                newArr[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                newArr[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                newArr[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                newArr[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                newArr[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    newArr[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                newArr[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return newArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] > 0 &&\
    \ reversedArr[i] < 10) {\n            switch (reversedArr[i]) {\n            \
    \    case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b).filter(num => num >= 1 && num <= 9);\n    for (let i = sortedArr.length\
    \ - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n\
    \                result.push(\"One\");\n                break;\n            case\
    \ 2:\n                result.push(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push(\"Three\");\n                break;\n\
    \            case 4:\n                result.push(\"Four\");\n               \
    \ break;\n            case 5:\n                result.push(\"Five\");\n      \
    \          break;\n            case 6:\n                result.push(\"Six\");\n\
    \                break;\n            case 7:\n                result.push(\"Seven\"\
    );\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let arr_str: string[] = [];\n    let arr_num: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i]\
    \ < 10) {\n            arr_num.push(arr[i]);\n        }\n    }\n    arr_num.sort();\n\
    \    arr_num.reverse();\n    for (let i = 0; i < arr_num.length; i++) {\n    \
    \    switch (arr_num[i]) {\n            case 1:\n                arr_str.push(\"\
    One\");\n                break;\n            case 2:\n                arr_str.push(\"\
    Two\");\n                break;\n            case 3:\n                arr_str.push(\"\
    Three\");\n                break;\n            case 4:\n                arr_str.push(\"\
    Four\");\n                break;\n            case 5:\n                arr_str.push(\"\
    Five\");\n                break;\n            case 6:\n                arr_str.push(\"\
    Six\");\n                break;\n            case 7:\n                arr_str.push(\"\
    Seven\");\n                break;\n            case 8:\n                arr_str.push(\"\
    Eight\");\n                break;\n            case 9:\n                arr_str.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return arr_str;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1)\
    \ {\n            result.push(\"One\");\n        } else if (reversedArr[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] ===\
    \ 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(arr[i]);\n\
    \        }\n    }\n    result.sort((a, b) => a - b);\n    result.reverse();\n\
    \    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n\
    \            case 1:\n                result[i] = \"One\";\n                break;\n\
    \            case 2:\n                result[i] = \"Two\";\n                break;\n\
    \            case 3:\n                result[i] = \"Three\";\n               \
    \ break;\n            case 4:\n                result[i] = \"Four\";\n       \
    \         break;\n            case 5:\n                result[i] = \"Five\";\n\
    \                break;\n            case 6:\n                result[i] = \"Six\"\
    ;\n                break;\n            case 7:\n                result[i] = \"\
    Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe6fml_6p.ts(17,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(20,27): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpe6fml_6p.ts(20,31): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpe6fml_6p.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpe6fml_6p.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738826
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(numberToString(sorted[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0r4nlfqv.ts(18,25): error TS2304: Cannot find name
    ''numberToString''.

    '
  timestamp: 1659738833
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(arr[i].toString());\n\
    \        }\n    }\n    result.sort();\n    result.reverse();\n    for (let i =\
    \ 0; i < result.length; i++) {\n        switch (result[i]) {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i]\
    \ > 0 && sortedArr[i] < 10) {\n      result.push(sortedArr[i]);\n    }\n  }\n\
    \  result.reverse();\n  for (let i = 0; i < result.length; i++) {\n    switch\
    \ (result[i]) {\n      case 1:\n        result[i] = \"One\";\n        break;\n\
    \      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n\
    \        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i]\
    \ = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n\
    \        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n\
    \      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n\
    \        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i]\
    \ = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm5lcu52h.ts(18,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpm5lcu52h.ts(24,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpm5lcu52h.ts(27,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpm5lcu52h.ts(30,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpm5lcu52h.ts(33,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpm5lcu52h.ts(36,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpm5lcu52h.ts(39,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpm5lcu52h.ts(42,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpm5lcu52h.ts(45,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpm5lcu52h.ts(48,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const sortedArr = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            switch (sortedArr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i: number = 0; i < temp.length; i++) {\n       \
    \ switch (temp[i]) {\n            case 1:\n                result.push(\"One\"\
    );\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  'Eight', 'Five',\n  'Four',  'Three',\n  'Two',   'Two',\n  'One',\
    \   'One'\n]\n[]\n[ 'One' ]\n"
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i].toString());\n\
    \        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length;\
    \ i++) {\n        switch (result[i]) {\n            case \"1\":\n            \
    \    result[i] = \"One\";\n                break;\n            case \"2\":\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ \"3\":\n                result[i] = \"Three\";\n                break;\n   \
    \         case \"4\":\n                result[i] = \"Four\";\n               \
    \ break;\n            case \"5\":\n                result[i] = \"Five\";\n   \
    \             break;\n            case \"6\":\n                result[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                result[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[i] = \"Eight\";\n                break;\n            case \"9\":\n\
    \                result[i] = \"Nine\";\n                break;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversed: number[] = sorted.reverse();\n  for (let i =\
    \ 0; i < reversed.length; i++) {\n    if (reversed[i] === 1) {\n      result.push(\"\
    One\");\n    } else if (reversed[i] === 2) {\n      result.push(\"Two\");\n  \
    \  } else if (reversed[i] === 3) {\n      result.push(\"Three\");\n    } else\
    \ if (reversed[i] === 4) {\n      result.push(\"Four\");\n    } else if (reversed[i]\
    \ === 5) {\n      result.push(\"Five\");\n    } else if (reversed[i] === 6) {\n\
    \      result.push(\"Six\");\n    } else if (reversed[i] === 7) {\n      result.push(\"\
    Seven\");\n    } else if (reversed[i] === 8) {\n      result.push(\"Eight\");\n\
    \    } else if (reversed[i] === 9) {\n      result.push(\"Nine\");\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i])\
    \ {\n            case 1:\n                result.push(\"One\");\n            \
    \    break;\n            case 2:\n                result.push(\"Two\");\n    \
    \            break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n \
    \   }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmwefhr74.ts(18,25): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(24,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(27,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(30,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(33,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(36,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(39,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(42,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(45,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpmwefhr74.ts(48,18): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  return arr\n    .filter(x => x >= 1 && x <= 9)\n    .sort((a,\
    \ b) => a - b)\n    .reverse()\n    .map(x => {\n      switch (x) {\n        case\
    \ 1:\n          return \"One\";\n        case 2:\n          return \"Two\";\n\
    \        case 3:\n          return \"Three\";\n        case 4:\n          return\
    \ \"Four\";\n        case 5:\n          return \"Five\";\n        case 6:\n  \
    \        return \"Six\";\n        case 7:\n          return \"Seven\";\n     \
    \   case 8:\n          return \"Eight\";\n        case 9:\n          return \"\
    Nine\";\n      }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let\
    \ i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n     \
    \       result.push(\"One\");\n        } else if (reversed[i] === 2) {\n     \
    \       result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n     \
    \       result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n   \
    \         result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n  \
    \          result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n \
    \           result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n \
    \           result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n\
    \            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n\
    \            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n  let reversed: number[] = sorted.reverse();\n  for (let i =\
    \ 0; i < reversed.length; i++) {\n    if (reversed[i] === 1) {\n      result.push(\"\
    One\");\n    } else if (reversed[i] === 2) {\n      result.push(\"Two\");\n  \
    \  } else if (reversed[i] === 3) {\n      result.push(\"Three\");\n    } else\
    \ if (reversed[i] === 4) {\n      result.push(\"Four\");\n    } else if (reversed[i]\
    \ === 5) {\n      result.push(\"Five\");\n    } else if (reversed[i] === 6) {\n\
    \      result.push(\"Six\");\n    } else if (reversed[i] === 7) {\n      result.push(\"\
    Seven\");\n    } else if (reversed[i] === 8) {\n      result.push(\"Eight\");\n\
    \    } else if (reversed[i] === 9) {\n      result.push(\"Nine\");\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738812
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if\
    \ (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(getName(sortedArr[i]));\n\
    \        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv3dddi75.ts(18,25): error TS2304: Cannot find name
    ''getName''.

    '
  timestamp: 1659738942
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let numbers: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            numbers.push(arr[i]);\n        }\n    }\n    numbers.sort();\n\
    \    numbers.reverse();\n    for (let i = 0; i < numbers.length; i++) {\n    \
    \    switch (numbers[i]) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n              \
    \  case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1)\
    \ {\n            result.push(\"One\");\n        } else if (reversedArr[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] ===\
    \ 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    if (arr.length === 0) {\n  \
    \      return result;\n    }\n    let sorted: number[] = arr.sort((a, b) => a\
    \ - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] > 0 &&\
    \ arr[i] < 10) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    for (let i: number = 0; i < temp.length; i++) {\n       \
    \ switch (temp[i]) {\n            case 1:\n                result.push(\"One\"\
    );\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738947
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i])\
    \ {\n                case 1:\n                    result.push(\"One\");\n    \
    \                break;\n                case 2:\n                    result.push(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.push(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.push(\"Five\");\n       \
    \             break;\n                case 6:\n                    result.push(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.push(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.push(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.push(\"Nine\");\n       \
    \             break;\n            }\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp572gorcj.js:53:12)\n\
    \    at Object.<anonymous> (/tmp/tmp572gorcj.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let temp: number[] = [];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n\
    \      temp.push(arr[i]);\n    }\n  }\n  temp.sort();\n  temp.reverse();\n  for\
    \ (let i = 0; i < temp.length; i++) {\n    switch (temp[i]) {\n      case 1:\n\
    \        result.push(\"One\");\n        break;\n      case 2:\n        result.push(\"\
    Two\");\n        break;\n      case 3:\n        result.push(\"Three\");\n    \
    \    break;\n      case 4:\n        result.push(\"Four\");\n        break;\n \
    \     case 5:\n        result.push(\"Five\");\n        break;\n      case 6:\n\
    \        result.push(\"Six\");\n        break;\n      case 7:\n        result.push(\"\
    Seven\");\n        break;\n      case 8:\n        result.push(\"Eight\");\n  \
    \      break;\n      case 9:\n        result.push(\"Nine\");\n        break;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738948
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i]\
    \ >= 1 && sortedArr[i] <= 9) {\n      result.push(sortedArr[i]);\n    }\n  }\n\
    \  result.reverse();\n  for (let i = 0; i < result.length; i++) {\n    switch\
    \ (result[i]) {\n      case 1:\n        result[i] = \"One\";\n        break;\n\
    \      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n\
    \        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i]\
    \ = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n\
    \        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n\
    \      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n\
    \        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i]\
    \ = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpng2899ei.ts(18,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(24,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(27,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(30,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(33,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(36,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(39,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(42,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(45,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    ../../../../../tmp/tmpng2899ei.ts(48,12): error TS2678: Type ''number'' is not
    comparable to type ''string''.

    '
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort();\n\
    \    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n   \
    \         case 1:\n                result.push(\"One\");\n                break;\n\
    \            case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738948
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1)\
    \ {\n            result.push(\"One\");\n        } else if (reversedArr[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] ===\
    \ 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i]\
    \ > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n               \
    \ case 1:\n                    result.push(\"One\");\n                    break;\n\
    \                case 2:\n                    result.push(\"Two\");\n        \
    \            break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] >= 1\
    \ && reversedArr[i] <= 9) {\n            switch (reversedArr[i]) {\n         \
    \       case 1:\n                    result.push(\"One\");\n                 \
    \   break;\n                case 2:\n                    result.push(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738822
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a,\
    \ b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for\
    \ (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1)\
    \ {\n            result.push(\"One\");\n        } else if (reversedArr[i] ===\
    \ 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] ===\
    \ 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i]\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i]\
    \ === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738817
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const numbers = {\n        1: \"One\",\n        2: \"Two\",\n\
    \        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6:\
    \ \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n\
    \    };\n    const result = [];\n    arr.sort((a, b) => a - b);\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n \
    \           result.push(numbers[arr[i]]);\n        }\n    }\n    return result.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738948
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const result: string[] = [];\n    const sortedArr = arr.sort((a,\
    \ b) => a - b);\n    const reversedArr = sortedArr.reverse();\n    for (let i\
    \ = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n \
    \           result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n\
    \            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n\
    \            result.push(\"Three\");\n        } else if (reversedArr[i] === 4)\
    \ {\n            result.push(\"Four\");\n        } else if (reversedArr[i] ===\
    \ 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i]\
    \ === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i]\
    \ === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i]\
    \ === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i]\
    \ === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738948
