name: HumanEval_9_rolling_max
language: ts
prompt: "//From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
  \ 3, 3, 100, 100]);\n}\n\ntest();"
completions: ["    const result: number[] = [];\n    let max = numbers[0];\n    result.push(max);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n", "    let result: number[] = [];\n    let max =\
    \ numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n", "    return\
    \ numbers.map((_, i) => Math.max(...numbers.slice(0, i + 1)));\n}\n", "    return\
    \ numbers.map((_, i) => Math.max(...numbers.slice(0, i + 1)));\n}\n", "    let\
    \ max: number = numbers[0];\n    return numbers.map(number => {\n        if (number\
    \ > max) {\n            max = number;\n        }\n        return max;\n    });\n\
    }\n", "    let result: number[] = [];\n    let max: number = numbers[0];\n   \
    \ result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "  return numbers.map((_, i) => Math.max(...numbers.slice(0,\
    \ i + 1)));\n}\n", "    let max = numbers[0];\n    let result = [max];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n        result.push(max);\n    }\n  \
    \  return result;\n}\n", "    let result: number[] = [];\n    let max: number\
    \ = numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n", "    return\
    \ numbers.map((_, i) => Math.max(...numbers.slice(0, i + 1)));\n}\n", "    let\
    \ result: number[] = [];\n    let max: number = numbers[0];\n    result.push(max);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n", "    let result: number[] = [];\n    let max: number\
    \ = numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n", "    const\
    \ result: number[] = [];\n    let max: number = numbers[0];\n    result.push(max);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n", "    let result: number[] = [];\n    let max: number\
    \ = numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n", "    const\
    \ result: number[] = [];\n    let max = numbers[0];\n    result.push(max);\n \
    \   for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n", "    let result: number[] = [];\n    let max: number\
    \ = numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n", "    let\
    \ result: number[] = [];\n    let max: number = numbers[0];\n    result.push(max);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n", "    const result: number[] = [];\n    let max\
    \ = numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        const current = numbers[i];\n        if (current > max) {\n\
    \            max = current;\n        }\n        result.push(max);\n    }\n   \
    \ return result;\n}\n", "    return numbers.map((value, index, array) => {\n \
    \       return Math.max(...array.slice(0, index + 1));\n    });\n}\n", "    let\
    \ max = numbers[0];\n    return numbers.map(n => {\n        if (n > max) {\n \
    \           max = n;\n        }\n        return max;\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
