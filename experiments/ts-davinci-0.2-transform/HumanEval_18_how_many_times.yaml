name: HumanEval_18_how_many_times
language: ts
prompt: "//Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
  aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string:\
  \ string, substring: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\"\
  , \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
  cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n\
  }\n\ntest();"
completions: ["    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index < 0)\
    \ {\n            break;\n        }\n        count++;\n        index++;\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let index = 0;\n    while (index\
    \ < string.length) {\n        index = string.indexOf(substring, index);\n    \
    \    if (index === -1) {\n            break;\n        }\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\n", "    let count = 0;\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string.substr(i, substring.length)\
    \ === substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  let count = 0;\n  let index = string.indexOf(substring);\n  while (index\
    \ !== -1) {\n    count++;\n    index = string.indexOf(substring, index + 1);\n\
    \  }\n  return count;\n}\n", "  let count = 0;\n  let start = 0;\n  while (true)\
    \ {\n    let index = string.indexOf(substring, start);\n    if (index == -1) {\n\
    \      break;\n    }\n    count++;\n    start = index + 1;\n  }\n  return count;\n\
    }\n", "    let count = 0;\n    let index = 0;\n    while (index < string.length)\
    \ {\n        index = string.indexOf(substring, index);\n        if (index ===\
    \ -1) {\n            break;\n        }\n        count++;\n        index++;\n \
    \   }\n    return count;\n}\n", "    let count = 0;\n    let index = string.indexOf(substring);\n\
    \    while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n", "    let count = 0;\n    let index\
    \ = 0;\n    while (index < string.length) {\n        index = string.indexOf(substring,\
    \ index);\n        if (index === -1) {\n            break;\n        }\n      \
    \  count++;\n        index++;\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let i = 0;\n    while (i < string.length) {\n        let j = 0;\n\
    \        while (j < substring.length && string[i + j] === substring[j]) {\n  \
    \          j++;\n        }\n        if (j === substring.length) {\n          \
    \  count++;\n        }\n        i++;\n    }\n    return count;\n}\n", "    let\
    \ count = 0;\n    let index = 0;\n    while (true) {\n        index = string.indexOf(substring,\
    \ index);\n        if (index === -1) {\n            break;\n        }\n      \
    \  count++;\n        index++;\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let index = 0;\n    while (index < string.length) {\n        index\
    \ = string.indexOf(substring, index);\n        if (index === -1) {\n         \
    \   break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n   \
    \     if (string.substr(i, substring.length) === substring) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let count = 0;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string.substr(i, substring.length)\
    \ === substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let startIndex = 0;\n    while (true) {\n     \
    \   let index = string.indexOf(substring, startIndex);\n        if (index == -1)\
    \ {\n            break;\n        }\n        count++;\n        startIndex = index\
    \ + 1;\n    }\n    return count;\n}\n", "    let count = 0;\n    let index = 0;\n\
    \    while (index < string.length) {\n        index = string.indexOf(substring,\
    \ index);\n        if (index === -1) {\n            break;\n        }\n      \
    \  count++;\n        index++;\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let index = string.indexOf(substring);\n    while (index !== -1) {\n\
    \        count++;\n        index = string.indexOf(substring, index + 1);\n   \
    \ }\n    return count;\n}\n", "    let counter = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.substr(i, substring.length) === substring) {\n  \
    \          counter++;\n        }\n    }\n    return counter;\n}\n", "    let count\
    \ = 0;\n    let index = string.indexOf(substring);\n    while (index !== -1) {\n\
    \        count++;\n        index = string.indexOf(substring, index + 1);\n   \
    \ }\n    return count;\n}\n", "    let count = 0;\n    let index = 0;\n    while\
    \ (index < string.length) {\n        let found = string.indexOf(substring, index);\n\
    \        if (found === -1) {\n            break;\n        }\n        count++;\n\
    \        index = found + 1;\n    }\n    return count;\n}\n", "    let count =\
    \ 0;\n    let index = 0;\n    while (index < string.length) {\n        let subIndex\
    \ = string.indexOf(substring, index);\n        if (subIndex !== -1) {\n      \
    \      count++;\n            index = subIndex + 1;\n        } else {\n       \
    \     break;\n        }\n    }\n    return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
