name: HumanEval_79_decimal_to_binary
language: ts
prompt: "//You will be given a number in decimal form and your task is to convert\
  \ it to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n\
  // \"db100000db\"\nfunction decimal_to_binary(decimal: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"\
  db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"\
  db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"
completions: ["    let binary = \"\";\n    while (decimal > 0) {\n        binary =\
    \ (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return \"db\" + binary + \"db\";\n}\n", "    let binary: string = \"\";\n\
    \    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n       \
    \ decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\"\
    ;\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary:\
    \ string = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) +\
    \ binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\"\
    \ + binary + \"db\";\n}\n", "  let binary = \"\";\n  while (decimal > 0) {\n \
    \   binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n    let\
    \ number = decimal;\n    while (number > 0) {\n        binary = (number % 2) +\
    \ binary;\n        number = Math.floor(number / 2);\n    }\n    return \"db\"\
    \ + binary + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n\
    \        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary =\
    \ \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n      \
    \  binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n\
    \    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n       \
    \ decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\"\
    ;\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n        binary =\
    \ (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return \"db\" + binary + \"db\";\n}\n", "  let binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n", "  let binary = \"\";\n\
    \  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal =\
    \ Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n", " \
    \ let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2).toString()\
    \ + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary\
    \ + \"db\";\n}\n", "  return \"db\" + decimal.toString(2) + \"db\";\n}\n", " \
    \   return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n     \
    \   decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"\
    db\";\n}\n", "  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal\
    \ % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\"\
    \ + binary + \"db\";\n}\n", "    let binary = \"\";\n    let remainder = 0;\n\
    \    let quotient = decimal;\n    while (quotient > 0) {\n        remainder =\
    \ quotient % 2;\n        quotient = Math.floor(quotient / 2);\n        binary\
    \ = remainder + binary;\n    }\n    return \"db\" + binary + \"db\";\n}\n", " \
    \   let binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal %\
    \ 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "    return \"db\" + decimal.toString(2) +\
    \ \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n        binary\
    \ = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return \"db\" + binary + \"db\";\n}\n", "  let binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n     \
    \   decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"\
    db\";\n}\n", "  return \"db\" + decimal.toString(2) + \"db\";\n}\n", "  let binary\
    \ = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n   \
    \ decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n\
    }\n", "    return 'db' + decimal.toString(2) + 'db';\n}\n", "    let binary =\
    \ '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n \
    \       decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary +\
    \ 'db';\n}\n", "    let binary: string = \"\";\n    let remainder: number;\n \
    \   while (decimal > 0) {\n        remainder = decimal % 2;\n        binary =\
    \ remainder + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n   \
    \ return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary =\
    \ \"\";\n    let remainder: number;\n    while (decimal > 0) {\n        remainder\
    \ = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary =\
    \ remainder + binary;\n    }\n    return \"db\" + binary + \"db\";\n}\n", "  \
    \  let binary: string = \"\";\n    while (decimal > 0) {\n        binary = (decimal\
    \ % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "  return \"db\" + decimal.toString(2) + \"\
    db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n        binary\
    \ = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal =\
    \ Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n",
  "    let binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal %\
    \ 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    return 'db' +\
    \ decimal.toString(2) + 'db';\n}\n", "    let binary: string = \"\";\n    while\
    \ (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal =\
    \ Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n",
  "    let binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal %\
    \ 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "  return \"db\" + decimal.toString(2) + \"\
    db\";\n}\n", "  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal\
    \ % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\"\
    \ + binary + \"db\";\n}\n", "    return 'db' + decimal.toString(2) + 'db';\n}\n",
  "    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2)\
    \ + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db'\
    \ + binary + 'db';\n}\n", "    let binary: string = \"\";\n    let remainder:\
    \ number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n     \
    \   decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary: string =\
    \ \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n      \
    \  binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n\
    \    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n       \
    \ decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\"\
    ;\n}\n", "  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal\
    \ % 2).toString() + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return\
    \ \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary =\
    \ \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n      \
    \  binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "    return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    let binary_string = \"\";\n  \
    \  while (decimal > 0) {\n        binary = decimal % 2;\n        decimal = Math.floor(decimal\
    \ / 2);\n        binary_string = binary + binary_string;\n    }\n    return \"\
    db\" + binary_string + \"db\";\n}\n", "    let binary = \"\";\n    let binary_string\
    \ = \"\";\n    let remainder = 0;\n    let quotient = decimal;\n    while (quotient\
    \ > 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient\
    \ / 2);\n        binary = remainder.toString() + binary;\n    }\n    binary_string\
    \ = \"db\" + binary + \"db\";\n    return binary_string;\n}\n", "  return \"db\"\
    \ + decimal.toString(2) + \"db\";\n}\n", "    let binary: string = \"\";\n   \
    \ let quotient: number = decimal;\n    while (quotient > 0) {\n        binary\
    \ = quotient % 2 + binary;\n        quotient = Math.floor(quotient / 2);\n   \
    \ }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n   \
    \ let i = 0;\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n        i++;\n    }\n    return \"\
    db\" + binary + \"db\";\n}\n", "  let binary = \"\";\n  while (decimal > 0) {\n\
    \    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\n", "    let binary: string = \"\"\
    ;\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n     \
    \   decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"\
    db\";\n}\n", "    return 'db' + decimal.toString(2) + 'db';\n}\n", "  let binary\
    \ = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2).toString() + binary;\n\
    \    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\"\
    ;\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n        binary =\
    \ (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return \"db\" + binary + \"db\";\n}\n", "    return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "    let binary = decimal.toString(2);\n    return \"db\" +\
    \ binary + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n\
    \        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary =\
    \ \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n      \
    \  binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "  let binary = \"\";\n  while\
    \ (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n     \
    \   decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"\
    db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n        binary\
    \ = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return \"db\" + binary + \"db\";\n}\n", "    let binary = '';\n    let remainder:\
    \ number;\n    let quotient: number = decimal;\n    while (quotient > 0) {\n \
    \       remainder = quotient % 2;\n        quotient = Math.floor(quotient / 2);\n\
    \        binary = remainder + binary;\n    }\n    return 'db' + binary + 'db';\n\
    }\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary\
    \ = \"\";\n    let binary_string = \"\";\n    while (decimal > 0) {\n        binary\
    \ = (decimal % 2).toString() + binary;\n        decimal = Math.floor(decimal /\
    \ 2);\n    }\n    for (let i = 0; i < binary.length; i++) {\n        binary_string\
    \ += binary[i];\n    }\n    return \"db\" + binary_string + \"db\";\n}\n", " \
    \ let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n\
    \    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\"\
    ;\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n        binary =\
    \ (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal =\
    \ Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n",
  "    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2).toString()\
    \ + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db'\
    \ + binary + 'db';\n}\n", "  let binary = \"\";\n  let temp = decimal;\n  while\
    \ (temp > 0) {\n    binary = (temp % 2) + binary;\n    temp = Math.floor(temp\
    \ / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n", "    let binary: string\
    \ = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n      \
    \  binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n\
    \    let remainder: number;\n    while (decimal > 0) {\n        remainder = decimal\
    \ % 2;\n        decimal = Math.floor(decimal / 2);\n        binary = remainder\
    \ + binary;\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary\
    \ = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n      \
    \  binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n\
    \    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n       \
    \ decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\"\
    ;\n}\n", "  return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary\
    \ = \"\";\n    let remainder = 0;\n    while (decimal > 0) {\n        remainder\
    \ = decimal % 2;\n        binary = remainder + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary: string\
    \ = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    let binary: string = \"\";\n    let remainder: number;\n\
    \    while (decimal > 0) {\n        remainder = decimal % 2;\n        binary =\
    \ remainder + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n   \
    \ return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary: string\
    \ = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", " \
    \   let binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal %\
    \ 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "    return \"db\" + decimal.toString(2) +\
    \ \"db\";\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", " \
    \   let binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal %\
    \ 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary: string\
    \ = \"\";\n    let remainder: number;\n    while (decimal > 0) {\n        remainder\
    \ = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary =\
    \ remainder + binary;\n    }\n    return \"db\" + binary + \"db\";\n}\n", "  \
    \  let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2)\
    \ + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db'\
    \ + binary + 'db';\n}\n", "    let binary: string = \"\";\n    while (decimal\
    \ > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary: string\
    \ = \"\";\n    let binary_array: string[] = [];\n    let binary_string: string\
    \ = \"\";\n    let binary_string_array: string[] = [];\n    let binary_string_array_reversed:\
    \ string[] = [];\n    let binary_string_array_reversed_joined: string = \"\";\n\
    \    let binary_string_array_reversed_joined_with_db: string = \"\";\n    let\
    \ binary_string_array_reversed_joined_with_db_and_db: string = \"\";\n    let\
    \ binary_string_array_reversed_joined_with_db_and_db_and_db: string = \"\";\n\
    \    let binary_string_array_reversed_joined_with_db_and_db_and_db_and_db: string\
    \ = \"\";\n    let binary_string_array_reversed_joined_with_db_and_db_and_db_and_db_and_db:\
    \ string = \"\";\n    let binary_string_array_reversed_joined_with_db_and_db_and_db_and_db_and_db_and_db:\
    \ string = \"\";\n    let binary_string_array_reversed_joined_with_db_and_db_and_db_and_db_and_db_and_db_and_db:\
    \ string = \"\";\n    let binary_string_array_reversed_joined_with_db_and_db_and_db_and_db_and_db_and_db_and_db_and_db:\
    \ string = \"\";\n    let binary_string_array_reversed_joined_with_db_and_db_and_db_and_db_and_db_and_db_and_db_and_db_and_db:\
    \ string = \"\";\n    let binary_string_array_reversed_joined_with_db_and_db_and_db_and_db_and_db_and_db_and_db_and_db_and_db_and_db:\
    \ string = \"\";\n    let binary_string_array_reversed_joined_with_db_and_db",
  "    let binary = \"\";\n    let binary_array = [];\n    let binary_string = \"\"\
    ;\n    while (decimal > 0) {\n        binary_array.push(decimal % 2);\n      \
    \  decimal = Math.floor(decimal / 2);\n    }\n    for (let i = binary_array.length\
    \ - 1; i >= 0; i--) {\n        binary_string += binary_array[i];\n    }\n    binary\
    \ = \"db\" + binary_string + \"db\";\n    return binary;\n}\n", "    let binary\
    \ = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "  return \"db\" + decimal.toString(2) + \"db\";\n}\n", " \
    \   let binary = \"\";\n    let binary_string = \"\";\n    while (decimal > 0)\
    \ {\n        binary = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n\
    \        binary_string = binary + binary_string;\n    }\n    return \"db\" + binary_string\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n      \
    \  binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "  return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n      \
    \  binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "  let binary = \"\";\n  while\
    \ (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\"\
    ;\n    let remainder = 0;\n    let quotient = decimal;\n    while (quotient >\
    \ 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient\
    \ / 2);\n        binary = remainder + binary;\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    let binary_string = \"\";\n  \
    \  while (decimal > 0) {\n        binary = decimal % 2;\n        binary_string\
    \ = binary + binary_string;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return \"db\" + binary_string + \"db\";\n}\n", "    let binary: string =\
    \ \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "  let binary = \"\";\n  while (decimal > 0) {\n    binary\
    \ = (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return\
    \ \"db\" + binary + \"db\";\n}\n", "  let binary = \"\";\n  while (decimal > 0)\
    \ {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal /\
    \ 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n", "  let binary = \"\";\n\
    \  while (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal =\
    \ Math.floor(decimal / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n", " \
    \   let binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal %\
    \ 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "  let binary = \"\";\n  while (decimal > 0)\
    \ {\n    binary = (decimal % 2) + binary;\n    decimal = Math.floor(decimal /\
    \ 2);\n  }\n  return \"db\" + binary + \"db\";\n}\n", "    let binary: string\
    \ = \"\";\n    let remainder: number;\n    while (decimal > 0) {\n        remainder\
    \ = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n        binary =\
    \ remainder + binary;\n    }\n    return \"db\" + binary + \"db\";\n}\n", "  \
    \  let binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal %\
    \ 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "  let binary: string = \"\";\n  let binary_array:\
    \ string[] = [];\n  let remainder: number = 0;\n  let quotient: number = decimal;\n\
    \  while (quotient > 0) {\n    remainder = quotient % 2;\n    quotient = Math.floor(quotient\
    \ / 2);\n    binary_array.push(remainder.toString());\n  }\n  binary_array.reverse();\n\
    \  binary = binary_array.join(\"\");\n  binary = \"db\" + binary + \"db\";\n \
    \ return binary;\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n \
    \       binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary =\
    \ \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    let binary: string = \"\";\n    while (decimal > 0) {\n\
    \        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    return \"db\"\
    \ + decimal.toString(2) + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary =\
    \ \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "  let binary = \"\";\n  let remainder = 0;\n  let quotient\
    \ = decimal;\n  while (quotient > 0) {\n    remainder = quotient % 2;\n    quotient\
    \ = Math.floor(quotient / 2);\n    binary = remainder + binary;\n  }\n  return\
    \ \"db\" + binary + \"db\";\n}\n", "    let binary: string = \"\";\n    let remainder:\
    \ number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n     \
    \   decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n\
    \    let remainder = 0;\n    while (decimal > 0) {\n        remainder = decimal\
    \ % 2;\n        binary = remainder + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary =\
    \ \"\";\n    let remainder = 0;\n    while (decimal > 0) {\n        remainder\
    \ = decimal % 2;\n        binary = remainder + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary =\
    \ \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n      \
    \  binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "  return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "    let binary = '';\n    let binary_string = '';\n    let\
    \ remainder = 0;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n\
    \        binary = remainder.toString() + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    binary_string = 'db' + binary + 'db';\n    return binary_string;\n\
    }\n", "    let binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal\
    \ % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "    return \"db\" + decimal.toString(2) +\
    \ \"db\";\n}\n", "    let binary: string = \"\";\n    let remainder: number;\n\
    \    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal\
    \ = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n  \
    \  return \"db\" + binary + \"db\";\n}\n", "  let binary = \"\";\n  let remainder\
    \ = 0;\n  let quotient = decimal;\n  while (quotient > 0) {\n    remainder = quotient\
    \ % 2;\n    quotient = Math.floor(quotient / 2);\n    binary = remainder + binary;\n\
    \  }\n  return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal =\
    \ Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n",
  "    let binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal %\
    \ 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "    let binary: string = \"\";\n    while\
    \ (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal =\
    \ Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n",
  "    let binary = \"\";\n    let remainder = 0;\n    while (decimal > 0) {\n   \
    \     remainder = decimal % 2;\n        binary = remainder + binary;\n       \
    \ decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\"\
    ;\n}\n", "  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal\
    \ % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\"\
    \ + binary + \"db\";\n}\n", "    let binary = \"\";\n    let remainder: number;\n\
    \    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal\
    \ = Math.floor(decimal / 2);\n        binary = remainder + binary;\n    }\n  \
    \  return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal =\
    \ Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n",
  "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n     \
    \   decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"\
    db\";\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) +\
    \ binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\"\
    \ + binary + \"db\";\n}\n", "    let binary: string = \"\";\n    let remainder:\
    \ number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n     \
    \   decimal = Math.floor(decimal / 2);\n        binary = remainder + binary;\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\n", "    return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n      \
    \  binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "    return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", " \
    \   return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary = \"\"\
    ;\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n     \
    \   decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"\
    db\";\n}\n", "  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal\
    \ % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\"\
    \ + binary + \"db\";\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n\
    \        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "    return `db${decimal.toString(2)}db`;\n\
    }\n", "  let binary = \"\";\n  let remainder = 0;\n  let quotient = decimal;\n\
    \  while (quotient > 0) {\n    remainder = quotient % 2;\n    quotient = Math.floor(quotient\
    \ / 2);\n    binary = remainder + binary;\n  }\n  return \"db\" + binary + \"\
    db\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
