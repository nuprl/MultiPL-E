language: ts
name: HumanEval_115_max_fill
results:
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let row_len\
    \ = grid.length;\n    let col_len = grid[0].length;\n    let bucket = capacity;\n\
    \    while (row < row_len) {\n        if (grid[row][col] === 1) {\n          \
    \  if (bucket === 0) {\n                bucket = capacity;\n                count++;\n\
    \            }\n            bucket--;\n            grid[row][col] = 0;\n     \
    \   }\n        col++;\n        if (col === col_len) {\n            col = 0;\n\
    \            row++;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpg748g63u.js:49:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg748g63u.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let total = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    let fill = 0;\n    for (let j = 0; j < row.length; j++)\
    \ {\n      if (row[j] === 1) {\n        fill++;\n      }\n    }\n    if (fill\
    \ > capacity) {\n      total += capacity;\n    } else {\n      total += fill;\n\
    \    }\n  }\n  return total;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpzy7mi2wc.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzy7mi2wc.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        max = Math.max(max, j);\n      }\n    }\n  }\n  for (let i\
    \ = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n\
    \      if (grid[i][j] === 1) {\n        count += capacity;\n      }\n      if\
    \ (j === max) {\n        count -= capacity;\n      }\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpc3_x7o0t.js:47:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc3_x7o0t.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1,\
    \ 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]], 5));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp63cqjidc.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp63cqjidc.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max_count = 0;\n    let row_count = 0;\n\
    \    let col_count = 0;\n    for (let i = 0; i < grid.length; i++) {\n       \
    \ for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1)\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            row_count = 1;\n        } else\
    \ if (count === max_count) {\n            row_count++;\n        }\n        count\
    \ = 0;\n    }\n    count = 0;\n    for (let i = 0; i < grid[0].length; i++) {\n\
    \        for (let j = 0; j < grid.length; j++) {\n            if (grid[j][i] ===\
    \ 1) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            col_count = 1;\n\
    \        } else if (count === max_count) {\n            col_count++;\n       \
    \ }\n        count = 0;\n    }\n    return (max_count * row_count * col_count\
    \ * capacity);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmphw9tqe76.js:63:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphw9tqe76.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let\
    \ i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++)\
    \ {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n    if (count\
    \ > max) {\n      max = count;\n      maxIndex = i;\n    }\n    count = 0;\n \
    \ }\n  return max * capacity;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpe4kkhx_i.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4kkhx_i.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let rowLen = grid.length;\n\
    \  let colLen = grid[0].length;\n  while (row < rowLen) {\n    if (grid[row][col]\
    \ === 1) {\n      grid[row][col] = 0;\n      count++;\n    }\n    if (col ===\
    \ colLen - 1) {\n      row++;\n      col = 0;\n    } else {\n      col++;\n  \
    \  }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp7m0wjiv4.js:47:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7m0wjiv4.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let result = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let\
    \ i = 0; i < grid.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < grid[i].length;\
    \ j++) {\n      sum += grid[i][j];\n    }\n    if (sum > max) {\n      max = sum;\n\
    \      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < grid.length; i++) {\n\
    \    if (i === maxIndex) {\n      result += max;\n    } else {\n      let sum\
    \ = 0;\n      for (let j = 0; j < grid[i].length; j++) {\n        sum += grid[i][j];\n\
    \      }\n      result += sum;\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp2mp8wvm0.js:54:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2mp8wvm0.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    let max_index = 0;\n   \
    \ for (let i = 0; i < grid.length; i++) {\n        let sum = 0;\n        for (let\
    \ j = 0; j < grid[i].length; j++) {\n            sum += grid[i][j];\n        }\n\
    \        if (sum > max) {\n            max = sum;\n            max_index = i;\n\
    \        }\n    }\n    for (let i = 0; i < grid.length; i++) {\n        if (i\
    \ === max_index) {\n            continue;\n        }\n        for (let j = 0;\
    \ j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmphfpmdulk.js:51:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphfpmdulk.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  let maxRow = 0;\n  let maxCol\
    \ = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length;\
    \ j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n      if (grid[i][j]\
    \ > max) {\n        max = grid[i][j];\n        maxRow = i;\n        maxCol = j;\n\
    \      }\n    }\n  }\n  if (count === 0) {\n    return 0;\n  }\n  if (count <=\
    \ capacity) {\n    return 1;\n  }\n  let maxCount = 0;\n  for (let i = 0; i <\
    \ grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if\
    \ (grid[i][j] === 1) {\n        maxCount++;\n      }\n    }\n  }\n  if (maxCount\
    \ <= capacity) {\n    return 1;\n  }\n  let maxCount2 = 0;\n  for (let i = 0;\
    \ i < grid[maxRow].length; i++) {\n    if (grid[maxRow][i] === 1) {\n      maxCount2++;\n\
    \    }\n  }\n  if (maxCount2 <= capacity) {\n    return 1;\n  }\n  let maxCount3\
    \ = 0;\n  for (let i = 0; i < grid.length; i++) {\n    if (grid[i][maxCol] ===\
    \ 1) {\n      maxCount3++;\n    }\n  }\n  if (maxCount3 <= capacity) {\n    return\
    \ 1;\n  }\n  return 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp3knd9_my.js:79:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3knd9_my.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: -1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    grid[i][j] = 0;\n        count++;\n        let bucket = capacity;\n     \
    \   while (bucket > 0) {\n          if (i - 1 >= 0 && grid[i - 1][j] === 1) {\n\
    \            grid[i - 1][j] = 0;\n            bucket--;\n          }\n       \
    \   if (i + 1 < grid.length && grid[i + 1][j] === 1) {\n            grid[i + 1][j]\
    \ = 0;\n            bucket--;\n          }\n          if (j - 1 >= 0 && grid[i][j\
    \ - 1] === 1) {\n            grid[i][j - 1] = 0;\n            bucket--;\n    \
    \      }\n          if (j + 1 < grid[i].length && grid[i][j + 1] === 1) {\n  \
    \          grid[i][j + 1] = 0;\n            bucket--;\n          }\n        }\n\
    \      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660333518
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let bucket = capacity;\n    for (let i = 0; i < row; i++) {\n        for\
    \ (let j = 0; j < col; j++) {\n            if (grid[i][j] === 1) {\n         \
    \       if (bucket > 0) {\n                    bucket--;\n                   \
    \ grid[i][j] = 0;\n                } else {\n                    bucket = capacity;\n\
    \                    count++;\n                    j--;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpfqgbypwl.js:50:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfqgbypwl.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '5

    4

    0

    '
  timestamp: 1660333502
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    let max_index = 0;\n   \
    \ for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length;\
    \ j++) {\n            if (grid[i][j] === 1) {\n                count++;\n    \
    \        }\n        }\n        if (count > max) {\n            max = count;\n\
    \            max_index = i;\n        }\n        count = 0;\n    }\n    return\
    \ max * capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpyeer0q9i.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyeer0q9i.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n                grid[i][j] = 0;\n\
    \            }\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpsvz415fn.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsvz415fn.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333506
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count++;\n                grid[i][j] = 0;\n      \
    \          let k = i;\n                while (k < grid.length && capacity > 0)\
    \ {\n                    if (grid[k][j] === 1) {\n                        grid[k][j]\
    \ = 0;\n                        capacity--;\n                    }\n         \
    \           k++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpt7gosbfb.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpt7gosbfb.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        max = Math.max(max, j);\n      }\n    }\n  }\n  for (let i\
    \ = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n\
    \      if (grid[i][j] === 1) {\n        count += capacity;\n      }\n      if\
    \ (j === max) {\n        count -= capacity;\n      }\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpc3_x7o0t.js:47:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc3_x7o0t.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  // Your code here\n  return 0;\n}\n\nexport { max_fill };\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: "(node:14758) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpvsby65f2.js:26\nexport { max_fill\
    \ };\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n\
    \  let wells = [];\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j <\
    \ col; j++) {\n      if (grid[i][j] === 1) {\n        wells.push([i, j]);\n  \
    \    }\n    }\n  }\n  let wells_len = wells.length;\n  for (let i = 0; i < wells_len;\
    \ i++) {\n    let [x, y] = wells[i];\n    let bucket = capacity;\n    while (bucket\
    \ > 0) {\n      if (grid[x][y] === 1) {\n        grid[x][y] = 0;\n        bucket--;\n\
    \      }\n      if (x + 1 < row && grid[x + 1][y] === 1) {\n        x++;\n   \
    \   } else if (y + 1 < col && grid[x][y + 1] === 1) {\n        y++;\n      } else\
    \ {\n        break;\n      }\n    }\n    count++;\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpis103lii.js:61:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpis103lii.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                max = Math.max(max, j);\n            }\n        }\n\
    \    }\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j\
    \ < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n            \
    \    count++;\n                grid[i][j] = 0;\n            }\n        }\n   \
    \     if (max > capacity) {\n            count += max - capacity;\n          \
    \  max = capacity;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpnrlio824.js:49:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnrlio824.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        let row = grid[i];\n        let row_count = 0;\n        for (let j =\
    \ 0; j < row.length; j++) {\n            if (row[j] === 1) {\n               \
    \ row_count++;\n            }\n        }\n        count += Math.ceil(row_count\
    \ / capacity);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let bucket = capacity;\n    for (let i = 0; i < row; i++) {\n        for\
    \ (let j = 0; j < col; j++) {\n            if (grid[i][j] === 1) {\n         \
    \       if (bucket > 0) {\n                    bucket--;\n                   \
    \ grid[i][j] = 0;\n                } else {\n                    bucket = capacity;\n\
    \                    count++;\n                    j--;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpfqgbypwl.js:50:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfqgbypwl.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '5

    4

    0

    '
  timestamp: 1660333502
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let total = 0;\n  for (let row of grid) {\n    let rowTotal = 0;\n\
    \    for (let well of row) {\n      if (well === 1) {\n        rowTotal++;\n \
    \     }\n    }\n    total += Math.ceil(rowTotal / capacity);\n  }\n  return total;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  const row = grid.length;\n  const col = grid[0].length;\n\
    \  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n    \
    \  if (grid[i][j] === 1) {\n        count++;\n        grid[i][j] = 0;\n      \
    \  if (i + 1 < row && grid[i + 1][j] === 1) {\n          grid[i + 1][j] = 0;\n\
    \        }\n        if (j + 1 < col && grid[i][j + 1] === 1) {\n          grid[i][j\
    \ + 1] = 0;\n        }\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpwcdrqmu1.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwcdrqmu1.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nexport { max_fill\
    \ };\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: "(node:14790) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpae8wppqu.js:33\nexport { max_fill\
    \ };\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        let row = grid[i];\n        let row_count = 0;\n        for (let j =\
    \ 0; j < row.length; j++) {\n            if (row[j] === 1) {\n               \
    \ row_count++;\n            }\n        }\n        count += Math.ceil(row_count\
    \ / capacity);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  // your code here\n  return 0;\n}\n\nexport { max_fill };\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: "(node:11487) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpz30xo1xg.js:26\nexport { max_fill\
    \ };\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        let row = grid[i];\n        for (let j = 0; j < row.length; j++) {\n\
    \            if (row[j] === 1) {\n                result += capacity;\n      \
    \      }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp34_m0jxa.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp34_m0jxa.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: -1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    grid[i][j] = 0;\n        count++;\n        let bucket = capacity;\n     \
    \   while (bucket > 0) {\n          if (i - 1 >= 0 && grid[i - 1][j] === 1) {\n\
    \            grid[i - 1][j] = 0;\n            bucket--;\n          }\n       \
    \   if (i + 1 < grid.length && grid[i + 1][j] === 1) {\n            grid[i + 1][j]\
    \ = 0;\n            bucket--;\n          }\n          if (j - 1 >= 0 && grid[i][j\
    \ - 1] === 1) {\n            grid[i][j - 1] = 0;\n            bucket--;\n    \
    \      }\n          if (j + 1 < grid[i].length && grid[i][j + 1] === 1) {\n  \
    \          grid[i][j + 1] = 0;\n            bucket--;\n          }\n        }\n\
    \      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660333518
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    if (capacity > 0) {\n          grid[i][j] = 0;\n          capacity--;\n \
    \       } else {\n          count++;\n        }\n      }\n    }\n  }\n  return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmputbma7dd.js:42:12)\n    at Object.<anonymous>\
    \ (/tmp/tmputbma7dd.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let wells = [];\n    for (let i = 0; i < row; i++) {\n        for (let j\
    \ = 0; j < col; j++) {\n            if (grid[i][j] === 1) {\n                wells.push([i,\
    \ j]);\n            }\n        }\n    }\n    while (wells.length > 0) {\n    \
    \    let temp = [];\n        for (let i = 0; i < wells.length; i++) {\n      \
    \      let [x, y] = wells[i];\n            if (grid[x][y] === 1) {\n         \
    \       grid[x][y] = 0;\n                if (x - 1 >= 0 && grid[x - 1][y] ===\
    \ 1) {\n                    temp.push([x - 1, y]);\n                }\n      \
    \          if (x + 1 < row && grid[x + 1][y] === 1) {\n                    temp.push([x\
    \ + 1, y]);\n                }\n                if (y - 1 >= 0 && grid[x][y -\
    \ 1] === 1) {\n                    temp.push([x, y - 1]);\n                }\n\
    \                if (y + 1 < col && grid[x][y + 1] === 1) {\n                \
    \    temp.push([x, y + 1]);\n                }\n            }\n        }\n   \
    \     wells = temp;\n        count++;\n    }\n    return count * capacity;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpcojy5s6t.js:62:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcojy5s6t.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n\
    \  let max = 0;\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col;\
    \ j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  \
    \  max = Math.max(max, count);\n    count = 0;\n  }\n  return max * capacity;\n\
    }\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpx7iiqkxw.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx7iiqkxw.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4

    8

    0

    '
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let total = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                total += 1;\n            }\n        }\n        if\
    \ (total > max) {\n            max = total;\n        }\n        total = 0;\n \
    \   }\n    return max * capacity;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp29834hv2.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp29834hv2.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let total = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    total += capacity;\n      }\n    }\n  }\n  return total;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpbdrgg85_.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbdrgg85_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333639
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    grid[i][j] = 0;\n        count++;\n        for (let k = i + 1; k < grid.length;\
    \ k++) {\n          if (grid[k][j] === 1) {\n            grid[k][j] = 0;\n   \
    \         count++;\n          }\n        }\n      }\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpu4hv9u6u.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu4hv9u6u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333508
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                grid[i][j] = 0;\n                count++;\n      \
    \          let k = i;\n                while (k < grid.length && grid[k][j] ===\
    \ 0) {\n                    grid[k][j] = 1;\n                    k++;\n      \
    \          }\n            }\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpbl0am95l.js:42:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbl0am95l.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333639
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    let sum = row.reduce((a, b) => a + b, 0);\n    if (sum >\
    \ capacity) {\n      count += sum - capacity;\n    }\n  }\n  return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9x82sj8z.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9x82sj8z.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count++;\n            }\n        }\n        if (count\
    \ > max) {\n            max = count;\n        }\n        count = 0;\n    }\n \
    \   return max * capacity;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0,\
    \ 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp4eyjgo0d.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4eyjgo0d.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4

    8

    0

    '
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max\
    \ = count;\n    }\n    count = 0;\n  }\n  return max * capacity;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp5r1ma2ut.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5r1ma2ut.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4

    8

    0

    '
  timestamp: 1660333502
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  const row = grid.length;\n  const col = grid[0].length;\n\
    \  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n    \
    \  if (grid[i][j] === 1) {\n        count += capacity;\n        grid[i][j] = 0;\n\
    \      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpiytqhxtk.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiytqhxtk.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j]\
    \ === 1) {\n        count += capacity;\n      }\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpwmtb4tzl.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwmtb4tzl.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333502
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let result = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        max += capacity;\n      }\n    }\n  }\n  for (let i = 0; i\
    \ < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n    \
    \  if (grid[i][j] === 1) {\n        result += capacity;\n      }\n    }\n    if\
    \ (result === max) {\n      return result;\n    }\n  }\n  return result;\n}\n\n\
    console.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp0ucx2zw_.js:51:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0ucx2zw_.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333640
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    let filled = 0;\n    for (let j = 0; j < row.length; j++)\
    \ {\n      if (row[j] === 1) {\n        filled++;\n      }\n    }\n    if (filled\
    \ > 0) {\n      count += Math.ceil(filled / capacity);\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1,\
    \ 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]], 5));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp63cqjidc.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp63cqjidc.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let total = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    let count = 0;\n    for (let j = 0; j < row.length; j++)\
    \ {\n      if (row[j] === 1) {\n        count++;\n      }\n    }\n    total +=\
    \ Math.ceil(count / capacity);\n  }\n  return total;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    const max_row = grid.length;\n    const max_col\
    \ = grid[0].length;\n    const max_row_sum = grid.map(row => row.reduce((a, b)\
    \ => a + b, 0));\n    const max_col_sum = grid[0].map((_, i) => grid.reduce((a,\
    \ b) => a + b[i], 0));\n    for (let i = 0; i < max_row; i++) {\n        for (let\
    \ j = 0; j < max_col; j++) {\n            if (grid[i][j] === 1) {\n          \
    \      const row_sum = max_row_sum[i];\n                const col_sum = max_col_sum[j];\n\
    \                const max_sum = Math.max(row_sum, col_sum);\n               \
    \ const min_sum = Math.min(row_sum, col_sum);\n                if (max_sum > capacity)\
    \ {\n                    count += capacity - min_sum;\n                } else\
    \ {\n                    count += max_sum - min_sum;\n                }\n    \
    \        }\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-2\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmps1t92ch0.js:49:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps1t92ch0.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -2,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333640
- exit_code: -1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    grid[i][j] = 0;\n        count++;\n        let bucket = capacity;\n     \
    \   while (bucket > 0) {\n          if (i - 1 >= 0 && grid[i - 1][j] === 1) {\n\
    \            grid[i - 1][j] = 0;\n            bucket--;\n          }\n       \
    \   if (j - 1 >= 0 && grid[i][j - 1] === 1) {\n            grid[i][j - 1] = 0;\n\
    \            bucket--;\n          }\n          if (i + 1 < grid.length && grid[i\
    \ + 1][j] === 1) {\n            grid[i + 1][j] = 0;\n            bucket--;\n \
    \         }\n          if (j + 1 < grid[i].length && grid[i][j + 1] === 1) {\n\
    \            grid[i][j + 1] = 0;\n            bucket--;\n          }\n       \
    \ }\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660333656
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 2
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  const row = grid.length;\n  const col = grid[0].length;\n\
    \  const visited = new Array(row).fill(0).map(() => new Array(col).fill(false));\n\
    \  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n    \
    \  if (grid[i][j] === 1 && !visited[i][j]) {\n        count += 1;\n        dfs(grid,\
    \ i, j, capacity, visited);\n      }\n    }\n  }\n  return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpvi0v3p84.ts(31,9): error TS2304: Cannot find name ''dfs''.

    '
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1,\
    \ 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]], 5));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp63cqjidc.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp63cqjidc.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let maxRow\
    \ = grid.length;\n    let maxCol = grid[0].length;\n    let bucket = capacity;\n\
    \    while (row < maxRow) {\n        if (grid[row][col] === 1) {\n           \
    \ if (bucket > 0) {\n                bucket -= 1;\n                grid[row][col]\
    \ = 0;\n            } else {\n                count += 1;\n                bucket\
    \ = capacity;\n            }\n        }\n        col += 1;\n        if (col ===\
    \ maxCol) {\n            col = 0;\n            row += 1;\n        }\n    }\n \
    \   return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpey8273no.js:51:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpey8273no.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    if (capacity > 0) {\n          capacity--;\n          grid[i][j] = 0;\n \
    \       } else {\n          capacity = capacity + 1;\n          count = count\
    \ + 1;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpnyshhulx.js:46:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnyshhulx.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '3

    4

    0

    '
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                result += capacity;\n                for (let k =\
    \ i + 1; k < grid.length; k++) {\n                    if (grid[k][j] === 1) {\n\
    \                        result += capacity;\n                    } else {\n \
    \                       break;\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpr70bsxdj.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr70bsxdj.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333509
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count++;\n                for (let k = i; k < grid.length;\
    \ k++) {\n                    if (grid[k][j] === 1) {\n                      \
    \  grid[k][j] = 0;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0,\
    \ 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0,\
    \ 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpncje2gna.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpncje2gna.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4

    4

    0

    '
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    let row_count = 0;\n    for (let j = 0; j < row.length;\
    \ j++) {\n      if (row[j] === 1) {\n        row_count++;\n      }\n    }\n  \
    \  count += Math.ceil(row_count / capacity);\n  }\n  return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let total = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    let row_total = 0;\n    for (let j = 0; j < row.length;\
    \ j++) {\n      if (row[j] === 1) {\n        row_total += 1;\n      }\n    }\n\
    \    total += Math.ceil(row_total / capacity);\n  }\n  return total;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    let max_index = 0;\n   \
    \ for (let i = 0; i < grid.length; i++) {\n        let sum = 0;\n        for (let\
    \ j = 0; j < grid[i].length; j++) {\n            sum += grid[i][j];\n        }\n\
    \        if (sum > max) {\n            max = sum;\n            max_index = i;\n\
    \        }\n    }\n    for (let i = 0; i < grid.length; i++) {\n        if (i\
    \ == max_index) {\n            continue;\n        }\n        for (let j = 0; j\
    \ < grid[i].length; j++) {\n            if (grid[i][j] == 1) {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp2c72vfpu.js:51:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2c72vfpu.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let\
    \ i = 0; i < grid.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < grid[i].length;\
    \ j++) {\n      sum += grid[i][j];\n    }\n    if (sum > max) {\n      max = sum;\n\
    \      maxIndex = i;\n    }\n  }\n  if (max === 0) {\n    return 0;\n  }\n  for\
    \ (let i = 0; i < grid.length; i++) {\n    if (i === maxIndex) {\n      count\
    \ += grid[i].length;\n    } else {\n      for (let j = 0; j < grid[i].length;\
    \ j++) {\n        if (grid[i][j] === 1) {\n          count++;\n        }\n   \
    \   }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphwboo_nb.js:57:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphwboo_nb.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count++;\n            }\n        }\n        if (count\
    \ > max) {\n            max = count;\n        }\n        count = 0;\n    }\n \
    \   return max * capacity;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0,\
    \ 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp4eyjgo0d.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4eyjgo0d.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4

    8

    0

    '
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n\
    \  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < row; i++) {\n    for (let\
    \ j = 0; j < col; j++) {\n      sum += grid[i][j];\n    }\n    if (sum > max)\
    \ {\n      max = sum;\n    }\n    sum = 0;\n  }\n  return max * capacity;\n}\n\
    \nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp79oawhzk.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79oawhzk.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4

    8

    0

    '
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        let row = grid[i];\n        let row_count = 0;\n        for (let j =\
    \ 0; j < row.length; j++) {\n            if (row[j] === 1) {\n               \
    \ row_count++;\n            }\n        }\n        count += Math.ceil(row_count\
    \ / capacity);\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: -1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                grid[i][j] = 0;\n                count++;\n      \
    \          let bucket = capacity;\n                while (bucket > 0) {\n    \
    \                if (i > 0 && grid[i - 1][j] === 1) {\n                      \
    \  grid[i - 1][j] = 0;\n                        bucket--;\n                  \
    \  }\n                    if (i < grid.length - 1 && grid[i + 1][j] === 1) {\n\
    \                        grid[i + 1][j] = 0;\n                        bucket--;\n\
    \                    }\n                    if (j > 0 && grid[i][j - 1] === 1)\
    \ {\n                        grid[i][j - 1] = 0;\n                        bucket--;\n\
    \                    }\n                    if (j < grid[i].length - 1 && grid[i][j\
    \ + 1] === 1) {\n                        grid[i][j + 1] = 0;\n               \
    \         bucket--;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660333525
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let max_fill = 0;\n    let fill = 0;\n    for (let i = 0; i <\
    \ grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n  \
    \          if (grid[i][j] === 1) {\n                fill += 1;\n            }\n\
    \        }\n        if (fill > max_fill) {\n            max_fill = fill;\n   \
    \     }\n        fill = 0;\n    }\n    return max_fill * capacity;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpbviewx4d.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbviewx4d.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333640
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    let row_count = 0;\n    for (let j = 0; j < row.length;\
    \ j++) {\n      if (row[j] === 1) {\n        row_count++;\n      }\n    }\n  \
    \  count += Math.ceil(row_count / capacity);\n  }\n  return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: -1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    grid[i][j] = 0;\n        count++;\n        let bucket = capacity;\n     \
    \   while (bucket > 0) {\n          if (i - 1 >= 0 && grid[i - 1][j] === 1) {\n\
    \            grid[i - 1][j] = 0;\n            bucket--;\n          }\n       \
    \   if (i + 1 < grid.length && grid[i + 1][j] === 1) {\n            grid[i + 1][j]\
    \ = 0;\n            bucket--;\n          }\n          if (j - 1 >= 0 && grid[i][j\
    \ - 1] === 1) {\n            grid[i][j - 1] = 0;\n            bucket--;\n    \
    \      }\n          if (j + 1 < grid[i].length && grid[i][j + 1] === 1) {\n  \
    \          grid[i][j + 1] = 0;\n            bucket--;\n          }\n        }\n\
    \      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660333518
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        let row = i;\n        while (row < grid.length && grid[row][j]\
    \ === 1) {\n          grid[row][j] = 0;\n          row++;\n        }\n      }\n\
    \    }\n  }\n  return count * capacity;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp7f5l8dek.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7f5l8dek.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max\
    \ = count;\n    }\n    count = 0;\n  }\n  return max * capacity;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpogqb_knd.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpogqb_knd.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  // your code here\n  return 0;\n}\n\nexport { max_fill };\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: "(node:11487) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpz30xo1xg.js:26\nexport { max_fill\
    \ };\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                max = Math.max(max, j);\n            }\n        }\n\
    \    }\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j\
    \ < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n            \
    \    count++;\n                grid[i][j] = 0;\n                if (j + capacity\
    \ > max) {\n                    capacity = j + capacity - max;\n             \
    \   } else {\n                    capacity = 0;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpx1c6gzts.js:52:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx1c6gzts.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        max += capacity;\n      }\n    }\n  }\n  for (let i = 0; i\
    \ < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n    \
    \  if (grid[i][j] === 1) {\n        count += capacity;\n        if (count ===\
    \ max) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpkn10guvc.js:48:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkn10guvc.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n\
    \  let water = 0;\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j <\
    \ col; j++) {\n      if (grid[i][j] === 1) {\n        water++;\n      }\n    }\n\
    \  }\n  count = water / capacity;\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.5\n\nshould\
    \ loosely deep-equal\n\n5\n    at test (/tmp/tmp6mvlaksq.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6mvlaksq.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.5,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    4.5

    0

    '
  timestamp: 1660333640
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    let filled = 0;\n    for (let j = 0; j < row.length; j++)\
    \ {\n      if (row[j] === 1) {\n        filled++;\n      }\n    }\n    if (filled\
    \ > 0) {\n      count += Math.ceil(filled / capacity);\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    let row_count = 0;\n    for (let j = 0; j < row.length;\
    \ j++) {\n      if (row[j] === 1) {\n        row_count++;\n      }\n    }\n  \
    \  count += Math.ceil(row_count / capacity);\n  }\n  return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max\
    \ = count;\n    }\n    count = 0;\n  }\n  return max * capacity;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp5r1ma2ut.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5r1ma2ut.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4

    8

    0

    '
  timestamp: 1660333502
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let rowLength\
    \ = grid.length;\n  let colLength = grid[0].length;\n  let bucket = capacity;\n\
    \  while (row < rowLength && col < colLength) {\n    if (grid[row][col] === 1)\
    \ {\n      if (bucket === 0) {\n        bucket = capacity;\n        count++;\n\
    \      }\n      bucket--;\n    }\n    if (col === colLength - 1) {\n      row++;\n\
    \      col = 0;\n    } else {\n      col++;\n    }\n  }\n  return count;\n}\n\n\
    console.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmprrczx6cd.js:53:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprrczx6cd.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '5

    4

    0

    '
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    max = Math.max(...grid[i]);\n    for (let j = 0; j < grid[i].length;\
    \ j++) {\n      if (grid[i][j] === max) {\n        grid[i][j] = 0;\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0,\
    \ 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0,\
    \ 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp9k4geuhn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9k4geuhn.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    13

    6

    '
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    let bucket = capacity;\n        while (bucket > 0) {\n          grid[i][j]\
    \ = 0;\n          bucket--;\n          if (i + 1 < grid.length && grid[i + 1][j]\
    \ === 1) {\n            i++;\n          } else if (j + 1 < grid[i].length && grid[i][j\
    \ + 1] === 1) {\n            j++;\n          } else {\n            break;\n  \
    \        }\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp1plxnsvg.js:50:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1plxnsvg.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333643
- exit_code: -1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                grid[i][j] = 0;\n                count++;\n      \
    \          let bucket = capacity;\n                while (bucket > 0) {\n    \
    \                if (i - 1 >= 0 && grid[i - 1][j] === 1) {\n                 \
    \       grid[i - 1][j] = 0;\n                        bucket--;\n             \
    \       }\n                    if (i + 1 < grid.length && grid[i + 1][j] === 1)\
    \ {\n                        grid[i + 1][j] = 0;\n                        bucket--;\n\
    \                    }\n                    if (j - 1 >= 0 && grid[i][j - 1] ===\
    \ 1) {\n                        grid[i][j - 1] = 0;\n                        bucket--;\n\
    \                    }\n                    if (j + 1 < grid[i].length && grid[i][j\
    \ + 1] === 1) {\n                        grid[i][j + 1] = 0;\n               \
    \         bucket--;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660333521
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let i = 0;\n  while (i < grid.length) {\n    let\
    \ j = 0;\n    while (j < grid[i].length) {\n      if (grid[i][j] === 1) {\n  \
    \      grid[i][j] = 0;\n        count++;\n        j++;\n      } else {\n     \
    \   j++;\n      }\n    }\n    i++;\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp2yujzvfb.js:48:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2yujzvfb.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    9

    0

    '
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    // your code here\n    return 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp1ujkkeao.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ujkkeao.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let total = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                total += 1;\n            }\n        }\n        if\
    \ (total > max) {\n            max = total;\n        }\n        total = 0;\n \
    \   }\n    return max * capacity;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp29834hv2.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp29834hv2.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    let max_index = 0;\n   \
    \ for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length;\
    \ j++) {\n            if (grid[i][j] === 1) {\n                count++;\n    \
    \        }\n        }\n        if (count > max) {\n            max = count;\n\
    \            max_index = i;\n        }\n        count = 0;\n    }\n    return\
    \ max * capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpyeer0q9i.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyeer0q9i.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        max = Math.max(max, j);\n      }\n    }\n  }\n  for (let i\
    \ = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n\
    \      if (grid[i][j] === 1) {\n        count += capacity;\n      }\n      if\
    \ (j === max) {\n        count -= capacity;\n      }\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpc3_x7o0t.js:47:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc3_x7o0t.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    let maxIndex = 0;\n    for\
    \ (let i = 0; i < grid.length; i++) {\n        let sum = 0;\n        for (let\
    \ j = 0; j < grid[i].length; j++) {\n            sum += grid[i][j];\n        }\n\
    \        if (sum > max) {\n            max = sum;\n            maxIndex = i;\n\
    \        }\n    }\n    count += max;\n    for (let i = 0; i < grid.length; i++)\
    \ {\n        if (i != maxIndex) {\n            for (let j = 0; j < grid[i].length;\
    \ j++) {\n                if (grid[i][j] == 1) {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpktp84h0s.js:52:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpktp84h0s.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: -1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    grid[i][j] = 0;\n        count++;\n        let bucket = capacity;\n     \
    \   while (bucket > 0) {\n          if (i - 1 >= 0 && grid[i - 1][j] === 1) {\n\
    \            grid[i - 1][j] = 0;\n            bucket--;\n          }\n       \
    \   if (i + 1 < grid.length && grid[i + 1][j] === 1) {\n            grid[i + 1][j]\
    \ = 0;\n            bucket--;\n          }\n          if (j - 1 >= 0 && grid[i][j\
    \ - 1] === 1) {\n            grid[i][j - 1] = 0;\n            bucket--;\n    \
    \      }\n          if (j + 1 < grid[i].length && grid[i][j + 1] === 1) {\n  \
    \          grid[i][j + 1] = 0;\n            bucket--;\n          }\n        }\n\
    \      }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660333518
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let result = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        max += capacity;\n      }\n    }\n  }\n  for (let i = 0; i\
    \ < grid.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < grid[i].length;\
    \ j++) {\n      if (grid[i][j] === 1) {\n        sum += capacity;\n      }\n \
    \   }\n    if (sum < max) {\n      result += sum;\n    } else {\n      result\
    \ += max;\n    }\n  }\n  return result;\n}\n\nconsole.log(max_fill([[0, 0, 1,\
    \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0,\
    \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0],\
    \ [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpmamawisw.js:55:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmamawisw.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1,\
    \ 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]], 5));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp63cqjidc.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp63cqjidc.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: -1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    grid[i][j] = 0;\n        count++;\n        let bucket = capacity;\n     \
    \   while (bucket > 0) {\n          if (i === 0) {\n            if (grid[i + 1][j]\
    \ === 1) {\n              grid[i + 1][j] = 0;\n              bucket--;\n     \
    \       }\n          } else if (i === grid.length - 1) {\n            if (grid[i\
    \ - 1][j] === 1) {\n              grid[i - 1][j] = 0;\n              bucket--;\n\
    \            }\n          } else {\n            if (grid[i + 1][j] === 1) {\n\
    \              grid[i + 1][j] = 0;\n              bucket--;\n            } else\
    \ if (grid[i - 1][j] === 1) {\n              grid[i - 1][j] = 0;\n           \
    \   bucket--;\n            }\n          }\n          if (j === 0) {\n        \
    \    if (grid[i][j + 1] === 1) {\n              grid[i][j + 1] = 0;\n        \
    \      bucket--;\n            }\n          } else if (j === grid[i].length - 1)\
    \ {\n            if (grid[i][j - 1] === 1) {\n              grid[i][j - 1] = 0;\n\
    \              bucket--;\n            }\n          } else {\n            if (grid[i][j\
    \ + 1] === 1) {\n              grid[i][j + 1] = 0;\n              bucket--;\n\
    \            } else if (grid[i][j - 1] === 1) {\n              grid[i][j - 1]\
    \ = 0;\n              bucket--;\n            }\n          }\n        }\n     \
    \ }\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660333659
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count++;\n            }\n        }\n        if (count\
    \ > max) {\n            max = count;\n        }\n        count = 0;\n    }\n \
    \   return max * capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp3aa1lwbd.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3aa1lwbd.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max\
    \ = count;\n    }\n    count = 0;\n  }\n  return max * capacity;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpogqb_knd.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpogqb_knd.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let total = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let\
    \ row = grid[i];\n    let rowTotal = 0;\n    for (let j = 0; j < row.length; j++)\
    \ {\n      if (row[j] === 1) {\n        rowTotal++;\n      }\n    }\n    total\
    \ += rowTotal;\n  }\n  return total;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpjugo9ccw.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjugo9ccw.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let bucket = capacity;\n    for (let i = 0; i < row; i++) {\n        for\
    \ (let j = 0; j < col; j++) {\n            if (grid[i][j] === 1) {\n         \
    \       if (bucket === 0) {\n                    bucket = capacity;\n        \
    \            count++;\n                }\n                bucket--;\n        \
    \    }\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpsvgdhxya.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsvgdhxya.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let max_fill = 0;\n  for (let i = 0; i < grid.length; i++) {\n \
    \   for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n\
    \        max_fill += capacity;\n      }\n    }\n  }\n  return max_fill;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp6q_7tkbt.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6q_7tkbt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let row = 0; row < grid.length; row++) {\n\
    \    for (let col = 0; col < grid[row].length; col++) {\n      if (grid[row][col]\
    \ === 1) {\n        count += capacity;\n        grid[row][col] = 0;\n      }\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmptyl7pgro.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptyl7pgro.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333644
- exit_code: 2
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n\
    \  let max = 0;\n  let maxRow = 0;\n  let maxCol = 0;\n  let maxRowCount = 0;\n\
    \  let maxColCount = 0;\n  let maxRowSum = 0;\n  let maxColSum = 0;\n  let maxRowIndex\
    \ = 0;\n  let maxColIndex = 0;\n  let maxRowIndexCount = 0;\n  let maxColIndexCount\
    \ = 0;\n  let maxRowIndexSum = 0;\n  let maxColIndexSum = 0;\n  let maxRowIndexIndex\
    \ = 0;\n  let maxColIndexIndex = 0;\n  let maxRowIndexIndexCount = 0;\n  let maxColIndexIndexCount\
    \ = 0;\n  let maxRowIndexIndexSum = 0;\n  let maxColIndexIndexSum = 0;\n  let\
    \ maxRowIndexIndexIndex = 0;\n  let maxColIndexIndexIndex = 0;\n  let maxRowIndexIndexIndexCount\
    \ = 0;\n  let maxColIndexIndexIndexSum = 0;\n  let maxRowIndexIndexIndexIndex\
    \ = 0;\n  let maxColIndexIndexIndexIndex = 0;\n  let maxRowIndexIndexIndexIndexCount\
    \ = 0;\n  let maxColIndexIndexIndexIndexSum = 0;\n  let maxRowIndexIndexIndexIndexIndex\
    \ = 0;\n  let maxColIndexIndexIndexIndexIndex = 0;\n  let maxRowIndexIndexIndexIndexIndexCount\
    \ = 0;\n  let maxColIndexIndexIndexIndexIndexSum = 0;\n  let maxRowIndexIndexIndexIndexIndexIndex\
    \ = 0;\n  let maxColIndexIndexIndexIndexIndexIndex = 0;\n  let maxRowIndexIndexIndexIndexIndexIndexCount\
    \ = 0;\n  let maxColIndexIndexIndexIndexIndexIndexSum = 0;\n  let maxRowIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n  let maxColIndexIndexIndexIndexIndexIndexIndex = 0;\n  let maxRowIndexIndexIndexIndexIndexIndexIndexCount\
    \ = 0;\n  let maxColIndexIndexIndexIndexIndexIndexIndexSum = 0;\n  let maxRowIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n  let maxColIndexIndexIndexIndexIndexIndexIndexIndex = 0;\n \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjnsp17by.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n\
    \  let wells = [];\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j <\
    \ col; j++) {\n      if (grid[i][j] === 1) {\n        wells.push([i, j]);\n  \
    \    }\n    }\n  }\n  let well_count = wells.length;\n  let buckets = new Array(well_count).fill(0);\n\
    \  let max_bucket = 0;\n  while (true) {\n    let max_bucket = Math.max(...buckets);\n\
    \    if (max_bucket === capacity) {\n      break;\n    }\n    for (let i = 0;\
    \ i < well_count; i++) {\n      let [x, y] = wells[i];\n      if (buckets[i] <\
    \ capacity) {\n        buckets[i]++;\n        grid[x][y]--;\n      }\n    }\n\
    \    count++;\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp4l3x2ozx.js:56:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4l3x2ozx.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  const row = grid.length;\n  const col = grid[0].length;\n\
    \  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n    \
    \  if (grid[i][j] === 1) {\n        count += capacity;\n        grid[i][j] = 0;\n\
    \      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0,\
    \ 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0,\
    \ 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpnkzaldzb.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnkzaldzb.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333644
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max\
    \ = count;\n    }\n    count = 0;\n  }\n  return max * capacity;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpogqb_knd.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpogqb_knd.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let total = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        total += 1;\n      }\n    }\n    if (total > max) {\n    \
    \  max = total;\n    }\n    total = 0;\n  }\n  return max * capacity;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpyum93y1c.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyum93y1c.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333644
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let result = 0;\n  for (let i = 0; i < grid.length; i++) {\n   \
    \ let row = grid[i];\n    let rowSum = row.reduce((a, b) => a + b, 0);\n    if\
    \ (rowSum > capacity) {\n      result += rowSum - capacity;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpnhpvkjyq.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnhpvkjyq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333643
- exit_code: 0
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let total = 0;\n    for (let row of grid) {\n        let sum =\
    \ 0;\n        for (let i = 0; i < row.length; i++) {\n            if (row[i] ===\
    \ 1) {\n                sum++;\n            } else {\n                if (sum\
    \ > 0) {\n                    total += Math.ceil(sum / capacity);\n          \
    \          sum = 0;\n                }\n            }\n        }\n        if (sum\
    \ > 0) {\n            total += Math.ceil(sum / capacity);\n        }\n    }\n\
    \    return total;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333644
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let col = grid[0].length;\n  let row = grid.length;\n\
    \  let max = 0;\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col;\
    \ j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  \
    \  if (count > max) {\n      max = count;\n    }\n    count = 0;\n  }\n  return\
    \ max * capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpp6pec4dj.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp6pec4dj.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333644
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    grid[i][j] = 0;\n        count++;\n        if (i + 1 < grid.length) {\n \
    \         grid[i + 1][j] = 0;\n        }\n        if (j + 1 < grid[i].length)\
    \ {\n          grid[i][j + 1] = 0;\n        }\n      }\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp638qt8v_.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp638qt8v_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333644
- exit_code: 2
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let row = 0;\n  let col = 0;\n  let max = 0;\n\
    \  let maxRow = 0;\n  let maxCol = 0;\n  let maxRowCount = 0;\n  let maxColCount\
    \ = 0;\n  let maxRowCount2 = 0;\n  let maxColCount2 = 0;\n  let maxRowCount3 =\
    \ 0;\n  let maxColCount3 = 0;\n  let maxRowCount4 = 0;\n  let maxColCount4 = 0;\n\
    \  let maxRowCount5 = 0;\n  let maxColCount5 = 0;\n  let maxRowCount6 = 0;\n \
    \ let maxColCount6 = 0;\n  let maxRowCount7 = 0;\n  let maxColCount7 = 0;\n  let\
    \ maxRowCount8 = 0;\n  let maxColCount8 = 0;\n  let maxRowCount9 = 0;\n  let maxColCount9\
    \ = 0;\n  let maxRowCount10 = 0;\n  let maxColCount10 = 0;\n  let maxRowCount11\
    \ = 0;\n  let maxColCount11 = 0;\n  let maxRowCount12 = 0;\n  let maxColCount12\
    \ = 0;\n  let maxRowCount13 = 0;\n  let maxColCount13 = 0;\n  let maxRowCount14\
    \ = 0;\n  let maxColCount14 = 0;\n  let maxRowCount15 = 0;\n  let maxColCount15\
    \ = 0;\n  let maxRowCount16 = 0;\n  let maxColCount16 = 0;\n  let maxRowCount17\
    \ = 0;\n  let maxColCount17 = 0;\n  let maxRowCount18 = 0;\n  let maxColCount18\
    \ = 0;\n  let maxRowCount19 = 0;\n  let maxColCount19 = 0;\n  let maxRowCount20\
    \ = 0;\n  let maxColCount20 = 0;\n  let maxRowCount21 = 0;\n  let maxColCount21\
    \ = 0;\n  let maxRowCount22 = 0;\n  let maxColCount22 = 0;\n  let maxRowCount23\
    \ = 0;\n  let maxColCount23 = 0;\n  let maxRowCount24 = 0;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp35vrnale.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333643
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < grid.length;\
    \ i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]\
    \ === 1) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max\
    \ = count;\n    }\n    count = 0;\n  }\n  return max * capacity;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0],\
    \ [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpogqb_knd.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpogqb_knd.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    grid[i][j] = 0;\n        count++;\n        for (let k = i; k < grid.length;\
    \ k++) {\n          if (grid[k][j] === 1) {\n            grid[k][j] = 0;\n   \
    \         count++;\n          }\n        }\n      }\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphf3zn82c.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphf3zn82c.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333509
- exit_code: 2
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  let max_index = 0;\n  let max_row\
    \ = 0;\n  let max_col = 0;\n  let max_row_index = 0;\n  let max_col_index = 0;\n\
    \  let max_row_count = 0;\n  let max_col_count = 0;\n  let max_row_count_index\
    \ = 0;\n  let max_col_count_index = 0;\n  let max_row_count_index_2 = 0;\n  let\
    \ max_col_count_index_2 = 0;\n  let max_row_count_index_3 = 0;\n  let max_col_count_index_3\
    \ = 0;\n  let max_row_count_index_4 = 0;\n  let max_col_count_index_4 = 0;\n \
    \ let max_row_count_index_5 = 0;\n  let max_col_count_index_5 = 0;\n  let max_row_count_index_6\
    \ = 0;\n  let max_col_count_index_6 = 0;\n  let max_row_count_index_7 = 0;\n \
    \ let max_col_count_index_7 = 0;\n  let max_row_count_index_8 = 0;\n  let max_col_count_index_8\
    \ = 0;\n  let max_row_count_index_9 = 0;\n  let max_col_count_index_9 = 0;\n \
    \ let max_row_count_index_10 = 0;\n  let max_col_count_index_10 = 0;\n  let max_row_count_index_11\
    \ = 0;\n  let max_col_count_index_11 = 0;\n  let max_row_count_index_12 = 0;\n\
    \  let max_col_count_index_12 = 0;\n  let max_row_count_index_13 = 0;\n  let max_col_count_index_13\
    \ = 0;\n  let max_row_count_index_14 = 0;\n  let max_col_count_index_14 = 0;\n\
    \  let max_row_count_index_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpy9zhllnu.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333644
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  let max_index = 0;\n  for (let\
    \ i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++)\
    \ {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n    if (count\
    \ > max) {\n      max = count;\n      max_index = i;\n    }\n    count = 0;\n\
    \  }\n  return max * capacity;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n\
    \  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1,\
    \ 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1,\
    \ 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpok140v3v.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpok140v3v.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333502
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return count *\
    \ capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmphobtu2uc.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphobtu2uc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count++;\n            }\n        }\n        if (count\
    \ > max) {\n            max = count;\n        }\n        count = 0;\n    }\n \
    \   return max * capacity;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0,\
    \ 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp4eyjgo0d.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4eyjgo0d.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4

    8

    0

    '
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count++;\n            }\n        }\n        if (count\
    \ > max) {\n            max = count;\n        }\n        count = 0;\n    }\n \
    \   return max * capacity;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0,\
    \ 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp4eyjgo0d.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4eyjgo0d.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4

    8

    0

    '
  timestamp: 1660333640
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpz_pnoy6n.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_pnoy6n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let column = grid[0].length;\n    let row\
    \ = grid.length;\n    let bucket = capacity;\n    for (let i = 0; i < column;\
    \ i++) {\n        for (let j = 0; j < row; j++) {\n            if (grid[j][i]\
    \ === 1) {\n                if (bucket > 0) {\n                    bucket--;\n\
    \                    grid[j][i] = 0;\n                } else {\n             \
    \       count++;\n                    bucket = capacity - 1;\n               \
    \     grid[j][i] = 0;\n                }\n            }\n        }\n    }\n  \
    \  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpzlvc4n3f.js:47:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzlvc4n3f.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333644
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0],\
    \ [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1,\
    \ 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]], 5));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0,\
    \ 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp63cqjidc.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp63cqjidc.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        let row = grid[i];\n        for (let j = 0; j < row.length; j++) {\n\
    \            if (row[j] === 1) {\n                count += capacity;\n       \
    \     }\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
    \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
    \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
    \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
    \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp3ylkka2d.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3ylkka2d.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333645
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 2
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  let max = 0;\n  let max_index = 0;\n  let max_row\
    \ = 0;\n  let max_col = 0;\n  let max_row_index = 0;\n  let max_col_index = 0;\n\
    \  let max_row_count = 0;\n  let max_col_count = 0;\n  let max_row_max = 0;\n\
    \  let max_col_max = 0;\n  let max_row_max_index = 0;\n  let max_col_max_index\
    \ = 0;\n  let max_row_max_count = 0;\n  let max_col_max_count = 0;\n  let max_row_max_row\
    \ = 0;\n  let max_col_max_col = 0;\n  let max_row_max_row_index = 0;\n  let max_col_max_col_index\
    \ = 0;\n  let max_row_max_row_count = 0;\n  let max_col_max_col_count = 0;\n \
    \ let max_row_max_row_max = 0;\n  let max_col_max_col_max = 0;\n  let max_row_max_row_max_index\
    \ = 0;\n  let max_col_max_col_max_index = 0;\n  let max_row_max_row_max_count\
    \ = 0;\n  let max_col_max_col_max_count = 0;\n  let max_row_max_row_max_row =\
    \ 0;\n  let max_col_max_col_max_col = 0;\n  let max_row_max_row_max_row_index\
    \ = 0;\n  let max_col_max_col_max_col_index = 0;\n  let max_row_max_row_max_row_count\
    \ = 0;\n  let max_col_max_col_max_col_count = 0;\n  let max_row_max_row_max_row_max\
    \ = 0;\n  let max_col_max_col_max_col_max = 0;\n  let max_row_max_row_max_row_max_index\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp2y3bxjae.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333645
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n    let count = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                count++;\n            }\n        }\n        if (count\
    \ > max) {\n            max = count;\n        }\n        count = 0;\n    }\n \
    \   return max * capacity;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp3aa1lwbd.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3aa1lwbd.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0,\
    \ 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmp837kt2oc.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp837kt2oc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333498
- exit_code: 1
  program: "//You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n// and\
    \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n\
    // 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]],\
    \ 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length\
    \ <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// *\
    \ 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for\
    \ (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n    \
    \    count += capacity;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(max_fill([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(max_fill([[0, 0, 1,\
    \ 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2));\nconsole.log(max_fill([[0,\
    \ 0, 0], [0, 0, 0]], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0,\
    \ 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
    \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
    \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n18\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpcxu8_cqv.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcxu8_cqv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 18,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '6

    18

    0

    '
  timestamp: 1660333498
