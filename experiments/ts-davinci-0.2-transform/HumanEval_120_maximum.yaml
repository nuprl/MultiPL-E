name: HumanEval_120_maximum
language: ts
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] = [];\n  let max: number\
    \ = -Infinity;\n  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n  }\n  return result;\n\
    }\n", "  const heap = new Heap(arr, k, (a, b) => a < b);\n  return heap.get();\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let\
    \ max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n", "  if (k === 0) return [];\n  if (k === arr.length) return\
    \ arr;\n  const result: number[] = [];\n  const maxHeap = new MaxHeap();\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for\
    \ (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return\
    \ result;\n}\n", "    const maxHeap = new MaxHeap();\n    for (let i = 0; i <\
    \ arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    const result\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "  let result: number[] = [];\n  let sortedArr\
    \ = arr.sort((a, b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[sortedArr.length\
    \ - 1 - i]);\n  }\n  return result;\n}\n", "  const sorted = arr.sort((a, b) =>\
    \ b - a);\n  return sorted.slice(0, k);\n}\n", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex =\
    \ 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  if (k === 0) return\
    \ [];\n  if (k === arr.length) return arr;\n  const result: number[] = [];\n \
    \ for (let i = 0; i < arr.length; i++) {\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    } else {\n      const min = Math.min(...result);\n\
    \      if (arr[i] > min) {\n        result.splice(result.indexOf(min), 1, arr[i]);\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  const sorted = arr.sort((a, b)\
    \ => a - b);\n  return sorted.slice(sorted.length - k);\n}\n", "  if (k === 0)\
    \ return [];\n  if (k === arr.length) return arr;\n  let max = arr[0];\n  let\
    \ maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max)\
    \ {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  arr.splice(maxIndex,\
    \ 1);\n  return [max, ...maximum(arr, k - 1)];\n}\n", "    let result: number[]\
    \ = [];\n    let min = Math.min(...arr);\n    let max = Math.max(...arr);\n  \
    \  for (let i = 0; i < k; i++) {\n        result.push(min);\n    }\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        for (let j = 0; j < k; j++) {\n     \
    \       if (arr[i] > result[j]) {\n                result.splice(j, 0, arr[i]);\n\
    \                result.pop();\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\n", "  const result: number[] = [];\n  for\
    \ (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  let max = arr.slice(0,\
    \ k).sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    let\
    \ j = 0;\n    while (j < k && arr[i] <= max[j]) {\n      j++;\n    }\n    if (j\
    \ < k) {\n      max.splice(j, 0, arr[i]);\n      max.pop();\n    }\n  }\n  return\
    \ max;\n}\n", "  const result: number[] = [];\n  const sortedArr = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[sortedArr.length\
    \ - 1 - i]);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n \
    \ for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n\
    \    let index = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(index, 1);\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex\
    \ = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex\
    \ = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
