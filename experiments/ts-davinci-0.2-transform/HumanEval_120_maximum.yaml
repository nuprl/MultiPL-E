name: HumanEval_120_maximum
language: ts
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] = [];\n  let max: number\
    \ = -Infinity;\n  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n  }\n  return result;\n\
    }\n", "  const heap = new Heap(arr, k, (a, b) => a < b);\n  return heap.get();\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let\
    \ max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n", "  if (k === 0) return [];\n  if (k === arr.length) return\
    \ arr;\n  const result: number[] = [];\n  const maxHeap = new MaxHeap();\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for\
    \ (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return\
    \ result;\n}\n", "    const maxHeap = new MaxHeap();\n    for (let i = 0; i <\
    \ arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    const result\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "  let result: number[] = [];\n  let sortedArr\
    \ = arr.sort((a, b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[sortedArr.length\
    \ - 1 - i]);\n  }\n  return result;\n}\n", "  const sorted = arr.sort((a, b) =>\
    \ b - a);\n  return sorted.slice(0, k);\n}\n", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex =\
    \ 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  if (k === 0) return\
    \ [];\n  if (k === arr.length) return arr;\n  const result: number[] = [];\n \
    \ for (let i = 0; i < arr.length; i++) {\n    if (result.length < k) {\n     \
    \ result.push(arr[i]);\n    } else {\n      const min = Math.min(...result);\n\
    \      if (arr[i] > min) {\n        result.splice(result.indexOf(min), 1, arr[i]);\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  const sorted = arr.sort((a, b)\
    \ => a - b);\n  return sorted.slice(sorted.length - k);\n}\n", "  if (k === 0)\
    \ return [];\n  if (k === arr.length) return arr;\n  let max = arr[0];\n  let\
    \ maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max)\
    \ {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  arr.splice(maxIndex,\
    \ 1);\n  return [max, ...maximum(arr, k - 1)];\n}\n", "    let result: number[]\
    \ = [];\n    let min = Math.min(...arr);\n    let max = Math.max(...arr);\n  \
    \  for (let i = 0; i < k; i++) {\n        result.push(min);\n    }\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        for (let j = 0; j < k; j++) {\n     \
    \       if (arr[i] > result[j]) {\n                result.splice(j, 0, arr[i]);\n\
    \                result.pop();\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\n", "  const result: number[] = [];\n  for\
    \ (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  let max = arr.slice(0,\
    \ k).sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    let\
    \ j = 0;\n    while (j < k && arr[i] <= max[j]) {\n      j++;\n    }\n    if (j\
    \ < k) {\n      max.splice(j, 0, arr[i]);\n      max.pop();\n    }\n  }\n  return\
    \ max;\n}\n", "  const result: number[] = [];\n  const sortedArr = arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[sortedArr.length\
    \ - 1 - i]);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n \
    \ for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n\
    \    let index = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(index, 1);\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex\
    \ = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex\
    \ = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  // TODO: Implement\n\
    \  return [];\n}\n", "    const result: number[] = [];\n    let i = 0;\n    while\
    \ (i < k) {\n        let max = arr[i];\n        let maxIndex = i;\n        for\
    \ (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] > max) {\n  \
    \              max = arr[j];\n                maxIndex = j;\n            }\n \
    \       }\n        result.push(max);\n        arr[maxIndex] = arr[i];\n      \
    \  arr[i] = max;\n        i++;\n    }\n    return result;\n}\n", "  const maxHeap\
    \ = new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for\
    \ (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max =\
    \ arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  if (k === 0) return [];\n  if (k === arr.length)\
    \ return arr;\n  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length > 0 &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n", "  if (k === 0) return [];\n  if (k === arr.length) return\
    \ arr;\n  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (result.length < k) {\n      result.push(arr[i]);\n    } else {\n\
    \      const min = Math.min(...result);\n      if (arr[i] > min) {\n        const\
    \ index = result.indexOf(min);\n        result[index] = arr[i];\n      }\n   \
    \ }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "  const maxHeap = new\
    \ MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n\
    \    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n}\n", "  if (k ===\
    \ 0) return [];\n  if (k === arr.length) return arr;\n  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length >\
    \ 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i >\
    \ k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  let result: number[] = [];\n  let max:\
    \ number = -Infinity;\n  let maxIndex: number = -1;\n  let i: number = 0;\n  while\
    \ (i < k) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max)\
    \ {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  \
    \  i++;\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for\
    \ (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max =\
    \ arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for\
    \ (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max =\
    \ arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  const sortedArr\
    \ = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  let i = 0;\n\
    \  let j = arr.length - 1;\n  while (i <= j) {\n    if (arr[i] < arr[j]) {\n \
    \     result.push(arr[j]);\n      j--;\n    } else {\n      result.push(arr[i]);\n\
    \      i++;\n    }\n    if (result.length === k) {\n      break;\n    }\n  }\n\
    \  return result;\n}\n", "  let result: number[] = [];\n  for (let i = 0; i <\
    \ k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0;\
    \ j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n \
    \       maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        result.push(Math.max(...arr));\n\
    \        arr.splice(arr.indexOf(Math.max(...arr)), 1);\n    }\n    return result;\n\
    }\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] =\
    \ [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex\
    \ = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "    let result: number[]\
    \ = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n  \
    \  let i: number = 0;\n    while (i < k) {\n        for (let j = 0; j < arr.length;\
    \ j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n   \
    \             maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex\
    \ = -1;\n        i++;\n    }\n    return result;\n}\n", "  const result: number[]\
    \ = [];\n  const sortedArr = arr.sort((a, b) => b - a);\n  for (let i = 0; i <\
    \ k; i++) {\n    result.push(sortedArr[i]);\n  }\n  return result;\n}\n", "  let\
    \ result: number[] = [];\n  let max: number = 0;\n  let index: number = 0;\n \
    \ for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n\
    \      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n      }\n\
    \    }\n    result.push(max);\n    arr.splice(index, 1);\n    max = 0;\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  const sortedArr = arr.sort((a, b) => a - b);\n  for\
    \ (let i = 0; i < k; i++) {\n    result.push(sortedArr[sortedArr.length - 1 -\
    \ i]);\n  }\n  return result;\n}\n", "  if (k === 0) return [];\n  if (k === arr.length)\
    \ return arr;\n  if (k > arr.length) return [];\n  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a,\
    \ b) => a - b);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0])\
    \ {\n      result.shift();\n      result.push(arr[i]);\n      result.sort((a,\
    \ b) => a - b);\n    }\n  }\n  return result;\n}\n", "    if (k === 0) {\n   \
    \     return [];\n    }\n    if (k === arr.length) {\n        return arr.sort((a,\
    \ b) => a - b);\n    }\n    const result: number[] = [];\n    for (let i = 0;\
    \ i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) =>\
    \ a - b);\n    for (let i = k; i < arr.length; i++) {\n        if (arr[i] > result[0])\
    \ {\n            result.shift();\n            result.push(arr[i]);\n         \
    \   result.sort((a, b) => a - b);\n        }\n    }\n    return result;\n}\n",
  "    if (k === 0) {\n        return [];\n    }\n    if (k === arr.length) {\n  \
    \      return arr.sort((a, b) => a - b);\n    }\n    const result: number[] =\
    \ [];\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n\
    \    result.sort((a, b) => a - b);\n    for (let i = k; i < arr.length; i++) {\n\
    \        for (let j = 0; j < k; j++) {\n            if (arr[i] > result[j]) {\n\
    \                result.splice(j, 0, arr[i]);\n                result.pop();\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    const\
    \ max = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max),\
    \ 1);\n  }\n  return result;\n}\n", "  let result: number[] = [];\n  let sortedArr\
    \ = arr.sort((a, b) => a - b);\n  for (let i = sortedArr.length - 1; i >= sortedArr.length\
    \ - k; i--) {\n    result.push(sortedArr[i]);\n  }\n  return result;\n}\n", " \
    \ let result: number[] = [];\n  let max: number = 0;\n  let maxIndex: number =\
    \ 0;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n    max\
    \ = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  if (k\
    \ === 0) return [];\n  if (k === arr.length) return arr;\n  const maxHeap = new\
    \ MaxHeap();\n  for (let i = 0; i < k; i++) {\n    maxHeap.insert(arr[i]);\n \
    \ }\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > maxHeap.peek())\
    \ {\n      maxHeap.remove();\n      maxHeap.insert(arr[i]);\n    }\n  }\n  return\
    \ maxHeap.toArray();\n}\n", "  let max = arr.slice(0, k).sort((a, b) => b - a);\n\
    \  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > max[k - 1]) {\n  \
    \    let j = k - 1;\n      while (j >= 0 && arr[i] > max[j]) {\n        max[j\
    \ + 1] = max[j];\n        j--;\n      }\n      max[j + 1] = arr[i];\n    }\n \
    \ }\n  return max;\n}\n", "  let result: number[] = [];\n  for (let i = 0; i <\
    \ k; i++) {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j\
    \ < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n   \
    \     index = j;\n      }\n    }\n    result.push(max);\n    arr.splice(index,\
    \ 1);\n  }\n  return result;\n}\n", "  const sorted = arr.sort((a, b) => b - a);\n\
    \  return sorted.slice(0, k);\n}\n", "    const heap = new Heap(arr, k);\n   \
    \ return heap.getSorted();\n}\n", "  const result: number[] = [];\n  let index\
    \ = 0;\n  while (index < k) {\n    let max = arr[0];\n    let maxIndex = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] > max) {\n     \
    \   max = arr[i];\n        maxIndex = i;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n    index++;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  let result: number[] = [];\n  let max: number\
    \ = 0;\n  let maxIndex: number = 0;\n  let i: number = 0;\n  while (i < k) {\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n    max = 0;\n    maxIndex = 0;\n    i++;\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  const maxHeap = new MaxHeap();\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = 0;\
    \ i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return result;\n\
    }\n", "  // TODO: Implement your solution here\n  return [];\n}\n", "  let result:\
    \ number[] = [];\n  let max: number = 0;\n  let maxIndex: number = 0;\n  for (let\
    \ i = 0; i < k; i++) {\n    max = arr[i];\n    maxIndex = i;\n    for (let j =\
    \ i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex]\
    \ = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n   \
    \ let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n",
  "  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n\
    \    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n",
  "  let result: number[] = [];\n  let max: number = 0;\n  let maxIndex: number =\
    \ 0;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n    max\
    \ = 0;\n  }\n  return result;\n}\n", "  let result: number[] = [];\n  arr.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(arr[arr.length\
    \ - 1 - i]);\n  }\n  return result;\n}\n", "  const sorted = arr.sort((a, b) =>\
    \ b - a);\n  return sorted.slice(0, k);\n}\n", "    return arr.sort((a, b) =>\
    \ b - a).slice(0, k);\n}\n", "  const result: number[] = [];\n  if (k === 0) {\n\
    \    return result;\n  }\n  if (k === arr.length) {\n    return arr.sort((a, b)\
    \ => a - b);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (result.length\
    \ < k) {\n      result.push(arr[i]);\n    } else {\n      result.sort((a, b) =>\
    \ a - b);\n      if (arr[i] > result[0]) {\n        result.shift();\n        result.push(arr[i]);\n\
    \      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  if (k === 0) return [];\n  if (k === arr.length)\
    \ return arr;\n  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    while (\n      result.length > 0 &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n", "  const maxHeap = new MaxHeap();\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  const result\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  const sortedArr\
    \ = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "  return arr.sort((a, b) => b - a).slice(0, k);\n\
    }\n", "  return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "    let result:\
    \ number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max = -Infinity;\n\
    \        let maxIndex = 0;\n        for (let j = 0; j < arr.length; j++) {\n \
    \           if (arr[j] > max) {\n                max = arr[j];\n             \
    \   maxIndex = j;\n            }\n        }\n        result.push(max);\n     \
    \   arr.splice(maxIndex, 1);\n    }\n    return result;\n}\n", "  const maxHeap\
    \ = new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  if (k === 0) return [];\n  if (k === arr.length)\
    \ return arr;\n  const maxHeap = new MaxHeap();\n  for (let i = 0; i < k; i++)\
    \ {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > maxHeap.peek()) {\n      maxHeap.remove();\n      maxHeap.insert(arr[i]);\n\
    \    }\n  }\n  return maxHeap.toArray();\n}\n", "  if (k === 0) return [];\n \
    \ if (k === arr.length) return arr;\n  const result: number[] = [];\n  const heap\
    \ = new MinHeap();\n  for (let i = 0; i < arr.length; i++) {\n    heap.insert(arr[i]);\n\
    \    if (heap.size() > k) {\n      heap.extractMin();\n    }\n  }\n  while (heap.size()\
    \ > 0) {\n    result.push(heap.extractMin());\n  }\n  return result;\n}\n", " \
    \   let result: number[] = [];\n    let sortedArr: number[] = arr.sort((a, b)\
    \ => a - b);\n    for (let i = 0; i < k; i++) {\n        result.push(sortedArr[i]);\n\
    \    }\n    return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for\
    \ (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max =\
    \ arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  if (k\
    \ === 0) return [];\n  if (k === arr.length) return arr;\n  return arr.sort((a,\
    \ b) => b - a).slice(0, k);\n}\n", "  if (k === 0) return [];\n  if (k === arr.length)\
    \ return arr;\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i <\
    \ arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex\
    \ = i;\n    }\n  }\n  arr.splice(maxIndex, 1);\n  return [max, ...maximum(arr,\
    \ k - 1)];\n}\n", "    const result: number[] = [];\n    for (let i = 0; i < k;\
    \ i++) {\n        result.push(Math.max(...arr));\n        arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n    }\n    return result;\n}\n", "  // TODO: Implement me\n  return [];\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n\
    \    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return result;\n}\n\
    \nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const maxHeap = new MaxHeap();\n\
    \  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n\
    \  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  let result: number[] = [];\n  let max: number\
    \ = arr[0];\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n \
    \   result.push(max);\n    arr.splice(arr.indexOf(max), 1);\n    max = arr[0];\n\
    \  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n\
    \    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if\
    \ (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n  \
    \  }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let\
    \ max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    let max = -Infinity;\n    let maxIndex = 0;\n    for (let j = 0; j <\
    \ arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n     \
    \   maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  if (k === 0) return [];\n  const max =\
    \ arr.slice(0, k).sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > max[k - 1]) {\n      max[k - 1] = arr[i];\n      max.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return max;\n}\n", "  const result: number[] =\
    \ [];\n  for (let i = 0; i < k; i++) {\n    const max = Math.max(...arr);\n  \
    \  result.push(max);\n    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n\
    }\n", "    if (k === 0) {\n        return [];\n    }\n    if (k === arr.length)\
    \ {\n        return arr.sort((a, b) => a - b);\n    }\n    let result: number[]\
    \ = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n  \
    \  for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++)\
    \ {\n            if (arr[j] > max) {\n                max = arr[j];\n        \
    \        maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex\
    \ = -1;\n    }\n    return result;\n}\n", "  let result: number[] = [];\n  let\
    \ sorted = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sorted[i]);\n\
    \  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n\
    \    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if\
    \ (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n  \
    \  }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n\
    }\n", "  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let\
    \ max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j =\
    \ 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  if (k ===\
    \ 0) {\n    return result;\n  }\n  if (k === arr.length) {\n    return arr.sort((a,\
    \ b) => a - b);\n  }\n  const maxHeap = new MaxHeap();\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = 0; i <\
    \ k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return result;\n}\n",
  "    if (k === 0) {\n        return [];\n    }\n    if (k === arr.length) {\n  \
    \      return arr.sort((a, b) => a - b);\n    }\n    const maxHeap = new MaxHeap();\n\
    \    for (let i = 0; i < k; i++) {\n        maxHeap.insert(arr[i]);\n    }\n \
    \   for (let i = k; i < arr.length; i++) {\n        if (arr[i] > maxHeap.peek())\
    \ {\n            maxHeap.pop();\n            maxHeap.insert(arr[i]);\n       \
    \ }\n    }\n    return maxHeap.toArray();\n}\n", "  const result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex =\
    \ -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        let max = arr[0];\n      \
    \  let index = 0;\n        for (let j = 0; j < arr.length; j++) {\n          \
    \  if (arr[j] > max) {\n                max = arr[j];\n                index =\
    \ j;\n            }\n        }\n        result.push(max);\n        arr.splice(index,\
    \ 1);\n    }\n    return result;\n}\n", "  const sortedArr = arr.sort((a, b) =>\
    \ b - a);\n  return sortedArr.slice(0, k);\n}\n", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        let max = arr[i];\n      \
    \  let maxIndex = i;\n        for (let j = i + 1; j < arr.length; j++) {\n   \
    \         if (arr[j] > max) {\n                max = arr[j];\n               \
    \ maxIndex = j;\n            }\n        }\n        result.push(max);\n       \
    \ arr[maxIndex] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n\
    }\n", "  let result: number[] = [];\n  let max: number = -Infinity;\n  let maxIndex:\
    \ number = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n\
    \    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n\
    \    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n   \
    \ let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    const max\
    \ = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max),\
    \ 1);\n  }\n  return result;\n}\n", "    let result: number[] = [];\n    let sortedArr:\
    \ number[] = arr.sort((a, b) => b - a);\n    for (let i = 0; i < k; i++) {\n \
    \       result.push(sortedArr[i]);\n    }\n    return result;\n}\n", "    const\
    \ result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max =\
    \ -Infinity;\n        let maxIndex = -1;\n        for (let j = 0; j < arr.length;\
    \ j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n   \
    \             maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr.splice(maxIndex, 1);\n    }\n    return result;\n}\n", "    let result:\
    \ number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < k; i++) {\n\
    \        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max)\
    \ {\n                max = arr[j];\n            }\n        }\n        result.push(max);\n\
    \        arr.splice(arr.indexOf(max), 1);\n        max = 0;\n    }\n    return\
    \ result;\n}\n", "  const result: number[] = [];\n  const sortedArr = arr.sort((a,\
    \ b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "  let result: number[] = [];\n  let max: number\
    \ = -Infinity;\n  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n  }\n  return result;\n\
    }\n", "  const sorted = arr.sort((a, b) => b - a);\n  return sorted.slice(0, k);\n\
    }\n", "  if (k === 0) return [];\n  if (k === arr.length) return arr;\n  const\
    \ result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (result.length < k) {\n      result.push(num);\n     \
    \ result.sort((a, b) => b - a);\n    } else {\n      if (num > result[k - 1])\
    \ {\n        result.pop();\n        result.push(num);\n        result.sort((a,\
    \ b) => b - a);\n      }\n    }\n  }\n  return result;\n}\n", "  let result: number[]\
    \ = [];\n  let sorted: number[] = arr.sort((a, b) => b - a);\n  for (let i = 0;\
    \ i < k; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n}\n", " \
    \ if (k === 0) return [];\n  if (k === arr.length) return arr;\n  if (k > arr.length)\
    \ return [];\n  const maxHeap = new MaxHeap();\n  for (let i = 0; i < k; i++)\
    \ {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > maxHeap.peek()) {\n      maxHeap.remove();\n      maxHeap.insert(arr[i]);\n\
    \    }\n  }\n  return maxHeap.toArray();\n}\n", "  return arr.sort((a, b) => b\
    \ - a).slice(0, k);\n}\n", "  const result: number[] = [];\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    } else {\n      result.sort((a, b) => a - b);\n      if (arr[i] > result[0])\
    \ {\n        result[0] = arr[i];\n      }\n    }\n  }\n  return result.sort((a,\
    \ b) => a - b);\n}\n", "    const sortedArr = arr.sort((a, b) => b - a);\n   \
    \ return sortedArr.slice(0, k);\n}\n", "  const heap = new MaxHeap(k);\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    heap.insert(arr[i]);\n  }\n  return\
    \ heap.getData();\n}\n", "  const sortedArr = arr.sort((a, b) => a - b);\n  return\
    \ sortedArr.slice(sortedArr.length - k);\n}\n\nconsole.log(maximum([-3, -4, 5],\
    \ 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (result.length < k) {\n      result.push(arr[i]);\n    } else\
    \ {\n      const min = Math.min(...result);\n      if (arr[i] > min) {\n     \
    \   result.splice(result.indexOf(min), 1, arr[i]);\n      }\n    }\n  }\n  return\
    \ result;\n}\n", "  const result: number[] = [];\n  let i = 0;\n  while (i < k)\
    \ {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j <\
    \ arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n     \
    \   maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] =\
    \ arr[i];\n    arr[i] = max;\n    i++;\n  }\n  return result;\n}\n", "  const\
    \ result: number[] = [];\n  let i = 0;\n  while (i < k) {\n    let max = arr[i];\n\
    \    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n     \
    \ if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n\
    \    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n\
    \    i++;\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    } else {\n      const min = Math.min(...result);\n      if (arr[i] > min)\
    \ {\n        const index = result.indexOf(min);\n        result[index] = arr[i];\n\
    \      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "  const max\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    max.push(Math.max(...arr));\n  \
    \  arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return max;\n}\n", " \
    \ let sorted = arr.sort((a, b) => b - a);\n  return sorted.slice(0, k);\n}\n",
  "  const result: number[] = [];\n  const sortedArr = arr.sort((a, b) => a - b);\n\
    \  for (let i = sortedArr.length - 1; i >= sortedArr.length - k; i--) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "  let result: number[] = [];\n  let max: number\
    \ = -Infinity;\n  let maxIndex: number = -1;\n  for (let i = 0; i < k; i++) {\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  }\n\
    \  return result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    } else {\n      result.sort((a, b) => a - b);\n      if (arr[i] > result[0])\
    \ {\n        result[0] = arr[i];\n      }\n    }\n  }\n  return result.sort((a,\
    \ b) => a - b);\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ heap = new Heap(arr, (a, b) => b - a);\n  const result = [];\n  for (let i =\
    \ 0; i < k; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (result.length === 0) {\n      result.push(arr[i]);\n    } else {\n      let\
    \ j = 0;\n      while (j < result.length && result[j] > arr[i]) {\n        j++;\n\
    \      }\n      result.splice(j, 0, arr[i]);\n      if (result.length > k) {\n\
    \        result.pop();\n      }\n    }\n  }\n  return result;\n}\n", "  const\
    \ sorted = arr.sort((a, b) => b - a);\n  return sorted.slice(0, k);\n}\n", " \
    \ const sorted = arr.sort((a, b) => b - a);\n  return sorted.slice(0, k);\n}\n",
  "  if (k === 0) return [];\n  if (k === arr.length) return arr;\n  let max = arr[0];\n\
    \  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i]\
    \ > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  const newArr\
    \ = arr.slice(0, maxIndex).concat(arr.slice(maxIndex + 1));\n  return [max].concat(maximum(newArr,\
    \ k - 1));\n}\n", "  let result: number[] = [];\n  let sortedArr = arr.sort((a,\
    \ b) => a - b);\n  for (let i = sortedArr.length - 1; i >= sortedArr.length -\
    \ k; i--) {\n    result.push(sortedArr[i]);\n  }\n  return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "  return arr.sort((a, b) => b - a).slice(0, k);\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n\
    \    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return result;\n}\n",
  "  const result: number[] = [];\n  const sortedArr = arr.sort((a, b) => b - a);\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n  }\n  return\
    \ result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  let result:\
    \ number[] = [];\n  let max: number = -Infinity;\n  let maxIndex: number = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n\
    \      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n   \
    \   }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n    max =\
    \ -Infinity;\n  }\n  return result;\n}\n", "    const maxHeap = new MaxHeap();\n\
    \    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n\
    \    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n\
    \    }\n    return result;\n}\n", "  let result: number[] = [];\n  let max: number\
    \ = 0;\n  let index: number = 0;\n  for (let i = 0; i < k; i++) {\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        index = j;\n      }\n    }\n    result.push(max);\n    arr.splice(index,\
    \ 1);\n    max = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4,\
    \ 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1));", "  const result: number[] = [];\n  let min: number\
    \ = -Infinity;\n  let minIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > min) {\n     \
    \   min = arr[j];\n        minIndex = j;\n      }\n    }\n    result.push(min);\n\
    \    arr[minIndex] = -Infinity;\n    min = -Infinity;\n  }\n  return result;\n\
    }\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const result: number[]\
    \ = [];\n  const maxHeap = new MaxHeap();\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "    let result: number[] = [];\n    if (arr.length\
    \ === 0) {\n        return result;\n    }\n    for (let i = 0; i < k; i++) {\n\
    \        let max = arr[0];\n        let index = 0;\n        for (let j = 0; j\
    \ < arr.length; j++) {\n            if (arr[j] > max) {\n                max =\
    \ arr[j];\n                index = j;\n            }\n        }\n        result.push(max);\n\
    \        arr.splice(index, 1);\n    }\n    return result;\n}\n", "  const result:\
    \ number[] = [];\n  const sortedArr = arr.sort((a, b) => a - b);\n  for (let i\
    \ = 0; i < k; i++) {\n    result.push(sortedArr[sortedArr.length - 1 - i]);\n\
    \  }\n  return result;\n}\n", "    return arr.sort((a, b) => b - a).slice(0, k);\n\
    }\n", "  const result: number[] = [];\n  let i = 0;\n  while (i < k) {\n    const\
    \ max = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max),\
    \ 1);\n    i++;\n  }\n  return result;\n}\n", "  let result: number[] = [];\n\
    \  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n  }\n  return result;\n}\n", "  let result: number[] = [];\n  let max:\
    \ number = -Infinity;\n  let maxIndex: number = 0;\n  let i: number = 0;\n  while\
    \ (i < k) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max)\
    \ {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n    i++;\n  }\n  return\
    \ result;\n}\n", "    let result: number[] = [];\n    for (let i = 0; i < k; i++)\
    \ {\n        let max = arr[0];\n        let maxIndex = 0;\n        for (let j\
    \ = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n             \
    \   max = arr[j];\n                maxIndex = j;\n            }\n        }\n \
    \       result.push(max);\n        arr.splice(maxIndex, 1);\n    }\n    return\
    \ result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex =\
    \ j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n\
    \  return result;\n}\n", "  if (k === 0) return [];\n  if (k === arr.length) return\
    \ arr;\n  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n\
    \      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n", "  let\
    \ result: number[] = [];\n  let max: number = arr[0];\n  let maxIndex: number\
    \ = 0;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++)\
    \ {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n    max\
    \ = arr[0];\n  }\n  return result;\n}\n", "  if (k === 0) return [];\n  if (k\
    \ === arr.length) return arr;\n  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    while (\n      result.length > 0 &&\n      result[result.length\
    \ - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n\
    \    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result;\n}\n", "  if (k === 0) return [];\n  if (k === arr.length) return\
    \ arr;\n  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (result.length < k) {\n      result.push(arr[i]);\n    } else {\n\
    \      result.sort((a, b) => a - b);\n      if (arr[i] > result[0]) {\n      \
    \  result[0] = arr[i];\n      }\n    }\n  }\n  return result.sort((a, b) => a\
    \ - b);\n}\n", "  const result: number[] = [];\n  const sortedArr = arr.sort((a,\
    \ b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n\
    \    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n}\n", "  if (k ===\
    \ 0) return [];\n  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const num = arr[i];\n    if (result.length < k) {\n      result.push(num);\n\
    \      continue;\n    }\n    const min = Math.min(...result);\n    if (num > min)\
    \ {\n      const index = result.indexOf(min);\n      result[index] = num;\n  \
    \  }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        let max = arr[0];\n      \
    \  let maxIndex = 0;\n        for (let j = 0; j < arr.length; j++) {\n       \
    \     if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n", "  if (k === 0) return [];\n  const maxHeap\
    \ = new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "  let result: number[] = [];\n  for (let i = 0;\
    \ i < k; i++) {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0;\
    \ j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n \
    \       index = j;\n      }\n    }\n    result.push(max);\n    arr.splice(index,\
    \ 1);\n  }\n  return result;\n}\n", "  // return arr.sort((a, b) => b - a).slice(0,\
    \ k);\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "  return arr.sort((a,\
    \ b) => b - a).slice(0, k);\n}\n", "  const result: number[] = [];\n  const sortedArr\
    \ = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    } else {\n      const min = Math.min(...result);\n      if (arr[i] > min)\
    \ {\n        const index = result.indexOf(min);\n        result[index] = arr[i];\n\
    \      }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "    let result:\
    \ number[] = [];\n    let max: number = arr[0];\n    let maxIndex: number = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++)\
    \ {\n            if (arr[j] > max) {\n                max = arr[j];\n        \
    \        maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr.splice(maxIndex, 1);\n        max = arr[0];\n    }\n    return result;\n\
    }\n", "  let result: number[] = [];\n  let sortedArr = arr.sort((a, b) => b -\
    \ a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n  }\n\
    \  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  if (k\
    \ === 0) return [];\n  if (k === arr.length) return arr;\n  let result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.length < k)\
    \ {\n      result.push(arr[i]);\n    } else {\n      let min = Math.min(...result);\n\
    \      if (arr[i] > min) {\n        result[result.indexOf(min)] = arr[i];\n  \
    \    }\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n\
    \    if (result.length < k) {\n      result.push(num);\n      result.sort((a,\
    \ b) => b - a);\n    } else {\n      if (num > result[k - 1]) {\n        result.pop();\n\
    \        result.push(num);\n        result.sort((a, b) => b - a);\n      }\n \
    \   }\n  }\n  return result;\n}\n", "  let sorted = arr.sort((a, b) => b - a);\n\
    \  return sorted.slice(0, k);\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const\
    \ result: number[] = [];\n  if (k === 0) {\n    return result;\n  }\n  if (k ===\
    \ arr.length) {\n    return arr.sort((a, b) => a - b);\n  }\n  const maxHeap =\
    \ new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n\
    \  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n\
    \  }\n  return result;\n}\n", "    if (k === 0) {\n        return [];\n    }\n\
    \    if (k >= arr.length) {\n        return arr.sort((a, b) => a - b);\n    }\n\
    \    const res: number[] = [];\n    for (let i = 0; i < k; i++) {\n        res.push(arr[i]);\n\
    \    }\n    res.sort((a, b) => a - b);\n    for (let i = k; i < arr.length; i++)\
    \ {\n        if (arr[i] > res[0]) {\n            res.shift();\n            res.push(arr[i]);\n\
    \            res.sort((a, b) => a - b);\n        }\n    }\n    return res;\n}\n",
  "    const result: number[] = [];\n    const maxHeap = new MaxHeap();\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    for\
    \ (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n\
    \    return result;\n}\n", "  // TODO: Implement\n  return [];\n}\n", "    let\
    \ result: number[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => b -\
    \ a);\n    for (let i = 0; i < k; i++) {\n        result.push(sortedArr[i]);\n\
    \    }\n    return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let\
    \ result: number[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => b -\
    \ a);\n    for (let i = 0; i < k; i++) {\n        result.push(sortedArr[i]);\n\
    \    }\n    return result;\n}\n", "  const sorted = arr.sort((a, b) => b - a);\n\
    \  return sorted.slice(0, k);\n}\n", "  let result: number[] = [];\n  let sortedArr\
    \ = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  const sortedArr\
    \ = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n\
    \  }\n  return result;\n}\n", "    const result: number[] = [];\n    for (let\
    \ i = 0; i < k; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n\
    \        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max)\
    \ {\n                max = arr[j];\n                maxIndex = j;\n          \
    \  }\n        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n\
    \    }\n    return result;\n}\n", "  const result: number[] = [];\n  const sortedArr\
    \ = arr.sort((a, b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[sortedArr.length\
    \ - 1 - i]);\n  }\n  return result;\n}\n", "  let result: number[] = [];\n  for\
    \ (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.length < k)\
    \ {\n      result.push(arr[i]);\n    } else {\n      result.sort((a, b) => a -\
    \ b);\n      if (arr[i] > result[0]) {\n        result[0] = arr[i];\n      }\n\
    \    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "  // TODO: Implement\n\
    \  return [];\n}\n", "  const result: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const num = arr[i];\n    if (result.length < k) {\n      result.push(num);\n\
    \      result.sort((a, b) => b - a);\n    } else {\n      if (num > result[k -\
    \ 1]) {\n        result.pop();\n        result.push(num);\n        result.sort((a,\
    \ b) => b - a);\n      }\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  let i = 0;\n  while (i < k) {\n    let max = arr[i];\n   \
    \ let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if\
    \ (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n  \
    \  }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n\
    \    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "  const result: number[] = [];\n  const sorted = arr.sort((a, b)\
    \ => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sorted[i]);\n \
    \ }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    const num = arr[i];\n    if (result.length < k)\
    \ {\n      result.push(num);\n      continue;\n    }\n    if (result[0] < num)\
    \ {\n      result.shift();\n      result.push(num);\n    }\n  }\n  return result;\n\
    }\n", "  let result: number[] = [];\n  let sortedArr = arr.sort((a, b) => a -\
    \ b);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[sortedArr.length\
    \ - 1 - i]);\n  }\n  return result;\n}\n", "  // TODO: Implement\n  return [];\n\
    }\n", "  const result: number[] = [];\n  const maxHeap = new MaxHeap();\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for\
    \ (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return\
    \ result;\n}\n", "  let result: number[] = [];\n  let max: number = 0;\n  let\
    \ index: number = 0;\n  for (let i = 0; i < k; i++) {\n    max = arr[i];\n   \
    \ index = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n\
    \    arr[index] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n", " \
    \ const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max =\
    \ arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n\
    \      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n   \
    \   }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ result;\n}\n", "  let result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n\
    \      }\n    }\n    result.push(max);\n    arr.splice(index, 1);\n  }\n  return\
    \ result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    let max = -Infinity;\n    let maxIndex = 0;\n    for (let j = 0; j <\
    \ arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n     \
    \   maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  const sortedArr\
    \ = arr.sort((a, b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[sortedArr.length\
    \ - 1 - i]);\n  }\n  return result;\n}\n", "    let result: number[] = [];\n \
    \   let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let\
    \ i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n     \
    \       if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex]\
    \ = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return\
    \ result;\n}\n", "  const result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j <\
    \ arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n     \
    \   maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex,\
    \ 1);\n  }\n  return result;\n}\n", "  let result: number[] = [];\n  let sortedArr\
    \ = arr.sort((a, b) => a - b);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[sortedArr.length\
    \ - 1 - i]);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n \
    \ for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex =\
    \ -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n", "  if (k === 0) return\
    \ [];\n  if (k === arr.length) return arr;\n  let result: number[] = [];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    let j = result.length - 1;\n    while\
    \ (j >= 0 && result[j] < arr[i]) {\n      j--;\n    }\n    if (j < k - 1) {\n\
    \      result.splice(j + 1, 0, arr[i]);\n      if (result.length > k) {\n    \
    \    result.pop();\n      }\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  let i = 0;\n  while (i < k) {\n    let max = arr[i];\n   \
    \ let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if\
    \ (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n  \
    \  }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n\
    \    i++;\n  }\n  return result;\n}\n", "    let maxHeap = new MaxHeap();\n  \
    \  for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n \
    \   }\n    let result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.pop());\n\
    \    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
