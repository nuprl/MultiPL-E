name: HumanEval_46_fib4
language: ts
prompt: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n\
  // fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  // Please write a function to efficiently compute the n-th element of the fib4 number\
  \ sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n\
  // >>> fib4(7)\n// 14\nfunction fib4(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n\
  \  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n\
  }\n\ntest();"
completions: ["    if (n < 0) {\n        throw new Error(\"n must be a positive integer\"\
    );\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n\
    \        return 0;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if\
    \ (n === 3) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let\
    \ c = 2;\n    let d = 0;\n    for (let i = 4; i <= n; i++) {\n        let temp\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = temp;\n    }\n    return a + b + c + d;\n}\n", "  if (n === 0) {\n    return\
    \ 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return\
    \ 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  let a = 0;\n  let b = 0;\n\
    \  let c = 2;\n  let d = 0;\n  for (let i = 4; i <= n; i++) {\n    let temp =\
    \ a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return\
    \ a + b + c + d;\n}\n", "  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n\
    \  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n\
    \    c = d;\n  }\n  return d;\n}\n", "  if (n === 0) {\n    return 0;\n  }\n \
    \ if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n \
    \ if (n === 3) {\n    return 0;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 2;\n\
    \  let d = 0;\n  for (let i = 4; i <= n; i++) {\n    let temp = a + b + c + d;\n\
    \    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return a + b + c +\
    \ d;\n}\n", "  if (n < 2) {\n    return 0;\n  }\n  if (n === 2) {\n    return\
    \ 2;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n  for (let\
    \ i = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n\
    \  }\n  return d;\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1)\
    \ {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3)\
    \ {\n    return 0;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n\
    \  for (let i = 4; i <= n; i++) {\n    let temp = a + b + c + d;\n    a = b;\n\
    \    b = c;\n    c = d;\n    d = temp;\n  }\n  return a + b + c + d;\n}\n", " \
    \ let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n  if (n === 0) {\n   \
    \ return a;\n  }\n  if (n === 1) {\n    return b;\n  }\n  if (n === 2) {\n   \
    \ return c;\n  }\n  if (n === 3) {\n    return d;\n  }\n  for (let i = 4; i <=\
    \ n; i++) {\n    let temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n\
    \    d = temp;\n  }\n  return d;\n}\n", "  if (n === 0) {\n    return 0;\n  }\n\
    \  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n\
    \  if (n === 3) {\n    return 0;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 2;\n\
    \  let d = 0;\n  for (let i = 4; i <= n; i++) {\n    const temp = a + b + c +\
    \ d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return a + b +\
    \ c + d;\n}\n", "    if (n < 0) {\n        throw new Error(\"n must be positive\"\
    );\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n\
    \        return 0;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if\
    \ (n === 3) {\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let\
    \ c = 2;\n    let d = 0;\n    for (let i = 4; i <= n; i++) {\n        let temp\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = temp;\n    }\n    return a + b + c + d;\n}\n", "  if (n < 0) {\n    throw\
    \ new Error(\"n must be a positive integer\");\n  }\n  if (n < 3) {\n    return\
    \ n * 2;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 2;\n  for (let\
    \ i = 3; i < n; i++) {\n    let temp = a + b + c + d;\n    a = b;\n    b = c;\n\
    \    c = d;\n    d = temp;\n  }\n  return a + b + c + d;\n}\n", "  let a = 0;\n\
    \  let b = 0;\n  let c = 2;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n\
    \    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n",
  "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if\
    \ (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  let\
    \ a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n  for (let i = 4; i <= n;\
    \ i++) {\n    let temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n\
    \    d = temp;\n  }\n  return a + b + c + d;\n}\n", "  if (n === 0) {\n    return\
    \ 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return\
    \ 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  let a = 0;\n  let b = 0;\n\
    \  let c = 2;\n  let d = 0;\n  for (let i = 4; i <= n; i++) {\n    let temp =\
    \ a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return\
    \ a + b + c + d;\n}\n", "  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n\
    \  if (n === 0) {\n    return a;\n  }\n  if (n === 1) {\n    return b;\n  }\n\
    \  if (n === 2) {\n    return c;\n  }\n  if (n === 3) {\n    return d;\n  }\n\
    \  for (let i = 3; i < n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d =\
    \ a + b + c + d;\n  }\n  return d;\n}\n", "  if (n === 0) {\n    return 0;\n \
    \ } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 2;\n\
    \  } else if (n === 3) {\n    return 0;\n  } else {\n    let a = 0;\n    let b\
    \ = 0;\n    let c = 2;\n    let d = 0;\n    let e = 0;\n    for (let i = 4; i\
    \ <= n; i++) {\n      e = a + b + c + d;\n      a = b;\n      b = c;\n      c\
    \ = d;\n      d = e;\n    }\n    return e;\n  }\n}\n", "  if (n === 0) {\n   \
    \ return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n   \
    \ return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  let a = 0;\n  let b\
    \ = 0;\n  let c = 2;\n  let d = 0;\n  for (let i = 4; i <= n; i++) {\n    let\
    \ temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n \
    \ }\n  return a + b + c + d;\n}\n", "  if (n < 0) {\n    throw new Error(\"n must\
    \ be non-negative\");\n  }\n  if (n <= 1) {\n    return 0;\n  }\n  if (n === 2)\
    \ {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  let a = 0;\n\
    \  let b = 0;\n  let c = 2;\n  let d = 0;\n  for (let i = 4; i <= n; i++) {\n\
    \    const temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d =\
    \ temp;\n  }\n  return a + b + c + d;\n}\n", "  if (n < 2) {\n    return 0;\n\
    \  }\n  if (n === 2) {\n    return 2;\n  }\n  let a = 0;\n  let b = 0;\n  let\
    \ c = 2;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n\
    \    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n", "  if (n < 3) {\n\
    \    return n * 2;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 2;\n\
    \  for (let i = 4; i <= n; i++) {\n    const temp = d;\n    d = a + b + c + d;\n\
    \    a = b;\n    b = c;\n    c = temp;\n  }\n  return d;\n}\n", "  if (n <= 1)\
    \ {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3)\
    \ {\n    return 0;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n\
    \  for (let i = 4; i <= n; i++) {\n    let temp = a + b + c + d;\n    a = b;\n\
    \    b = c;\n    c = d;\n    d = temp;\n  }\n  return a + b + c + d;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
