language: ts
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_gl3ycw3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_gl3ycw3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let i = 0; i < word.length; i++) {\n            if\
    \ (word.indexOf(word[i]) === i) {\n                count++;\n            }\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuhmoomvs.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuhmoomvs.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyxk7uh9u.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyxk7uh9u.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = \"\";\n  let\
    \ max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for (let\
    \ i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i) {\n \
    \       count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpktr0jj2c.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpktr0jj2c.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord\
    \ = \"\";\n    for (let word of words) {\n        let uniqueChars = 0;\n     \
    \   for (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                uniqueChars++;\n            }\n        }\n        if (uniqueChars\
    \ > max) {\n            max = uniqueChars;\n            maxWord = word;\n    \
    \    }\n    }\n    return maxWord;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpenzraakf.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpenzraakf.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8062h5f9.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8062h5f9.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_chars: number = 0;\n  for (let word of words) {\n    let chars: string[]\
    \ = word.split(\"\");\n    let unique_chars: string[] = [];\n    for (let char\
    \ of chars) {\n      if (unique_chars.indexOf(char) === -1) {\n        unique_chars.push(char);\n\
    \      }\n    }\n    if (unique_chars.length > max_chars) {\n      max_chars =\
    \ unique_chars.length;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpy6rsrfkm.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy6rsrfkm.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_unique_chars = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = 0;\n        for (let char of word) {\n            if (word.indexOf(char) ===\
    \ word.lastIndexOf(char)) {\n                unique_chars++;\n            }\n\
    \        }\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpy0efdlyt.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0efdlyt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = \"\";\n   \
    \ let max_count = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word);\n        if (unique_chars.size > max_count) {\n           \
    \ max_count = unique_chars.size;\n            max_word = word;\n        }\n  \
    \  }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpik0pf3_7.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpik0pf3_7.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_gl3ycw3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_gl3ycw3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = unique_char_count(max_word);\n    for (let i = 1; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = unique_char_count(word);\n\
    \        if (count > max_count) {\n            max_word = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp4yxa25dt.ts(13,21): error TS2304: Cannot find name ''unique_char_count''.

    ../../../../tmp/tmp4yxa25dt.ts(16,21): error TS2304: Cannot find name ''unique_char_count''.

    '
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word);\n        if (unique_chars.size > max_count) {\n           \
    \ max_count = unique_chars.size;\n            max_word = word;\n        }\n  \
    \  }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwk_4v4it.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwk_4v4it.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = count_unique_chars(max_word);\n    for (let i = 1; i < words.length;\
    \ i++) {\n        let count = count_unique_chars(words[i]);\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp8f1yqi1h.ts(13,21): error TS2304: Cannot find name ''count_unique_chars''.

    ../../../../tmp/tmp8f1yqi1h.ts(15,21): error TS2304: Cannot find name ''count_unique_chars''.

    '
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_unique_chars = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = 0;\n        for (let char of word) {\n            if (word.indexOf(char) ===\
    \ word.lastIndexOf(char)) {\n                unique_chars++;\n            }\n\
    \        }\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpy0efdlyt.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0efdlyt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let char of word) {\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                count += 1;\n            }\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpfwsh08_a.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfwsh08_a.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpd5l2_qb8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd5l2_qb8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let char of word) {\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                count++;\n            }\n   \
    \     }\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdstzyyf8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdstzyyf8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word.indexOf(word[i]) === i) {\n                count++;\n        \
    \    }\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9xugd9b8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xugd9b8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpssymn8pg.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpssymn8pg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let unique_chars = new\
    \ Set(word);\n    if (unique_chars.size > max_count) {\n      max_count = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8_wz8d36.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8_wz8d36.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpssymn8pg.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpssymn8pg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_gl3ycw3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_gl3ycw3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_unique_chars = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = 0;\n        for (let char of word) {\n            if (word.indexOf(char) ===\
    \ word.lastIndexOf(char)) {\n                unique_chars++;\n            }\n\
    \        }\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpy0efdlyt.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0efdlyt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n\
    \    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwz7te4b4.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwz7te4b4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_unique_chars = unique_chars(words[0]);\n    for (let i = 1; i < words.length;\
    \ i++) {\n        let unique_chars = unique_chars(words[i]);\n        if (unique_chars\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars;\n      \
    \      max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpe6d6xbqw.ts(13,28): error TS2304: Cannot find name ''unique_chars''.

    ../../../../tmp/tmpe6d6xbqw.ts(15,28): error TS2448: Block-scoped variable ''unique_chars''
    used before its declaration.

    '
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_unique_chars: number = unique_chars(words[0]);\n    for (let i =\
    \ 1; i < words.length; i++) {\n        let unique_chars: number = unique_chars(words[i]);\n\
    \        if (unique_chars > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = words[i];\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: "../../../../tmp/tmpnk9hvc1k.ts(13,36): error TS2304: Cannot find name 'unique_chars'.\n\
    ../../../../tmp/tmpnk9hvc1k.ts(15,36): error TS2349: This expression is not callable.\n\
    \  Type 'Number' has no call signatures.\n../../../../tmp/tmpnk9hvc1k.ts(15,36):\
    \ error TS2448: Block-scoped variable 'unique_chars' used before its declaration.\n"
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max_word.length)\
    \ {\n      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9at2vt2s.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9at2vt2s.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_unique_chars = 0;\n  for (let word of words) {\n    let unique_chars\
    \ = 0;\n    for (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        unique_chars++;\n      }\n    }\n    if (unique_chars > max_unique_chars)\
    \ {\n      max_unique_chars = unique_chars;\n      max_word = word;\n    }\n \
    \ }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5mftihdz.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5mftihdz.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word.indexOf(word[i]) === i) {\n                count++;\n        \
    \    }\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9xugd9b8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xugd9b8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let i = 0; i < words.length; i++) {\n      \
    \  const word = words[i];\n        const unique_chars = new Set(word);\n     \
    \   if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps0m1qfpf.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps0m1qfpf.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ unique_chars: string[] = [];\n        for (let char of word) {\n           \
    \ if (unique_chars.indexOf(char) === -1) {\n                unique_chars.push(char);\n\
    \            }\n        }\n        if (unique_chars.length > max_count) {\n  \
    \          max_count = unique_chars.length;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkilxm_of.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkilxm_of.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ for (let i = 1; i < words.length; i++) {\n    if (unique_chars(words[i]) > unique_chars(max_word))\
    \ {\n      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpacaphg72.ts(14,9): error TS2304: Cannot find name ''unique_chars''.

    ../../../../tmp/tmpacaphg72.ts(14,34): error TS2304: Cannot find name ''unique_chars''.

    '
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyxk7uh9u.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyxk7uh9u.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let letter of word) {\n            if (word.indexOf(letter)\
    \ === word.lastIndexOf(letter)) {\n                count++;\n            }\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqgy9ahha.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqgy9ahha.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_unique_chars: number = 0;\n  for (let word of words) {\n    let unique_chars:\
    \ number = 0;\n    for (let char of word) {\n      if (word.indexOf(char) ===\
    \ word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n    if (unique_chars\
    \ > max_unique_chars) {\n      max_unique_chars = unique_chars;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6pte32ay.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6pte32ay.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word);\n        if (unique_chars.size > max_count) {\n           \
    \ max_count = unique_chars.size;\n            max_word = word;\n        }\n  \
    \  }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwk_4v4it.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwk_4v4it.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = \"\";\n  let\
    \ max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for (let\
    \ i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i) {\n \
    \       count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpktr0jj2c.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpktr0jj2c.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = \"\";\n  let\
    \ max_unique_chars = 0;\n  for (let word of words) {\n    let unique_chars = 0;\n\
    \    for (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        unique_chars++;\n      }\n    }\n    if (unique_chars > max_unique_chars)\
    \ {\n      max_unique_chars = unique_chars;\n      max_word = word;\n    }\n \
    \ }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_g__2gyt.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_g__2gyt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_unique_chars: number = 0;\n    for (let word of words) {\n    \
    \    let unique_chars: number = 0;\n        for (let char of word) {\n       \
    \     if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdgwnh8pq.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdgwnh8pq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let i = 0; i < word.length; i++) {\n            if\
    \ (word.indexOf(word[i]) === i) {\n                count++;\n            }\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuhmoomvs.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuhmoomvs.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_unique_chars = unique_chars(words[0]);\n    for (let i = 1; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let unique_chars = unique_chars(word);\n\
    \        if (unique_chars > max_unique_chars) {\n            max_word = word;\n\
    \            max_unique_chars = unique_chars;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpaaijsuvy.ts(13,28): error TS2304: Cannot find name ''unique_chars''.

    ../../../../tmp/tmpaaijsuvy.ts(16,28): error TS2448: Block-scoped variable ''unique_chars''
    used before its declaration.

    '
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word\
    \ = \"\";\n    for (let word of words) {\n        let unique_chars = 0;\n    \
    \    for (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max) {\n            max = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1a9rp_9g.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1a9rp_9g.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word);\n        if (unique_chars.size > max_count) {\n           \
    \ max_count = unique_chars.size;\n            max_word = word;\n        }\n  \
    \  }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwk_4v4it.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwk_4v4it.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\
    \"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n  \
    \    max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp69om19zh.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp69om19zh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let char of word) {\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                count++;\n            }\n   \
    \     }\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdstzyyf8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdstzyyf8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word);\n        if (unique_chars.size > max_count) {\n           \
    \ max_count = unique_chars.size;\n            max_word = word;\n        }\n  \
    \  }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwk_4v4it.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwk_4v4it.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_length: number = 0;\n    for (let word of words) {\n        let\
    \ unique_chars: string[] = [];\n        for (let char of word) {\n           \
    \ if (unique_chars.indexOf(char) === -1) {\n                unique_chars.push(char);\n\
    \            }\n        }\n        if (unique_chars.length > max_length) {\n \
    \           max_length = unique_chars.length;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpg6kzbslk.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg6kzbslk.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let unique_chars:\
    \ string[] = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char)\
    \ === -1) {\n                unique_chars.push(char);\n            }\n       \
    \ }\n        if (unique_chars.length > max_count) {\n            max_count = unique_chars.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpikgm2tfh.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpikgm2tfh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpssymn8pg.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpssymn8pg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let unique_chars = new\
    \ Set(word);\n    if (unique_chars.size > max_count) {\n      max_count = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8_wz8d36.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8_wz8d36.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_unique_chars = unique_chars(words[0]);\n    for (let i = 1; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let unique_chars = unique_chars(word);\n\
    \        if (unique_chars > max_unique_chars) {\n            max_word = word;\n\
    \            max_unique_chars = unique_chars;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpaaijsuvy.ts(13,28): error TS2304: Cannot find name ''unique_chars''.

    ../../../../tmp/tmpaaijsuvy.ts(16,28): error TS2448: Block-scoped variable ''unique_chars''
    used before its declaration.

    '
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8062h5f9.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8062h5f9.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyxk7uh9u.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyxk7uh9u.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpssymn8pg.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpssymn8pg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = \"\";\n  let\
    \ max_count = 0;\n  for (let word of words) {\n    let unique_chars = new Set(word);\n\
    \    if (unique_chars.size > max_count) {\n      max_count = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp35v9l34y.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp35v9l34y.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_gl3ycw3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_gl3ycw3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_unique_chars = get_unique_chars(words[0]);\n    for (let i = 1; i\
    \ < words.length; i++) {\n        let unique_chars = get_unique_chars(words[i]);\n\
    \        if (unique_chars > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = words[i];\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9o17qwmt.ts(13,28): error TS2552: Cannot find name ''get_unique_chars''.
    Did you mean ''max_unique_chars''?

    ../../../../tmp/tmp9o17qwmt.ts(15,28): error TS2552: Cannot find name ''get_unique_chars''.
    Did you mean ''max_unique_chars''?

    '
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let i = 0; i < word.length; i++) {\n            let\
    \ char: string = word[i];\n            if (word.indexOf(char) === i) {\n     \
    \           count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxy_tjani.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxy_tjani.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let i = 0; i < word.length; i++) {\n            if\
    \ (word.indexOf(word[i]) === i) {\n                count++;\n            }\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuhmoomvs.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuhmoomvs.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let uniques = new Set(word);\n   \
    \ if (uniques.size > max) {\n      max = uniques.size;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9uu8jds_.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9uu8jds_.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_unique_chars: number = unique_chars(words[0]);\n    for (let word\
    \ of words) {\n        let unique_chars: number = unique_chars(word);\n      \
    \  if (unique_chars > max_unique_chars) {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: SyntaxError
  stderr: ''
  stdout: "../../../../tmp/tmp95u_x_59.ts(13,36): error TS2304: Cannot find name 'unique_chars'.\n\
    ../../../../tmp/tmp95u_x_59.ts(15,36): error TS2349: This expression is not callable.\n\
    \  Type 'Number' has no call signatures.\n../../../../tmp/tmp95u_x_59.ts(15,36):\
    \ error TS2448: Block-scoped variable 'unique_chars' used before its declaration.\n"
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord\
    \ = \"\";\n  for (let word of words) {\n    let unique = 0;\n    for (let i =\
    \ 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === word.lastIndexOf(word[i]))\
    \ {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpk5bdej1n.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk5bdej1n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n\
    \    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwz7te4b4.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwz7te4b4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_len: number = 0;\n  for (let word of words) {\n    let unique_chars:\
    \ string[] = [];\n    for (let char of word) {\n      if (unique_chars.indexOf(char)\
    \ === -1) {\n        unique_chars.push(char);\n      }\n    }\n    if (unique_chars.length\
    \ > max_len) {\n      max_len = unique_chars.length;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp34elv6i_.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp34elv6i_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord\
    \ = \"\";\n  for (let word of words) {\n    let unique = 0;\n    for (let i =\
    \ 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === word.lastIndexOf(word[i]))\
    \ {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpk5bdej1n.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk5bdej1n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_unique_chars: number = 0;\n    for (let word of words) {\n      \
    \  let unique_chars: number = 0;\n        for (let char of word) {\n         \
    \   if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuz25yfn5.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuz25yfn5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_gl3ycw3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_gl3ycw3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpycgvuqdn.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpycgvuqdn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_unique_chars: number = 0;\n  for (let word of words) {\n    let unique_chars:\
    \ number = 0;\n    for (let char of word) {\n      if (word.indexOf(char) ===\
    \ word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n    if (unique_chars\
    \ > max_unique_chars) {\n      max_unique_chars = unique_chars;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jy_va84.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jy_va84.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpycgvuqdn.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpycgvuqdn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = '';\n\
    \    let max_unique_chars: number = 0;\n    for (let word of words) {\n      \
    \  let unique_chars: string[] = [];\n        for (let char of word) {\n      \
    \      if (unique_chars.indexOf(char) === -1) {\n                unique_chars.push(char);\n\
    \            }\n        }\n        if (unique_chars.length > max_unique_chars)\
    \ {\n            max_unique_chars = unique_chars.length;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2w5kghyd.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2w5kghyd.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333630
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ unique_count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                unique_count++;\n\
    \            }\n        }\n        if (unique_count > max_count) {\n         \
    \   max_count = unique_count;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyrt0fir2.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyrt0fir2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333630
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_unique_chars: number = 0;\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let unique_chars: number = 0;\n    for (let j = 0; j < words[i].length;\
    \ j++) {\n      if (words[i].indexOf(words[i][j]) === j) {\n        unique_chars++;\n\
    \      }\n    }\n    if (unique_chars > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpvspnbe68.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvspnbe68.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333630
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word.indexOf(word[i]) === i) {\n                count++;\n        \
    \    }\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9xugd9b8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xugd9b8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let unique_chars:\
    \ string[] = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char)\
    \ === -1) {\n                unique_chars.push(char);\n            }\n       \
    \ }\n        if (unique_chars.length > max_count) {\n            max_count = unique_chars.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpikgm2tfh.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpikgm2tfh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n     \
    \       if (word.indexOf(word[i]) === i) {\n                count++;\n       \
    \     }\n        }\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkij8s5gx.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkij8s5gx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333630
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_unique_chars: number = 0;\n    for (let word of words) {\n    \
    \    let unique_chars: number = 0;\n        for (let i = 0; i < word.length; i++)\
    \ {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n\
    \                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars;\n      \
    \      max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpx92ng5pr.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpx92ng5pr.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_unique_chars: number = 0;\n  for (let word of words) {\n    let unique_chars:\
    \ string[] = [];\n    for (let char of word) {\n      if (unique_chars.indexOf(char)\
    \ === -1) {\n        unique_chars.push(char);\n      }\n    }\n    if (unique_chars.length\
    \ > max_unique_chars) {\n      max_unique_chars = unique_chars.length;\n     \
    \ max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpaz033k4e.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpaz033k4e.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333630
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word.indexOf(word[i]) === i) {\n                count++;\n        \
    \    }\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9xugd9b8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xugd9b8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_unique_characters: number = 0;\n  for (let word of words) {\n   \
    \ let unique_characters: number = 0;\n    for (let i = 0; i < word.length; i++)\
    \ {\n      if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n      \
    \  unique_characters++;\n      }\n    }\n    if (unique_characters > max_unique_characters)\
    \ {\n      max_unique_characters = unique_characters;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxeqxbnhv.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxeqxbnhv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let char of word) {\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                count++;\n            }\n   \
    \     }\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpnq4dbggv.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnq4dbggv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let unique_chars = new\
    \ Set(word);\n    if (unique_chars.size > max_count) {\n      max_count = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8_wz8d36.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8_wz8d36.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_unique: number = 0;\n    for (let word of words) {\n        let unique_chars:\
    \ string[] = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char)\
    \ === -1) {\n                unique_chars.push(char);\n            }\n       \
    \ }\n        if (unique_chars.length > max_unique) {\n            max_unique =\
    \ unique_chars.length;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgsjazmhv.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgsjazmhv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_gl3ycw3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_gl3ycw3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_unique_chars = 0;\n  for (let word of words) {\n    let unique_chars\
    \ = 0;\n    for (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        unique_chars++;\n      }\n    }\n    if (unique_chars > max_unique_chars)\
    \ {\n      max_unique_chars = unique_chars;\n      max_word = word;\n    }\n \
    \ }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5mftihdz.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5mftihdz.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let i = 0; i < words.length; i++) {\n\
    \        let count: number = 0;\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (words[i].indexOf(words[i][j]) === j) {\n           \
    \     count++;\n            }\n        }\n        if (count > max_count) {\n \
    \           max = words[i];\n            max_count = count;\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpj28l1anx.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj28l1anx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpycgvuqdn.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpycgvuqdn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = new\
    \ Set(word).size;\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpr3100oxd.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr3100oxd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n\
    \    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwz7te4b4.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwz7te4b4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpycgvuqdn.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpycgvuqdn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = words[0];\n  for (let\
    \ i = 1; i < words.length; i++) {\n    if (unique_characters(words[i]) > unique_characters(max))\
    \ {\n      max = words[i];\n    }\n  }\n  return max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpnc60yb9b.ts(14,9): error TS2304: Cannot find name ''unique_characters''.

    ../../../../tmp/tmpnc60yb9b.ts(14,39): error TS2304: Cannot find name ''unique_characters''.

    '
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpssymn8pg.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpssymn8pg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpb6p3dy6o.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb6p3dy6o.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = \"\";\n   \
    \ let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1qik6vmj.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1qik6vmj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_count: number = count_unique_chars(words[0]);\n  for (let i = 1; i\
    \ < words.length; i++) {\n    let count: number = count_unique_chars(words[i]);\n\
    \    if (count > max_count) {\n      max_count = count;\n      max_word = words[i];\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp30yldi6a.ts(13,27): error TS2304: Cannot find name ''count_unique_chars''.

    ../../../../tmp/tmp30yldi6a.ts(15,25): error TS2304: Cannot find name ''count_unique_chars''.

    '
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpssymn8pg.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpssymn8pg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_unique_chars = unique_chars(words[0]);\n    for (let i = 1; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let unique_chars = unique_chars(word);\n\
    \        if (unique_chars > max_unique_chars) {\n            max_word = word;\n\
    \            max_unique_chars = unique_chars;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpaaijsuvy.ts(13,28): error TS2304: Cannot find name ''unique_chars''.

    ../../../../tmp/tmpaaijsuvy.ts(16,28): error TS2448: Block-scoped variable ''unique_chars''
    used before its declaration.

    '
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i: number = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxff0y0bq.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxff0y0bq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_unique: number = 0;\n    for (let word of words) {\n        let unique_chars:\
    \ string[] = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char)\
    \ === -1) {\n                unique_chars.push(char);\n            }\n       \
    \ }\n        if (unique_chars.length > max_unique) {\n            max_unique =\
    \ unique_chars.length;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgsjazmhv.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgsjazmhv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i: number = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmphpgwfre4.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphpgwfre4.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n\
    \    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwz7te4b4.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwz7te4b4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = \"\";\n  let\
    \ max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for (let\
    \ i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i) {\n \
    \       count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpktr0jj2c.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpktr0jj2c.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_unique: number = 0;\n  for (let word of words) {\n    let unique_chars:\
    \ string[] = [];\n    for (let char of word) {\n      if (unique_chars.indexOf(char)\
    \ === -1) {\n        unique_chars.push(char);\n      }\n    }\n    if (unique_chars.length\
    \ > max_unique) {\n      max_unique = unique_chars.length;\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpl9trofdd.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl9trofdd.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord\
    \ = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let unique = 0;\n \
    \   for (let j = 0; j < words[i].length; j++) {\n      if (words[i].indexOf(words[i][j])\
    \ === words[i].lastIndexOf(words[i][j])) {\n        unique++;\n      }\n    }\n\
    \    if (unique > max) {\n      max = unique;\n      maxWord = words[i];\n   \
    \ }\n  }\n  return maxWord;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpw_8xq0jy.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw_8xq0jy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let char of word) {\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                count++;\n            }\n   \
    \     }\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpnq4dbggv.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnq4dbggv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_unique_chars: number = 0;\n    for (let word of words) {\n    \
    \    let unique_chars: number = 0;\n        for (let char of word) {\n       \
    \     if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdgwnh8pq.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdgwnh8pq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let char of word) {\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                count++;\n            }\n   \
    \     }\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdstzyyf8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdstzyyf8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_unique: number = unique_characters(words[0]);\n    for (let i = 1;\
    \ i < words.length; i++) {\n        let current_unique: number = unique_characters(words[i]);\n\
    \        if (current_unique > max_unique) {\n            max_unique = current_unique;\n\
    \            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpp_z009lh.ts(13,30): error TS2304: Cannot find name ''unique_characters''.

    ../../../../tmp/tmpp_z009lh.ts(15,38): error TS2304: Cannot find name ''unique_characters''.

    '
  timestamp: 1660333631
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_unique_chars = unique_chars(words[0]);\n  for (let i = 1; i < words.length;\
    \ i++) {\n    let unique_chars = unique_chars(words[i]);\n    if (unique_chars\
    \ > max_unique_chars) {\n      max_unique_chars = unique_chars;\n      max_word\
    \ = words[i];\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpqh7pf_v1.ts(13,26): error TS2304: Cannot find name ''unique_chars''.

    ../../../../tmp/tmpqh7pf_v1.ts(15,24): error TS2448: Block-scoped variable ''unique_chars''
    used before its declaration.

    '
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word\
    \ = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word);\n\
    \        if (unique_chars.size > max) {\n            max = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5zqclan9.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5zqclan9.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpycgvuqdn.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpycgvuqdn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_unique_chars: number = 0;\n    for (let word of words) {\n    \
    \    let unique_chars: number = 0;\n        for (let char of word) {\n       \
    \     if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdgwnh8pq.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdgwnh8pq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ for (let i = 1; i < words.length; i++) {\n    if (unique_chars(words[i]) > unique_chars(max_word))\
    \ {\n      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpacaphg72.ts(14,9): error TS2304: Cannot find name ''unique_chars''.

    ../../../../tmp/tmpacaphg72.ts(14,34): error TS2304: Cannot find name ''unique_chars''.

    '
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_unique_chars: number = 0;\n  for (let word of words) {\n    let unique_chars:\
    \ number = 0;\n    for (let char of word) {\n      if (word.indexOf(char) ===\
    \ word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n    if (unique_chars\
    \ > max_unique_chars) {\n      max_unique_chars = unique_chars;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6pte32ay.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6pte32ay.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n  \
    \  }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7ya1tqc8.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ya1tqc8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let i = 0; i < word.length; i++) {\n            if\
    \ (word.indexOf(word[i]) === i) {\n                count++;\n            }\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuhmoomvs.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuhmoomvs.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let i = 0; i < words.length; i++) {\n\
    \        let word: string = words[i];\n        let count: number = 0;\n      \
    \  for (let j = 0; j < word.length; j++) {\n            let char: string = word[j];\n\
    \            if (word.indexOf(char) === j) {\n                count++;\n     \
    \       }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_546gj0b.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_546gj0b.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333633
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpssymn8pg.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpssymn8pg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let char of word) {\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                count++;\n            }\n   \
    \     }\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdstzyyf8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdstzyyf8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let i = 0; i < word.length; i++) {\n            if\
    \ (word.indexOf(word[i]) === i) {\n                count++;\n            }\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuhmoomvs.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuhmoomvs.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_gl3ycw3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_gl3ycw3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord\
    \ = \"\";\n    for (let word of words) {\n        let unique = 0;\n        for\
    \ (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) ===\
    \ word.lastIndexOf(word[i])) {\n                unique++;\n            }\n   \
    \     }\n        if (unique > max) {\n            max = unique;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxpzy4dr6.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxpzy4dr6.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n  \
    \  }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7ya1tqc8.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ya1tqc8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyxk7uh9u.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyxk7uh9u.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let unique_chars:\
    \ string[] = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char)\
    \ === -1) {\n                unique_chars.push(char);\n            }\n       \
    \ }\n        if (unique_chars.length > max_count) {\n            max_count = unique_chars.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpikgm2tfh.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpikgm2tfh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_unique_chars: number = 0;\n    for (let word of words) {\n    \
    \    let unique_chars: number = 0;\n        for (let char of word) {\n       \
    \     if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdgwnh8pq.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdgwnh8pq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = \"\";\n   \
    \ let max_count = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word);\n        if (unique_chars.size > max_count) {\n           \
    \ max_count = unique_chars.size;\n            max_word = word;\n        }\n  \
    \  }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpik0pf3_7.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpik0pf3_7.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_unique_chars: number = 0;\n    for (let word of words) {\n    \
    \    let unique_chars: number = 0;\n        for (let char of word) {\n       \
    \     if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdgwnh8pq.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdgwnh8pq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpa7mauvhk.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa7mauvhk.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word);\n        if (unique_chars.size > max_count) {\n           \
    \ max_count = unique_chars.size;\n            max_word = word;\n        }\n  \
    \  }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwk_4v4it.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwk_4v4it.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_unique_chars = unique_chars(words[0]);\n  for (let i = 1; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let unique_chars = unique_chars(word);\n\
    \    if (unique_chars > max_unique_chars) {\n      max_word = word;\n      max_unique_chars\
    \ = unique_chars;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpdn4r_s_j.ts(13,26): error TS2304: Cannot find name ''unique_chars''.

    ../../../../tmp/tmpdn4r_s_j.ts(16,24): error TS2448: Block-scoped variable ''unique_chars''
    used before its declaration.

    '
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word\
    \ = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word);\n\
    \        if (unique_chars.size > max) {\n            max = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5zqclan9.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5zqclan9.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = count_unique(words[0]);\n  for (let i = 1; i < words.length;\
    \ i++) {\n    let count = count_unique(words[i]);\n    if (count > max_count)\
    \ {\n      max_count = count;\n      max_word = words[i];\n    }\n  }\n  return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpju1fx0pf.ts(13,19): error TS2304: Cannot find name ''count_unique''.

    ../../../../tmp/tmpju1fx0pf.ts(15,17): error TS2304: Cannot find name ''count_unique''.

    '
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_gl3ycw3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_gl3ycw3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word\
    \ = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word.split(\"\
    \"));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp4mbv0nao.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4mbv0nao.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let i: number = 0; i < words.length;\
    \ i++) {\n        let word: string = words[i];\n        let count: number = 0;\n\
    \        for (let j: number = 0; j < word.length; j++) {\n            let char:\
    \ string = word[j];\n            if (word.indexOf(char) === j) {\n           \
    \     count++;\n            }\n        }\n        if (count > max_count) {\n \
    \           max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpndc1huez.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpndc1huez.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word\
    \ = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let unique_chars = 0;\n        for (let j = 0; j < word.length; j++)\
    \ {\n            let char = word[j];\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max) {\n            max = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpmuovpuuj.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmuovpuuj.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let i = 0; i < words.length; i++)\
    \ {\n        let word: string = words[i];\n        let count: number = 0;\n  \
    \      for (let j = 0; j < word.length; j++) {\n            let char: string =\
    \ word[j];\n            if (word.indexOf(char) === j) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpu2gg8qap.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu2gg8qap.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_unique_characters: number = 0;\n    for (let word of words) {\n\
    \        let unique_characters: number = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            let character: string = word[i];\n            if (word.indexOf(character)\
    \ === i) {\n                unique_characters++;\n            }\n        }\n \
    \       if (unique_characters > max_unique_characters) {\n            max_unique_characters\
    \ = unique_characters;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwjbw5jqh.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwjbw5jqh.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333634
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = count_unique_chars(max_word);\n    for (let i = 1; i < words.length;\
    \ i++) {\n        let count = count_unique_chars(words[i]);\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp8f1yqi1h.ts(13,21): error TS2304: Cannot find name ''count_unique_chars''.

    ../../../../tmp/tmp8f1yqi1h.ts(15,21): error TS2304: Cannot find name ''count_unique_chars''.

    '
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpb6p3dy6o.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb6p3dy6o.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_unique_characters: number = 0;\n  for (let word of words) {\n    let\
    \ unique_characters: number = 0;\n    for (let i = 0; i < word.length; i++) {\n\
    \      if (word.indexOf(word[i]) === i) {\n        unique_characters++;\n    \
    \  }\n    }\n    if (unique_characters > max_unique_characters) {\n      max_unique_characters\
    \ = unique_characters;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps8dl_rt3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps8dl_rt3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let unique_chars = new\
    \ Set(word);\n    if (unique_chars.size > max_count) {\n      max_count = unique_chars.size;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8_wz8d36.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8_wz8d36.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word.indexOf(word[i]) === i) {\n                count++;\n        \
    \    }\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9xugd9b8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xugd9b8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_unique_chars: number = 0;\n    for (let word of words) {\n      \
    \  let unique_chars: number = 0;\n        for (let char of word) {\n         \
    \   if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuz25yfn5.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuz25yfn5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i: number = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxff0y0bq.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxff0y0bq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_chars: number = 0;\n    for (let word of words) {\n        let chars:\
    \ string[] = word.split(\"\");\n        let unique_chars: string[] = [];\n   \
    \     for (let char of chars) {\n            if (unique_chars.indexOf(char) ===\
    \ -1) {\n                unique_chars.push(char);\n            }\n        }\n\
    \        if (unique_chars.length > max_chars) {\n            max_chars = unique_chars.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkobagzhv.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkobagzhv.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333634
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = count_unique_chars(max_word);\n    for (let i = 1; i < words.length;\
    \ i++) {\n        let count = count_unique_chars(words[i]);\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp8f1yqi1h.ts(13,21): error TS2304: Cannot find name ''count_unique_chars''.

    ../../../../tmp/tmp8f1yqi1h.ts(15,21): error TS2304: Cannot find name ''count_unique_chars''.

    '
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let letter of word) {\n      if (word.indexOf(letter) === word.lastIndexOf(letter))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpj7cjm968.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj7cjm968.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333635
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word\
    \ = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word);\n\
    \        if (unique_chars.size > max) {\n            max = unique_chars.size;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5zqclan9.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5zqclan9.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n\
    \    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwz7te4b4.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwz7te4b4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word.indexOf(word[i]) === i) {\n                count++;\n        \
    \    }\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9xugd9b8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xugd9b8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_unique_chars = 0;\n  for (let word of words) {\n    let unique_chars\
    \ = 0;\n    for (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        unique_chars++;\n      }\n    }\n    if (unique_chars > max_unique_chars)\
    \ {\n      max_unique_chars = unique_chars;\n      max_word = word;\n    }\n \
    \ }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5mftihdz.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5mftihdz.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = \"\";\n  let\
    \ max_unique_chars = 0;\n  for (let word of words) {\n    let unique_chars = 0;\n\
    \    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        unique_chars++;\n      }\n    }\n    if (unique_chars > max_unique_chars)\
    \ {\n      max_unique_chars = unique_chars;\n      max_word = word;\n    }\n \
    \ }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqeu_e7yz.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqeu_e7yz.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_unique_count: number = 0;\n  for (let word of words) {\n    let unique_count:\
    \ number = 0;\n    for (let char of word) {\n      if (word.indexOf(char) ===\
    \ word.lastIndexOf(char)) {\n        unique_count++;\n      }\n    }\n    if (unique_count\
    \ > max_unique_count) {\n      max_unique_count = unique_count;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpffnxv9kx.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpffnxv9kx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333635
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = '';\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n     \
    \       if (word.indexOf(word[i]) === i) {\n                count++;\n       \
    \     }\n        }\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuon2fl6v.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuon2fl6v.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333635
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_unique_chars: number = 0;\n  for (let word of words) {\n    let unique_chars:\
    \ number = 0;\n    for (let char of word) {\n      if (word.indexOf(char) ===\
    \ word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n    if (unique_chars\
    \ > max_unique_chars) {\n      max_unique_chars = unique_chars;\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6pte32ay.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6pte32ay.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpycgvuqdn.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpycgvuqdn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = words[0];\n\
    \  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyxk7uh9u.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyxk7uh9u.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if\
    \ (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n  \
    \  }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7ya1tqc8.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ya1tqc8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_unique_characters: number = 0;\n    for (let word of words) {\n \
    \       let unique_characters: string[] = [];\n        for (let character of word)\
    \ {\n            if (unique_characters.indexOf(character) === -1) {\n        \
    \        unique_characters.push(character);\n            }\n        }\n      \
    \  if (unique_characters.length > max_unique_characters) {\n            max_unique_characters\
    \ = unique_characters.length;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2rwwvtup.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2rwwvtup.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333635
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_unique_chars = unique_chars(words[0]);\n  for (let i = 1; i < words.length;\
    \ i++) {\n    let current_unique_chars = unique_chars(words[i]);\n    if (current_unique_chars\
    \ > max_unique_chars) {\n      max_unique_chars = current_unique_chars;\n    \
    \  max_word = words[i];\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp93u71mi9.ts(13,26): error TS2304: Cannot find name ''unique_chars''.

    ../../../../tmp/tmp93u71mi9.ts(15,32): error TS2304: Cannot find name ''unique_chars''.

    '
  timestamp: 1660333634
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i)\
    \ {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count\
    \ = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jj0o8pc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jj0o8pc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_unique_chars = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = 0;\n        for (let char of word) {\n            if (word.indexOf(char) ===\
    \ word.lastIndexOf(char)) {\n                unique_chars++;\n            }\n\
    \        }\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpy0efdlyt.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0efdlyt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_gl3ycw3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_gl3ycw3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_count: number = 0;\n    for (let word of words) {\n        let count:\
    \ number = 0;\n        for (let i = 0; i < word.length; i++) {\n            if\
    \ (word.indexOf(word[i]) === i) {\n                count++;\n            }\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuhmoomvs.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuhmoomvs.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word.indexOf(word[i]) === i) {\n                count++;\n        \
    \    }\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9xugd9b8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xugd9b8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpssymn8pg.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpssymn8pg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = \"\";\n   \
    \ let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpfz6_4vq5.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfz6_4vq5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333635
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_unique_chars = unique_chars(words[0]);\n  for (let i = 1; i < words.length;\
    \ i++) {\n    let unique_chars = unique_chars(words[i]);\n    if (unique_chars\
    \ > max_unique_chars) {\n      max_unique_chars = unique_chars;\n      max_word\
    \ = words[i];\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpqh7pf_v1.ts(13,26): error TS2304: Cannot find name ''unique_chars''.

    ../../../../tmp/tmpqh7pf_v1.ts(15,24): error TS2448: Block-scoped variable ''unique_chars''
    used before its declaration.

    '
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word\
    \ = \"\";\n    for (let word of words) {\n        let unique_characters = new\
    \ Set(word.split(\"\"));\n        if (unique_characters.size > max) {\n      \
    \      max = unique_characters.size;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpmbmnb6r6.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmbmnb6r6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333635
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word\
    \ = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n\
    \    let unique_chars = 0;\n    for (let j = 0; j < word.length; j++) {\n    \
    \  let char = word[j];\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        unique_chars++;\n      }\n    }\n    if (unique_chars > max) {\n\
    \      max = unique_chars;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpw3o2r238.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw3o2r238.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333635
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_unique_chars = 0;\n  for (let word of words) {\n    let unique_chars\
    \ = 0;\n    for (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        unique_chars++;\n      }\n    }\n    if (unique_chars > max_unique_chars)\
    \ {\n      max_unique_chars = unique_chars;\n      max_word = word;\n    }\n \
    \ }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5mftihdz.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5mftihdz.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_unique_chars = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = 0;\n        for (let char of word) {\n            if (word.indexOf(char) ===\
    \ word.lastIndexOf(char)) {\n                unique_chars++;\n            }\n\
    \        }\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpy0efdlyt.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0efdlyt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n\
    \            if (word.indexOf(word[i]) === i) {\n                count++;\n  \
    \          }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpssymn8pg.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpssymn8pg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max = \"\";\n    for (let\
    \ i = 0; i < words.length; i++) {\n        if (unique_characters(words[i]) > unique_characters(max))\
    \ {\n            max = words[i];\n        }\n    }\n    return max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp5jo51od_.ts(14,13): error TS2304: Cannot find name ''unique_characters''.

    ../../../../tmp/tmp5jo51od_.ts(14,43): error TS2304: Cannot find name ''unique_characters''.

    '
  timestamp: 1660333635
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let char of word) {\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                count++;\n            }\n   \
    \     }\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdstzyyf8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdstzyyf8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let unique_chars\
    \ = new Set(word);\n        if (unique_chars.size > max_count) {\n           \
    \ max_count = unique_chars.size;\n            max_word = word;\n        }\n  \
    \  }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwk_4v4it.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwk_4v4it.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = words[0];\n\
    \    let max_unique_chars: number = 0;\n    for (let word of words) {\n      \
    \  let unique_chars: number = 0;\n        for (let char of word) {\n         \
    \   if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuz25yfn5.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuz25yfn5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ unique_chars: string[] = [];\n        for (let char of word) {\n           \
    \ if (unique_chars.indexOf(char) === -1) {\n                unique_chars.push(char);\n\
    \            }\n        }\n        if (unique_chars.length > max_count) {\n  \
    \          max_count = unique_chars.length;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkilxm_of.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkilxm_of.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word.indexOf(word[i]) === i) {\n                count++;\n        \
    \    }\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9xugd9b8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xugd9b8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word: string = \"\"\
    ;\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i])\
    \ === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n \
    \     max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpb6p3dy6o.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb6p3dy6o.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333631
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i])\
    \ === i) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_gl3ycw3.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_gl3ycw3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_unique_chars = 0;\n  for (let word of words) {\n    let unique_chars\
    \ = 0;\n    for (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n        unique_chars++;\n      }\n    }\n    if (unique_chars > max_unique_chars)\
    \ {\n      max_unique_chars = unique_chars;\n      max_word = word;\n    }\n \
    \ }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5mftihdz.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5mftihdz.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333627
- exit_code: 2
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = count_unique_chars(max_word);\n    for (let i = 1; i < words.length;\
    \ i++) {\n        let count = count_unique_chars(words[i]);\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp8f1yqi1h.ts(13,21): error TS2304: Cannot find name ''count_unique_chars''.

    ../../../../tmp/tmp8f1yqi1h.ts(15,21): error TS2304: Cannot find name ''count_unique_chars''.

    '
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n \
    \ let max_count = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word\
    \ = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n\
    \      let char = word[j];\n      if (word.indexOf(char) === j) {\n        count++;\n\
    \      }\n    }\n    if (count > max_count) {\n      max_count = count;\n    \
    \  max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpia7lbofo.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpia7lbofo.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333635
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word: string = \"\"\
    ;\n    let max_count: number = 0;\n    for (let word of words) {\n        let\
    \ count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word.indexOf(word[i]) === i) {\n                count++;\n        \
    \    }\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9xugd9b8.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9xugd9b8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333623
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n\
    \    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                count += 1;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_a8d977b.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_a8d977b.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
- exit_code: 1
  program: "//Write a function that accepts a list of strings.\n// The list contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord\
    \ = \"\";\n  for (let word of words) {\n    let uniqueChars = new Set(word);\n\
    \    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord\
    \ = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpevimg9az.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpevimg9az.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333636
