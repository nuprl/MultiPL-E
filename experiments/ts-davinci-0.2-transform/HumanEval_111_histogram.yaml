name: HumanEval_111_histogram
language: ts
prompt: "//Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
  \ count.\n// If several letters have the same occurrence, return all of them.\n\
  // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n//\
  \ >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c\
  \ a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n\
  // >>> histogram(\"\")\n// {}\nfunction histogram(test: string): {[key: string]:\
  \ number} {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"\
  ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2,\
  \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1,\
  \ \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
  : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\":\
  \ 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
  \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
  a\": 1});\n}\n\ntest();"
completions: ["    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(\" \");\n    let max: number = 0;\n    for (let i: number = 0;\
    \ i < letters.length; i++) {\n        if (result[letters[i]] === undefined) {\n\
    \            result[letters[i]] = 1;\n        } else {\n            result[letters[i]]++;\n\
    \        }\n        if (result[letters[i]] > max) {\n            max = result[letters[i]];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] < max)\
    \ {\n            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let words = test.split(\" \"\
    );\n    for (let i = 0; i < words.length; i++) {\n        if (result[words[i]])\
    \ {\n            result[words[i]]++;\n        } else {\n            result[words[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ letter of letters) {\n        if (result[letter] === undefined) {\n        \
    \    result[letter] = 1;\n        } else {\n            result[letter] += 1;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let split = test.split(\" \");\n    for (let i = 0; i < split.length;\
    \ i++) {\n        if (result[split[i]]) {\n            result[split[i]]++;\n \
    \       } else {\n            result[split[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    const result: {[key: string]: number} = {};\n    const arr\
    \ = test.split(\" \");\n    for (let i = 0; i < arr.length; i++) {\n        if\
    \ (result[arr[i]]) {\n            result[arr[i]]++;\n        } else {\n      \
    \      result[arr[i]] = 1;\n        }\n    }\n    return result;\n}\n", "    let\
    \ dict = {};\n    let max = 0;\n    let maxKeys = [];\n    let words = test.split(\"\
    \ \");\n    for (let i = 0; i < words.length; i++) {\n        if (dict[words[i]])\
    \ {\n            dict[words[i]]++;\n        } else {\n            dict[words[i]]\
    \ = 1;\n        }\n        if (dict[words[i]] > max) {\n            max = dict[words[i]];\n\
    \            maxKeys = [words[i]];\n        } else if (dict[words[i]] === max)\
    \ {\n            maxKeys.push(words[i]);\n        }\n    }\n    for (let key in\
    \ dict) {\n        if (maxKeys.indexOf(key) === -1) {\n            delete dict[key];\n\
    \        }\n    }\n    return dict;\n}\n", "    const result: {[key: string]:\
    \ number} = {};\n    const words = test.split(' ');\n    for (const word of words)\
    \ {\n        if (result[word]) {\n            result[word]++;\n        } else\
    \ {\n            result[word] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let histogram: {[key: string]: number} = {};\n    let maxCount: number = 0;\n\
    \    let maxLetters: string[] = [];\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let i: number = 0; i < letters.length; i++) {\n        if (letters[i]\
    \ in histogram) {\n            histogram[letters[i]] += 1;\n        } else {\n\
    \            histogram[letters[i]] = 1;\n        }\n        if (histogram[letters[i]]\
    \ > maxCount) {\n            maxCount = histogram[letters[i]];\n            maxLetters\
    \ = [letters[i]];\n        } else if (histogram[letters[i]] === maxCount) {\n\
    \            maxLetters.push(letters[i]);\n        }\n    }\n    for (let i: number\
    \ = 0; i < maxLetters.length; i++) {\n        histogram[maxLetters[i]] = maxCount;\n\
    \    }\n    return histogram;\n}\n", "    const result: {[key: string]: number}\
    \ = {};\n    const letters: string[] = test.split(\" \");\n    for (const letter\
    \ of letters) {\n        if (result[letter]) {\n            result[letter]++;\n\
    \        } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n       \
    \ if (result[words[i]]) {\n            result[words[i]]++;\n        } else {\n\
    \            result[words[i]] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let splitTest = test.split(\"\
    \ \");\n    for (let i = 0; i < splitTest.length; i++) {\n        if (result[splitTest[i]])\
    \ {\n            result[splitTest[i]] += 1;\n        } else {\n            result[splitTest[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ i = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n     \
    \       result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ i = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n     \
    \       result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ i = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n     \
    \       result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ letter of letters) {\n        if (result[letter] == undefined) {\n         \
    \   result[letter] = 1;\n        } else {\n            result[letter] += 1;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let splitTest = test.split(\" \");\n    for (let i = 0; i\
    \ < splitTest.length; i++) {\n        if (result[splitTest[i]]) {\n          \
    \  result[splitTest[i]]++;\n        } else {\n            result[splitTest[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "  let result: {[key: string]:\
    \ number} = {};\n  let arr = test.split(\" \");\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (result[arr[i]]) {\n      result[arr[i]]++;\n    } else {\n \
    \     result[arr[i]] = 1;\n    }\n  }\n  return result;\n}\n", "    let result:\
    \ {[key: string]: number} = {};\n    let letters: string[] = test.split(\" \"\
    );\n    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let dict: {[key: string]: number} = {};\n    let maxCount: number =\
    \ 0;\n    let maxLetter: string = \"\";\n    let maxLetters: string[] = [];\n\
    \    let letters: string[] = test.split(\" \");\n    for (let i: number = 0; i\
    \ < letters.length; i++) {\n        if (dict[letters[i]]) {\n            dict[letters[i]]++;\n\
    \        } else {\n            dict[letters[i]] = 1;\n        }\n        if (dict[letters[i]]\
    \ > maxCount) {\n            maxCount = dict[letters[i]];\n            maxLetter\
    \ = letters[i];\n            maxLetters = [maxLetter];\n        } else if (dict[letters[i]]\
    \ === maxCount) {\n            maxLetters.push(letters[i]);\n        }\n    }\n\
    \    if (maxCount === 0) {\n        return {};\n    }\n    let result: {[key:\
    \ string]: number} = {};\n    for (let i: number = 0; i < maxLetters.length; i++)\
    \ {\n        result[maxLetters[i]] = maxCount;\n    }\n    return result;\n}\n",
  "    const result: {[key: string]: number} = {};\n    const testArray = test.split(\"\
    \ \");\n    for (const letter of testArray) {\n        if (result[letter]) {\n\
    \            result[letter] += 1;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(\" \");\n    for (let letter of letters) {\n        if (result[letter]\
    \ === undefined) {\n            result[letter] = 1;\n        } else {\n      \
    \      result[letter]++;\n        }\n    }\n    return result;\n}\n", "    let\
    \ result: {[key: string]: number} = {};\n    let letters = test.split(\" \");\n\
    \    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]]\
    \ === undefined) {\n            result[letters[i]] = 1;\n        } else {\n  \
    \          result[letters[i]] += 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let letter of letters) {\n        if (result[letter] === undefined)\
    \ {\n            result[letter] = 1;\n        } else {\n            result[letter]++;\n\
    \        }\n    }\n    return result;\n}\n", "    let dict: {[key: string]: number}\
    \ = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    let\
    \ words: string[] = test.split(\" \");\n    for (let word of words) {\n      \
    \  if (word in dict) {\n            dict[word] += 1;\n        } else {\n     \
    \       dict[word] = 1;\n        }\n        if (dict[word] > max) {\n        \
    \    max = dict[word];\n            maxLetters = [word];\n        } else if (dict[word]\
    \ === max) {\n            maxLetters.push(word);\n        }\n    }\n    let result:\
    \ {[key: string]: number} = {};\n    for (let letter of maxLetters) {\n      \
    \  result[letter] = max;\n    }\n    return result;\n}\n", "    let result: {[key:\
    \ string]: number} = {};\n    let words = test.split(\" \");\n    for (let word\
    \ of words) {\n        if (result[word] === undefined) {\n            result[word]\
    \ = 1;\n        } else {\n            result[word] += 1;\n        }\n    }\n \
    \   return result;\n}\n", "    let histo: {[key: string]: number} = {};\n    let\
    \ words = test.split(' ');\n    for (let word of words) {\n        if (histo[word])\
    \ {\n            histo[word]++;\n        } else {\n            histo[word] = 1;\n\
    \        }\n    }\n    return histo;\n}\n", "    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]] += 1;\n\
    \        } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let testArray:\
    \ string[] = test.split(\" \");\n    let max: number = 0;\n    for (let i: number\
    \ = 0; i < testArray.length; i++) {\n        if (result[testArray[i]]) {\n   \
    \         result[testArray[i]]++;\n        } else {\n            result[testArray[i]]\
    \ = 1;\n        }\n        if (result[testArray[i]] > max) {\n            max\
    \ = result[testArray[i]];\n        }\n    }\n    for (let key in result) {\n \
    \       if (result[key] < max) {\n            delete result[key];\n        }\n\
    \    }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let words = test.split(\" \");\n    for (let word of words) {\n        if\
    \ (result[word] === undefined) {\n            result[word] = 1;\n        } else\
    \ {\n            result[word] += 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let arr = test.split(\" \");\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n \
    \           result[arr[i]] += 1;\n        } else {\n            result[arr[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    const result: {[key:\
    \ string]: number} = {};\n    const letters = test.split(' ');\n    for (const\
    \ letter of letters) {\n        if (result[letter]) {\n            result[letter]++;\n\
    \        } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let word of words) {\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word] += 1;\n        }\n    }\n    return result;\n}\n", "    let\
    \ result: {[key: string]: number} = {};\n    let array = test.split(\" \");\n\
    \    for (let i = 0; i < array.length; i++) {\n        if (result[array[i]]) {\n\
    \            result[array[i]]++;\n        } else {\n            result[array[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i] in result) {\n            result[words[i]] += 1;\n\
    \        } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let word of words) {\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word] += 1;\n        }\n    }\n    return result;\n}\n", "    let\
    \ result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    let max: number = 0;\n    for (let i: number = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n        if\
    \ (result[letters[i]] > max) {\n            max = result[letters[i]];\n      \
    \  }\n    }\n    for (let key in result) {\n        if (result[key] < max) {\n\
    \            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let arr = test.split(\" \");\n\
    \    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]])\
    \ {\n            result[arr[i]]++;\n        } else {\n            result[arr[i]]\
    \ = 1;\n        }\n        if (result[arr[i]] > max) {\n            max = result[arr[i]];\n\
    \        }\n    }\n    let res: {[key: string]: number} = {};\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        if (result[arr[i]] === max) {\n       \
    \     res[arr[i]] = max;\n        }\n    }\n    return res;\n}\n", "    const\
    \ result: {[key: string]: number} = {};\n    const letters: string[] = test.split('\
    \ ');\n    letters.forEach((letter: string) => {\n        if (result[letter])\
    \ {\n            result[letter]++;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    });\n    return result;\n}\n", "    let result: {[key:\
    \ string]: number} = {};\n    let letters: string[] = test.split(\" \");\n   \
    \ let max: number = 0;\n    for (let i: number = 0; i < letters.length; i++) {\n\
    \        if (result[letters[i]]) {\n            result[letters[i]]++;\n      \
    \  } else {\n            result[letters[i]] = 1;\n        }\n        if (result[letters[i]]\
    \ > max) {\n            max = result[letters[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n       \
    \ if (result[words[i]]) {\n            result[words[i]]++;\n        } else {\n\
    \            result[words[i]] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let words = test.split(\" \"\
    );\n    for (let i = 0; i < words.length; i++) {\n        if (result[words[i]])\
    \ {\n            result[words[i]]++;\n        } else {\n            result[words[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]] += 1;\n  \
    \      } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n       \
    \ if (result[words[i]]) {\n            result[words[i]]++;\n        } else {\n\
    \            result[words[i]] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let arr: string[] = test.split(\"\
    \ \");\n    let max: number = 0;\n    for (let i: number = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]] === undefined) {\n            result[arr[i]]\
    \ = 1;\n        } else {\n            result[arr[i]]++;\n        }\n        if\
    \ (result[arr[i]] > max) {\n            max = result[arr[i]];\n        }\n   \
    \ }\n    for (let key in result) {\n        if (result[key] !== max) {\n     \
    \       delete result[key];\n        }\n    }\n    return result;\n}\n", "   \
    \ let result: {[key: string]: number} = {};\n    let words = test.split(\" \"\
    );\n    for (let word of words) {\n        if (result[word] === undefined) {\n\
    \            result[word] = 1;\n        } else {\n            result[word]++;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n\
    \            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(\" \");\n    for (let word of words)\
    \ {\n        if (result[word] === undefined) {\n            result[word] = 1;\n\
    \        } else {\n            result[word]++;\n        }\n    }\n    return result;\n\
    }\n", "    const histogram: {[key: string]: number} = {};\n    const letters =\
    \ test.split(\" \");\n    for (const letter of letters) {\n        if (histogram[letter])\
    \ {\n            histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "    let dict: {[key: string]:\
    \ number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n \
    \   test.split(\" \").forEach(function(key) {\n        if (key in dict) {\n  \
    \          dict[key] += 1;\n        } else {\n            dict[key] = 1;\n   \
    \     }\n        if (dict[key] > max) {\n            max = dict[key];\n      \
    \      maxKeys = [key];\n        } else if (dict[key] === max) {\n           \
    \ maxKeys.push(key);\n        }\n    });\n    let result: {[key: string]: number}\
    \ = {};\n    maxKeys.forEach(function(key) {\n        result[key] = max;\n   \
    \ });\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let arr: string[] = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(\" \");\n    for (let i = 0; i < letters.length; i++) {\n     \
    \   if (result[letters[i]]) {\n            result[letters[i]]++;\n        } else\
    \ {\n            result[letters[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let arr = test.split(\"\
    \ \");\n    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]])\
    \ {\n            result[arr[i]]++;\n        } else {\n            result[arr[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let split = test.split(\" \");\n    for (let i = 0; i < split.length;\
    \ i++) {\n        if (result[split[i]]) {\n            result[split[i]]++;\n \
    \       } else {\n            result[split[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let arr:\
    \ string[] = test.split(\" \");\n    let max: number = 0;\n    for (let i: number\
    \ = 0; i < arr.length; i++) {\n        if (result[arr[i]] === undefined) {\n \
    \           result[arr[i]] = 1;\n        } else {\n            result[arr[i]]++;\n\
    \        }\n        if (result[arr[i]] > max) {\n            max = result[arr[i]];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] < max)\
    \ {\n            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let\
    \ maxKey: string = '';\n    let maxKeys: string[] = [];\n    let words: string[]\
    \ = test.split(' ');\n    for (let word of words) {\n        if (dict[word] ===\
    \ undefined) {\n            dict[word] = 1;\n        } else {\n            dict[word]\
    \ += 1;\n        }\n        if (dict[word] > max) {\n            max = dict[word];\n\
    \            maxKey = word;\n            maxKeys = [maxKey];\n        } else if\
    \ (dict[word] === max) {\n            maxKeys.push(word);\n        }\n    }\n\
    \    let result: {[key: string]: number} = {};\n    for (let key of maxKeys) {\n\
    \        result[key] = max;\n    }\n    return result;\n}\n", "    let dict: {[key:\
    \ string]: number} = {};\n    let max: number = 0;\n    let maxKey: string = \"\
    \";\n    let maxKeys: string[] = [];\n    let testArr: string[] = test.split(\"\
    \ \");\n    for (let i: number = 0; i < testArr.length; i++) {\n        if (dict[testArr[i]]\
    \ === undefined) {\n            dict[testArr[i]] = 1;\n        } else {\n    \
    \        dict[testArr[i]]++;\n        }\n        if (dict[testArr[i]] > max) {\n\
    \            max = dict[testArr[i]];\n            maxKey = testArr[i];\n     \
    \       maxKeys = [maxKey];\n        } else if (dict[testArr[i]] === max) {\n\
    \            maxKeys.push(testArr[i]);\n        }\n    }\n    for (let key in\
    \ dict) {\n        if (maxKeys.indexOf(key) === -1) {\n            delete dict[key];\n\
    \        }\n    }\n    return dict;\n}\n", "    const result: {[key: string]:\
    \ number} = {};\n    const words = test.split(' ');\n    for (const word of words)\
    \ {\n        if (result[word]) {\n            result[word]++;\n        } else\
    \ {\n            result[word] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let testArray: string[] = test.split(\"\
    \ \");\n    let max: number = 0;\n    for (let i: number = 0; i < testArray.length;\
    \ i++) {\n        if (result[testArray[i]]) {\n            result[testArray[i]]++;\n\
    \        } else {\n            result[testArray[i]] = 1;\n        }\n        if\
    \ (result[testArray[i]] > max) {\n            max = result[testArray[i]];\n  \
    \      }\n    }\n    for (let key in result) {\n        if (result[key] < max)\
    \ {\n            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let letter of letters) {\n        if (result[letter] === undefined)\
    \ {\n            result[letter] = 1;\n        } else {\n            result[letter]\
    \ += 1;\n        }\n    }\n    return result;\n}\n", "    let histogram: {[key:\
    \ string]: number} = {};\n    let letters: string[] = test.split(\" \");\n   \
    \ for (let letter of letters) {\n        if (histogram[letter]) {\n          \
    \  histogram[letter] += 1;\n        } else {\n            histogram[letter] =\
    \ 1;\n        }\n    }\n    return histogram;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters = test.split(\" \");\n    for (let i = 0; i <\
    \ letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]\
    \ += 1;\n        } else {\n            result[letters[i]] = 1;\n        }\n  \
    \  }\n    return result;\n}\n", "    let histogram: {[key: string]: number} =\
    \ {};\n    test.split(\" \").forEach(letter => {\n        if (histogram[letter])\
    \ {\n            histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    });\n    return histogram;\n}\n", "    let result: {[key:\
    \ string]: number} = {};\n    let letters: string[] = test.split(\" \");\n   \
    \ for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]] ===\
    \ undefined) {\n            result[letters[i]] = 1;\n        } else {\n      \
    \      result[letters[i]]++;\n        }\n    }\n    return result;\n}\n", "  \
    \  let histogram: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let letter of letters) {\n        if (letter in histogram) {\n\
    \            histogram[letter] += 1;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "    let result: {[key:\
    \ string]: number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let word of words) {\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word] += 1;\n        }\n    }\n    return result;\n}\n", "    let\
    \ result: {[key: string]: number} = {};\n    let arr = test.split(\" \");\n  \
    \  for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n   \
    \         result[arr[i]]++;\n        } else {\n            result[arr[i]] = 1;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(\" \");\n    let max = 0;\n    for\
    \ (let i = 0; i < words.length; i++) {\n        if (result[words[i]]) {\n    \
    \        result[words[i]]++;\n        } else {\n            result[words[i]] =\
    \ 1;\n        }\n        if (result[words[i]] > max) {\n            max = result[words[i]];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] < max)\
    \ {\n            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let testArray: string[] = test.split(\"\
    \ \");\n    let max: number = 0;\n    let maxLetter: string = \"\";\n    for (let\
    \ i: number = 0; i < testArray.length; i++) {\n        if (result[testArray[i]]\
    \ === undefined) {\n            result[testArray[i]] = 1;\n        } else {\n\
    \            result[testArray[i]]++;\n        }\n        if (result[testArray[i]]\
    \ > max) {\n            max = result[testArray[i]];\n            maxLetter = testArray[i];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] < max)\
    \ {\n            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let words = test.split(\" \"\
    );\n    for (let i = 0; i < words.length; i++) {\n        if (result[words[i]])\
    \ {\n            result[words[i]]++;\n        } else {\n            result[words[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    const result: {[key:\
    \ string]: number} = {};\n    const words = test.split(' ');\n    for (const word\
    \ of words) {\n        if (result[word]) {\n            result[word] += 1;\n \
    \       } else {\n            result[word] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n       \
    \ if (result[words[i]]) {\n            result[words[i]]++;\n        } else {\n\
    \            result[words[i]] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n\
    \            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ letter of letters) {\n        if (result[letter] === undefined) {\n        \
    \    result[letter] = 1;\n        } else {\n            result[letter]++;\n  \
    \      }\n    }\n    return result;\n}\n", "    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n", "    let dict: {[key: string]: number} = {};\n    let\
    \ max: number = 0;\n    let maxKeys: string[] = [];\n    let split: string[] =\
    \ test.split(\" \");\n    for (let i = 0; i < split.length; i++) {\n        if\
    \ (dict[split[i]]) {\n            dict[split[i]]++;\n        } else {\n      \
    \      dict[split[i]] = 1;\n        }\n        if (dict[split[i]] > max) {\n \
    \           max = dict[split[i]];\n            maxKeys = [split[i]];\n       \
    \ } else if (dict[split[i]] === max) {\n            maxKeys.push(split[i]);\n\
    \        }\n    }\n    for (let key in dict) {\n        if (maxKeys.indexOf(key)\
    \ === -1) {\n            delete dict[key];\n        }\n    }\n    return dict;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(' ');\n    for (let letter of letters) {\n        if (result[letter]\
    \ === undefined) {\n            result[letter] = 1;\n        } else {\n      \
    \      result[letter] += 1;\n        }\n    }\n    return result;\n}\n", "   \
    \ let result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let dict: {[key: string]:\
    \ number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n \
    \   let words: string[] = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i] in dict) {\n            dict[words[i]] += 1;\n\
    \        } else {\n            dict[words[i]] = 1;\n        }\n        if (dict[words[i]]\
    \ > max) {\n            max = dict[words[i]];\n            maxKeys = [words[i]];\n\
    \        } else if (dict[words[i]] === max) {\n            maxKeys.push(words[i]);\n\
    \        }\n    }\n    for (let key in dict) {\n        if (maxKeys.indexOf(key)\
    \ === -1) {\n            delete dict[key];\n        }\n    }\n    return dict;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(\" \");\n    for (let i = 0; i < letters.length; i++) {\n     \
    \   if (result[letters[i]]) {\n            result[letters[i]] += 1;\n        }\
    \ else {\n            result[letters[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let arr = test.split(\"\
    \ \");\n    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]])\
    \ {\n            result[arr[i]] += 1;\n        } else {\n            result[arr[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let letters:\
    \ string[] = test.split(\" \");\n    for (let i = 0; i < letters.length; i++)\
    \ {\n        if (result[letters[i]]) {\n            result[letters[i]] += 1;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n", "    let result: {[key: string]: number} = {};\n    let\
    \ letters: string[] = test.split(\" \");\n    for (let letter of letters) {\n\
    \        if (result[letter] === undefined) {\n            result[letter] = 1;\n\
    \        } else {\n            result[letter] += 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    const result: {[key: string]: number} = {};\n    const letters:\
    \ string[] = test.split(\" \");\n    for (const letter of letters) {\n       \
    \ if (result[letter]) {\n            result[letter]++;\n        } else {\n   \
    \         result[letter] = 1;\n        }\n    }\n    return result;\n}\n", " \
    \   let histogram: {[key: string]: number} = {};\n    let letters: string[] =\
    \ test.split(\" \");\n    let max: number = 0;\n    for (let letter of letters)\
    \ {\n        if (histogram[letter] === undefined) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter]++;\n        }\n      \
    \  if (histogram[letter] > max) {\n            max = histogram[letter];\n    \
    \    }\n    }\n    for (let key in histogram) {\n        if (histogram[key] <\
    \ max) {\n            delete histogram[key];\n        }\n    }\n    return histogram;\n\
    }\n", "    const result: {[key: string]: number} = {};\n    const letters: string[]\
    \ = test.split(\" \");\n    for (const letter of letters) {\n        if (result[letter])\
    \ {\n            result[letter]++;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let array: string[] = test.split(\" \");\n    for (let i\
    \ = 0; i < array.length; i++) {\n        if (result[array[i]]) {\n           \
    \ result[array[i]]++;\n        } else {\n            result[array[i]] = 1;\n \
    \       }\n    }\n    return result;\n}\n", "    let letters: string[] = test.split(\"\
    \ \");\n    let letterCount: {[key: string]: number} = {};\n    for (let letter\
    \ of letters) {\n        if (letterCount[letter]) {\n            letterCount[letter]++;\n\
    \        } else {\n            letterCount[letter] = 1;\n        }\n    }\n  \
    \  return letterCount;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let words = test.split(\" \");\n    for (let word of words) {\n        if\
    \ (result[word] === undefined) {\n            result[word] = 1;\n        } else\
    \ {\n            result[word] += 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(' ');\n    let max = 0;\n    for (let\
    \ word of words) {\n        if (result[word] === undefined) {\n            result[word]\
    \ = 1;\n        } else {\n            result[word]++;\n        }\n        if (result[word]\
    \ > max) {\n            max = result[word];\n        }\n    }\n    for (let key\
    \ in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n", "    const hist: {[key: string]:\
    \ number} = {};\n    for (const c of test.split(\" \")) {\n        if (hist[c]\
    \ === undefined) {\n            hist[c] = 1;\n        } else {\n            hist[c]\
    \ += 1;\n        }\n    }\n    return hist;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(' ');\n    let max: number = 0;\n    for (let i: number = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n        if\
    \ (result[letters[i]] > max) {\n            max = result[letters[i]];\n      \
    \  }\n    }\n    for (let key in result) {\n        if (result[key] < max) {\n\
    \            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let histogram: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let letter of letters) {\n        if (histogram[letter]) {\n\
    \            histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "    let result: {[key:\
    \ string]: number} = {};\n    let letters: string[] = test.split(\" \");\n   \
    \ for (let letter of letters) {\n        if (result[letter] === undefined) {\n\
    \            result[letter] = 1;\n        } else {\n            result[letter]++;\n\
    \        }\n    }\n    return result;\n}\n", "    let histogram: {[key: string]:\
    \ number} = {};\n    let maxCount: number = 0;\n    let maxLetters: string[] =\
    \ [];\n    test.split(\" \").forEach(letter => {\n        if (histogram[letter])\
    \ {\n            histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n        if (histogram[letter] > maxCount) {\n            maxCount\
    \ = histogram[letter];\n            maxLetters = [letter];\n        } else if\
    \ (histogram[letter] === maxCount) {\n            maxLetters.push(letter);\n \
    \       }\n    });\n    let result: {[key: string]: number} = {};\n    maxLetters.forEach(letter\
    \ => {\n        result[letter] = maxCount;\n    });\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    let max: number = 0;\n    for (let i = 0; i < letters.length; i++)\
    \ {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n  \
    \      } else {\n            result[letters[i]] = 1;\n        }\n        if (result[letters[i]]\
    \ > max) {\n            max = result[letters[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n", "    const result: {[key: string]:\
    \ number} = {};\n    const letters: string[] = test.split(' ');\n    for (const\
    \ letter of letters) {\n        if (result[letter]) {\n            result[letter]\
    \ += 1;\n        } else {\n            result[letter] = 1;\n        }\n    }\n\
    \    return result;\n}\n", "    let result: {[key: string]: number} = {};\n  \
    \  let letters: string[] = test.split(\" \");\n    let max: number = 0;\n    for\
    \ (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] !== max) {\n            delete result[key];\n        }\n \
    \   }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let temp: string[] = test.split(\" \");\n    for (let i = 0; i < temp.length;\
    \ i++) {\n        if (result[temp[i]]) {\n            result[temp[i]]++;\n   \
    \     } else {\n            result[temp[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let histogram: {[key: string]: number} = {};\n    let maxCount:\
    \ number = 0;\n    let maxLetters: string[] = [];\n    let letters: string[] =\
    \ test.split(\" \");\n    for (let i: number = 0; i < letters.length; i++) {\n\
    \        if (letters[i] in histogram) {\n            histogram[letters[i]] +=\
    \ 1;\n        } else {\n            histogram[letters[i]] = 1;\n        }\n  \
    \      if (histogram[letters[i]] > maxCount) {\n            maxCount = histogram[letters[i]];\n\
    \            maxLetters = [letters[i]];\n        } else if (histogram[letters[i]]\
    \ === maxCount) {\n            maxLetters.push(letters[i]);\n        }\n    }\n\
    \    for (let i: number = 0; i < maxLetters.length; i++) {\n        histogram[maxLetters[i]]\
    \ = maxCount;\n    }\n    return histogram;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]] += 1;\n  \
    \      } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let arr:\
    \ string[] = test.split(\" \");\n    let max: number = 0;\n    for (let i: number\
    \ = 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n        if (result[arr[i]]\
    \ > max) {\n            max = result[arr[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n", "    let dict: {[key: string]: number}\
    \ = {};\n    let max: number = 0;\n    let max_keys: string[] = [];\n    let words:\
    \ string[] = test.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n\
    \        if (words[i] in dict) {\n            dict[words[i]] += 1;\n        }\
    \ else {\n            dict[words[i]] = 1;\n        }\n        if (dict[words[i]]\
    \ > max) {\n            max = dict[words[i]];\n            max_keys = [words[i]];\n\
    \        } else if (dict[words[i]] === max) {\n            max_keys.push(words[i]);\n\
    \        }\n    }\n    let result: {[key: string]: number} = {};\n    for (let\
    \ i = 0; i < max_keys.length; i++) {\n        result[max_keys[i]] = max;\n   \
    \ }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let count: number = 0;\n    let max: number = 0;\n    let maxLetter: string\
    \ = \"\";\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        for (let j: number = 0; j < letters.length;\
    \ j++) {\n            if (letters[i] === letters[j]) {\n                count++;\n\
    \            }\n        }\n        if (count > max) {\n            max = count;\n\
    \            maxLetter = letters[i];\n        }\n        result[letters[i]] =\
    \ count;\n        count = 0;\n    }\n    for (let i: number = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]] !== max) {\n            delete result[letters[i]];\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let letters:\
    \ string[] = test.split(' ');\n    for (let i = 0; i < letters.length; i++) {\n\
    \        if (result[letters[i]]) {\n            result[letters[i]]++;\n      \
    \  } else {\n            result[letters[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let word of words) {\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word] += 1;\n        }\n    }\n    return result;\n}\n", "    const\
    \ result: {[key: string]: number} = {};\n    const letters: string[] = test.split('\
    \ ');\n    for (const letter of letters) {\n        if (result[letter]) {\n  \
    \          result[letter]++;\n        } else {\n            result[letter] = 1;\n\
    \        }\n    }\n    return result;\n}\n", "    const result: {[key: string]:\
    \ number} = {};\n    const words = test.split(' ');\n    for (const word of words)\
    \ {\n        if (result[word]) {\n            result[word]++;\n        } else\
    \ {\n            result[word] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let split: string[] = test.split(\"\
    \ \");\n    for (let i = 0; i < split.length; i++) {\n        if (result[split[i]])\
    \ {\n            result[split[i]]++;\n        } else {\n            result[split[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr: string[] = test.split(\" \");\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    const result: {[key: string]: number} = {};\n    const arr\
    \ = test.split(' ');\n    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]])\
    \ {\n            result[arr[i]]++;\n        } else {\n            result[arr[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ letter of letters) {\n        if (result[letter] === undefined) {\n        \
    \    result[letter] = 1;\n        } else {\n            result[letter] += 1;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n\
    \            result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let testArr = test.split(\" \");\n    let max = 0;\n    for\
    \ (let i = 0; i < testArr.length; i++) {\n        if (result[testArr[i]]) {\n\
    \            result[testArr[i]]++;\n        } else {\n            result[testArr[i]]\
    \ = 1;\n        }\n        if (result[testArr[i]] > max) {\n            max =\
    \ result[testArr[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] !== max) {\n            delete result[key];\n        }\n \
    \   }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let testArray: string[] = test.split(\" \");\n    for (let i = 0; i < testArray.length;\
    \ i++) {\n        if (result[testArray[i]]) {\n            result[testArray[i]]\
    \ += 1;\n        } else {\n            result[testArray[i]] = 1;\n        }\n\
    \    }\n    return result;\n}\n", "    let hist: {[key: string]: number} = {};\n\
    \    let max: number = 0;\n    let maxKeys: string[] = [];\n    let words: string[]\
    \ = test.split(\" \");\n    for (let word of words) {\n        if (hist[word]\
    \ === undefined) {\n            hist[word] = 1;\n        } else {\n          \
    \  hist[word] += 1;\n        }\n        if (hist[word] > max) {\n            max\
    \ = hist[word];\n            maxKeys = [word];\n        } else if (hist[word]\
    \ === max) {\n            maxKeys.push(word);\n        }\n    }\n    let result:\
    \ {[key: string]: number} = {};\n    for (let key of maxKeys) {\n        result[key]\
    \ = max;\n    }\n    return result;\n}\n", "    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let dict: {[key: string]: number} = {};\n    let max: number\
    \ = 0;\n    let maxLetters: string[] = [];\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let i: number = 0; i < letters.length; i++) {\n        if (letters[i]\
    \ in dict) {\n            dict[letters[i]] += 1;\n        } else {\n         \
    \   dict[letters[i]] = 1;\n        }\n        if (dict[letters[i]] > max) {\n\
    \            max = dict[letters[i]];\n            maxLetters = [letters[i]];\n\
    \        } else if (dict[letters[i]] === max) {\n            maxLetters.push(letters[i]);\n\
    \        }\n    }\n    for (let i: number = 0; i < maxLetters.length; i++) {\n\
    \        dict[maxLetters[i]] = max;\n    }\n    return dict;\n}\n", "    let result:\
    \ {[key: string]: number} = {};\n    let arr = test.split(\" \");\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let word of words) {\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word] += 1;\n        }\n    }\n    return result;\n}\n", "    let\
    \ result: {[key: string]: number} = {};\n    let arr = test.split(\" \");\n  \
    \  for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n   \
    \         result[arr[i]]++;\n        } else {\n            result[arr[i]] = 1;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(\" \");\n    for (let i: number = 0; i < letters.length; i++) {\n\
    \        if (result[letters[i]] === undefined) {\n            result[letters[i]]\
    \ = 1;\n        } else {\n            result[letters[i]]++;\n        }\n    }\n\
    \    return result;\n}\n", "    let result: {[key: string]: number} = {};\n  \
    \  let splitTest = test.split(\" \");\n    for (let i = 0; i < splitTest.length;\
    \ i++) {\n        if (result[splitTest[i]]) {\n            result[splitTest[i]]\
    \ += 1;\n        } else {\n            result[splitTest[i]] = 1;\n        }\n\
    \    }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let testArr = test.split(\" \");\n    let max = 0;\n    for (let i = 0; i\
    \ < testArr.length; i++) {\n        if (result[testArr[i]]) {\n            result[testArr[i]]++;\n\
    \        } else {\n            result[testArr[i]] = 1;\n        }\n        if\
    \ (result[testArr[i]] > max) {\n            max = result[testArr[i]];\n      \
    \  }\n    }\n    for (let key in result) {\n        if (result[key] < max) {\n\
    \            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let words = test.split(' ');\n\
    \    for (let i = 0; i < words.length; i++) {\n        if (result[words[i]]) {\n\
    \            result[words[i]]++;\n        } else {\n            result[words[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(' ');\n    for (let word of words)\
    \ {\n        if (result[word]) {\n            result[word]++;\n        } else\
    \ {\n            result[word] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let words = test.split(' ');\n\
    \    for (let word of words) {\n        if (result[word]) {\n            result[word]++;\n\
    \        } else {\n            result[word] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n       \
    \ if (words[i] in result) {\n            result[words[i]] += 1;\n        } else\
    \ {\n            result[words[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(' ');\n    for (let letter of letters) {\n        if (result[letter]\
    \ === undefined) {\n            result[letter] = 1;\n        } else {\n      \
    \      result[letter] += 1;\n        }\n    }\n    return result;\n}\n", "   \
    \ let result: {[key: string]: number} = {};\n    let testArray: string[] = test.split(\"\
    \ \");\n    let max: number = 0;\n    for (let i: number = 0; i < testArray.length;\
    \ i++) {\n        if (result[testArray[i]] === undefined) {\n            result[testArray[i]]\
    \ = 1;\n        } else {\n            result[testArray[i]]++;\n        }\n   \
    \     if (result[testArray[i]] > max) {\n            max = result[testArray[i]];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] < max)\
    \ {\n            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let words = test.split(\" \"\
    );\n    let max = 0;\n    for (let word of words) {\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word]++;\n        }\n        if (result[word] > max) {\n         \
    \   max = result[word];\n        }\n    }\n    for (let key in result) {\n   \
    \     if (result[key] < max) {\n            delete result[key];\n        }\n \
    \   }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let letters: string[] = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]] +=\
    \ 1;\n        } else {\n            result[letters[i]] = 1;\n        }\n    }\n\
    \    return result;\n}\n", "    let result: {[key: string]: number} = {};\n  \
    \  let words = test.split(\" \");\n    for (let word of words) {\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word]++;\n        }\n    }\n    return result;\n}\n", "    let result:\
    \ {[key: string]: number} = {};\n    let words = test.split(\" \");\n    for (let\
    \ word of words) {\n        if (result[word] === undefined) {\n            result[word]\
    \ = 1;\n        } else {\n            result[word]++;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let arr =\
    \ test.split(\" \");\n    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]])\
    \ {\n            result[arr[i]] += 1;\n        } else {\n            result[arr[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(\" \");\n    for (let word of words)\
    \ {\n        if (result[word] === undefined) {\n            result[word] = 1;\n\
    \        } else {\n            result[word] += 1;\n        }\n    }\n    return\
    \ result;\n}\n", "  let result: {[key: string]: number} = {};\n  let letters:\
    \ string[] = test.split(\" \");\n  for (let i = 0; i < letters.length; i++) {\n\
    \    let letter: string = letters[i];\n    if (result[letter] === undefined) {\n\
    \      result[letter] = 1;\n    } else {\n      result[letter]++;\n    }\n  }\n\
    \  return result;\n}\n", "    let result: {[key: string]: number} = {};\n    let\
    \ letters: string[] = test.split(\" \");\n    let max: number = 0;\n    for (let\
    \ i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n\
    \            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let testArr = test.split(\" \");\n    for (let i = 0; i < testArr.length;\
    \ i++) {\n        if (result[testArr[i]]) {\n            result[testArr[i]]++;\n\
    \        } else {\n            result[testArr[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n", "    let result: {[key: string]: number} = {};\n    let\
    \ letters: string[] = test.split(\" \");\n    for (let i: number = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]] +=\
    \ 1;\n        } else {\n            result[letters[i]] = 1;\n        }\n    }\n\
    \    return result;\n}\n", "    let result: {[key: string]: number} = {};\n  \
    \  let letters: string[] = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]] +=\
    \ 1;\n        } else {\n            result[letters[i]] = 1;\n        }\n    }\n\
    \    return result;\n}\n", "    let result: {[key: string]: number} = {};\n  \
    \  let letters: string[] = test.split(\" \");\n    for (let letter of letters)\
    \ {\n        if (result[letter] === undefined) {\n            result[letter] =\
    \ 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n \
    \   return result;\n}\n", "    let result: {[key: string]: number} = {};\n   \
    \ let words = test.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n\
    \        if (result[words[i]]) {\n            result[words[i]]++;\n        } else\
    \ {\n            result[words[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let words = test.split(\"\
    \ \");\n    for (let word of words) {\n        if (result[word] === undefined)\
    \ {\n            result[word] = 1;\n        } else {\n            result[word]++;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let words = test.split('\
    \ ');\n    for (let word of words) {\n        if (result[word]) {\n          \
    \  result[word]++;\n        } else {\n            result[word] = 1;\n        }\n\
    \    }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let letters: string[] = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]] === undefined) {\n            result[letters[i]]\
    \ = 1;\n        } else {\n            result[letters[i]]++;\n        }\n    }\n\
    \    return result;\n}\n", "    let result: {[key: string]: number} = {};\n  \
    \  let words = test.split(\" \");\n    for (let word of words) {\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word] += 1;\n        }\n    }\n    return result;\n}\n", "    let\
    \ histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length;\
    \ i++) {\n        let char = test[i];\n        if (char !== \" \") {\n       \
    \     if (histogram[char]) {\n                histogram[char]++;\n           \
    \ } else {\n                histogram[char] = 1;\n            }\n        }\n \
    \   }\n    return histogram;\n}\n", "    let result: {[key: string]: number} =\
    \ {};\n    let arr: string[] = test.split(\" \");\n    for (let i: number = 0;\
    \ i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let dict: {[key: string]: number} = {};\n    let max: number\
    \ = 0;\n    let maxKey: string = \"\";\n    let maxKeys: string[] = [];\n    let\
    \ words: string[] = test.split(\" \");\n    for (let word of words) {\n      \
    \  if (word in dict) {\n            dict[word] += 1;\n        } else {\n     \
    \       dict[word] = 1;\n        }\n        if (dict[word] > max) {\n        \
    \    max = dict[word];\n            maxKey = word;\n            maxKeys = [maxKey];\n\
    \        } else if (dict[word] === max) {\n            maxKeys.push(word);\n \
    \       }\n    }\n    for (let key of maxKeys) {\n        dict[key] = max;\n \
    \   }\n    return dict;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let letters = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]] +=\
    \ 1;\n        } else {\n            result[letters[i]] = 1;\n        }\n    }\n\
    \    return result;\n}\n", "    let result: {[key: string]: number} = {};\n  \
    \  let letters: string[] = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n", "    let dict: {[key: string]: number} = {};\n    let\
    \ max: number = 0;\n    let maxKeys: string[] = [];\n    let keys: string[] =\
    \ test.split(\" \");\n    for (let i: number = 0; i < keys.length; i++) {\n  \
    \      if (dict[keys[i]] === undefined) {\n            dict[keys[i]] = 1;\n  \
    \      } else {\n            dict[keys[i]] += 1;\n        }\n        if (dict[keys[i]]\
    \ > max) {\n            max = dict[keys[i]];\n            maxKeys = [keys[i]];\n\
    \        } else if (dict[keys[i]] === max) {\n            maxKeys.push(keys[i]);\n\
    \        }\n    }\n    let result: {[key: string]: number} = {};\n    for (let\
    \ i: number = 0; i < maxKeys.length; i++) {\n        result[maxKeys[i]] = max;\n\
    \    }\n    return result;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let words = test.split(\" \");\n    for (let word of words) {\n        if\
    \ (result[word] === undefined) {\n            result[word] = 1;\n        } else\
    \ {\n            result[word]++;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let words = test.split(\" \"\
    );\n    for (let i = 0; i < words.length; i++) {\n        if (words[i] in result)\
    \ {\n            result[words[i]]++;\n        } else {\n            result[words[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters = test.split(\" \");\n    for (let i = 0; i <\
    \ letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n", "  let result: {[key: string]: number} = {};\n  let arr\
    \ = test.split(\" \");\n  for (let i = 0; i < arr.length; i++) {\n    if (result[arr[i]])\
    \ {\n      result[arr[i]]++;\n    } else {\n      result[arr[i]] = 1;\n    }\n\
    \  }\n  return result;\n}\n", "    const dict: {[key: string]: number} = {};\n\
    \    const words = test.split(\" \");\n    for (const word of words) {\n     \
    \   if (word in dict) {\n            dict[word] += 1;\n        } else {\n    \
    \        dict[word] = 1;\n        }\n    }\n    return dict;\n}\n", "    let histogram:\
    \ {[key: string]: number} = {};\n    let letters: string[] = test.split(\" \"\
    );\n    for (let letter of letters) {\n        if (histogram[letter]) {\n    \
    \        histogram[letter]++;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n    }\n    return histogram;\n}\n", "    let histogram: {[key:\
    \ string]: number} = {};\n    let maxCount: number = 0;\n    let maxLetter: string\
    \ = \"\";\n    for (let i = 0; i < test.length; i++) {\n        if (test[i] !==\
    \ \" \") {\n            if (histogram[test[i]]) {\n                histogram[test[i]]++;\n\
    \            } else {\n                histogram[test[i]] = 1;\n            }\n\
    \            if (histogram[test[i]] > maxCount) {\n                maxCount =\
    \ histogram[test[i]];\n                maxLetter = test[i];\n            }\n \
    \       }\n    }\n    return histogram;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let testArray: string[] = test.split(\" \");\n    let max:\
    \ number = 0;\n    let maxKey: string = \"\";\n    for (let i: number = 0; i <\
    \ testArray.length; i++) {\n        if (result[testArray[i]]) {\n            result[testArray[i]]++;\n\
    \        } else {\n            result[testArray[i]] = 1;\n        }\n        if\
    \ (result[testArray[i]] > max) {\n            max = result[testArray[i]];\n  \
    \          maxKey = testArray[i];\n        }\n    }\n    for (let key in result)\
    \ {\n        if (result[key] < max) {\n            delete result[key];\n     \
    \   }\n    }\n    return result;\n}\n", "    const histogram: {[key: string]:\
    \ number} = {};\n    const letters = test.split(' ');\n    for (const letter of\
    \ letters) {\n        if (histogram[letter]) {\n            histogram[letter]++;\n\
    \        } else {\n            histogram[letter] = 1;\n        }\n    }\n    return\
    \ histogram;\n}\n", "    let result: {[key: string]: number} = {};\n    let letters:\
    \ string[] = test.split(\" \");\n    for (let i: number = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n", "    let result: {[key: string]: number} = {};\n    let\
    \ letters: string[] = test.split(\" \");\n    for (let letter of letters) {\n\
    \        if (result[letter] === undefined) {\n            result[letter] = 1;\n\
    \        } else {\n            result[letter]++;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let word of words) {\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word]++;\n        }\n    }\n    return result;\n}\n", "    let result:\
    \ {[key: string]: number} = {};\n    let letters: string[] = test.split(\" \"\
    );\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let dict: {[key: string]: number} = {};\n    let max: number\
    \ = 0;\n    let maxKey: string = \"\";\n    let maxKeys: string[] = [];\n    let\
    \ words: string[] = test.split(\" \");\n    for (let i: number = 0; i < words.length;\
    \ i++) {\n        if (dict[words[i]] === undefined) {\n            dict[words[i]]\
    \ = 1;\n        } else {\n            dict[words[i]]++;\n        }\n        if\
    \ (dict[words[i]] > max) {\n            max = dict[words[i]];\n            maxKey\
    \ = words[i];\n            maxKeys = [maxKey];\n        } else if (dict[words[i]]\
    \ === max) {\n            maxKeys.push(words[i]);\n        }\n    }\n    let result:\
    \ {[key: string]: number} = {};\n    for (let i: number = 0; i < maxKeys.length;\
    \ i++) {\n        result[maxKeys[i]] = max;\n    }\n    return result;\n}\n",
  "    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let\
    \ max_keys: string[] = [];\n    let words: string[] = test.split(\" \");\n   \
    \ for (let i: number = 0; i < words.length; i++) {\n        if (words[i] in dict)\
    \ {\n            dict[words[i]] += 1;\n        } else {\n            dict[words[i]]\
    \ = 1;\n        }\n        if (dict[words[i]] > max) {\n            max = dict[words[i]];\n\
    \            max_keys = [words[i]];\n        } else if (dict[words[i]] === max)\
    \ {\n            max_keys.push(words[i]);\n        }\n    }\n    for (let key\
    \ in dict) {\n        if (max_keys.indexOf(key) === -1) {\n            delete\
    \ dict[key];\n        }\n    }\n    return dict;\n}\n", "    let histogram: {[key:\
    \ string]: number} = {};\n    let words = test.split(\" \");\n    for (let word\
    \ of words) {\n        if (histogram[word]) {\n            histogram[word] +=\
    \ 1;\n        } else {\n            histogram[word] = 1;\n        }\n    }\n \
    \   return histogram;\n}\n", "    let result: {[key: string]: number} = {};\n\
    \    let letters: string[] = test.split(\" \");\n    for (let letter of letters)\
    \ {\n        if (result[letter] == undefined) {\n            result[letter] =\
    \ 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n \
    \   return result;\n}\n", "    let result: {[key: string]: number} = {};\n   \
    \ let words = test.split(\" \");\n    for (let word of words) {\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word]++;\n        }\n    }\n    return result;\n}\n", "    let result:\
    \ {[key: string]: number} = {};\n    let words = test.split(\" \");\n    for (let\
    \ i = 0; i < words.length; i++) {\n        if (result[words[i]]) {\n         \
    \   result[words[i]]++;\n        } else {\n            result[words[i]] = 1;\n\
    \        }\n    }\n    return result;\n}\n", "    const result: {[key: string]:\
    \ number} = {};\n    const words = test.split(' ');\n    for (const word of words)\
    \ {\n        if (result[word]) {\n            result[word]++;\n        } else\
    \ {\n            result[word] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let letter of letters) {\n        if (result[letter] == undefined)\
    \ {\n            result[letter] = 1;\n        } else {\n            result[letter]\
    \ += 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(' ');\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    test.split(\"\
    \ \").forEach(function(letter) {\n        if (result[letter] === undefined) {\n\
    \            result[letter] = 1;\n        } else {\n            result[letter]\
    \ += 1;\n        }\n    });\n    return result;\n}\n", "    let result: {[key:\
    \ string]: number} = {};\n    let words = test.split(\" \");\n    for (let word\
    \ of words) {\n        if (result[word] === undefined) {\n            result[word]\
    \ = 1;\n        } else {\n            result[word] += 1;\n        }\n    }\n \
    \   return result;\n}\n", "    let result: {[key: string]: number} = {};\n   \
    \ let arr = test.split(\" \");\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (result[arr[i]]) {\n            result[arr[i]]++;\n        } else {\n\
    \            result[arr[i]] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let testArray: string[] = test.split(\"\
    \ \");\n    for (let i = 0; i < testArray.length; i++) {\n        if (result[testArray[i]])\
    \ {\n            result[testArray[i]]++;\n        } else {\n            result[testArray[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(\" \");\n    let max = 0;\n    for\
    \ (let i = 0; i < words.length; i++) {\n        if (result[words[i]]) {\n    \
    \        result[words[i]]++;\n        } else {\n            result[words[i]] =\
    \ 1;\n        }\n        if (result[words[i]] > max) {\n            max = result[words[i]];\n\
    \        }\n    }\n    let newResult: {[key: string]: number} = {};\n    for (let\
    \ key in result) {\n        if (result[key] === max) {\n            newResult[key]\
    \ = result[key];\n        }\n    }\n    return newResult;\n}\n", "    let result:\
    \ {[key: string]: number} = {};\n    let letters = test.split(\" \");\n    for\
    \ (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n\
    \            result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i] in result) {\n            result[words[i]] += 1;\n\
    \        } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let testArr\
    \ = test.split(\" \");\n    for (let i = 0; i < testArr.length; i++) {\n     \
    \   if (result[testArr[i]]) {\n            result[testArr[i]] += 1;\n        }\
    \ else {\n            result[testArr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(\" \");\n    for (let i: number = 0; i < letters.length; i++) {\n\
    \        if (result[letters[i]]) {\n            result[letters[i]] += 1;\n   \
    \     } else {\n            result[letters[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let letters:\
    \ string[] = test.split(\" \");\n    let max: number = 0;\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]] === undefined)\
    \ {\n            result[letters[i]] = 1;\n        } else {\n            result[letters[i]]++;\n\
    \        }\n        if (result[letters[i]] > max) {\n            max = result[letters[i]];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] < max)\
    \ {\n            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let letter of letters) {\n        if (result[letter] === undefined)\
    \ {\n            result[letter] = 1;\n        } else {\n            result[letter]\
    \ += 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr: string[] = test.split(\" \");\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let split\
    \ = test.split(\" \");\n    for (let i = 0; i < split.length; i++) {\n       \
    \ if (result[split[i]]) {\n            result[split[i]]++;\n        } else {\n\
    \            result[split[i]] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let words = test.split(\" \"\
    );\n    for (let i = 0; i < words.length; i++) {\n        if (result[words[i]])\
    \ {\n            result[words[i]] += 1;\n        } else {\n            result[words[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
