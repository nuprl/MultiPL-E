name: HumanEval_111_histogram
language: ts
prompt: "//Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
  \ count.\n// If several letters have the same occurrence, return all of them.\n\
  // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n//\
  \ >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c\
  \ a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n\
  // >>> histogram(\"\")\n// {}\nfunction histogram(test: string): {[key: string]:\
  \ number} {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"\
  ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2,\
  \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1,\
  \ \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
  : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\":\
  \ 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
  \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
  a\": 1});\n}\n\ntest();"
completions: ["    let result: {[key: string]: number} = {};\n    let letters: string[]\
    \ = test.split(\" \");\n    let max: number = 0;\n    for (let i: number = 0;\
    \ i < letters.length; i++) {\n        if (result[letters[i]] === undefined) {\n\
    \            result[letters[i]] = 1;\n        } else {\n            result[letters[i]]++;\n\
    \        }\n        if (result[letters[i]] > max) {\n            max = result[letters[i]];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] < max)\
    \ {\n            delete result[key];\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let words = test.split(\" \"\
    );\n    for (let i = 0; i < words.length; i++) {\n        if (result[words[i]])\
    \ {\n            result[words[i]]++;\n        } else {\n            result[words[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ letter of letters) {\n        if (result[letter] === undefined) {\n        \
    \    result[letter] = 1;\n        } else {\n            result[letter] += 1;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let split = test.split(\" \");\n    for (let i = 0; i < split.length;\
    \ i++) {\n        if (result[split[i]]) {\n            result[split[i]]++;\n \
    \       } else {\n            result[split[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    const result: {[key: string]: number} = {};\n    const arr\
    \ = test.split(\" \");\n    for (let i = 0; i < arr.length; i++) {\n        if\
    \ (result[arr[i]]) {\n            result[arr[i]]++;\n        } else {\n      \
    \      result[arr[i]] = 1;\n        }\n    }\n    return result;\n}\n", "    let\
    \ dict = {};\n    let max = 0;\n    let maxKeys = [];\n    let words = test.split(\"\
    \ \");\n    for (let i = 0; i < words.length; i++) {\n        if (dict[words[i]])\
    \ {\n            dict[words[i]]++;\n        } else {\n            dict[words[i]]\
    \ = 1;\n        }\n        if (dict[words[i]] > max) {\n            max = dict[words[i]];\n\
    \            maxKeys = [words[i]];\n        } else if (dict[words[i]] === max)\
    \ {\n            maxKeys.push(words[i]);\n        }\n    }\n    for (let key in\
    \ dict) {\n        if (maxKeys.indexOf(key) === -1) {\n            delete dict[key];\n\
    \        }\n    }\n    return dict;\n}\n", "    const result: {[key: string]:\
    \ number} = {};\n    const words = test.split(' ');\n    for (const word of words)\
    \ {\n        if (result[word]) {\n            result[word]++;\n        } else\
    \ {\n            result[word] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let histogram: {[key: string]: number} = {};\n    let maxCount: number = 0;\n\
    \    let maxLetters: string[] = [];\n    let letters: string[] = test.split(\"\
    \ \");\n    for (let i: number = 0; i < letters.length; i++) {\n        if (letters[i]\
    \ in histogram) {\n            histogram[letters[i]] += 1;\n        } else {\n\
    \            histogram[letters[i]] = 1;\n        }\n        if (histogram[letters[i]]\
    \ > maxCount) {\n            maxCount = histogram[letters[i]];\n            maxLetters\
    \ = [letters[i]];\n        } else if (histogram[letters[i]] === maxCount) {\n\
    \            maxLetters.push(letters[i]);\n        }\n    }\n    for (let i: number\
    \ = 0; i < maxLetters.length; i++) {\n        histogram[maxLetters[i]] = maxCount;\n\
    \    }\n    return histogram;\n}\n", "    const result: {[key: string]: number}\
    \ = {};\n    const letters: string[] = test.split(\" \");\n    for (const letter\
    \ of letters) {\n        if (result[letter]) {\n            result[letter]++;\n\
    \        } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let words\
    \ = test.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n       \
    \ if (result[words[i]]) {\n            result[words[i]]++;\n        } else {\n\
    \            result[words[i]] = 1;\n        }\n    }\n    return result;\n}\n",
  "    let result: {[key: string]: number} = {};\n    let splitTest = test.split(\"\
    \ \");\n    for (let i = 0; i < splitTest.length; i++) {\n        if (result[splitTest[i]])\
    \ {\n            result[splitTest[i]] += 1;\n        } else {\n            result[splitTest[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ i = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n     \
    \       result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ i = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n     \
    \       result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ i = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n     \
    \       result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ letter of letters) {\n        if (result[letter] == undefined) {\n         \
    \   result[letter] = 1;\n        } else {\n            result[letter] += 1;\n\
    \        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let splitTest = test.split(\" \");\n    for (let i = 0; i\
    \ < splitTest.length; i++) {\n        if (result[splitTest[i]]) {\n          \
    \  result[splitTest[i]]++;\n        } else {\n            result[splitTest[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "  let result: {[key: string]:\
    \ number} = {};\n  let arr = test.split(\" \");\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (result[arr[i]]) {\n      result[arr[i]]++;\n    } else {\n \
    \     result[arr[i]] = 1;\n    }\n  }\n  return result;\n}\n", "    let result:\
    \ {[key: string]: number} = {};\n    let letters: string[] = test.split(\" \"\
    );\n    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n", "    let dict: {[key: string]: number} = {};\n    let maxCount: number =\
    \ 0;\n    let maxLetter: string = \"\";\n    let maxLetters: string[] = [];\n\
    \    let letters: string[] = test.split(\" \");\n    for (let i: number = 0; i\
    \ < letters.length; i++) {\n        if (dict[letters[i]]) {\n            dict[letters[i]]++;\n\
    \        } else {\n            dict[letters[i]] = 1;\n        }\n        if (dict[letters[i]]\
    \ > maxCount) {\n            maxCount = dict[letters[i]];\n            maxLetter\
    \ = letters[i];\n            maxLetters = [maxLetter];\n        } else if (dict[letters[i]]\
    \ === maxCount) {\n            maxLetters.push(letters[i]);\n        }\n    }\n\
    \    if (maxCount === 0) {\n        return {};\n    }\n    let result: {[key:\
    \ string]: number} = {};\n    for (let i: number = 0; i < maxLetters.length; i++)\
    \ {\n        result[maxLetters[i]] = maxCount;\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
