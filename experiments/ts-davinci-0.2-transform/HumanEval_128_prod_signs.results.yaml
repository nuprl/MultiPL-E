language: ts
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] === 0) {\n      continue;\n    }\n    prod *= Math.sign(arr[i]);\n\
    \    sum += Math.abs(arr[i]);\n  }\n  return prod * sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptn8vs9mf.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptn8vs9mf.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    prod *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n   \
    \ return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpkwz2v96i.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwz2v96i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum\
    \ * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            product *= -1;\n        } else\
    \ if (arr[i] === 0) {\n            product = 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * product;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) return undefined;\n    let prod\
    \ = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ if (arr[i] > 0) {\n            prod *= 1;\n            sum += arr[i];\n    \
    \    } else if (arr[i] < 0) {\n            prod *= -1;\n            sum += arr[i]\
    \ * -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    return arr.reduce((acc, curr) => {\n        return acc + Math.abs(curr)\
    \ * (curr > 0 ? 1 : curr < 0 ? -1 : 0);\n    }, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n-9\n    at test (/tmp/tmptg52o9e1.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptg52o9e1.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ -9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] !== 0) {\n            sum += Math.abs(arr[i]);\n\
    \            prod *= Math.sign(arr[i]);\n        }\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp7_4qi5iw.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_4qi5iw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] > 0) {\n      product *= 1;\n      sum += arr[i];\n    } else\
    \ if (arr[i] < 0) {\n      product *= -1;\n      sum += arr[i] * -1;\n    } else\
    \ {\n      product *= 0;\n    }\n  }\n  return sum * product;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    prod *= arr[i] / Math.abs(arr[i]);\n        sum += Math.abs(arr[i]);\n  \
    \  }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprb3sxubi.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprb3sxubi.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if\
    \ (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *=\
    \ 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n  \
    \    prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if\
    \ (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *=\
    \ 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if\
    \ (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *=\
    \ 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n   \
    \     }\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    prod *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n   \
    \ return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpkwz2v96i.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwz2v96i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if\
    \ (arr[i] === 0) {\n            prod = 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333576
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n   \
    \     }\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] === 0) {\n      continue;\n    }\n    sum += Math.abs(arr[i]);\n\
    \    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp9b6_r2ij.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9b6_r2ij.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum\
    \ * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  const signs = arr.map(x => Math.sign(x));\n  const magnitudes = arr.map(x =>\
    \ Math.abs(x));\n  const prod = signs.reduce((acc, x) => acc * x, 1);\n  const\
    \ sum = magnitudes.reduce((acc, x) => acc + x, 0);\n  return prod * sum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum: number = 0;\n    let prod: number = 1;\n    for (let i: number\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] !== 0) {\n            sum +=\
    \ Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n        }\n    }\n\
    \    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpp8yko964.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp8yko964.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if\
    \ (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *=\
    \ 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum: number = 0;\n    let prod: number = 1;\n    for (let i: number\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            prod *=\
    \ -1;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n        } else\
    \ {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n   \
    \ }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333578
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum\
    \ = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n      \
    \  if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n   \
    \     } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod\
    \ *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333578
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum\
    \ = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n      \
    \  if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n   \
    \     } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod\
    \ *= -1;\n        } else {\n            sum += 0;\n            prod *= 0;\n  \
    \      }\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333578
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            product *= 1;\n            sum\
    \ += arr[i];\n        } else if (arr[i] < 0) {\n            product *= -1;\n \
    \           sum += arr[i] * -1;\n        } else {\n            product *= 0;\n\
    \        }\n    }\n    return sum * product;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333579
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum\
    \ * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] > 0) {\n     \
    \ prod *= 1;\n    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333578
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] > 0) {\n     \
    \ prod *= 1;\n    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333578
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] === 0) {\n      continue;\n    }\n    prod *= Math.sign(arr[i]);\n\
    \    sum += Math.abs(arr[i]);\n  }\n  return prod * sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptn8vs9mf.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptn8vs9mf.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] === 0) {\n      continue;\n    }\n    prod *= Math.sign(arr[i]);\n\
    \    sum += Math.abs(arr[i]);\n  }\n  return prod * sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptn8vs9mf.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptn8vs9mf.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        if (arr[i] !== 0) {\n    \
    \        prod *= Math.sign(arr[i]);\n        }\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpzrhen8ja.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzrhen8ja.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333578
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] > 0) {\n     \
    \ prod *= 1;\n    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333578
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length == 0) return undefined;\n    let sum\
    \ = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n      \
    \  if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n   \
    \     } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n       \
    \     prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n\
    \    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333578
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum\
    \ = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n      \
    \  if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n   \
    \     } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n       \
    \     prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n\
    \    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333579
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    prod *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n   \
    \ return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpkwz2v96i.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwz2v96i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n   \
    \     }\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            product *= 1;\n            sum\
    \ += arr[i];\n        } else if (arr[i] < 0) {\n            product *= -1;\n \
    \           sum += arr[i] * -1;\n        } else {\n            product *= 0;\n\
    \        }\n    }\n    return sum * product;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333579
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] !== 0) {\n      prod *= Math.sign(arr[i]);\n      sum += Math.abs(arr[i]);\n\
    \    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp57so8w1v.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp57so8w1v.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333578
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum: number = 0;\n    let prod: number = 1;\n    for (let i: number\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] !== 0) {\n            sum +=\
    \ Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n        }\n    }\n\
    \    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpp8yko964.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp8yko964.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    prod *= arr[i] / Math.abs(arr[i]);\n        sum += Math.abs(arr[i]);\n  \
    \  }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprb3sxubi.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprb3sxubi.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] !== 0) {\n            sum += Math.abs(arr[i]);\n\
    \            prod *= Math.sign(arr[i]);\n        }\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp7_4qi5iw.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_4qi5iw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] > 0) {\n     \
    \ prod *= 1;\n    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333578
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] === 0) {\n      continue;\n    }\n    prod *= Math.sign(arr[i]);\n\
    \    sum += Math.abs(arr[i]);\n  }\n  return prod * sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptn8vs9mf.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptn8vs9mf.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] > 0) {\n      product *= 1;\n      sum += arr[i];\n    } else\
    \ if (arr[i] < 0) {\n      product *= -1;\n      sum += arr[i] * -1;\n    } else\
    \ {\n      product *= 0;\n    }\n  }\n  return sum * product;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    return arr.reduce((acc, curr) => {\n        if (curr === 0) {\n  \
    \          return acc;\n        }\n        return acc * Math.abs(curr) * Math.sign(curr);\n\
    \    }, 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-16\n\nshould\
    \ loosely deep-equal\n\n-9\n    at test (/tmp/tmp80xcrxpw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp80xcrxpw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -16,\n  expected:\
    \ -9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333579
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            product\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           product *= -1;\n        } else {\n            product *= 0;\n    \
    \    }\n    }\n    return sum * product;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333578
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] === 0) {\n      continue;\n    }\n    sum += Math.abs(arr[i]);\n\
    \    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp9b6_r2ij.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9b6_r2ij.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    prod *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n   \
    \ return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpkwz2v96i.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwz2v96i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum\
    \ * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] === 0) {\n      continue;\n    }\n    sum += Math.abs(arr[i]);\n\
    \    prod *= Math.sign(arr[i]);\n  }\n  return sum * prod;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp9b6_r2ij.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9b6_r2ij.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    prod *= arr[i] / Math.abs(arr[i]);\n        sum += Math.abs(arr[i]);\n  \
    \  }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprb3sxubi.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprb3sxubi.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= arr[i] > 0 ? 1 : -1;\n    }\n \
    \   return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpi2l8ysnc.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi2l8ysnc.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333578
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    prod *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n   \
    \ return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpkwz2v96i.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwz2v96i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) return undefined;\n    let sum\
    \ = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n      \
    \  sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333579
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n \
    \     sum += Math.abs(arr[i]);\n      product *= -1;\n    }\n  }\n  return sum\
    \ * product;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpx8765plp.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx8765plp.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333579
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] > 0) {\n     \
    \ prod *= 1;\n    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333578
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      sum\
    \ += 0;\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333579
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] === 0) {\n      continue;\n    }\n    prod *= Math.sign(arr[i]);\n\
    \    sum += Math.abs(arr[i]);\n  }\n  return prod * sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptn8vs9mf.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptn8vs9mf.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            sum += 0;\n           \
    \ prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333579
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] !== 0) {\n            prod *= Math.sign(arr[i]);\n\
    \            sum += Math.abs(arr[i]);\n        }\n    }\n    return prod * sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpn82d0lsw.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn82d0lsw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333579
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    product *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n\
    \    return product * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp8g_as3me.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8g_as3me.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333579
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let product = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] > 0) {\n      product *= 1;\n      sum += arr[i];\n    } else\
    \ if (arr[i] < 0) {\n      product *= -1;\n      sum += arr[i] * -1;\n    } else\
    \ {\n      product *= 0;\n    }\n  }\n  return sum * product;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n   \
    \     }\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length == 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333579
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    prod *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n   \
    \ return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpkwz2v96i.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwz2v96i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i]\
    \ < 0) {\n      sum += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n   \
    \     }\n    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 0) {\n      prod *= -1;\n      sum += arr[i] * -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return prod * sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    prod *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n   \
    \ return prod * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpkwz2v96i.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwz2v96i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            product *= -1;\n        } else\
    \ if (arr[i] === 0) {\n            product = 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * product;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 0) {\n            continue;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n   \
    \ return sum * prod;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr4qshojj.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr4qshojj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        } else if\
    \ (arr[i] > 0) {\n            prod *= 1;\n        } else {\n            prod *=\
    \ 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]):\
    \ number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum +=\
    \ arr[i];\n        } else if (arr[i] < 0) {\n            prod *= -1;\n       \
    \     sum += arr[i] * -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return prod * sum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333575
