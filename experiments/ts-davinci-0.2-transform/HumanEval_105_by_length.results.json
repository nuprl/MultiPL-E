{
  "language": "ts",
  "name": "HumanEval_105_by_length",
  "results": [
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(numToWord(sorted[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoa_4hzm3.ts(18,25): error TS2304: Cannot find name 'numToWord'.\n",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const sorted = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(num => {\n    switch (num) {\n      case 1:\n        return \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\";\n    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const nums = arr.filter(n => n >= 1 && n <= 9).sort((a, b) => b - a);\n  const names = nums.map(n => {\n    switch (n) {\n      case 1:\n        return \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\";\n    }\n  });\n  return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    return arr.filter(x => x >= 1 && x <= 9).sort().reverse().map(x => {\n        switch (x) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let temp: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      temp.push(arr[i]);\n    }\n  }\n  temp.sort((a, b) => a - b);\n  for (let i = 0; i < temp.length; i++) {\n    switch (temp[i]) {\n      case 1:\n        result.push(\"One\");\n        break;\n      case 2:\n        result.push(\"Two\");\n        break;\n      case 3:\n        result.push(\"Three\");\n        break;\n      case 4:\n        result.push(\"Four\");\n        break;\n      case 5:\n        result.push(\"Five\");\n        break;\n      case 6:\n        result.push(\"Six\");\n        break;\n      case 7:\n        result.push(\"Seven\");\n        break;\n      case 8:\n        result.push(\"Eight\");\n        break;\n      case 9:\n        result.push(\"Nine\");\n        break;\n    }\n  }\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 1,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (nums.includes(arr[i])) {\n            result.push(names[nums.indexOf(arr[i])]);\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpzq71_meo.js:27:12)\n    at Object.<anonymous> (/tmp/tmpzq71_meo.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three', 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    '",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i: number = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334622
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            sorted.push(arr[i]);\n        }\n    }\n    sorted.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        switch (sorted[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i: number = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b).filter(num => num >= 1 && num <= 9);\n    for (let i = sortedArr.length - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const result: string[] = [];\n    const nums: number[] = [];\n    const words: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort((a, b) => a - b);\n    for (let i = 0; i < nums.length; i++) {\n        switch (nums[i]) {\n            case 1:\n                words.push(\"One\");\n                break;\n            case 2:\n                words.push(\"Two\");\n                break;\n            case 3:\n                words.push(\"Three\");\n                break;\n            case 4:\n                words.push(\"Four\");\n                break;\n            case 5:\n                words.push(\"Five\");\n                break;\n            case 6:\n                words.push(\"Six\");\n                break;\n            case 7:\n                words.push(\"Seven\");\n                break;\n            case 8:\n                words.push(\"Eight\");\n                break;\n            case 9:\n                words.push(\"Nine\");\n                break;\n        }\n    }\n    for (let i = words.length - 1; i >= 0; i--) {\n        result.push(words[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    return arr.filter(x => x > 0 && x < 10).sort((a, b) => a - b).reverse().map(x => {\n        switch (x) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let res: string[] = [];\n    let arr1: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort((a, b) => a - b);\n    for (let i = 0; i < arr1.length; i++) {\n        switch (arr1[i]) {\n            case 1:\n                res.push(\"One\");\n                break;\n            case 2:\n                res.push(\"Two\");\n                break;\n            case 3:\n                res.push(\"Three\");\n                break;\n            case 4:\n                res.push(\"Four\");\n                break;\n            case 5:\n                res.push(\"Five\");\n                break;\n            case 6:\n                res.push(\"Six\");\n                break;\n            case 7:\n                res.push(\"Seven\");\n                break;\n            case 8:\n                res.push(\"Eight\");\n                break;\n            case 9:\n                res.push(\"Nine\");\n                break;\n        }\n    }\n    return res.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => a - b);\n    const reversed = sorted.reverse();\n    const result = reversed.map(x => {\n        switch (x) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            sorted.push(arr[i]);\n        }\n    }\n    sorted.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        switch (sorted[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let newArr: string[] = [];\n    let nums: number[] = [];\n    let nums2: number[] = [];\n    let nums3: number[] = [];\n    let nums4: number[] = [];\n    let nums5: number[] = [];\n    let nums6: number[] = [];\n    let nums7: number[] = [];\n    let nums8: number[] = [];\n    let nums9: number[] = [];\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            nums.push(arr[i]);\n        } else if (arr[i] === 2) {\n            nums2.push(arr[i]);\n        } else if (arr[i] === 3) {\n            nums3.push(arr[i]);\n        } else if (arr[i] === 4) {\n            nums4.push(arr[i]);\n        } else if (arr[i] === 5) {\n            nums5.push(arr[i]);\n        } else if (arr[i] === 6) {\n            nums6.push(arr[i]);\n        } else if (arr[i] === 7) {\n            nums7.push(arr[i]);\n        } else if (arr[i] === 8) {\n            nums8.push(arr[i]);\n        } else if (arr[i] === 9) {\n            nums9.push(arr[i]);\n        }\n    }\n    for (let i: number = 0; i < nums9.length; i++) {\n        newArr.push(\"Nine\");\n    }\n    for (let i: number = 0; i < nums8.length; i++) {\n        newArr.push(\"Eight\");\n    }\n    for (let i: number = 0; i < nums7.length; i++) {\n        newArr.push(\"Seven\");\n    }\n    for (let i: number = 0; i < nums6.length; i++) {\n        newArr.push(\"Six\");\n    }\n    for (let i\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqmz0r8as.ts(58,1): error TS1005: ';' expected.\n../../../../tmp/tmpqmz0r8as.ts(58,9): error TS1005: ';' expected.\n../../../../tmp/tmpqmz0r8as.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const result: string[] = [];\n    const numbers: string[] = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result.push(numbers[sorted[i] - 1]);\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(sortedArr[i].toString());\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case \"1\":\n                result[i] = \"One\";\n                break;\n            case \"2\":\n                result[i] = \"Two\";\n                break;\n            case \"3\":\n                result[i] = \"Three\";\n                break;\n            case \"4\":\n                result[i] = \"Four\";\n                break;\n            case \"5\":\n                result[i] = \"Five\";\n                break;\n            case \"6\":\n                result[i] = \"Six\";\n                break;\n            case \"7\":\n                result[i] = \"Seven\";\n                break;\n            case \"8\":\n                result[i] = \"Eight\";\n                break;\n            case \"9\":\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let arr1: number[] = [];\n    let arr2: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort((a, b) => a - b);\n    for (let i = 0; i < arr1.length; i++) {\n        switch (arr1[i]) {\n            case 1:\n                arr2.push(\"One\");\n                break;\n            case 2:\n                arr2.push(\"Two\");\n                break;\n            case 3:\n                arr2.push(\"Three\");\n                break;\n            case 4:\n                arr2.push(\"Four\");\n                break;\n            case 5:\n                arr2.push(\"Five\");\n                break;\n            case 6:\n                arr2.push(\"Six\");\n                break;\n            case 7:\n                arr2.push(\"Seven\");\n                break;\n            case 8:\n                arr2.push(\"Eight\");\n                break;\n            case 9:\n                arr2.push(\"Nine\");\n                break;\n        }\n    }\n    return arr2.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334628
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n    }\n    result.reverse();\n    let result2: string[] = [];\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result2.push(\"One\");\n                break;\n            case 2:\n                result2.push(\"Two\");\n                break;\n            case 3:\n                result2.push(\"Three\");\n                break;\n            case 4:\n                result2.push(\"Four\");\n                break;\n            case 5:\n                result2.push(\"Five\");\n                break;\n            case 6:\n                result2.push(\"Six\");\n                break;\n            case 7:\n                result2.push(\"Seven\");\n                break;\n            case 8:\n                result2.push(\"Eight\");\n                break;\n            case 9:\n                result2.push(\"Nine\");\n                break;\n        }\n    }\n    return result2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp91pjuz3a.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp91pjuz3a.ts(25,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmp91pjuz3a.ts(28,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmp91pjuz3a.ts(31,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmp91pjuz3a.ts(34,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmp91pjuz3a.ts(37,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmp91pjuz3a.ts(40,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmp91pjuz3a.ts(43,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmp91pjuz3a.ts(46,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmp91pjuz3a.ts(49,18): error TS2678: Type 'number' is no",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let filtered: number[] = sorted.filter(num => num >= 1 && num <= 9);\n    let reversed: number[] = filtered.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        switch (reversed[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    reversed.forEach(num => {\n        if (num === 1) {\n            result.push(\"One\");\n        } else if (num === 2) {\n            result.push(\"Two\");\n        } else if (num === 3) {\n            result.push(\"Three\");\n        } else if (num === 4) {\n            result.push(\"Four\");\n        } else if (num === 5) {\n            result.push(\"Five\");\n        } else if (num === 6) {\n            result.push(\"Six\");\n        } else if (num === 7) {\n            result.push(\"Seven\");\n        } else if (num === 8) {\n            result.push(\"Eight\");\n        } else if (num === 9) {\n            result.push(\"Nine\");\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 1,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let num: number = 0;\n    let str: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            num = arr[i];\n            switch (num) {\n                case 1:\n                    str = \"One\";\n                    break;\n                case 2:\n                    str = \"Two\";\n                    break;\n                case 3:\n                    str = \"Three\";\n                    break;\n                case 4:\n                    str = \"Four\";\n                    break;\n                case 5:\n                    str = \"Five\";\n                    break;\n                case 6:\n                    str = \"Six\";\n                    break;\n                case 7:\n                    str = \"Seven\";\n                    break;\n                case 8:\n                    str = \"Eight\";\n                    break;\n                case 9:\n                    str = \"Nine\";\n                    break;\n            }\n            result.push(str);\n        }\n    }\n    result.sort();\n    result.reverse();\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n  'Two',\n  'Three',\n  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp_6parc8z.js:59:12)\n    at Object.<anonymous> (/tmp/tmp_6parc8z.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',   'Two',\n    'Three', 'One',\n    'One',   'Four',\n    'Five',  'Eight'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n   ",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a, b) => a - b);\n  let filtered: number[] = sorted.filter(num => num >= 1 && num <= 9);\n  let reversed: number[] = filtered.reverse();\n  for (let num of reversed) {\n    switch (num) {\n      case 1:\n        result.push(\"One\");\n        break;\n      case 2:\n        result.push(\"Two\");\n        break;\n      case 3:\n        result.push(\"Three\");\n        break;\n      case 4:\n        result.push(\"Four\");\n        break;\n      case 5:\n        result.push(\"Five\");\n        break;\n      case 6:\n        result.push(\"Six\");\n        break;\n      case 7:\n        result.push(\"Seven\");\n        break;\n      case 8:\n        result.push(\"Eight\");\n        break;\n      case 9:\n        result.push(\"Nine\");\n        break;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b).filter(item => item >= 1 && item <= 9);\n    for (let i = sortedArr.length - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334624
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n    }\n    result.reverse();\n    let result2: string[] = [];\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result2.push(\"One\");\n                break;\n            case 2:\n                result2.push(\"Two\");\n                break;\n            case 3:\n                result2.push(\"Three\");\n                break;\n            case 4:\n                result2.push(\"Four\");\n                break;\n            case 5:\n                result2.push(\"Five\");\n                break;\n            case 6:\n                result2.push(\"Six\");\n                break;\n            case 7:\n                result2.push(\"Seven\");\n                break;\n            case 8:\n                result2.push(\"Eight\");\n                break;\n            case 9:\n                result2.push(\"Nine\");\n                break;\n        }\n    }\n    return result2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpulb5147y.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpulb5147y.ts(25,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpulb5147y.ts(28,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpulb5147y.ts(31,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpulb5147y.ts(34,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpulb5147y.ts(37,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpulb5147y.ts(40,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpulb5147y.ts(43,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpulb5147y.ts(46,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpulb5147y.ts(49,18): error TS2678: Type 'number' is not comparable to type 'string'.\n",
      "timestamp": 1660334733
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    sortedArr.forEach(element => {\n        if (element >= 1 && element <= 9) {\n            result.push(getNumberName(element));\n        }\n    });\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5zpfz047.ts(18,25): error TS2304: Cannot find name 'getNumberName'.\n",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const numbers: number[] = arr.filter(num => num >= 1 && num <= 9);\n    const sorted: number[] = numbers.sort((a, b) => a - b);\n    const reversed: number[] = sorted.reverse();\n    const names: string[] = reversed.map(num => {\n        switch (num) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] < 1 || sortedArr[i] > 9) {\n            continue;\n        }\n        switch (sortedArr[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvc5vg28b.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(24,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(27,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(30,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(33,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(36,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(39,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(42,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(45,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(48,18): error TS2678: Type 'number' is no",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => a - b);\n    const reversed = sorted.reverse();\n    const names = reversed.map(x => {\n        switch (x) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334627
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a, b) => a - b);\n    temp.reverse();\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334629
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a, b) => a - b);\n  let reversedArr: number[] = sortedArr.reverse();\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] === 1) {\n      result.push(\"One\");\n    } else if (reversedArr[i] === 2) {\n      result.push(\"Two\");\n    } else if (reversedArr[i] === 3) {\n      result.push(\"Three\");\n    } else if (reversedArr[i] === 4) {\n      result.push(\"Four\");\n    } else if (reversedArr[i] === 5) {\n      result.push(\"Five\");\n    } else if (reversedArr[i] === 6) {\n      result.push(\"Six\");\n    } else if (reversedArr[i] === 7) {\n      result.push(\"Seven\");\n    } else if (reversedArr[i] === 8) {\n      result.push(\"Eight\");\n    } else if (reversedArr[i] === 9) {\n      result.push(\"Nine\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(getName(sortedArr[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9_wfpbc1.ts(18,25): error TS2304: Cannot find name 'getName'.\n",
      "timestamp": 1660334733
    },
    {
      "exit_code": 1,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let newArr: string[] = [];\n    let num: number;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i]) {\n                case 1:\n                    newArr.push(\"One\");\n                    break;\n                case 2:\n                    newArr.push(\"Two\");\n                    break;\n                case 3:\n                    newArr.push(\"Three\");\n                    break;\n                case 4:\n                    newArr.push(\"Four\");\n                    break;\n                case 5:\n                    newArr.push(\"Five\");\n                    break;\n                case 6:\n                    newArr.push(\"Six\");\n                    break;\n                case 7:\n                    newArr.push(\"Seven\");\n                    break;\n                case 8:\n                    newArr.push(\"Eight\");\n                    break;\n                case 9:\n                    newArr.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return newArr.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpm915gboz.js:54:12)\n    at Object.<anonymous> (/tmp/tmpm915gboz.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three', 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    '",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let res: string[] = [];\n    let nums: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort((a, b) => a - b);\n    for (let i = nums.length - 1; i >= 0; i--) {\n        switch (nums[i]) {\n            case 1:\n                res.push(\"One\");\n                break;\n            case 2:\n                res.push(\"Two\");\n                break;\n            case 3:\n                res.push(\"Three\");\n                break;\n            case 4:\n                res.push(\"Four\");\n                break;\n            case 5:\n                res.push(\"Five\");\n                break;\n            case 6:\n                res.push(\"Six\");\n                break;\n            case 7:\n                res.push(\"Seven\");\n                break;\n            case 8:\n                res.push(\"Eight\");\n                break;\n            case 9:\n                res.push(\"Nine\");\n                break;\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const filtered = arr.filter(x => x >= 1 && x <= 9);\n  const sorted = filtered.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(x => names[x - 1]);\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => a - b).reverse();\n    let result = [];\n    for (let i = 0; i < sorted.length; i++) {\n        switch (sorted[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const result: string[] = [];\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] >= 1 && reversedArr[i] <= 9) {\n      switch (reversedArr[i]) {\n        case 1:\n          result.push(\"One\");\n          break;\n        case 2:\n          result.push(\"Two\");\n          break;\n        case 3:\n          result.push(\"Three\");\n          break;\n        case 4:\n          result.push(\"Four\");\n          break;\n        case 5:\n          result.push(\"Five\");\n          break;\n        case 6:\n          result.push(\"Six\");\n          break;\n        case 7:\n          result.push(\"Seven\");\n          break;\n        case 8:\n          result.push(\"Eight\");\n          break;\n        case 9:\n          result.push(\"Nine\");\n          break;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptsbw55da.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmptsbw55da.ts(24,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(27,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(30,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(33,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(36,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(39,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(42,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(45,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(48,18): error TS2678: Type 'number' is no",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a, b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 1,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp_ha8adm8.js:53:12)\n    at Object.<anonymous> (/tmp/tmp_ha8adm8.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three', 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    '",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(getName(sorted[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9cyhlxrn.ts(18,25): error TS2304: Cannot find name 'getName'.\n",
      "timestamp": 1660334737
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            result.push(sortedArr[i]);\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppidfi5a8.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmppidfi5a8.ts(24,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmppidfi5a8.ts(27,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmppidfi5a8.ts(30,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmppidfi5a8.ts(33,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmppidfi5a8.ts(36,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmppidfi5a8.ts(39,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmppidfi5a8.ts(42,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmppidfi5a8.ts(45,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmppidfi5a8.ts(48,18): error TS2678: Type 'number' is no",
      "timestamp": 1660334736
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 1,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp4qajlo4e.js:53:12)\n    at Object.<anonymous> (/tmp/tmp4qajlo4e.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three', 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    '",
      "stdout": "",
      "timestamp": 1660334622
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(getName(sortedArr[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9_wfpbc1.ts(18,25): error TS2304: Cannot find name 'getName'.\n",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const sorted = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(num => {\n    switch (num) {\n      case 1:\n        return \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\";\n    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 1,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const numbers = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(numbers[arr[i]]);\n    }\n  }\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpbo2hvkix.js:36:12)\n    at Object.<anonymous> (/tmp/tmpbo2hvkix.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three', 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    '",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let newArr: string[] = [];\n    let numArr: number[] = [];\n    let num: number;\n    for (let i = 0; i < arr.length; i++) {\n        num = arr[i];\n        if (num > 0 && num < 10) {\n            numArr.push(num);\n        }\n    }\n    numArr.sort((a, b) => a - b);\n    numArr.reverse();\n    for (let i = 0; i < numArr.length; i++) {\n        num = numArr[i];\n        switch (num) {\n            case 1:\n                newArr.push(\"One\");\n                break;\n            case 2:\n                newArr.push(\"Two\");\n                break;\n            case 3:\n                newArr.push(\"Three\");\n                break;\n            case 4:\n                newArr.push(\"Four\");\n                break;\n            case 5:\n                newArr.push(\"Five\");\n                break;\n            case 6:\n                newArr.push(\"Six\");\n                break;\n            case 7:\n                newArr.push(\"Seven\");\n                break;\n            case 8:\n                newArr.push(\"Eight\");\n                break;\n            case 9:\n                newArr.push(\"Nine\");\n                break;\n        }\n    }\n    return newArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a, b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 1,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp4qajlo4e.js:53:12)\n    at Object.<anonymous> (/tmp/tmp4qajlo4e.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three', 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    '",
      "stdout": "",
      "timestamp": 1660334622
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n    }\n    let reversed: number[] = result.reverse();\n    let final: string[] = [];\n    for (let i = 0; i < reversed.length; i++) {\n        switch (reversed[i]) {\n            case 1:\n                final.push(\"One\");\n                break;\n            case 2:\n                final.push(\"Two\");\n                break;\n            case 3:\n                final.push(\"Three\");\n                break;\n            case 4:\n                final.push(\"Four\");\n                break;\n            case 5:\n                final.push(\"Five\");\n                break;\n            case 6:\n                final.push(\"Six\");\n                break;\n            case 7:\n                final.push(\"Seven\");\n                break;\n            case 8:\n                final.push(\"Eight\");\n                break;\n            case 9:\n                final.push(\"Nine\");\n                break;\n        }\n    }\n    return final;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoh8nfv83.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpoh8nfv83.ts(21,9): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334617
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvc5vg28b.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(24,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(27,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(30,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(33,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(36,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(39,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(42,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(45,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(48,18): error TS2678: Type 'number' is no",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(sortedArr[i]);\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplbb5eb_j.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmplbb5eb_j.ts(24,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmplbb5eb_j.ts(27,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmplbb5eb_j.ts(30,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmplbb5eb_j.ts(33,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmplbb5eb_j.ts(36,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmplbb5eb_j.ts(39,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmplbb5eb_j.ts(42,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmplbb5eb_j.ts(45,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmplbb5eb_j.ts(48,18): error TS2678: Type 'number' is no",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i: number = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334622
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let sorted: number[] = arr.filter(num => num > 0 && num < 10).sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    let names: string[] = reversed.map(num => {\n        switch (num) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let nums: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort();\n    for (let i = nums.length - 1; i >= 0; i--) {\n        switch (nums[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let newArr: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            newArr.push(sortedArr[i].toString());\n        }\n    }\n    newArr.reverse();\n    for (let i = 0; i < newArr.length; i++) {\n        switch (newArr[i]) {\n            case \"1\":\n                newArr[i] = \"One\";\n                break;\n            case \"2\":\n                newArr[i] = \"Two\";\n                break;\n            case \"3\":\n                newArr[i] = \"Three\";\n                break;\n            case \"4\":\n                newArr[i] = \"Four\";\n                break;\n            case \"5\":\n                newArr[i] = \"Five\";\n                break;\n            case \"6\":\n                newArr[i] = \"Six\";\n                break;\n            case \"7\":\n                newArr[i] = \"Seven\";\n                break;\n            case \"8\":\n                newArr[i] = \"Eight\";\n                break;\n            case \"9\":\n                newArr[i] = \"Nine\";\n                break;\n        }\n    }\n    return newArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] > 0 && reversedArr[i] < 10) {\n            switch (reversedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b).filter(num => num >= 1 && num <= 9);\n    for (let i = sortedArr.length - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let arr_str: string[] = [];\n    let arr_num: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            arr_num.push(arr[i]);\n        }\n    }\n    arr_num.sort();\n    arr_num.reverse();\n    for (let i = 0; i < arr_num.length; i++) {\n        switch (arr_num[i]) {\n            case 1:\n                arr_str.push(\"One\");\n                break;\n            case 2:\n                arr_str.push(\"Two\");\n                break;\n            case 3:\n                arr_str.push(\"Three\");\n                break;\n            case 4:\n                arr_str.push(\"Four\");\n                break;\n            case 5:\n                arr_str.push(\"Five\");\n                break;\n            case 6:\n                arr_str.push(\"Six\");\n                break;\n            case 7:\n                arr_str.push(\"Seven\");\n                break;\n            case 8:\n                arr_str.push(\"Eight\");\n                break;\n            case 9:\n                arr_str.push(\"Nine\");\n                break;\n        }\n    }\n    return arr_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a, b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334621
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(arr[i]);\n        }\n    }\n    result.sort((a, b) => a - b);\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpplaq68nt.ts(17,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpplaq68nt.ts(20,27): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpplaq68nt.ts(20,31): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpplaq68nt.ts(24,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpplaq68nt.ts(27,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpplaq68nt.ts(30,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpplaq68nt.ts(33,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpplaq68nt.ts(36,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpplaq68nt.ts(39,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpplaq68nt.ts(42,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpplaq68nt.ts(45,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpplaq68nt.ts(48,18): error TS2678: Type 'number' is not comparable to type 'string'.\n",
      "timestamp": 1660334624
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(numberToString(sorted[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpydte7g_2.ts(18,25): error TS2304: Cannot find name 'numberToString'.\n",
      "timestamp": 1660334630
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(arr[i].toString());\n        }\n    }\n    result.sort();\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case \"1\":\n                result[i] = \"One\";\n                break;\n            case \"2\":\n                result[i] = \"Two\";\n                break;\n            case \"3\":\n                result[i] = \"Three\";\n                break;\n            case \"4\":\n                result[i] = \"Four\";\n                break;\n            case \"5\":\n                result[i] = \"Five\";\n                break;\n            case \"6\":\n                result[i] = \"Six\";\n                break;\n            case \"7\":\n                result[i] = \"Seven\";\n                break;\n            case \"8\":\n                result[i] = \"Eight\";\n                break;\n            case \"9\":\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a, b) => a - b);\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n      result.push(sortedArr[i]);\n    }\n  }\n  result.reverse();\n  for (let i = 0; i < result.length; i++) {\n    switch (result[i]) {\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx5h3w_sf.ts(18,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpx5h3w_sf.ts(24,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpx5h3w_sf.ts(27,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpx5h3w_sf.ts(30,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpx5h3w_sf.ts(33,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpx5h3w_sf.ts(36,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpx5h3w_sf.ts(39,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpx5h3w_sf.ts(42,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpx5h3w_sf.ts(45,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpx5h3w_sf.ts(48,12): error TS2678: Type 'number' is not comparable to type 'string'.\n",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const result: string[] = [];\n    const sortedArr = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a, b) => a - b);\n    for (let i: number = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1, -1, 55]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  'Eight', 'Five',\n  'Four',  'Three',\n  'Two',   'Two',\n  'One',   'One'\n]\n[]\n[ 'One' ]\n",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i].toString());\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case \"1\":\n                result[i] = \"One\";\n                break;\n            case \"2\":\n                result[i] = \"Two\";\n                break;\n            case \"3\":\n                result[i] = \"Three\";\n                break;\n            case \"4\":\n                result[i] = \"Four\";\n                break;\n            case \"5\":\n                result[i] = \"Five\";\n                break;\n            case \"6\":\n                result[i] = \"Six\";\n                break;\n            case \"7\":\n                result[i] = \"Seven\";\n                break;\n            case \"8\":\n                result[i] = \"Eight\";\n                break;\n            case \"9\":\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a, b) => a - b);\n  let reversed: number[] = sorted.reverse();\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] === 1) {\n      result.push(\"One\");\n    } else if (reversed[i] === 2) {\n      result.push(\"Two\");\n    } else if (reversed[i] === 3) {\n      result.push(\"Three\");\n    } else if (reversed[i] === 4) {\n      result.push(\"Four\");\n    } else if (reversed[i] === 5) {\n      result.push(\"Five\");\n    } else if (reversed[i] === 6) {\n      result.push(\"Six\");\n    } else if (reversed[i] === 7) {\n      result.push(\"Seven\");\n    } else if (reversed[i] === 8) {\n      result.push(\"Eight\");\n    } else if (reversed[i] === 9) {\n      result.push(\"Nine\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a, b) => a - b);\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptsbw55da.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmptsbw55da.ts(24,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(27,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(30,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(33,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(36,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(39,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(42,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(45,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(48,18): error TS2678: Type 'number' is no",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  return arr\n    .filter(x => x >= 1 && x <= 9)\n    .sort((a, b) => a - b)\n    .reverse()\n    .map(x => {\n      switch (x) {\n        case 1:\n          return \"One\";\n        case 2:\n          return \"Two\";\n        case 3:\n          return \"Three\";\n        case 4:\n          return \"Four\";\n        case 5:\n          return \"Five\";\n        case 6:\n          return \"Six\";\n        case 7:\n          return \"Seven\";\n        case 8:\n          return \"Eight\";\n        case 9:\n          return \"Nine\";\n      }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a, b) => a - b);\n  let reversed: number[] = sorted.reverse();\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] === 1) {\n      result.push(\"One\");\n    } else if (reversed[i] === 2) {\n      result.push(\"Two\");\n    } else if (reversed[i] === 3) {\n      result.push(\"Three\");\n    } else if (reversed[i] === 4) {\n      result.push(\"Four\");\n    } else if (reversed[i] === 5) {\n      result.push(\"Five\");\n    } else if (reversed[i] === 6) {\n      result.push(\"Six\");\n    } else if (reversed[i] === 7) {\n      result.push(\"Seven\");\n    } else if (reversed[i] === 8) {\n      result.push(\"Eight\");\n    } else if (reversed[i] === 9) {\n      result.push(\"Nine\");\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            result.push(getName(sortedArr[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9_wfpbc1.ts(18,25): error TS2304: Cannot find name 'getName'.\n",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let numbers: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            numbers.push(arr[i]);\n        }\n    }\n    numbers.sort();\n    numbers.reverse();\n    for (let i = 0; i < numbers.length; i++) {\n        switch (numbers[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    if (arr.length === 0) {\n        return result;\n    }\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a, b) => a - b);\n    for (let i: number = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 1,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp4qajlo4e.js:53:12)\n    at Object.<anonymous> (/tmp/tmp4qajlo4e.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three', 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    '",
      "stdout": "",
      "timestamp": 1660334622
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let temp: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      temp.push(arr[i]);\n    }\n  }\n  temp.sort();\n  temp.reverse();\n  for (let i = 0; i < temp.length; i++) {\n    switch (temp[i]) {\n      case 1:\n        result.push(\"One\");\n        break;\n      case 2:\n        result.push(\"Two\");\n        break;\n      case 3:\n        result.push(\"Three\");\n        break;\n      case 4:\n        result.push(\"Four\");\n        break;\n      case 5:\n        result.push(\"Five\");\n        break;\n      case 6:\n        result.push(\"Six\");\n        break;\n      case 7:\n        result.push(\"Seven\");\n        break;\n      case 8:\n        result.push(\"Eight\");\n        break;\n      case 9:\n        result.push(\"Nine\");\n        break;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334740
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let sortedArr: number[] = arr.sort((a, b) => a - b);\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n      result.push(sortedArr[i]);\n    }\n  }\n  result.reverse();\n  for (let i = 0; i < result.length; i++) {\n    switch (result[i]) {\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy9y91rjq.ts(18,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpy9y91rjq.ts(24,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpy9y91rjq.ts(27,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpy9y91rjq.ts(30,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpy9y91rjq.ts(33,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpy9y91rjq.ts(36,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpy9y91rjq.ts(39,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpy9y91rjq.ts(42,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpy9y91rjq.ts(45,12): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpy9y91rjq.ts(48,12): error TS2678: Type 'number' is no",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort();\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334740
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] >= 1 && reversedArr[i] <= 9) {\n            switch (reversedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334622
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const numbers = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    const result = [];\n    arr.sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(numbers[arr[i]]);\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334740
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const result: string[] = [];\n    const sortedArr = arr.sort((a, b) => a - b);\n    const reversedArr = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334740
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i].toString());\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case \"1\":\n                result[i] = \"One\";\n                break;\n            case \"2\":\n                result[i] = \"Two\";\n                break;\n            case \"3\":\n                result[i] = \"Three\";\n                break;\n            case \"4\":\n                result[i] = \"Four\";\n                break;\n            case \"5\":\n                result[i] = \"Five\";\n                break;\n            case \"6\":\n                result[i] = \"Six\";\n                break;\n            case \"7\":\n                result[i] = \"Seven\";\n                break;\n            case \"8\":\n                result[i] = \"Eight\";\n                break;\n            case \"9\":\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let sorted: number[] = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    let result: string[] = reversed.map(x => {\n        switch (x) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334628
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let newArr: string[] = [];\n    let newArr2: string[] = [];\n    let newArr3: string[] = [];\n    let newArr4: string[] = [];\n    let newArr5: string[] = [];\n    let newArr6: string[] = [];\n    let newArr7: string[] = [];\n    let newArr8: string[] = [];\n    let newArr9: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1) {\n            newArr.push(\"One\");\n        } else if (arr[i] === 2) {\n            newArr2.push(\"Two\");\n        } else if (arr[i] === 3) {\n            newArr3.push(\"Three\");\n        } else if (arr[i] === 4) {\n            newArr4.push(\"Four\");\n        } else if (arr[i] === 5) {\n            newArr5.push(\"Five\");\n        } else if (arr[i] === 6) {\n            newArr6.push(\"Six\");\n        } else if (arr[i] === 7) {\n            newArr7.push(\"Seven\");\n        } else if (arr[i] === 8) {\n            newArr8.push(\"Eight\");\n        } else if (arr[i] === 9) {\n            newArr9.push(\"Nine\");\n        }\n    }\n    return newArr9.concat(newArr8, newArr7, newArr6, newArr5, newArr4, newArr3, newArr2, newArr);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334740
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let arr1: number[] = [];\n    let arr2: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            arr1.push(arr[i]);\n        }\n    }\n    arr1.sort();\n    for (let i = arr1.length - 1; i >= 0; i--) {\n        switch (arr1[i]) {\n            case 1:\n                arr2.push(\"One\");\n                break;\n            case 2:\n                arr2.push(\"Two\");\n                break;\n            case 3:\n                arr2.push(\"Three\");\n                break;\n            case 4:\n                arr2.push(\"Four\");\n                break;\n            case 5:\n                arr2.push(\"Five\");\n                break;\n            case 6:\n                arr2.push(\"Six\");\n                break;\n            case 7:\n                arr2.push(\"Seven\");\n                break;\n            case 8:\n                arr2.push(\"Eight\");\n                break;\n            case 9:\n                arr2.push(\"Nine\");\n                break;\n        }\n    }\n    return arr2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334629
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(sorted[i]);\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptsbw55da.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmptsbw55da.ts(24,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(27,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(30,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(33,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(36,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(39,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(42,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(45,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmptsbw55da.ts(48,18): error TS2678: Type 'number' is no",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    let filteredArr: number[] = reversedArr.filter(num => num > 0 && num < 10);\n    for (let i: number = 0; i < filteredArr.length; i++) {\n        switch (filteredArr[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334740
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    sorted.forEach(element => {\n        if (element >= 1 && element <= 9) {\n            result.push(numToString(element));\n        }\n    });\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3akhoqep.ts(18,25): error TS2304: Cannot find name 'numToString'.\n",
      "timestamp": 1660334740
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort();\n    temp.reverse();\n    for (let i = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334630
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i: number = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334741
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const result: string[] = [];\n    const nums: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort((a, b) => a - b);\n    for (let i = nums.length - 1; i >= 0; i--) {\n        switch (nums[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334740
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] >= 1 && reversedArr[i] <= 9) {\n            switch (reversedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334622
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const nums = arr.filter(num => num > 0 && num < 10);\n  const sorted = nums.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(num => {\n    switch (num) {\n      case 1:\n        return \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\";\n    }\n  });\n  return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334741
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const result: string[] = [];\n    const sortedArr = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334741
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b).filter(num => num > 0 && num < 10);\n    for (let i = sortedArr.length - 1; i >= 0; i--) {\n        switch (sortedArr[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334740
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let res: string[] = [];\n    let nums: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort((a, b) => a - b);\n    for (let i = nums.length - 1; i >= 0; i--) {\n        switch (nums[i]) {\n            case 1:\n                res.push(\"One\");\n                break;\n            case 2:\n                res.push(\"Two\");\n                break;\n            case 3:\n                res.push(\"Three\");\n                break;\n            case 4:\n                res.push(\"Four\");\n                break;\n            case 5:\n                res.push(\"Five\");\n                break;\n            case 6:\n                res.push(\"Six\");\n                break;\n            case 7:\n                res.push(\"Seven\");\n                break;\n            case 8:\n                res.push(\"Eight\");\n                break;\n            case 9:\n                res.push(\"Nine\");\n                break;\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const sorted = arr.filter(n => n > 0 && n < 10).sort((a, b) => a - b);\n    const reversed = sorted.reverse();\n    const names = reversed.map(n => {\n        switch (n) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n    return names;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334740
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvc5vg28b.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(24,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(27,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(30,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(33,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(36,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(39,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(42,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(45,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(48,18): error TS2678: Type 'number' is no",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(sorted[i].toString());\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case \"1\":\n                result[i] = \"One\";\n                break;\n            case \"2\":\n                result[i] = \"Two\";\n                break;\n            case \"3\":\n                result[i] = \"Three\";\n                break;\n            case \"4\":\n                result[i] = \"Four\";\n                break;\n            case \"5\":\n                result[i] = \"Five\";\n                break;\n            case \"6\":\n                result[i] = \"Six\";\n                break;\n            case \"7\":\n                result[i] = \"Seven\";\n                break;\n            case \"8\":\n                result[i] = \"Eight\";\n                break;\n            case \"9\":\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            result.push(getName(sortedArr[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqns3o7o6.ts(18,25): error TS2304: Cannot find name 'getName'.\n",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let sorted: number[] = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    let result: string[] = reversed.map(x => {\n        switch (x) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334628
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let temp: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      temp.push(arr[i]);\n    }\n  }\n  temp.sort();\n  temp.reverse();\n  for (let i = 0; i < temp.length; i++) {\n    switch (temp[i]) {\n      case 1:\n        result.push(\"One\");\n        break;\n      case 2:\n        result.push(\"Two\");\n        break;\n      case 3:\n        result.push(\"Three\");\n        break;\n      case 4:\n        result.push(\"Four\");\n        break;\n      case 5:\n        result.push(\"Five\");\n        break;\n      case 6:\n        result.push(\"Six\");\n        break;\n      case 7:\n        result.push(\"Seven\");\n        break;\n      case 8:\n        result.push(\"Eight\");\n        break;\n      case 9:\n        result.push(\"Nine\");\n        break;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334740
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let nums: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort((a, b) => a - b);\n    nums.reverse();\n    for (let i = 0; i < nums.length; i++) {\n        switch (nums[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334741
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    sorted.forEach(element => {\n        if (element >= 1 && element <= 9) {\n            result.push(getName(element));\n        }\n    });\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpixe_3bck.ts(18,25): error TS2304: Cannot find name 'getName'.\n",
      "timestamp": 1660334740
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(getName(sorted[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9cyhlxrn.ts(18,25): error TS2304: Cannot find name 'getName'.\n",
      "timestamp": 1660334737
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let temp: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      temp.push(arr[i]);\n    }\n  }\n  temp.sort((a, b) => a - b);\n  for (let i = 0; i < temp.length; i++) {\n    switch (temp[i]) {\n      case 1:\n        result.push(\"One\");\n        break;\n      case 2:\n        result.push(\"Two\");\n        break;\n      case 3:\n        result.push(\"Three\");\n        break;\n      case 4:\n        result.push(\"Four\");\n        break;\n      case 5:\n        result.push(\"Five\");\n        break;\n      case 6:\n        result.push(\"Six\");\n        break;\n      case 7:\n        result.push(\"Seven\");\n        break;\n      case 8:\n        result.push(\"Eight\");\n        break;\n      case 9:\n        result.push(\"Nine\");\n        break;\n    }\n  }\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334741
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] < 1 || sortedArr[i] > 9) {\n            continue;\n        }\n        switch (sortedArr[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334733
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let arr_sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < arr_sorted.length; i++) {\n        if (arr_sorted[i] > 0 && arr_sorted[i] < 10) {\n            switch (arr_sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334741
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let arr2: string[] = [];\n    let arr3: string[] = [];\n    let arr4: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            arr2.push(arr[i]);\n        }\n    }\n    arr2.sort(function (a, b) {\n        return a - b;\n    });\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] == 1) {\n            arr3.push(\"One\");\n        }\n        if (arr2[i] == 2) {\n            arr3.push(\"Two\");\n        }\n        if (arr2[i] == 3) {\n            arr3.push(\"Three\");\n        }\n        if (arr2[i] == 4) {\n            arr3.push(\"Four\");\n        }\n        if (arr2[i] == 5) {\n            arr3.push(\"Five\");\n        }\n        if (arr2[i] == 6) {\n            arr3.push(\"Six\");\n        }\n        if (arr2[i] == 7) {\n            arr3.push(\"Seven\");\n        }\n        if (arr2[i] == 8) {\n            arr3.push(\"Eight\");\n        }\n        if (arr2[i] == 9) {\n            arr3.push(\"Nine\");\n        }\n    }\n    for (let i = arr3.length - 1; i >= 0; i--) {\n        arr4.push(arr3[i]);\n    }\n    return arr4;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9i39_dh9.ts(19,23): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp9i39_dh9.ts(23,16): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp9i39_dh9.ts(23,20): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp9i39_dh9.ts(26,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.\n../../../../tmp/tmp9i39_dh9.ts(29,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.\n../../../../tmp/tmp9i39_dh9.ts(32,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.\n../../../../tmp/tmp9i39_dh9.ts(35,13): error TS2367: This condition will always return 'false' since the types 'string' and 'numb",
      "timestamp": 1660334741
    },
    {
      "exit_code": 1,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            switch (arr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp4qajlo4e.js:53:12)\n    at Object.<anonymous> (/tmp/tmp4qajlo4e.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three', 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    '",
      "stdout": "",
      "timestamp": 1660334622
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(arr[i].toString());\n        }\n    }\n    result.sort();\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case \"1\":\n                result[i] = \"One\";\n                break;\n            case \"2\":\n                result[i] = \"Two\";\n                break;\n            case \"3\":\n                result[i] = \"Three\";\n                break;\n            case \"4\":\n                result[i] = \"Four\";\n                break;\n            case \"5\":\n                result[i] = \"Five\";\n                break;\n            case \"6\":\n                result[i] = \"Six\";\n                break;\n            case \"7\":\n                result[i] = \"Seven\";\n                break;\n            case \"8\":\n                result[i] = \"Eight\";\n                break;\n            case \"9\":\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const result: string[] = [];\n  const sortedArr = arr.sort((a, b) => a - b);\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] > 0 && sortedArr[i] < 10) {\n      result.push(getNumberName(sortedArr[i]));\n    }\n  }\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpel1s8z9m.ts(18,19): error TS2304: Cannot find name 'getNumberName'.\n",
      "timestamp": 1660334740
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            sorted.push(arr[i]);\n        }\n    }\n    sorted.sort();\n    for (let i = sorted.length - 1; i >= 0; i--) {\n        switch (sorted[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result.push(sorted[i]);\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvc5vg28b.ts(18,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(24,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(27,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(30,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(33,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(36,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(39,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(42,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(45,18): error TS2678: Type 'number' is not comparable to type 'string'.\n../../../../tmp/tmpvc5vg28b.ts(48,18): error TS2678: Type 'number' is no",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    sorted.forEach(element => {\n        if (element >= 1 && element <= 9) {\n            switch (element) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    });\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334741
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] >= 1 && sorted[i] <= 9) {\n            result.push(numToWord(sorted[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2i4xsk_8.ts(18,25): error TS2304: Cannot find name 'numToWord'.\n",
      "timestamp": 1660334741
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  return arr\n    .filter(n => n > 0 && n < 10)\n    .sort((a, b) => a - b)\n    .reverse()\n    .map(n => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][n - 1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334741
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(numberToString(sorted[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpydte7g_2.ts(18,25): error TS2304: Cannot find name 'numberToString'.\n",
      "timestamp": 1660334630
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortArr: number[] = arr.filter(item => item >= 1 && item <= 9).sort((a, b) => a - b);\n    sortArr.reverse().forEach(item => {\n        switch (item) {\n            case 1:\n                result.push('One');\n                break;\n            case 2:\n                result.push('Two');\n                break;\n            case 3:\n                result.push('Three');\n                break;\n            case 4:\n                result.push('Four');\n                break;\n            case 5:\n                result.push('Five');\n                break;\n            case 6:\n                result.push('Six');\n                break;\n            case 7:\n                result.push('Seven');\n                break;\n            case 8:\n                result.push('Eight');\n                break;\n            case 9:\n                result.push('Nine');\n                break;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334741
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const result: string[] = [];\n    const sorted: number[] = arr.sort((a, b) => a - b);\n    sorted.forEach((num) => {\n        if (num > 0 && num < 10) {\n            switch (num) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    });\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334742
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const result: string[] = [];\n    const nums: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort((a, b) => a - b);\n    for (let i = nums.length - 1; i >= 0; i--) {\n        switch (nums[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334743
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            sortedArr.push(arr[i]);\n        }\n    }\n    sortedArr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        switch (sortedArr[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334742
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    const result: string[] = [];\n    const numbers: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            numbers.push(arr[i]);\n        }\n    }\n    numbers.sort((a, b) => a - b);\n    for (let i = 0; i < numbers.length; i++) {\n        switch (numbers[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334742
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    let reversedArr: number[] = sortedArr.reverse();\n    for (let i = 0; i < reversedArr.length; i++) {\n        if (reversedArr[i] === 1) {\n            result.push(\"One\");\n        } else if (reversedArr[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversedArr[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversedArr[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversedArr[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversedArr[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversedArr[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversedArr[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversedArr[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  let result: string[] = [];\n  let sorted: number[] = arr.sort((a, b) => a - b);\n  sorted.forEach(num => {\n    if (num > 0 && num < 10) {\n      result.push(numToWord(num));\n    }\n  });\n  return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_58di67k.ts(18,19): error TS2304: Cannot find name 'numToWord'.\n",
      "timestamp": 1660334742
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let filtered: number[] = sorted.filter(item => item >= 1 && item <= 9);\n    let reversed: number[] = filtered.reverse();\n    reversed.forEach(item => {\n        switch (item) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334743
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(getNumberName(sorted[i]));\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxe4hy22q.ts(18,25): error TS2304: Cannot find name 'getNumberName'.\n",
      "timestamp": 1660334617
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (sortedArr[i] >= 1 && sortedArr[i] <= 9) {\n            switch (sortedArr[i]) {\n                case 1:\n                    result.push(\"One\");\n                    break;\n                case 2:\n                    result.push(\"Two\");\n                    break;\n                case 3:\n                    result.push(\"Three\");\n                    break;\n                case 4:\n                    result.push(\"Four\");\n                    break;\n                case 5:\n                    result.push(\"Five\");\n                    break;\n                case 6:\n                    result.push(\"Six\");\n                    break;\n                case 7:\n                    result.push(\"Seven\");\n                    break;\n                case 8:\n                    result.push(\"Eight\");\n                    break;\n                case 9:\n                    result.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334621
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] < 1 || sorted[i] > 9) {\n            continue;\n        }\n        switch (sorted[i]) {\n            case 1:\n                result.push(\"One\");\n                break;\n            case 2:\n                result.push(\"Two\");\n                break;\n            case 3:\n                result.push(\"Three\");\n                break;\n            case 4:\n                result.push(\"Four\");\n                break;\n            case 5:\n                result.push(\"Five\");\n                break;\n            case 6:\n                result.push(\"Six\");\n                break;\n            case 7:\n                result.push(\"Seven\");\n                break;\n            case 8:\n                result.push(\"Eight\");\n                break;\n            case 9:\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    let reversed: number[] = sorted.reverse();\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i] === 1) {\n            result.push(\"One\");\n        } else if (reversed[i] === 2) {\n            result.push(\"Two\");\n        } else if (reversed[i] === 3) {\n            result.push(\"Three\");\n        } else if (reversed[i] === 4) {\n            result.push(\"Four\");\n        } else if (reversed[i] === 5) {\n            result.push(\"Five\");\n        } else if (reversed[i] === 6) {\n            result.push(\"Six\");\n        } else if (reversed[i] === 7) {\n            result.push(\"Seven\");\n        } else if (reversed[i] === 8) {\n            result.push(\"Eight\");\n        } else if (reversed[i] === 9) {\n            result.push(\"Nine\");\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334614
    },
    {
      "exit_code": 2,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sortedArr: number[] = arr.sort((a, b) => a - b);\n    sortedArr.forEach(element => {\n        if (element >= 1 && element <= 9) {\n            result.push(getName(element));\n        }\n    });\n    return result.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp18g4coix.ts(18,25): error TS2304: Cannot find name 'getName'.\n",
      "timestamp": 1660334742
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const sorted = arr.filter(x => x > 0 && x < 10).sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map(x => {\n    switch (x) {\n      case 1:\n        return \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\";\n    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334743
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let result: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            result.push(sorted[i].toString());\n        }\n    }\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n        switch (result[i]) {\n            case \"1\":\n                result[i] = \"One\";\n                break;\n            case \"2\":\n                result[i] = \"Two\";\n                break;\n            case \"3\":\n                result[i] = \"Three\";\n                break;\n            case \"4\":\n                result[i] = \"Four\";\n                break;\n            case \"5\":\n                result[i] = \"Five\";\n                break;\n            case \"6\":\n                result[i] = \"Six\";\n                break;\n            case \"7\":\n                result[i] = \"Seven\";\n                break;\n            case \"8\":\n                result[i] = \"Eight\";\n                break;\n            case \"9\":\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334618
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let res: string[] = [];\n    let sorted: number[] = arr.sort((a, b) => a - b);\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > 0 && sorted[i] < 10) {\n            switch (sorted[i]) {\n                case 1:\n                    res.push(\"One\");\n                    break;\n                case 2:\n                    res.push(\"Two\");\n                    break;\n                case 3:\n                    res.push(\"Three\");\n                    break;\n                case 4:\n                    res.push(\"Four\");\n                    break;\n                case 5:\n                    res.push(\"Five\");\n                    break;\n                case 6:\n                    res.push(\"Six\");\n                    break;\n                case 7:\n                    res.push(\"Seven\");\n                    break;\n                case 8:\n                    res.push(\"Eight\");\n                    break;\n                case 9:\n                    res.push(\"Nine\");\n                    break;\n            }\n        }\n    }\n    return res.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334743
    },
    {
      "exit_code": 0,
      "program": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    let sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => a - b).reverse();\n    return sorted.map(x => {\n        switch (x) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334743
    }
  ]
}