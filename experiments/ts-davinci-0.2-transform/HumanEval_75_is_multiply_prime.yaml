name: HumanEval_75_is_multiply_prime
language: ts
prompt: "//Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
  function is_multiply_prime(a: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n\
  \  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n\
  \  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n\
  \  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n\
  \  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n\
  \  assert.deepEqual(candidate(1001),true);\n}\n\ntest();"
completions: ["    let result: boolean = false;\n    for (let i: number = 2; i < a;\
    \ i++) {\n        if (a % i == 0) {\n            for (let j: number = 2; j < a;\
    \ j++) {\n                if (a % j == 0) {\n                    for (let k: number\
    \ = 2; k < a; k++) {\n                        if (a % k == 0) {\n            \
    \                if (a == i * j * k) {\n                                result\
    \ = true;\n                            }\n                        }\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nconsole.log(is_multiply_prime(30));\n", "    let isPrime: boolean\
    \ = true;\n    for (let i: number = 2; i < a; i++) {\n        if (a % i === 0)\
    \ {\n            isPrime = false;\n        }\n    }\n    return isPrime;\n}\n",
  "    let prime_numbers: number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let prime_numbers_length:\
    \ number = prime_numbers.length;\n    let is_multiply_prime: boolean = false;\n\
    \    for (let i: number = 0; i < prime_numbers_length; i++) {\n        for (let\
    \ j: number = 0; j < prime_numbers_length; j++) {\n            for (let k: number\
    \ = 0; k < prime_numbers_length; k++) {\n                if (prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] === a) {\n                    is_multiply_prime\
    \ = true;\n                }\n            }\n        }\n    }\n    return is_multiply_prime;\n\
    }\nconsole.log(is_multiply_prime(30));\n", "    let result: boolean = false;\n\
    \    let primes: number[] = [];\n    for (let i: number = 2; i < a; i++) {\n \
    \       if (is_prime(i)) {\n            primes.push(i);\n        }\n    }\n  \
    \  for (let i: number = 0; i < primes.length; i++) {\n        for (let j: number\
    \ = 0; j < primes.length; j++) {\n            for (let k: number = 0; k < primes.length;\
    \ k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n   \
    \                 result = true;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n", "    let\
    \ result: boolean = false;\n    let prime_numbers: number[] = [];\n    for (let\
    \ i: number = 2; i < a; i++) {\n        if (is_prime(i)) {\n            prime_numbers.push(i);\n\
    \        }\n    }\n    for (let i: number = 0; i < prime_numbers.length; i++)\
    \ {\n        for (let j: number = 0; j < prime_numbers.length; j++) {\n      \
    \      for (let k: number = 0; k < prime_numbers.length; k++) {\n            \
    \    if (prime_numbers[i] * prime_numbers[j] * prime_numbers[k] === a) {\n   \
    \                 result = true;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n", "    let\
    \ result: boolean = false;\n    let primeNumbers: number[] = [];\n    for (let\
    \ i: number = 2; i < a; i++) {\n        if (is_prime(i)) {\n            primeNumbers.push(i);\n\
    \        }\n    }\n    for (let i: number = 0; i < primeNumbers.length; i++) {\n\
    \        for (let j: number = 0; j < primeNumbers.length; j++) {\n           \
    \ for (let k: number = 0; k < primeNumbers.length; k++) {\n                if\
    \ (primeNumbers[i] * primeNumbers[j] * primeNumbers[k] === a) {\n            \
    \        result = true;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\nconsole.log(is_multiply_prime(30));\n", "    let isPrime:\
    \ boolean = true;\n    let isMultiplyPrime: boolean = false;\n    let primeNumbers:\
    \ number[] = [];\n    for (let i: number = 2; i < a; i++) {\n        for (let\
    \ j: number = 2; j < i; j++) {\n            if (i % j === 0) {\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   if (isPrime) {\n            primeNumbers.push(i);\n        }\n        isPrime\
    \ = true;\n    }\n    for (let i: number = 0; i < primeNumbers.length; i++) {\n\
    \        for (let j: number = 0; j < primeNumbers.length; j++) {\n           \
    \ for (let k: number = 0; k < primeNumbers.length; k++) {\n                if\
    \ (primeNumbers[i] * primeNumbers[j] * primeNumbers[k] === a) {\n            \
    \        isMultiplyPrime = true;\n                }\n            }\n        }\n\
    \    }\n    return isMultiplyPrime;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let primeNumbers: number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let primeNumbersCount:\
    \ number = 0;\n    let result: boolean = false;\n    for (let i: number = 0; i\
    \ < primeNumbers.length; i++) {\n        if (a % primeNumbers[i] === 0) {\n  \
    \          primeNumbersCount++;\n        }\n    }\n    if (primeNumbersCount ===\
    \ 3) {\n        result = true;\n    }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n\
    console.log(is_multiply_prime(31));\n", "    let result: boolean = false;\n  \
    \  let primeNumbers: number[] = [];\n    let counter: number = 0;\n    for (let\
    \ i: number = 2; i < a; i++) {\n        if (is_prime(i)) {\n            primeNumbers.push(i);\n\
    \        }\n    }\n    for (let i: number = 0; i < primeNumbers.length; i++) {\n\
    \        for (let j: number = 0; j < primeNumbers.length; j++) {\n           \
    \ for (let k: number = 0; k < primeNumbers.length; k++) {\n                if\
    \ (primeNumbers[i] * primeNumbers[j] * primeNumbers[k] === a) {\n            \
    \        counter++;\n                }\n            }\n        }\n    }\n    if\
    \ (counter > 0) {\n        result = true;\n    }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let prime: number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let result: boolean = false;\n\
    \    for (let i: number = 0; i < prime.length; i++) {\n        for (let j: number\
    \ = 0; j < prime.length; j++) {\n            for (let k: number = 0; k < prime.length;\
    \ k++) {\n                if (prime[i] * prime[j] * prime[k] == a) {\n       \
    \             result = true;\n                }\n            }\n        }\n  \
    \  }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n", "    let\
    \ prime = true;\n    for (let i = 2; i < a; i++) {\n        if (a % i === 0) {\n\
    \            prime = false;\n        }\n    }\n    return prime;\n}\n", "    let\
    \ result: boolean = false;\n    let primeNumbers: number[] = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97];\n    let primeNumbersLength: number = primeNumbers.length;\n    let primeNumbersIndex:\
    \ number = 0;\n    let primeNumbersIndex2: number = 0;\n    let primeNumbersIndex3:\
    \ number = 0;\n    let primeNumbersIndex4: number = 0;\n    let primeNumbersIndex5:\
    \ number = 0;\n    let primeNumbersIndex6: number = 0;\n    let primeNumbersIndex7:\
    \ number = 0;\n    let primeNumbersIndex8: number = 0;\n    let primeNumbersIndex9:\
    \ number = 0;\n    let primeNumbersIndex10: number = 0;\n    let primeNumbersIndex11:\
    \ number = 0;\n    let primeNumbersIndex12: number = 0;\n    let primeNumbersIndex13:\
    \ number = 0;\n    let primeNumbersIndex14: number = 0;\n    let primeNumbersIndex15:\
    \ number = 0;\n    let primeNumbersIndex16: number = 0;\n    let primeNumbersIndex17:\
    \ number = 0;\n    let primeNumbersIndex18: number = 0;\n    let primeNumbersIndex19:\
    \ number = 0;\n    let primeNumbersIndex20: number = 0;\n    let primeNumbersIndex21:\
    \ number = 0;\n    let primeNumbersIndex22: number = 0;\n    let primeNumbersIndex23:\
    \ number = 0;\n    let primeNumbersIndex24: number = 0;\n    let primeNumbersIndex25:\
    \ number = 0;\n    let primeNumbersIndex26: number = 0;\n    let primeNumbersIndex27:\
    \ number = 0;\n    let primeNumbersIndex28: number = 0;\n    let primeNumbersIndex29:\
    \ number = 0;\n    let primeNumbersIndex30: number = 0;\n    let primeNumbersIndex31:\
    \ number = 0;\n    let primeNumbersIndex32: number = 0;\n    let primeNumbersIndex33:\
    \ number = 0;\n    let primeNumbersIndex34: number = 0;\n    let primeNumbersIndex35:\
    \ number = 0;\n    let primeNumbersIndex36: number =", "    let prime_numbers:\
    \ number[] = [];\n    for (let i: number = 2; i < a; i++) {\n        if (is_prime(i))\
    \ {\n            prime_numbers.push(i);\n        }\n    }\n    let result: boolean\
    \ = false;\n    for (let i: number = 0; i < prime_numbers.length; i++) {\n   \
    \     for (let j: number = 0; j < prime_numbers.length; j++) {\n            for\
    \ (let k: number = 0; k < prime_numbers.length; k++) {\n                if (prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] === a) {\n                    result =\
    \ true;\n                }\n            }\n        }\n    }\n    return result;\n\
    }\nconsole.log(is_multiply_prime(30));\n", "    let prime_numbers: number[] =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    let result: boolean = false;\n    for (let i: number\
    \ = 0; i < prime_numbers.length; i++) {\n        for (let j: number = 0; j < prime_numbers.length;\
    \ j++) {\n            for (let k: number = 0; k < prime_numbers.length; k++) {\n\
    \                if (prime_numbers[i] * prime_numbers[j] * prime_numbers[k] ==\
    \ a) {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let result: boolean = false;\n    let primeNumbers: number[] = [];\n    for\
    \ (let i: number = 2; i < a; i++) {\n        if (is_prime(i)) {\n            primeNumbers.push(i);\n\
    \        }\n    }\n    for (let i: number = 0; i < primeNumbers.length; i++) {\n\
    \        for (let j: number = 0; j < primeNumbers.length; j++) {\n           \
    \ for (let k: number = 0; k < primeNumbers.length; k++) {\n                if\
    \ (primeNumbers[i] * primeNumbers[j] * primeNumbers[k] === a) {\n            \
    \        result = true;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(is_multiply_prime(30));\n", "    let result:\
    \ boolean = false;\n    let primeNumbers: number[] = [];\n    for (let i: number\
    \ = 2; i < a; i++) {\n        if (is_prime(i)) {\n            primeNumbers.push(i);\n\
    \        }\n    }\n    for (let i: number = 0; i < primeNumbers.length; i++) {\n\
    \        for (let j: number = 0; j < primeNumbers.length; j++) {\n           \
    \ for (let k: number = 0; k < primeNumbers.length; k++) {\n                if\
    \ (primeNumbers[i] * primeNumbers[j] * primeNumbers[k] === a) {\n            \
    \        result = true;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let isPrime: boolean = true;\n    let isMultiplyPrime:\
    \ boolean = false;\n    let counter: number = 0;\n    let primeNumbers: number[]\
    \ = [];\n    for (let i: number = 2; i < a; i++) {\n        for (let j: number\
    \ = 2; j < i; j++) {\n            if (i % j === 0) {\n                isPrime\
    \ = false;\n            }\n        }\n        if (isPrime) {\n            primeNumbers.push(i);\n\
    \        }\n        isPrime = true;\n    }\n    for (let i: number = 0; i < primeNumbers.length;\
    \ i++) {\n        for (let j: number = 0; j < primeNumbers.length; j++) {\n  \
    \          for (let k: number = 0; k < primeNumbers.length; k++) {\n         \
    \       if (primeNumbers[i] * primeNumbers[j] * primeNumbers[k] === a) {\n   \
    \                 counter++;\n                }\n            }\n        }\n  \
    \  }\n    if (counter > 0) {\n        isMultiplyPrime = true;\n    }\n    return\
    \ isMultiplyPrime;\n}\nconsole.log(is_multiply_prime(30));\n", "    let primeNumbers:\
    \ number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    let primeNumbersOfA: number[] = [];\n\
    \    for (let i: number = 0; i < primeNumbers.length; i++) {\n        if (a %\
    \ primeNumbers[i] === 0) {\n            primeNumbersOfA.push(primeNumbers[i]);\n\
    \        }\n    }\n    if (primeNumbersOfA.length === 3) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let isPrime: boolean = true;\n    for (let i: number = 2; i < a; i++) {\n \
    \       if (a % i === 0) {\n            isPrime = false;\n        }\n    }\n \
    \   return isPrime;\n}\n", "    let isPrime: boolean = true;\n    let isMultiply:\
    \ boolean = false;\n    let count: number = 0;\n    for (let i: number = 2; i\
    \ < a; i++) {\n        for (let j: number = 2; j < i; j++) {\n            if (i\
    \ % j == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime) {\n            if (a % i == 0) {\n\
    \                count++;\n            }\n        }\n        isPrime = true;\n\
    \    }\n    if (count == 3) {\n        isMultiply = true;\n    }\n    return isMultiply;\n\
    }\nconsole.log(is_multiply_prime(30));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
