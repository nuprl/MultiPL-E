language: ts
name: HumanEval_80_is_happy
results:
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"\
    aa\"));\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"));\n\
    console.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let result = true;\n  let i = 0;\n  while\
    \ (i < s.length - 2) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i\
    \ + 1] === s[i + 2]) {\n      result = false;\n      break;\n    }\n    i++;\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1fu79lj2.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1fu79lj2.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    let arr:\
    \ string[] = s.split('');\n    if (arr.length < 3) {\n        result = false;\n\
    \    } else {\n        for (let i: number = 0; i < arr.length - 2; i++) {\n  \
    \          if (arr[i] === arr[i + 1] || arr[i] === arr[i + 2] || arr[i + 1] ===\
    \ arr[i + 2]) {\n                result = false;\n            }\n        }\n \
    \   }\n    return result;\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    // your code here\n    return null;\n}\n\
    \n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpadjwfesc.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpadjwfesc.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result = true;\n    if (s.length < 3)\
    \ {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && s.split('').every((v,\
    \ i, a) => i === 0 || v !== a[i - 1] && v !== a[i - 2]);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    let result = true;\n    for (let i = 0; i < s.length - 2; i++) {\n\
    \        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2])\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"aa\"));\n\
    console.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"\
    adb\"));\nconsole.log(is_happy(\"xyy\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result = true;\n    if (s.length < 3)\
    \ {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"\
    aa\"));\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"));\n\
    console.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy = true;\n    let i = 0;\n    while\
    \ (i < s.length - 2) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] ||\
    \ s[i + 1] === s[i + 2]) {\n            happy = false;\n            break;\n \
    \       }\n        i++;\n    }\n    return happy;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgyyb5nq7.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgyyb5nq7.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    let i = 0;\n    while (i < s.length - 2) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n        i++;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let happy = true;\n  for (let i = 0; i < s.length\
    \ - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] ===\
    \ s[i + 2]) {\n      happy = false;\n    }\n  }\n  return happy;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4k63urg4.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4k63urg4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    let arr = s.split('');\n    for (let i = 0; i < arr.length - 2; i++)\
    \ {\n        if (arr[i] === arr[i + 1] || arr[i] === arr[i + 2] || arr[i + 1]\
    \ === arr[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result = true;\n    if (s.length < 3)\
    \ {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let isHappy: boolean = true;\n    if (s.length\
    \ < 3) {\n        isHappy = false;\n    } else {\n        for (let i = 0; i <\
    \ s.length - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2]\
    \ || s[i + 1] === s[i + 2]) {\n                isHappy = false;\n            }\n\
    \        }\n    }\n    return isHappy;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    let i = 0;\n    while (i < s.length - 2) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n        i++;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && s.split('').every((v,\
    \ i, a) => i < a.length - 2 ? v !== a[i + 1] && v !== a[i + 2] : true);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0b9epbui.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0b9epbui.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy: boolean = true;\n    let i: number\
    \ = 0;\n    while (i < s.length - 2) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) {\n            happy = false;\n     \
    \       break;\n        }\n        i++;\n    }\n    return happy;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp423y9f2p.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp423y9f2p.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    let i:\
    \ number = 0;\n    while (i < s.length - 2) {\n        if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            result = false;\n\
    \            break;\n        }\n        i++;\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp38nnxj6c.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp38nnxj6c.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy = true;\n    for (let i = 0; i\
    \ < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] ||\
    \ s[i + 1] === s[i + 2]) {\n            happy = false;\n        }\n    }\n   \
    \ return happy;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv8cunpk6.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv8cunpk6.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let isHappy: boolean = true;\n    if (s.length\
    \ < 3) {\n        isHappy = false;\n    } else {\n        for (let i = 0; i <\
    \ s.length - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2]\
    \ || s[i + 1] === s[i + 2]) {\n                isHappy = false;\n            }\n\
    \        }\n    }\n    return isHappy;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result = true;\n    if (s.length < 3)\
    \ {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result = true;\n    if (s.length < 3)\
    \ {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy: boolean = true;\n    if (s.length\
    \ < 3) {\n        happy = false;\n    } else {\n        for (let i: number = 0;\
    \ i < s.length - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]) {\n                happy = false;\n         \
    \   }\n        }\n    }\n    return happy;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let result = true;\n  for (let i = 0; i <\
    \ s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i\
    \ + 1] === s[i + 2]) {\n      result = false;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphtp5c_fb.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphtp5c_fb.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy = true;\n    if (s.length < 3)\
    \ {\n        happy = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                happy = false;\n            }\n        }\n\
    \    }\n    return happy;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy: boolean = true;\n    if (s.length\
    \ < 3) {\n        happy = false;\n    } else {\n        for (let i: number = 0;\
    \ i < s.length - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]) {\n                happy = false;\n         \
    \   }\n        }\n    }\n    return happy;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let isHappy: boolean = true;\n    if (s.length\
    \ < 3) {\n        isHappy = false;\n    } else {\n        for (let i = 0; i <\
    \ s.length - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2]\
    \ || s[i + 1] === s[i + 2]) {\n                isHappy = false;\n            }\n\
    \        }\n    }\n    return isHappy;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    // TODO: implement this function\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprw0mxsns.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprw0mxsns.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy: boolean = true;\n    if (s.length\
    \ < 3) {\n        happy = false;\n    } else {\n        for (let i: number = 0;\
    \ i < s.length - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]) {\n                happy = false;\n         \
    \   }\n        }\n    }\n    return happy;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    let i:\
    \ number = 0;\n    while (i < s.length - 2) {\n        if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            result = false;\n\
    \            break;\n        }\n        i++;\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp38nnxj6c.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp38nnxj6c.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    let result = true;\n    for (let i = 0; i < s.length - 2; i++) {\n\
    \        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2])\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738816
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = true;\n    if (s.length\
    \ < 3) {\n        result = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                result = false;\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738814
