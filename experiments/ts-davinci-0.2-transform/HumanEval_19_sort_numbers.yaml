name: HumanEval_19_sort_numbers
language: ts
prompt: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction\
  \ sort_numbers(numbers: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\
  \");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
  three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero\
  \ four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
  six five four three two one zero\"),\"zero one two three four five six\");\n}\n\n\
  test();"
completions: ["  const numeral_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n \
    \   three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight:\
    \ 8,\n    nine: 9,\n  };\n  const nums = numbers.split(\" \");\n  const nums_sorted\
    \ = nums.sort((a, b) => {\n    return numeral_map[a] - numeral_map[b];\n  });\n\
    \  return nums_sorted.join(\" \");\n}\n", "  const nums = numbers.split(\" \"\
    );\n  const nums_sorted = nums.sort((a, b) => {\n    const num_a = number_to_numeral(a);\n\
    \    const num_b = number_to_numeral(b);\n    return num_a - num_b;\n  });\n \
    \ return nums_sorted.join(\" \");\n}\n", "  const numMap = {\n    zero: 0,\n \
    \   one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six:\
    \ 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const nums = numbers.split(\"\
    \ \");\n  const numsArr = nums.map((num) => numMap[num]);\n  const sortedNums\
    \ = numsArr.sort((a, b) => a - b);\n  const sortedNumsStr = sortedNums.map((num)\
    \ => Object.keys(numMap).find((key) => numMap[key] === num));\n  return sortedNumsStr.join(\"\
    \ \");\n}\n", "  const nums = numbers.split(\" \");\n  const nums_map = {\n  \
    \  zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five:\
    \ 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n  };\n  const sorted\
    \ = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n  return sorted.join(\" \"\
    );\n}\n", "  let nums = numbers.split(\" \");\n  let nums_sorted = nums.sort((a,\
    \ b) => {\n    return number_to_numeral(a) - number_to_numeral(b);\n  });\n  return\
    \ nums_sorted.join(\" \");\n}\n", "  const numeral_map = {\n    zero: 0,\n   \
    \ one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n\
    \    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const nums = numbers.split(\"\
    \ \");\n  const nums_sorted = nums.sort((a, b) => {\n    return numeral_map[a]\
    \ - numeral_map[b];\n  });\n  return nums_sorted.join(\" \");\n}\n", "  const\
    \ nums = numbers.split(\" \");\n  const nums_sorted = nums.sort((a, b) => {\n\
    \    const num_a = number_to_numeral(a);\n    const num_b = number_to_numeral(b);\n\
    \    return num_a - num_b;\n  });\n  return nums_sorted.join(\" \");\n}\n", " \
    \ const nums = numbers.split(\" \");\n  const nums_map = {\n    zero: 0,\n   \
    \ one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n\
    \    seven: 7,\n    eight: 8,\n    nine: 9\n  };\n  const nums_sorted = nums.sort((a,\
    \ b) => nums_map[a] - nums_map[b]);\n  return nums_sorted.join(\" \");\n}\n",
  "  const nums = numbers.split(\" \");\n  const numsMap = {\n    zero: 0,\n    one:\
    \ 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n  \
    \  seven: 7,\n    eight: 8,\n    nine: 9\n  };\n  const sortedNums = nums.sort((a,\
    \ b) => numsMap[a] - numsMap[b]);\n  return sortedNums.join(\" \");\n}\n", " \
    \ const nums = numbers.split(\" \");\n  const nums_obj = {\n    zero: 0,\n   \
    \ one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n\
    \    seven: 7,\n    eight: 8,\n    nine: 9\n  };\n  const nums_arr = nums.map(num\
    \ => nums_obj[num]);\n  const sorted_nums = nums_arr.sort((a, b) => a - b);\n\
    \  const sorted_nums_str = sorted_nums.map(num => {\n    for (let key in nums_obj)\
    \ {\n      if (nums_obj[key] === num) {\n        return key;\n      }\n    }\n\
    \  });\n  return sorted_nums_str.join(\" \");\n}\n", "  const nums: number[] =\
    \ numbers.split(' ').map(num => {\n    switch (num) {\n      case 'zero':\n  \
    \      return 0;\n      case 'one':\n        return 1;\n      case 'two':\n  \
    \      return 2;\n      case 'three':\n        return 3;\n      case 'four':\n\
    \        return 4;\n      case 'five':\n        return 5;\n      case 'six':\n\
    \        return 6;\n      case 'seven':\n        return 7;\n      case 'eight':\n\
    \        return 8;\n      case 'nine':\n        return 9;\n      default:\n  \
    \      return -1;\n    }\n  });\n  nums.sort((a, b) => a - b);\n  return nums.map(num\
    \ => {\n    switch (num) {\n      case 0:\n        return 'zero';\n      case\
    \ 1:\n        return 'one';\n      case 2:\n        return 'two';\n      case\
    \ 3:\n        return 'three';\n      case 4:\n        return 'four';\n      case\
    \ 5:\n        return 'five';\n      case 6:\n        return 'six';\n      case\
    \ 7:\n        return 'seven';\n      case 8:\n        return 'eight';\n      case\
    \ 9:\n        return 'nine';\n      default:\n        return 'invalid';\n    }\n\
    \  }).join(' ');\n}\n", "  const nums = numbers.split(\" \");\n  const nums_sorted\
    \ = nums.sort((a, b) => {\n    const num_a = numeral_to_number(a);\n    const\
    \ num_b = numeral_to_number(b);\n    return num_a - num_b;\n  });\n  return nums_sorted.join(\"\
    \ \");\n}\n", "    const nums = numbers.split(' ');\n    const nums_map = {\n\
    \        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n\
    \        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    const sorted = nums.sort((a,\
    \ b) => nums_map[a] - nums_map[b]);\n    return sorted.join(' ');\n}\n", "  const\
    \ nums = numbers.split(\" \");\n  const numsMap = {\n    zero: 0,\n    one: 1,\n\
    \    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven:\
    \ 7,\n    eight: 8,\n    nine: 9\n  };\n  const numsSorted = nums.sort((a, b)\
    \ => numsMap[a] - numsMap[b]);\n  return numsSorted.join(\" \");\n}\n", "  const\
    \ nums = numbers.split(\" \");\n  const numMap = {\n    zero: 0,\n    one: 1,\n\
    \    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven:\
    \ 7,\n    eight: 8,\n    nine: 9\n  };\n  const sortedNums = nums.sort((a, b)\
    \ => numMap[a] - numMap[b]);\n  return sortedNums.join(\" \");\n}\n", "  const\
    \ numeralMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four:\
    \ 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n\
    \  };\n  const nums = numbers.split(\" \");\n  const numsSorted = nums.sort((a,\
    \ b) => numeralMap[a] - numeralMap[b]);\n  return numsSorted.join(\" \");\n}\n",
  "  const nums = numbers.split(\" \");\n  const nums_to_sort = nums.map((num) =>\
    \ {\n    switch (num) {\n      case \"zero\":\n        return 0;\n      case \"\
    one\":\n        return 1;\n      case \"two\":\n        return 2;\n      case\
    \ \"three\":\n        return 3;\n      case \"four\":\n        return 4;\n   \
    \   case \"five\":\n        return 5;\n      case \"six\":\n        return 6;\n\
    \      case \"seven\":\n        return 7;\n      case \"eight\":\n        return\
    \ 8;\n      case \"nine\":\n        return 9;\n      default:\n        return\
    \ 0;\n    }\n  });\n  const sorted_nums = nums_to_sort.sort((a, b) => a - b);\n\
    \  const sorted_words = sorted_nums.map((num) => {\n    switch (num) {\n     \
    \ case 0:\n        return \"zero\";\n      case 1:\n        return \"one\";\n\
    \      case 2:\n        return \"two\";\n      case 3:\n        return \"three\"\
    ;\n      case 4:\n        return \"four\";\n      case 5:\n        return \"five\"\
    ;\n      case 6:\n        return \"six\";\n      case 7:\n        return \"seven\"\
    ;\n      case 8:\n        return \"eight\";\n      case 9:\n        return \"\
    nine\";\n      default:\n        return \"zero\";\n    }\n  });\n  return sorted_words.join(\"\
    \ \");\n}\n", "    let nums = numbers.split(\" \");\n    let nums_int = [];\n\
    \    for (let i = 0; i < nums.length; i++) {\n        nums_int.push(numeral_to_int(nums[i]));\n\
    \    }\n    nums_int.sort(function (a, b) { return a - b });\n    let nums_str\
    \ = [];\n    for (let i = 0; i < nums_int.length; i++) {\n        nums_str.push(int_to_numeral(nums_int[i]));\n\
    \    }\n    return nums_str.join(\" \");\n}\n", "  const nums = numbers.split(\"\
    \ \");\n  const nums_sorted = nums.sort((a, b) => {\n    const num_a = numeral_to_number(a);\n\
    \    const num_b = numeral_to_number(b);\n    return num_a - num_b;\n  });\n \
    \ return nums_sorted.join(\" \");\n}\n", "  const nums = numbers.split(\" \");\n\
    \  nums.sort((a, b) => {\n    const nums = {\n      zero: 0,\n      one: 1,\n\
    \      two: 2,\n      three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n\
    \      seven: 7,\n      eight: 8,\n      nine: 9\n    };\n    return nums[a] -\
    \ nums[b];\n  });\n  return nums.join(\" \");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
