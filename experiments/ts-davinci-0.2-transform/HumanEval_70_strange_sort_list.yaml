name: HumanEval_70_strange_sort_list
language: ts
prompt: "//Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
  \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
  \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
  \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    let sorted = lst.sort((a, b) => a - b);\n    let result = [];\n\
    \    let i = 0;\n    let j = sorted.length - 1;\n    while (i <= j) {\n      \
    \  result.push(sorted[i]);\n        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n\
    \            j--;\n        }\n    }\n    return result;\n}\n", "    let result:\
    \ number[] = [];\n    let min: number = Math.min(...lst);\n    let max: number\
    \ = Math.max(...lst);\n    let min_index: number = lst.indexOf(min);\n    let\
    \ max_index: number = lst.indexOf(max);\n    let min_max_index: number = Math.max(min_index,\
    \ max_index);\n    let max_min_index: number = Math.min(min_index, max_index);\n\
    \    let new_lst: number[] = lst.slice(0, min_max_index).concat(lst.slice(min_max_index\
    \ + 1));\n    result.push(min);\n    result.push(max);\n    while (new_lst.length\
    \ > 0) {\n        min = Math.min(...new_lst);\n        max = Math.max(...new_lst);\n\
    \        min_index = new_lst.indexOf(min);\n        max_index = new_lst.indexOf(max);\n\
    \        min_max_index = Math.max(min_index, max_index);\n        max_min_index\
    \ = Math.min(min_index, max_index);\n        result.push(min);\n        result.push(max);\n\
    \        new_lst = new_lst.slice(0, max_min_index).concat(new_lst.slice(max_min_index\
    \ + 1));\n    }\n    return result;\n}\n", "    let result: number[] = [];\n \
    \   let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let min_index: number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_max_index: number = Math.max(min_index, max_index);\n    let max_min_index:\
    \ number = Math.min(min_index, max_index);\n    let lst_min_max: number[] = lst.slice(0,\
    \ min_max_index + 1);\n    let lst_max_min: number[] = lst.slice(min_max_index\
    \ + 1, lst.length);\n    lst_min_max.splice(max_min_index, 1);\n    lst_max_min.splice(min_max_index\
    \ - max_min_index, 1);\n    lst_min_max.splice(min_max_index - max_min_index,\
    \ 0, max);\n    lst_max_min.splice(0, 0, min);\n    result = lst_min_max.concat(lst_max_min);\n\
    \    return result;\n}\n", "    if (lst.length === 0) {\n        return lst;\n\
    \    }\n    const min = Math.min(...lst);\n    const max = Math.max(...lst);\n\
    \    const min_index = lst.indexOf(min);\n    const max_index = lst.indexOf(max);\n\
    \    const new_lst = [min];\n    lst.splice(min_index, 1);\n    while (lst.length\
    \ > 0) {\n        const max = Math.max(...lst);\n        const max_index = lst.indexOf(max);\n\
    \        new_lst.push(max);\n        lst.splice(max_index, 1);\n        if (lst.length\
    \ === 0) {\n            break;\n        }\n        const min = Math.min(...lst);\n\
    \        const min_index = lst.indexOf(min);\n        new_lst.push(min);\n   \
    \     lst.splice(min_index, 1);\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ === 0) {\n        return lst;\n    }\n    const min = Math.min(...lst);\n  \
    \  const max = Math.max(...lst);\n    const min_index = lst.indexOf(min);\n  \
    \  const max_index = lst.indexOf(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return [min, max, ...strange_sort_list(lst)];\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    const sorted = lst.sort((a, b) => a\
    \ - b);\n    const result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n\
    \    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n       \
    \ if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n     \
    \   }\n    }\n    return result;\n}\n", "    if (lst.length === 0) {\n       \
    \ return [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let new_lst = [min];\n    let new_lst2 = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] !== min) {\n            new_lst2.push(lst[i]);\n\
    \        }\n    }\n    let new_lst3 = [];\n    for (let i = 0; i < new_lst2.length;\
    \ i++) {\n        if (new_lst2[i] !== max) {\n            new_lst3.push(new_lst2[i]);\n\
    \        }\n    }\n    new_lst.push(max);\n    return new_lst.concat(strange_sort_list(new_lst3));\n\
    }\n", "    if (lst.length === 0) {\n        return [];\n    }\n    const min =\
    \ Math.min(...lst);\n    const max = Math.max(...lst);\n    const minIndex = lst.indexOf(min);\n\
    \    const maxIndex = lst.indexOf(max);\n    const newLst = lst.slice();\n   \
    \ newLst.splice(minIndex, 1);\n    newLst.splice(maxIndex - 1, 1);\n    return\
    \ [min, max, ...strange_sort_list(newLst)];\n}\n", "    if (lst.length === 0)\
    \ {\n        return [];\n    }\n    let min = Math.min(...lst);\n    let max =\
    \ Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let max_index\
    \ = lst.indexOf(max);\n    let new_lst = [min];\n    lst.splice(min_index, 1);\n\
    \    lst.splice(max_index - 1, 1);\n    while (lst.length > 0) {\n        min\
    \ = Math.min(...lst);\n        max = Math.max(...lst);\n        min_index = lst.indexOf(min);\n\
    \        max_index = lst.indexOf(max);\n        new_lst.push(max);\n        lst.splice(min_index,\
    \ 1);\n        lst.splice(max_index - 1, 1);\n    }\n    return new_lst;\n}\n",
  "    if (lst.length === 0) {\n        return [];\n    }\n    if (lst.length ===\
    \ 1) {\n        return lst;\n    }\n    let min = Math.min(...lst);\n    let max\
    \ = Math.max(...lst);\n    let new_list = [];\n    let i = 0;\n    while (new_list.length\
    \ < lst.length) {\n        if (i % 2 === 0) {\n            new_list.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        } else {\n            new_list.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return new_list;\n}\n", "    if (lst.length === 0) {\n        return lst;\n\
    \    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n   \
    \ let result = [];\n    let i = 0;\n    while (lst.length > 0) {\n        if (i\
    \ % 2 === 0) {\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    lst.sort((a, b) => a - b);\n    let\
    \ result = [];\n    let i = 0;\n    let j = lst.length - 1;\n    while (i <= j)\
    \ {\n        result.push(lst[i]);\n        i++;\n        if (i <= j) {\n     \
    \       result.push(lst[j]);\n            j--;\n        }\n    }\n    return result;\n\
    }\n", "    let result: number[] = [];\n    let sortedList: number[] = lst.sort((a,\
    \ b) => a - b);\n    let i: number = 0;\n    let j: number = sortedList.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sortedList[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sortedList[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n", "    if (lst.length == 0) {\n   \
    \     return [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let min_index = lst.indexOf(min);\n    let max_index = lst.indexOf(max);\n\
    \    let new_lst = [];\n    new_lst.push(min);\n    lst.splice(min_index, 1);\n\
    \    new_lst.push(max);\n    lst.splice(max_index, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let new_lst = [];\n    while (lst.length\
    \ > 0) {\n        new_lst.push(min);\n        lst.splice(lst.indexOf(min), 1);\n\
    \        if (lst.length > 0) {\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n        }\n        min = Math.min(...lst);\n        max = Math.max(...lst);\n\
    \    }\n    return new_lst;\n}\n", "    if (lst.length === 0) {\n        return\
    \ [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let new_lst = [];\n    let i = 0;\n    while (new_lst.length < lst.length)\
    \ {\n        if (i % 2 === 0) {\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        } else {\n            new_lst.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    const result = [];\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let\
    \ max_index = lst.indexOf(max);\n    while (lst.length > 0) {\n        result.push(min);\n\
    \        lst.splice(min_index, 1);\n        min = Math.min(...lst);\n        min_index\
    \ = lst.indexOf(min);\n        if (lst.length === 0) {\n            break;\n \
    \       }\n        result.push(max);\n        lst.splice(max_index, 1);\n    \
    \    max = Math.max(...lst);\n        max_index = lst.indexOf(max);\n    }\n \
    \   return result;\n}\n", "    if (lst.length === 0) {\n        return [];\n \
    \   }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let\
    \ newLst = [];\n    while (newLst.length < lst.length) {\n        newLst.push(min);\n\
    \        newLst.push(max);\n        min = Math.min(...lst.filter(x => x !== min\
    \ && x !== max));\n        max = Math.max(...lst.filter(x => x !== min && x !==\
    \ max));\n    }\n    return newLst;\n}\n", "    if (lst.length === 0) {\n    \
    \    return [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let new_lst = [min];\n    let index = lst.indexOf(min);\n    lst.splice(index,\
    \ 1);\n    while (lst.length > 0) {\n        let max_index = lst.indexOf(max);\n\
    \        let min_index = lst.indexOf(Math.min(...lst));\n        new_lst.push(max);\n\
    \        new_lst.push(lst[min_index]);\n        lst.splice(max_index, 1);\n  \
    \      lst.splice(min_index, 1);\n        max = Math.max(...lst);\n    }\n   \
    \ return new_lst;\n}\n", "    if (lst.length === 0) {\n        return [];\n  \
    \  }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let\
    \ new_lst = [];\n    let i = 0;\n    while (new_lst.length < lst.length) {\n \
    \       if (i % 2 === 0) {\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        } else {\n            new_lst.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
