language: ts
name: HumanEval_151_double_the_difference
results:
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpmbs4f9nm.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmbs4f9nm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] >= 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp0g0v13bl.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0g0v13bl.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpyb_0wa9n.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyb_0wa9n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0 && lst[i] % 2 === 1) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpgrgy4_g_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgrgy4_g_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1 && lst[i] >= 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1 && lst[i] >= 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      \
    \      sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp66bidv3k.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp66bidv3k.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      \
    \      sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp66bidv3k.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp66bidv3k.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      \
    \      sum += lst[i] ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp52hnffst.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp52hnffst.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      \
    \      sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp66bidv3k.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp66bidv3k.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] ** 2;\n       \
    \ }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpyb_0wa9n.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyb_0wa9n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum: number = 0;\n  for (let i: number = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpnitpae3_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnitpae3_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpu2g56hu2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2g56hu2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpu2g56hu2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2g56hu2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] >= 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp_87ojkq8.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_87ojkq8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpgkwnowt9.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgkwnowt9.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] **\
    \ 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpjnazmhde.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjnazmhde.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpu2g56hu2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2g56hu2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpyb_0wa9n.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyb_0wa9n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpmbs4f9nm.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmbs4f9nm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpu2g56hu2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2g56hu2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      \
    \      sum += lst[i] ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp52hnffst.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp52hnffst.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpyb_0wa9n.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyb_0wa9n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpu2g56hu2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2g56hu2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpmbs4f9nm.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmbs4f9nm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      \
    \      sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp66bidv3k.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp66bidv3k.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] **\
    \ 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpmbs4f9nm.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmbs4f9nm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] >= 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333582
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpu2g56hu2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2g56hu2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpgrgy4_g_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgrgy4_g_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1 && lst[i] >= 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(double_the_difference([1,\
    \ 3, 2, 0]));\nconsole.log(double_the_difference([-1, -2, 0]));\nconsole.log(double_the_difference([9,\
    \ -2]));\nconsole.log(double_the_difference([0]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpey69oyka.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpey69oyka.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    0

    81

    0

    '
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpyb_0wa9n.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyb_0wa9n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpmbs4f9nm.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmbs4f9nm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] >= 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] >= 0) {\n      \
    \      sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpytq5yb3i.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpytq5yb3i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333582
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] >= 0) {\n      \
    \      sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpytq5yb3i.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpytq5yb3i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      \
    \      sum += lst[i] ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp52hnffst.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp52hnffst.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmplwkid9ro.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplwkid9ro.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmplbr6x0k2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplbr6x0k2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333583
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpmbs4f9nm.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmbs4f9nm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      \
    \      sum += lst[i] ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp52hnffst.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp52hnffst.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpyb_0wa9n.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyb_0wa9n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] >= 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] **\
    \ 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpjnazmhde.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjnazmhde.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333582
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmplwkid9ro.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplwkid9ro.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333582
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] >= 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333582
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpmbs4f9nm.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmbs4f9nm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpmbs4f9nm.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmbs4f9nm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpu2g56hu2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2g56hu2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] **\
    \ 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpjnazmhde.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjnazmhde.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpyb_0wa9n.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyb_0wa9n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmplbr6x0k2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplbr6x0k2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333583
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpyb_0wa9n.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyb_0wa9n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpu2g56hu2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2g56hu2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] **\
    \ 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333582
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpgrgy4_g_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgrgy4_g_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      \
    \      sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp66bidv3k.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp66bidv3k.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] >= 0) {\n            sum += lst[i]\
    \ ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpbumfqjuu.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbumfqjuu.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n      \
    \      sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp66bidv3k.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp66bidv3k.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum: number = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 != 0 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmphxqit7wf.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphxqit7wf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333583
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp6l2rkot3.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6l2rkot3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp7_n0nrpo.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7_n0nrpo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 === 1 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333582
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpud59pw_j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpud59pw_j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpyb_0wa9n.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyb_0wa9n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 0
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 == 1 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i] > 0) {\n       \
    \     sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpoots_rsw.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoots_rsw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333580
- exit_code: 1
  program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
    \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
    // 0\n// If the input list is empty, return 0.\nfunction double_the_difference(lst:\
    \ number[]): number {\n    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 != 0 && lst[i] >= 0) {\n            sum += lst[i]\
    \ ** 2;\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.14\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp4yv3moow.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4yv3moow.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.14,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333583
