name: HumanEval_39_prime_fib
language: ts
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n:\
  \ number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
  \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
  \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n \
  \ assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
  \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
  }\n\ntest();"
completions: ["    let fib_numbers: number[] = [2, 3];\n    let i: number = 2;\n \
    \   while (i < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i\
    \ - 2]);\n        i++;\n    }\n    return fib_numbers[n - 1];\n}\n", "    let\
    \ a = 1;\n    let b = 1;\n    let c = 0;\n    let i = 0;\n    while (i < n) {\n\
    \        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c))\
    \ {\n            i++;\n        }\n    }\n    return c;\n}\n", "    let fib_numbers:\
    \ number[] = [2, 3, 5, 13, 89];\n    if (n > fib_numbers.length) {\n        let\
    \ i: number = fib_numbers.length;\n        while (i < n) {\n            let next_fib:\
    \ number = fib_numbers[i - 1] + fib_numbers[i - 2];\n            if (is_prime(next_fib))\
    \ {\n                fib_numbers.push(next_fib);\n                i++;\n     \
    \       }\n        }\n    }\n    return fib_numbers[n - 1];\n}\n", "    let fibs:\
    \ number[] = [2, 3];\n    let i: number = 2;\n    while (i < n) {\n        fibs.push(fibs[i\
    \ - 1] + fibs[i - 2]);\n        i++;\n    }\n    return fibs[n - 1];\n}\n", " \
    \   let fib_nums: number[] = [2, 3];\n    let i: number = 2;\n    while (i < n)\
    \ {\n        fib_nums.push(fib_nums[i - 1] + fib_nums[i - 2]);\n        i++;\n\
    \    }\n    return fib_nums[n - 1];\n}\n", "    let i = 2;\n    let fib_num =\
    \ 1;\n    let fib_num_prev = 1;\n    let fib_num_prev_prev = 0;\n    let prime_fib_num\
    \ = 0;\n    while (i <= n) {\n        fib_num = fib_num_prev + fib_num_prev_prev;\n\
    \        if (is_prime(fib_num)) {\n            prime_fib_num = fib_num;\n    \
    \        i++;\n        }\n        fib_num_prev_prev = fib_num_prev;\n        fib_num_prev\
    \ = fib_num;\n    }\n    return prime_fib_num;\n}\n", "    let fib = fibonacci(n);\n\
    \    let prime = prime_number(n);\n    while (fib != prime) {\n        if (fib\
    \ > prime) {\n            prime = prime_number(++n);\n        } else {\n     \
    \       fib = fibonacci(++n);\n        }\n    }\n    return fib;\n}\n", "    let\
    \ fib_num = 1;\n    let fib_num_prev = 1;\n    let fib_num_prev_prev = 0;\n  \
    \  let count = 0;\n    while (count < n) {\n        if (is_prime(fib_num)) {\n\
    \            count++;\n        }\n        fib_num_prev_prev = fib_num_prev;\n\
    \        fib_num_prev = fib_num;\n        fib_num = fib_num_prev + fib_num_prev_prev;\n\
    \    }\n    return fib_num_prev;\n}\n", "    let fib_list: number[] = [2, 3];\n\
    \    let i: number = 2;\n    while (i < n) {\n        let fib_next: number = fib_list[i\
    \ - 1] + fib_list[i - 2];\n        if (is_prime(fib_next)) {\n            fib_list.push(fib_next);\n\
    \            i += 1;\n        }\n    }\n    return fib_list[n - 1];\n}\n", " \
    \   let fib_numbers: number[] = [1, 2];\n    let i: number = 2;\n    while (i\
    \ < n) {\n        fib_numbers.push(fib_numbers[i - 1] + fib_numbers[i - 2]);\n\
    \        i++;\n    }\n    return fib_numbers[n - 1];\n}\n", "    let fib_list:\
    \ number[] = [2, 3];\n    let i: number = 2;\n    while (i < n) {\n        fib_list.push(fib_list[i\
    \ - 1] + fib_list[i - 2]);\n        i += 1;\n    }\n    return fib_list[n - 1];\n\
    }\n", "    let fib = fibonacci(n);\n    let i = 0;\n    while (!is_prime(fib))\
    \ {\n        fib = fibonacci(n + i);\n        i++;\n    }\n    return fib;\n}\n",
  "    let fib: number[] = [2, 3, 5, 13, 89];\n    if (n > fib.length) {\n       \
    \ for (let i = fib.length; i <= n; i++) {\n            fib.push(fib[i - 1] + fib[i\
    \ - 2]);\n        }\n    }\n    return fib[n - 1];\n}\n", "    let fibs: number[]\
    \ = [2, 3];\n    let i: number = 2;\n    while (i < n) {\n        fibs.push(fibs[i\
    \ - 1] + fibs[i - 2]);\n        i++;\n    }\n    return fibs[n - 1];\n}\n", " \
    \   let fib_list: number[] = [2, 3, 5, 13, 89];\n    if (n <= fib_list.length)\
    \ {\n        return fib_list[n - 1];\n    }\n    let i: number = fib_list.length;\n\
    \    let fib_num: number = fib_list[i - 1];\n    while (i < n) {\n        let\
    \ fib_num_1: number = fib_list[i - 1];\n        let fib_num_2: number = fib_list[i\
    \ - 2];\n        fib_num = fib_num_1 + fib_num_2;\n        if (is_prime(fib_num))\
    \ {\n            fib_list.push(fib_num);\n            i += 1;\n        }\n   \
    \ }\n    return fib_num;\n}\n", "    let fib = fibonacci(n);\n    let prime =\
    \ prime_numbers(n);\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while\
    \ (k < n) {\n        if (fib[i] === prime[j]) {\n            k++;\n          \
    \  i++;\n            j++;\n        } else if (fib[i] < prime[j]) {\n         \
    \   i++;\n        } else {\n            j++;\n        }\n    }\n    return fib[i\
    \ - 1];\n}\n", "    let fib: number[] = [2, 3];\n    let i: number = 2;\n    while\
    \ (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n\
    \    return fib[n - 1];\n}\n", "    let fib = [2, 3];\n    let i = 2;\n    while\
    \ (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n\
    \    return fib[n - 1];\n}\n", "    let i = 0;\n    let j = 1;\n    let k = 0;\n\
    \    let count = 0;\n    while (count < n) {\n        k = i + j;\n        i =\
    \ j;\n        j = k;\n        if (is_prime(k)) {\n            count++;\n     \
    \   }\n    }\n    return k;\n}\n", "    let fib_numbers: number[] = [2, 3, 5];\n\
    \    let i: number = 3;\n    while (fib_numbers.length < n) {\n        let next_fib:\
    \ number = fib_numbers[i - 1] + fib_numbers[i - 2];\n        if (is_prime(next_fib))\
    \ {\n            fib_numbers.push(next_fib);\n        }\n        i++;\n    }\n\
    \    return fib_numbers[n - 1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
