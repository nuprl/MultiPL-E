name: HumanEval_25_factorize
language: ts
prompt: "//Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n// Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n// Input number should be equal\
  \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
  // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
  \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2,\
  \ 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
  \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n \
  \ assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
  \ 3, 3]);\n}\n\ntest();"
completions: ["    let result: number[] = [];\n    let i: number = 2;\n    while (n\
    \ > 1) {\n        if (n % i === 0) {\n            result.push(i);\n          \
    \  n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ result;\n}\n", "    let factors: number[] = [];\n    let divisor: number = 2;\n\
    \    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n\
    \            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
    }\n", "    let factors: number[] = [];\n    let i: number = 2;\n    while (n >\
    \ 1) {\n        if (n % i === 0) {\n            factors.push(i);\n           \
    \ n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let result: number[] = [];\n    let i: number = 2;\n  \
    \  while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return result;\n}\n", "    let result: number[] = [];\n    let i: number\
    \ = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return result;\n}\n", "    let factors: number[] = [];\n    let i: number\
    \ = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return factors;\n}\n", "  const factors: number[] = [];\n  for (let i = 2;\
    \ i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /=\
    \ i;\n    }\n  }\n  return factors;\n}\n", "    let result: number[] = [];\n \
    \   let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n    \
    \        result.push(i);\n            n = n / i;\n        } else {\n         \
    \   i++;\n        }\n    }\n    return result;\n}\n", "    let result: number[]\
    \ = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0)\
    \ {\n            result.push(i);\n            n = n / i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return result;\n}\n", "    let result:\
    \ number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n %\
    \ i === 0) {\n            result.push(i);\n            n = n / i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return result;\n}\n\nconsole.log(factorize(8));\n\
    console.log(factorize(25));\nconsole.log(factorize(70));", "    let factors: number[]\
    \ = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n % i === 0)\
    \ {\n            factors.push(i);\n            n = n / i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return factors;\n}\n", "    let factors:\
    \ number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n %\
    \ i === 0) {\n            factors.push(i);\n            n = n / i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return factors;\n}\n", "   \
    \ let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n  \
    \      if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
  "    const factors: number[] = [];\n    let i = 2;\n    while (n > 1) {\n      \
    \  if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return factors;\n}\n",
  "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
    \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n\
    \            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
    }\n", "    let factors: number[] = [];\n    let i: number = 2;\n    while (n >\
    \ 1) {\n        if (n % i === 0) {\n            factors.push(i);\n           \
    \ n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let factors: number[] = [];\n    let divisor: number =\
    \ 2;\n    while (n > 1) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n\
    \            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
    }\n", "    let factors: number[] = [];\n    let i: number = 2;\n    while (n >\
    \ 1) {\n        if (n % i === 0) {\n            factors.push(i);\n           \
    \ n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let result: number[] = [];\n    let i: number = 2;\n  \
    \  while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return result;\n}\n", "    let factors: number[] = [];\n    let i: number\
    \ = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return factors;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
