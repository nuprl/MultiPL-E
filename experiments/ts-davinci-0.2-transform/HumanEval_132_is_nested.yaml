name: HumanEval_132_is_nested
language: ts
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return True if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n//\
  \ false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n//\
  \ true\nfunction is_nested(string: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
  ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
  [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
  [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
  []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
  [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else {\n       \
    \     if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else {\n            if (stack.length\
    \ === 0) {\n                return false;\n            } else {\n            \
    \    stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === ']') {\n            if (stack.length > 0) {\n            \
    \    stack.pop();\n            } else {\n                return false;\n     \
    \       }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let stack:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else {\n       \
    \     if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string[i] === \"[\") {\n            stack.push(string[i]);\n        }\
    \ else {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else {\n            if (stack.length\
    \ === 0) {\n                return false;\n            } else {\n            \
    \    stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else {\n            if (stack.length\
    \ === 0) {\n                return false;\n            } else {\n            \
    \    stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else {\n       \
    \     if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === ']') {\n        \
    \    if (stack.length === 0) {\n                return false;\n            } else\
    \ {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "  let stack: string[] = [];\n  for (let i = 0; i\
    \ < string.length; i++) {\n    if (string[i] === \"[\") {\n      stack.push(string[i]);\n\
    \    } else if (string[i] === \"]\") {\n      if (stack.length === 0) {\n    \
    \    return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n\
    \  return stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else {\n            if (stack.length\
    \ === 0) {\n                return false;\n            } else {\n            \
    \    stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
