name: HumanEval_21_rescale_to_unit
language: ts
prompt: "//Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
  \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
  \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0,\
  \ 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    return numbers.map(x => (x - min) / range);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n", "  const min = Math.min(...numbers);\n\
    \  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map(n\
    \ => (n - min) / range);\n}\n", "  const min = Math.min(...numbers);\n  const\
    \ max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map(x\
    \ => (x - min) / range);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(n\
    \ => (n - min) / range);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(n\
    \ => (n - min) / range);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(n\
    \ => (n - min) / range);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(x\
    \ => (x - min) / range);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(n\
    \ => (n - min) / range);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(n\
    \ => (n - min) / range);\n}\n", "    let min = Math.min(...numbers);\n    let\
    \ max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(n\
    \ => (n - min) / range);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(n\
    \ => (n - min) / range);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(n\
    \ => (n - min) / range);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(x\
    \ => (x - min) / range);\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    return numbers.map(n => (n - min) / (max -\
    \ min));\n}\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  return numbers.map(n => (n - min) / (max - min));\n}\n", "  const min = Math.min(...numbers);\n\
    \  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map(n\
    \ => (n - min) / range);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
