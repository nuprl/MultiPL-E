name: HumanEval_16_count_distinct_characters
language: ts
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string:\
  \ string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["    return string.toLowerCase().split('').filter((value, index, self)\
    \ => {\n        return self.indexOf(value) === index;\n    }).length;\n}\n", " \
    \   return Array.from(new Set(string.toLowerCase())).length;\n}\n", "    return\
    \ new Set(string.toLowerCase()).size;\n}\n", "    let distinct_characters: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (distinct_characters.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            distinct_characters.push(string[i].toLowerCase());\n\
    \        }\n    }\n    return distinct_characters.length;\n}\n", "    let result\
    \ = 0;\n    let char_set = new Set();\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (!char_set.has(string[i].toLowerCase())) {\n            char_set.add(string[i].toLowerCase());\n\
    \            result++;\n        }\n    }\n    return result;\n}\n", "    const\
    \ lowerCaseString = string.toLowerCase();\n    const distinctCharacters = new\
    \ Set(lowerCaseString);\n    return distinctCharacters.size;\n}\n", "    let count\
    \ = 0;\n    let unique = \"\";\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (unique.indexOf(string[i].toLowerCase()) == -1) {\n            unique\
    \ += string[i].toLowerCase();\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n", "    let distinct_characters: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (distinct_characters.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            distinct_characters.push(string[i].toLowerCase());\n\
    \        }\n    }\n    return distinct_characters.length;\n}\n", "    let count\
    \ = 0;\n    let chars = string.toLowerCase().split('');\n    let uniqueChars =\
    \ chars.filter(function(item, i, ar){ return ar.indexOf(item) === i; });\n   \
    \ return uniqueChars.length;\n}\n", "    let set = new Set(string.toLowerCase());\n\
    \    return set.size;\n}\n", "    let count = 0;\n    let characters: string[]\
    \ = string.split('');\n    let uniqueCharacters: string[] = [];\n    characters.forEach(char\
    \ => {\n        if (!uniqueCharacters.includes(char.toLowerCase())) {\n      \
    \      uniqueCharacters.push(char.toLowerCase());\n            count++;\n    \
    \    }\n    });\n    return count;\n}\n", "    let distinct_characters: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (distinct_characters.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            distinct_characters.push(string[i].toLowerCase());\n\
    \        }\n    }\n    return distinct_characters.length;\n}\n", "    let distinct_characters\
    \ = new Set();\n    for (let i = 0; i < string.length; i++) {\n        distinct_characters.add(string[i].toLowerCase());\n\
    \    }\n    return distinct_characters.size;\n}\n", "    let result: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (result.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            result.push(string[i].toLowerCase());\n        }\n  \
    \  }\n    return result.length;\n}\n", "    return new Set(string.toLowerCase()).size;\n\
    }\n", "    let count: number = 0;\n    let char_set: Set<string> = new Set<string>();\n\
    \    for (let char of string) {\n        char_set.add(char.toLowerCase());\n \
    \   }\n    return char_set.size;\n}\n", "    let chars = string.toLowerCase().split('');\n\
    \    let distinct = chars.filter((char, index) => {\n        return chars.indexOf(char)\
    \ === index;\n    });\n    return distinct.length;\n}\n", "    let count = 0;\n\
    \    let characters = {};\n    for (let i = 0; i < string.length; i++) {\n   \
    \     if (!characters[string[i].toLowerCase()]) {\n            characters[string[i].toLowerCase()]\
    \ = 1;\n            count++;\n        }\n    }\n    return count;\n}\n", "   \
    \ return new Set(string.toLowerCase()).size;\n}\n", "    let distinct_characters\
    \ = new Set();\n    for (let i = 0; i < string.length; i++) {\n        distinct_characters.add(string[i].toLowerCase());\n\
    \    }\n    return distinct_characters.size;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
