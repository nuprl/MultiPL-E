language: py
name: HumanEval_49_modp
results:
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
- exit_code: 0
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return (2 ** n) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984014
