name: HumanEval_132_is_nested
language: py
prompt: "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that\
  \ takes a string as input which contains only square brackets.\n    The function\
  \ should return True if and only if there is a valid subsequence of brackets \n\
  \    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\
  \ \n    True\n    >>> is_nested('[]]]]]]][[[[[]') \n    False\n    >>> is_nested('[][]')\
  \ \n    False\n    >>> is_nested('[]') \n    False\n    >>> is_nested('[[][]]')\
  \ \n    True\n    >>> is_nested('[[]][[') \n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('[[]]') == True\n    assert candidate('[]]]]]]][[[[[]')\
  \ == False\n    assert candidate('[][]') == False\n    assert candidate('[]') ==\
  \ False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]')\
  \ == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]')\
  \ == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[')\
  \ == True\n    assert candidate('[[][]]') == True\n    assert candidate('') == False\n\
  \    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') ==\
  \ False\n\ndef test_check():\n    check(is_nested)\n\ntest_check()\n"
completions: ["    def is_nested_brackets(string: str) -> bool:\n        stack = []\n\
    \        for i, char in enumerate(string):\n            if char == '[':\n    \
    \            stack.append(i)\n            elif char == ']':\n                if\
    \ stack:\n                    stack.pop()\n                else:\n           \
    \         return False\n        return not stack\n\n    return is_nested_brackets(string)\n",
  "    def is_nested_brackets(string: str) -> bool:\n        stack = []\n        for\
    \ i in range(len(string)):\n            if string[i] == '[':\n               \
    \ stack.append(i)\n            elif string[i] == ']':\n                if len(stack)\
    \ == 0:\n                    return False\n                else:\n           \
    \         stack.pop()\n        return len(stack) == 0\n    return is_nested_brackets\n",
  "    def is_nested_brackets(string: str) -> bool:\n        stack = []\n        for\
    \ i, char in enumerate(string):\n            if char == '[':\n               \
    \ stack.append(i)\n            elif char == ']':\n                if len(stack)\
    \ == 0:\n                    return False\n                else:\n           \
    \         stack.pop()\n        return len(stack) == 0\n    return is_nested_brackets\n",
  "    def is_nested_helper(string: str) -> bool:\n        stack = []\n        for\
    \ i in range(len(string)):\n            if string[i] == '[':\n               \
    \ stack.append(i)\n            elif string[i] == ']':\n                if stack:\n\
    \                    stack.pop()\n                else:\n                    return\
    \ False\n        return not stack\n    return is_nested_helper(string)\n", " \
    \   def is_nested(string: str) -> bool:\n        stack = []\n        for i in\
    \ range(len(string)):\n            if string[i] == '[':\n                stack.append(i)\n\
    \            elif string[i] == ']':\n                if len(stack) == 0:\n   \
    \                 return False\n                else:\n                    stack.pop()\n\
    \        return len(stack) == 0\n    return is_nested\n", "    def is_nested_brackets(string:\
    \ str) -> bool:\n        stack = []\n        for i in range(len(string)):\n  \
    \          if string[i] == '[':\n                stack.append(i)\n           \
    \ elif string[i] == ']':\n                if len(stack) == 0:\n              \
    \      return False\n                else:\n                    stack.pop()\n\
    \        return len(stack) == 0\n    return is_nested_brackets\n", "    def is_nested_inner(string:\
    \ str) -> bool:\n        stack = []\n        for i in range(len(string)):\n  \
    \          if string[i] == '[':\n                stack.append(i)\n           \
    \ elif string[i] == ']':\n                if len(stack) == 0:\n              \
    \      return False\n                else:\n                    stack.pop()\n\
    \        return len(stack) == 0\n    return is_nested_inner\n", "    def is_nested_helper(string:\
    \ str) -> bool:\n        stack = []\n        for i, char in enumerate(string):\n\
    \            if char == '[':\n                stack.append(i)\n            elif\
    \ char == ']':\n                if stack:\n                    stack.pop()\n \
    \               else:\n                    return False\n        return not stack\n\
    \n    return is_nested_helper(string)\n", "    def is_nested_brackets(string:\
    \ str) -> bool:\n        stack = []\n        for i in range(len(string)):\n  \
    \          if string[i] == '[':\n                stack.append(i)\n           \
    \ elif string[i] == ']':\n                if stack:\n                    stack.pop()\n\
    \                else:\n                    return False\n        return not stack\n\
    \n    return is_nested_brackets(string)\n\n", "    def is_nested_helper(string:\
    \ str) -> bool:\n        stack = []\n        for i in range(len(string)):\n  \
    \          if string[i] == '[':\n                stack.append(i)\n           \
    \ elif string[i] == ']':\n                if len(stack) == 0:\n              \
    \      return False\n                else:\n                    stack.pop()\n\
    \        return len(stack) == 0\n    return is_nested_helper(string)\n", "   \
    \ def is_nested_brackets(string: str) -> bool:\n        stack = []\n        for\
    \ i, char in enumerate(string):\n            if char == '[':\n               \
    \ stack.append(i)\n            elif char == ']':\n                if len(stack)\
    \ == 0:\n                    return False\n                else:\n           \
    \         stack.pop()\n        return len(stack) == 0\n    return is_nested_brackets\n",
  "    def is_nested(string: str) -> bool:\n        stack = []\n        for char in\
    \ string:\n            if char == '[':\n                stack.append(char)\n \
    \           elif char == ']':\n                if len(stack) == 0:\n         \
    \           return False\n                else:\n                    stack.pop()\n\
    \        return len(stack) == 0\n    return is_nested\n", "    def is_nested_brackets(string:\
    \ str) -> bool:\n        stack = []\n        for i in range(len(string)):\n  \
    \          if string[i] == '[':\n                stack.append(i)\n           \
    \ elif string[i] == ']':\n                if len(stack) == 0:\n              \
    \      return False\n                else:\n                    stack.pop()\n\
    \        return len(stack) == 0\n    return is_nested_brackets\n", "    def is_nested_brackets(string:\
    \ str) -> bool:\n        stack = []\n        for i, char in enumerate(string):\n\
    \            if char == '[':\n                stack.append(i)\n            elif\
    \ char == ']':\n                if len(stack) == 0:\n                    return\
    \ False\n                else:\n                    stack.pop()\n        return\
    \ len(stack) == 0\n    return is_nested_brackets\n", "    def is_nested_brackets(string:\
    \ str) -> bool:\n        stack = []\n        for i, char in enumerate(string):\n\
    \            if char == '[':\n                stack.append(i)\n            elif\
    \ char == ']':\n                if not stack:\n                    return False\n\
    \                else:\n                    stack.pop()\n        return not stack\n\
    \    return is_nested_brackets\n", "    def is_nested_brackets(string: str) ->\
    \ bool:\n        stack = []\n        for i in range(len(string)):\n          \
    \  if string[i] == '[':\n                stack.append(i)\n            elif string[i]\
    \ == ']':\n                if len(stack) == 0:\n                    return False\n\
    \                else:\n                    stack.pop()\n        return len(stack)\
    \ == 0\n    return is_nested_brackets\n", "    def is_nested(string: str) -> bool:\n\
    \        stack = []\n        for i in range(len(string)):\n            if string[i]\
    \ == '[':\n                stack.append(i)\n            elif string[i] == ']':\n\
    \                if len(stack) == 0:\n                    return False\n     \
    \           else:\n                    stack.pop()\n        return len(stack)\
    \ == 0\n    return is_nested\n", "    def is_nested_brackets(string: str) -> bool:\n\
    \        stack = []\n        for i in range(len(string)):\n            if string[i]\
    \ == '[':\n                stack.append(i)\n            elif string[i] == ']':\n\
    \                if len(stack) == 0:\n                    return False\n     \
    \           else:\n                    stack.pop()\n        return len(stack)\
    \ == 0\n    return is_nested_brackets\n", "    def is_nested_inner(string: str)\
    \ -> bool:\n        stack = []\n        for i in range(len(string)):\n       \
    \     if string[i] == '[':\n                stack.append(i)\n            elif\
    \ string[i] == ']':\n                if len(stack) == 0:\n                   \
    \ return False\n                else:\n                    stack.pop()\n     \
    \   return len(stack) == 0\n    return is_nested_inner(string)\n", "    def is_nested(string:\
    \ str) -> bool:\n        stack = []\n        for i in range(len(string)):\n  \
    \          if string[i] == '[':\n                stack.append(i)\n           \
    \ elif string[i] == ']':\n                if len(stack) == 0:\n              \
    \      return False\n                else:\n                    stack.pop()\n\
    \        return len(stack) == 0\n    return is_nested\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
