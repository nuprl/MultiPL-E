{
  "language": "py",
  "name": "HumanEval_103_rounded_avg",
  "results": [
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return str(n)\n    else:\n        return str(round(n + (m - n) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8ygj6ari.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp8ygj6ari.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8ygj6ari.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:].zfill(m - n + 1)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5c0f96lm.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp5c0f96lm.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5c0f96lm.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).split('b')[1]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu571vo2k.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu571vo2k.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpu571vo2k.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:].zfill(m - n + 1)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5c0f96lm.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp5c0f96lm.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5c0f96lm.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m // 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6kprmy9h.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp6kprmy9h.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6kprmy9h.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return str(n)\n    else:\n        return str(int(round(n + m / 2)))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp84a_fdn6.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp84a_fdn6.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp84a_fdn6.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).count(\"1\")\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp96j9v5wu.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp96j9v5wu.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp96j9v5wu.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).lstrip('0b')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqovkhkhl.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpqovkhkhl.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqovkhkhl.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj3ra6ho.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpjj3ra6ho.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjj3ra6ho.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpjj3ra6ho.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:], 2)\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \nndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuxp3tsvz.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpuxp3tsvz.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpuxp3tsvz.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8zb80l6n.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8zb80l6n.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8zb80l6n.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8zb80l6n.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:])\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5l7innla.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp5l7innla.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5l7innla.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppwn28u6h.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmppwn28u6h.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmppwn28u6h.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8zb80l6n.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8zb80l6n.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8zb80l6n.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8zb80l6n.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:])\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m // 2)[2:].rjust(m - n + 1, '0'))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkkzxxxwf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkkzxxxwf.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpkkzxxxwf.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg9khtba7.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpg9khtba7.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpg9khtba7.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8zb80l6n.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8zb80l6n.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8zb80l6n.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8zb80l6n.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:])\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m // 2)[2:].rjust(m - n + 1, '0'))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkkzxxxwf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkkzxxxwf.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpkkzxxxwf.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m // 2)[2:].rjust(m - n, '0'))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1ahsjwtw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp1ahsjwtw.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1ahsjwtw.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m - 1)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy8qvzgsg.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpy8qvzgsg.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpy8qvzgsg.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8zb80l6n.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8zb80l6n.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8zb80l6n.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8zb80l6n.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:])\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8zb80l6n.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8zb80l6n.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8zb80l6n.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8zb80l6n.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:])\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).lstrip('0b')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqovkhkhl.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpqovkhkhl.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqovkhkhl.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # n is the number of integers\n    # m is the last number\n    # n - 1 is the number of integers to average\n    # m - n + 1 is the number of integers to average\n    # n - 1 + m - n + 1 = m - n + 1\n    # m - n + 1 = m - n\n    # m - n = m - n + 1\n    # m - n = m - n + 1 - 1\n    # m - n = m - n - 1\n    # m - n = m - n - 1 + 1\n    # m - n = m - n - 1 + 1 - 1\n    # m - n = m - n - 1 + 1 - 1 + 1\n    # m - n = m - n - 1 + 1 - 1 + 1 - 1\n    # m - n = m - n - 1 + 1 - 1 + 1 - 1 + 1 - 1\n    # m - n = m - n - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n    # m - n = m - n - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n    # m - n = m - n - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n    # m - n = m - n - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n    # m - n = m - n - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n    # m - n = m - n - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n    # m - n = m - n - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n    # m - n = m - n - 1 + 1\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdr1bdpzx.py\", line 60, in <module>\n    test_check()\n  File \"/tmp/tmpdr1bdpzx.py\", line 58, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpdr1bdpzx.py\", line 44, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # Convert n and m to binary\n    n_bin = bin(n)[2:]\n    m_bin = bin(m)[2:]\n    \n    # Compute the average\n    avg = int(n_bin + m_bin, 2)\n    \n    # Convert the average to binary\n    return bin(avg)[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4_trkd1l.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmp4_trkd1l.py\", line 46, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4_trkd1l.py\", line 32, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m + 1)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwphjv34u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpwphjv34u.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpwphjv34u.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj3ra6ho.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpjj3ra6ho.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjj3ra6ho.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpjj3ra6ho.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:], 2)\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # calculate the average\n    avg = (n + m) // 2\n    \n    # round the average to the nearest integer\n    return bin(int(avg))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpokypjygf.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpokypjygf.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpokypjygf.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2.0))).count(\"1\")\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpur7ihad9.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpur7ihad9.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpur7ihad9.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return str(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsbevj6tc.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpsbevj6tc.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpsbevj6tc.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return format(int(round(n + m / 2)), 'b')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6t1x_gbz.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp6t1x_gbz.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6t1x_gbz.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m // 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6kprmy9h.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp6kprmy9h.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6kprmy9h.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8zb80l6n.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8zb80l6n.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8zb80l6n.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8zb80l6n.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:])\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2.0)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp81csg1nw.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp81csg1nw.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp81csg1nw.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # sum of integers from n to m\n    sum_of_integers = n + (m - n)\n    # divide by 2 to get average\n    average = sum_of_integers / 2\n    # convert to binary\n    return bin(average)[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgawbzw92.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpgawbzw92.py\", line 43, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgawbzw92.py\", line 29, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpgawbzw92.py\", line 26, in rounded_avg\n    return bin(average)[2:]\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj3ra6ho.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpjj3ra6ho.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjj3ra6ho.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpjj3ra6ho.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:], 2)\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfoilry28.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpfoilry28.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpfoilry28.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).split('b')[1]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu571vo2k.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu571vo2k.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpu571vo2k.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int((n + m) / 2)).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp43pw0th8.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp43pw0th8.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp43pw0th8.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).replace('0b', '')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9u08as3b.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp9u08as3b.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp9u08as3b.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).lstrip('0b')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqovkhkhl.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpqovkhkhl.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqovkhkhl.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # Convert n and m to binary\n    n_bin = bin(n)[2:]\n    m_bin = bin(m)[2:]\n    \n    # Compute the average\n    avg = int(n_bin + m_bin, 2)\n    \n    # Convert the average to binary\n    return bin(avg)[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4_trkd1l.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmp4_trkd1l.py\", line 46, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4_trkd1l.py\", line 32, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppwn28u6h.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmppwn28u6h.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmppwn28u6h.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2.0)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3sh169lc.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp3sh169lc.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp3sh169lc.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2.0))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbb33iq76.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpbb33iq76.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbb33iq76.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).lstrip('0b')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqovkhkhl.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpqovkhkhl.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqovkhkhl.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return str(int(round(n + m / 2)))[::-1]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxfxe2bhl.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpxfxe2bhl.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxfxe2bhl.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m - 1)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy8qvzgsg.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpy8qvzgsg.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpy8qvzgsg.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).lstrip('0b')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp31bmls01.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp31bmls01.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp31bmls01.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m // 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6kprmy9h.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp6kprmy9h.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6kprmy9h.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m // 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6kprmy9h.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp6kprmy9h.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6kprmy9h.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj3ra6ho.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpjj3ra6ho.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjj3ra6ho.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpjj3ra6ho.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:], 2)\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # sum of integers from n to m\n    sum_of_integers = (m + 1) * (m + 2) // 2\n    \n    # divide by 2 to get the average\n    return bin(sum_of_integers // 2)[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbuvm1vpx.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpbuvm1vpx.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbuvm1vpx.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8zb80l6n.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8zb80l6n.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8zb80l6n.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8zb80l6n.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:])\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count(\"1\")\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa0884ywr.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpa0884ywr.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpa0884ywr.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m + 1)[2:].rjust(m - n + 1, '0'))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu7qemuwj.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu7qemuwj.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpu7qemuwj.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8zb80l6n.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8zb80l6n.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8zb80l6n.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8zb80l6n.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:])\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg9khtba7.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpg9khtba7.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpg9khtba7.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppwn28u6h.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmppwn28u6h.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmppwn28u6h.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).split('b')[1]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpedt6tqdn.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpedt6tqdn.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpedt6tqdn.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m // 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6kprmy9h.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp6kprmy9h.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6kprmy9h.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).replace('0b', '')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9u08as3b.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp9u08as3b.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp9u08as3b.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8zb80l6n.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8zb80l6n.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8zb80l6n.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8zb80l6n.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:])\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).lstrip('0b')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4kw7h5xk.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp4kw7h5xk.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4kw7h5xk.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int((n + m) / 2)).replace('0b', '')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9p6jfbsd.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp9p6jfbsd.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp9p6jfbsd.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).replace('0b', '')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpenqsgmhn.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpenqsgmhn.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpenqsgmhn.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg9khtba7.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpg9khtba7.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpg9khtba7.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int((n + m) / 2)).lstrip('0b')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1of4cnsu.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp1of4cnsu.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1of4cnsu.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).count(\"1\")\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpylg8ugzi.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpylg8ugzi.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpylg8ugzi.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg9khtba7.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpg9khtba7.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpg9khtba7.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2.0))).replace('0b', '')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjyo8vm8i.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpjyo8vm8i.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjyo8vm8i.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # sum = (n + m) / 2\n    # print(sum)\n    # print(n)\n    # print(m)\n    # print(n + m)\n    # print(n + m) / 2\n    # print(n + m) / 2.0\n    # print(n + m) / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0\n    # print(n + m) / 2.0 / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0 / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0 / 2.0 / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2\n    # print(n + m) / 2.0 / 2.0 / 2.0 / 2.0 / 2.0 / 2\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplpmov3bv.py\", line 58, in <module>\n    test_check()\n  File \"/tmp/tmplpmov3bv.py\", line 56, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmplpmov3bv.py\", line 42, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # sum of integers from n to m\n    sum_of_integers = (m + 1) * (m + 2) // 2\n    # divide by 2 because we are rounding to nearest integer\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide by 2 because we are counting integers from n to m\n    # divide\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2xianj17.py\", line 72, in <module>\n    test_check()\n  File \"/tmp/tmp2xianj17.py\", line 70, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2xianj17.py\", line 56, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    if n == m:\n        return str(n)\n    else:\n        return str(int(round(n + m / 2)))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp84a_fdn6.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp84a_fdn6.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp84a_fdn6.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    nums = [int(i) for i in str(n)]\n    nums.append(int(m))\n    \n    return ''.join(map(str, nums))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptb9q1w9v.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmptb9q1w9v.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptb9q1w9v.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfyv11_4o.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpfyv11_4o.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpfyv11_4o.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfoilry28.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpfoilry28.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpfoilry28.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj3ra6ho.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpjj3ra6ho.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjj3ra6ho.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmpjj3ra6ho.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:], 2)\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).count(\"1\")\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp96j9v5wu.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp96j9v5wu.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp96j9v5wu.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2.0)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp81csg1nw.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp81csg1nw.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp81csg1nw.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2.0))).count(\"1\")\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpur7ihad9.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpur7ihad9.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpur7ihad9.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m // 2)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6kprmy9h.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp6kprmy9h.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6kprmy9h.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).count(\"1\")\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp96j9v5wu.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp96j9v5wu.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp96j9v5wu.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(int(n + m) / 2)[2:])\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8zb80l6n.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8zb80l6n.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8zb80l6n.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\n  File \"/tmp/tmp8zb80l6n.py\", line 21, in rounded_avg\n    return int(bin(int(n + m) / 2)[2:])\nTypeError: 'float' object cannot be interpreted as an integer\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # round to nearest integer\n    n = round(n)\n    m = round(m)\n    \n    # convert to binary\n    n = bin(n)[2:]\n    m = bin(m)[2:]\n    \n    # add zeros to the end of the binary numbers\n    n = n + '0' * (len(m) - len(n))\n    m = m + '0' * (len(n) - len(m))\n    \n    # add the numbers together\n    return n + m\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5jj8i1aa.py\", line 53, in <module>\n    test_check()\n  File \"/tmp/tmp5jj8i1aa.py\", line 51, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5jj8i1aa.py\", line 37, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2))).count('1')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpchlytqp0.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpchlytqp0.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpchlytqp0.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).split('b')[1]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu571vo2k.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu571vo2k.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpu571vo2k.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return str(int(round(n + m / 2)))[::-1]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxfxe2bhl.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpxfxe2bhl.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxfxe2bhl.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m - 1)[2:], 2)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy8qvzgsg.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpy8qvzgsg.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpy8qvzgsg.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(int(round(n + m / 2))).lstrip('0b')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4kw7h5xk.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp4kw7h5xk.py\", line 37, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4kw7h5xk.py\", line 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + m / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcd1mvfob.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcd1mvfob.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcd1mvfob.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984076
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # sum of integers from n to m\n    s = (m + 1) * (m + 2) // 2\n    # average of integers from n to m\n    a = s // (m + 1)\n    # round to nearest integer\n    return format(a, 'b')\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxfyg8mjm.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpxfyg8mjm.py\", line 43, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxfyg8mjm.py\", line 29, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiml5dx4l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpiml5dx4l.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiml5dx4l.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return str(int(round(n + m / 2)))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjf5doat_.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpjf5doat_.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjf5doat_.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864228
    },
    {
      "exit_code": 1,
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round(n + (m - n) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq7hdbim.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgq7hdbim.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgq7hdbim.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984075
    }
  ]
}