language: py
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvaeg_q9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqvaeg_q9.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqvaeg_q9.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqvaeg_q9.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(c) for c in str(x)), reverse=True)\n  File \"/tmp/tmpqvaeg_q9.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmpqvaeg_q9.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(c) for c in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(y) for y in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp692yfmq4.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp692yfmq4.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmp692yfmq4.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(y) for y\
    \ in str(x)))\n  File \"/tmp/tmp692yfmq4.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmporhz63bn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmporhz63bn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\n  File \"/tmp/tmporhz63bn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmporhz63bn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20b2a2ph.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp20b2a2ph.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp20b2a2ph.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp20b2a2ph.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\n  File \"/tmp/tmp20b2a2ph.py\", line 16,\
    \ in <lambda>\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \  File \"/tmp/tmp20b2a2ph.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\nValueError: invalid literal for int() with\
    \ base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(digit) for digit in\
    \ str(num)))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg66ee4yl.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda num: sum(int(digit) for digit\
    \ in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(i) for i\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6v9wo4mc.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(i) for\
    \ i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcwh6ibv2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcwh6ibv2.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpcwh6ibv2.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpcwh6ibv2.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)), reverse=True)\n  File \"/tmp/tmpcwh6ibv2.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmpcwh6ibv2.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoow7gqm9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpoow7gqm9.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpoow7gqm9.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpoow7gqm9.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(c) for c in str(x)))\n  File \"/tmp/tmpoow7gqm9.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n  File \"\
    /tmp/tmpoow7gqm9.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(c)\
    \ for c in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvaeg_q9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqvaeg_q9.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqvaeg_q9.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqvaeg_q9.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(c) for c in str(x)), reverse=True)\n  File \"/tmp/tmpqvaeg_q9.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmpqvaeg_q9.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(c) for c in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(i) for i\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6v9wo4mc.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(i) for\
    \ i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vq095c6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4vq095c6.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp4vq095c6.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp4vq095c6.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)))\n  File \"/tmp/tmp4vq095c6.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n  File \"\
    /tmp/tmp4vq095c6.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(n)\
    \ for n in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(c) for c in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo1icc9wn.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(c) for c\
    \ in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vq095c6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4vq095c6.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp4vq095c6.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp4vq095c6.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)))\n  File \"/tmp/tmp4vq095c6.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n  File \"\
    /tmp/tmp4vq095c6.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(n)\
    \ for n in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(n) for n in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsb71tghk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpsb71tghk.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpsb71tghk.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpsb71tghk.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n  File \"/tmp/tmpsb71tghk.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(n) for n\
    \ in str(x)))\n  File \"/tmp/tmpsb71tghk.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(i) for i\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6v9wo4mc.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(i) for\
    \ i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_digit_sum(num: int) -> int:\n        return sum(int(x)\
    \ for x in str(num))\n\n    def get_index(num: int) -> int:\n        return num\
    \ - 1\n\n    return sorted(nums, key=get_digit_sum, reverse=True)\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4uz717t3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4uz717t3.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp4uz717t3.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp4uz717t3.py\", line 22, in order_by_points\n    return\
    \ sorted(nums, key=get_digit_sum, reverse=True)\n  File \"/tmp/tmp4uz717t3.py\"\
    , line 17, in get_digit_sum\n    return sum(int(x) for x in str(num))\n  File\
    \ \"/tmp/tmp4uz717t3.py\", line 17, in <genexpr>\n    return sum(int(x) for x\
    \ in str(num))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_digit(n: int) -> int:\n        return n % 10\n\
    \    def get_sum(n: int) -> int:\n        return sum(get_digit(n) for n in nums)\n\
    \    def get_index(n: int) -> int:\n        return nums.index(n)\n    return sorted(nums,\
    \ key=lambda n: get_sum(n) + get_index(n))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwge7_2v_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwge7_2v_.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwge7_2v_.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(i) for i\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6v9wo4mc.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(i) for\
    \ i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(x) for x\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwq9tp9z.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfwq9tp9z.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpfwq9tp9z.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpfwq9tp9z.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n  File \"/tmp/tmpfwq9tp9z.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(x) for\
    \ x in str(num)))\n  File \"/tmp/tmpfwq9tp9z.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(i) for i\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6v9wo4mc.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(i) for\
    \ i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_sum_of_digits(num: int) -> int:\n        return\
    \ sum(int(num) for num in str(num))\n\n    return sorted(nums, key=get_sum_of_digits)\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexc_lgtc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpexc_lgtc.py\", line 30,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpexc_lgtc.py\", line\
    \ 22, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpexc_lgtc.py\", line 19, in order_by_points\n    return\
    \ sorted(nums, key=get_sum_of_digits)\n  File \"/tmp/tmpexc_lgtc.py\", line 17,\
    \ in get_sum_of_digits\n    return sum(int(num) for num in str(num))\n  File \"\
    /tmp/tmpexc_lgtc.py\", line 17, in <genexpr>\n    return sum(int(num) for num\
    \ in str(num))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_digit_sum(n: int) -> int:\n        return sum(int(d)\
    \ for d in str(n))\n\n    return sorted(nums, key=get_digit_sum)\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2liv4zi9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2liv4zi9.py\", line 30,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp2liv4zi9.py\", line\
    \ 22, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp2liv4zi9.py\", line 19, in order_by_points\n    return\
    \ sorted(nums, key=get_digit_sum)\n  File \"/tmp/tmp2liv4zi9.py\", line 17, in\
    \ get_digit_sum\n    return sum(int(d) for d in str(n))\n  File \"/tmp/tmp2liv4zi9.py\"\
    , line 17, in <genexpr>\n    return sum(int(d) for d in str(n))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(c) for c in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo1icc9wn.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(c) for c\
    \ in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vq095c6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4vq095c6.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp4vq095c6.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp4vq095c6.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)))\n  File \"/tmp/tmp4vq095c6.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n  File \"\
    /tmp/tmp4vq095c6.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(n)\
    \ for n in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(c) for c in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo1icc9wn.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(c) for c\
    \ in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(digit) for digit in\
    \ str(num)))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg66ee4yl.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda num: sum(int(digit) for digit\
    \ in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(num) for\
    \ num in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9dcgbl4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpd9dcgbl4.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpd9dcgbl4.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpd9dcgbl4.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n  File \"/tmp/tmpd9dcgbl4.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(num) for\
    \ num in str(num)))\n  File \"/tmp/tmpd9dcgbl4.py\", line 16, in <genexpr>\n \
    \   return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_sum_of_digits(n: int) -> int:\n        return\
    \ sum(int(i) for i in str(n))\n\n    def get_index(n: int) -> int:\n        return\
    \ nums.index(n)\n\n    return sorted(nums, key=get_sum_of_digits, reverse=True)\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89cpqx0q.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp89cpqx0q.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp89cpqx0q.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp89cpqx0q.py\", line 22, in order_by_points\n    return\
    \ sorted(nums, key=get_sum_of_digits, reverse=True)\n  File \"/tmp/tmp89cpqx0q.py\"\
    , line 17, in get_sum_of_digits\n    return sum(int(i) for i in str(n))\n  File\
    \ \"/tmp/tmp89cpqx0q.py\", line 17, in <genexpr>\n    return sum(int(i) for i\
    \ in str(n))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(y) for y in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp692yfmq4.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp692yfmq4.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmp692yfmq4.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(y) for y\
    \ in str(x)))\n  File \"/tmp/tmp692yfmq4.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_digit_sum(num: int) -> int:\n        return sum(int(d)\
    \ for d in str(num))\n\n    def compare_nums(a: int, b: int) -> int:\n       \
    \ return cmp(get_digit_sum(a), get_digit_sum(b))\n\n    return sorted(nums, cmp=compare_nums)\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9vvxphzx.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9vvxphzx.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp9vvxphzx.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp9vvxphzx.py\", line 22, in order_by_points\n    return\
    \ sorted(nums, cmp=compare_nums)\nTypeError: 'cmp' is an invalid keyword argument\
    \ for sort()\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(c) for c in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo1icc9wn.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(c) for c\
    \ in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20b2a2ph.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp20b2a2ph.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp20b2a2ph.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp20b2a2ph.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\n  File \"/tmp/tmp20b2a2ph.py\", line 16,\
    \ in <lambda>\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \  File \"/tmp/tmp20b2a2ph.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\nValueError: invalid literal for int() with\
    \ base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(y) for y in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp692yfmq4.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp692yfmq4.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmp692yfmq4.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(y) for y\
    \ in str(x)))\n  File \"/tmp/tmp692yfmq4.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmn4tl7_u.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n  File \"\
    /tmp/tmpmn4tl7_u.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(y)\
    \ for y in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vq095c6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4vq095c6.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp4vq095c6.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp4vq095c6.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)))\n  File \"/tmp/tmp4vq095c6.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n  File \"\
    /tmp/tmp4vq095c6.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(n)\
    \ for n in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(c) for c in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo1icc9wn.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(c) for c\
    \ in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(num) for\
    \ num in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9dcgbl4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpd9dcgbl4.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpd9dcgbl4.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpd9dcgbl4.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n  File \"/tmp/tmpd9dcgbl4.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(num) for\
    \ num in str(num)))\n  File \"/tmp/tmpd9dcgbl4.py\", line 16, in <genexpr>\n \
    \   return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoow7gqm9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpoow7gqm9.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpoow7gqm9.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpoow7gqm9.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(c) for c in str(x)))\n  File \"/tmp/tmpoow7gqm9.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n  File \"\
    /tmp/tmpoow7gqm9.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(c)\
    \ for c in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvaeg_q9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqvaeg_q9.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqvaeg_q9.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqvaeg_q9.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(c) for c in str(x)), reverse=True)\n  File \"/tmp/tmpqvaeg_q9.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmpqvaeg_q9.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(c) for c in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20b2a2ph.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp20b2a2ph.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp20b2a2ph.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp20b2a2ph.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\n  File \"/tmp/tmp20b2a2ph.py\", line 16,\
    \ in <lambda>\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \  File \"/tmp/tmp20b2a2ph.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\nValueError: invalid literal for int() with\
    \ base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(num) for num in str(num)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvab8la9l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvab8la9l.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpvab8la9l.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpvab8la9l.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(num) for num in str(num)))\n  File \"/tmp/tmpvab8la9l.py\", line\
    \ 16, in <lambda>\n    nums.sort(key=lambda num: sum(int(num) for num in str(num)))\n\
    \  File \"/tmp/tmpvab8la9l.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(num) for num in str(num)))\nValueError: invalid literal for int()\
    \ with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(digit) for digit in\
    \ str(num)))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg66ee4yl.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda num: sum(int(digit) for digit\
    \ in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(c) for c in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo1icc9wn.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpo1icc9wn.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(c) for c\
    \ in str(x)))\n  File \"/tmp/tmpo1icc9wn.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(i) for i\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6v9wo4mc.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(i) for\
    \ i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(digit) for digit in\
    \ str(num)))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg66ee4yl.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda num: sum(int(digit) for digit\
    \ in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(y) for y in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp692yfmq4.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp692yfmq4.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmp692yfmq4.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(y) for y\
    \ in str(x)))\n  File \"/tmp/tmp692yfmq4.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_digit_sum(n: int) -> int:\n        return sum(int(x)\
    \ for x in str(n))\n\n    return sorted(nums, key=get_digit_sum)\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbiujw784.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbiujw784.py\", line 30,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpbiujw784.py\", line\
    \ 22, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpbiujw784.py\", line 19, in order_by_points\n    return\
    \ sorted(nums, key=get_digit_sum)\n  File \"/tmp/tmpbiujw784.py\", line 17, in\
    \ get_digit_sum\n    return sum(int(x) for x in str(n))\n  File \"/tmp/tmpbiujw784.py\"\
    , line 17, in <genexpr>\n    return sum(int(x) for x in str(n))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmn4tl7_u.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n  File \"\
    /tmp/tmpmn4tl7_u.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(y)\
    \ for y in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmporhz63bn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmporhz63bn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\n  File \"/tmp/tmporhz63bn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmporhz63bn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(num) for num in str(num)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvab8la9l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvab8la9l.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpvab8la9l.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpvab8la9l.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(num) for num in str(num)))\n  File \"/tmp/tmpvab8la9l.py\", line\
    \ 16, in <lambda>\n    nums.sort(key=lambda num: sum(int(num) for num in str(num)))\n\
    \  File \"/tmp/tmpvab8la9l.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(num) for num in str(num)))\nValueError: invalid literal for int()\
    \ with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(x) for x\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwq9tp9z.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfwq9tp9z.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpfwq9tp9z.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpfwq9tp9z.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n  File \"/tmp/tmpfwq9tp9z.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(x) for\
    \ x in str(num)))\n  File \"/tmp/tmpfwq9tp9z.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcwh6ibv2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcwh6ibv2.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpcwh6ibv2.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpcwh6ibv2.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)), reverse=True)\n  File \"/tmp/tmpcwh6ibv2.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmpcwh6ibv2.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmporhz63bn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmporhz63bn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\n  File \"/tmp/tmporhz63bn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmporhz63bn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(i) for i\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6v9wo4mc.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(i) for\
    \ i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(n) for n in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsb71tghk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpsb71tghk.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpsb71tghk.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpsb71tghk.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n  File \"/tmp/tmpsb71tghk.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(n) for n\
    \ in str(x)))\n  File \"/tmp/tmpsb71tghk.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(digit) for digit in\
    \ str(num)))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg66ee4yl.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda num: sum(int(digit) for digit\
    \ in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmporhz63bn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmporhz63bn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\n  File \"/tmp/tmporhz63bn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmporhz63bn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_digit_sum(n: int) -> int:\n        return sum(int(d)\
    \ for d in str(n))\n\n    return sorted(nums, key=get_digit_sum)\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2liv4zi9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2liv4zi9.py\", line 30,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp2liv4zi9.py\", line\
    \ 22, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp2liv4zi9.py\", line 19, in order_by_points\n    return\
    \ sorted(nums, key=get_digit_sum)\n  File \"/tmp/tmp2liv4zi9.py\", line 17, in\
    \ get_digit_sum\n    return sum(int(d) for d in str(n))\n  File \"/tmp/tmp2liv4zi9.py\"\
    , line 17, in <genexpr>\n    return sum(int(d) for d in str(n))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmporhz63bn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmporhz63bn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\n  File \"/tmp/tmporhz63bn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmporhz63bn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20b2a2ph.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp20b2a2ph.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp20b2a2ph.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp20b2a2ph.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\n  File \"/tmp/tmp20b2a2ph.py\", line 16,\
    \ in <lambda>\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \  File \"/tmp/tmp20b2a2ph.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\nValueError: invalid literal for int() with\
    \ base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(y) for y in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp692yfmq4.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp692yfmq4.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmp692yfmq4.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(y) for y\
    \ in str(x)))\n  File \"/tmp/tmp692yfmq4.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmn4tl7_u.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n  File \"\
    /tmp/tmpmn4tl7_u.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(y)\
    \ for y in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(digit) for digit in\
    \ str(num)))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg66ee4yl.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda num: sum(int(digit) for digit\
    \ in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_sum_of_digits(n: int) -> int:\n        return\
    \ sum(int(d) for d in str(n))\n\n    return sorted(nums, key=get_sum_of_digits)\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpam49urr5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpam49urr5.py\", line 30,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpam49urr5.py\", line\
    \ 22, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpam49urr5.py\", line 19, in order_by_points\n    return\
    \ sorted(nums, key=get_sum_of_digits)\n  File \"/tmp/tmpam49urr5.py\", line 17,\
    \ in get_sum_of_digits\n    return sum(int(d) for d in str(n))\n  File \"/tmp/tmpam49urr5.py\"\
    , line 17, in <genexpr>\n    return sum(int(d) for d in str(n))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmn4tl7_u.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n  File \"\
    /tmp/tmpmn4tl7_u.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(y)\
    \ for y in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(x) for x\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwq9tp9z.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfwq9tp9z.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpfwq9tp9z.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpfwq9tp9z.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n  File \"/tmp/tmpfwq9tp9z.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(x) for\
    \ x in str(num)))\n  File \"/tmp/tmpfwq9tp9z.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmn4tl7_u.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n  File \"\
    /tmp/tmpmn4tl7_u.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(y)\
    \ for y in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(digit) for\
    \ digit in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwgy1rxhg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwgy1rxhg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwgy1rxhg.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n  File\
    \ \"/tmp/tmpwgy1rxhg.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpwgy1rxhg.py\"\
    , line 16, in <genexpr>\n    return sorted(nums, key=lambda num: sum(int(digit)\
    \ for digit in str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_digit_sum(n: int) -> int:\n        return sum(int(x)\
    \ for x in str(n))\n\n    def get_digit_sum_index(n: int) -> int:\n        return\
    \ sum(int(x) for x in str(n))\n\n    return sorted(nums, key=get_digit_sum_index)\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9fz9wcr.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpa9fz9wcr.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa9fz9wcr.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpa9fz9wcr.py\", line 22, in order_by_points\n    return\
    \ sorted(nums, key=get_digit_sum_index)\n  File \"/tmp/tmpa9fz9wcr.py\", line\
    \ 20, in get_digit_sum_index\n    return sum(int(x) for x in str(n))\n  File \"\
    /tmp/tmpa9fz9wcr.py\", line 20, in <genexpr>\n    return sum(int(x) for x in str(n))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvaeg_q9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqvaeg_q9.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqvaeg_q9.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqvaeg_q9.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(c) for c in str(x)), reverse=True)\n  File \"/tmp/tmpqvaeg_q9.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(c) for c in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmpqvaeg_q9.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(c) for c in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(i) for i\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6v9wo4mc.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(i) for\
    \ i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_digit(n: int) -> int:\n        return int(str(n)[-1])\n\
    \n    def get_digit_sum(n: int) -> int:\n        return sum(get_digit(n))\n\n\
    \    def compare_nums(a: int, b: int) -> int:\n        return get_digit_sum(a)\
    \ - get_digit_sum(b)\n\n    return sorted(nums, key=compare_nums)\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfjx_jrzv.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpfjx_jrzv.py\", line 36,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpfjx_jrzv.py\", line\
    \ 28, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpfjx_jrzv.py\", line 25, in order_by_points\n    return\
    \ sorted(nums, key=compare_nums)\nTypeError: compare_nums() missing 1 required\
    \ positional argument: 'b'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_sum_of_digits(n: int) -> int:\n        return\
    \ sum(int(x) for x in str(n))\n\n    return sorted(nums, key=get_sum_of_digits)\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1aw0vlal.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1aw0vlal.py\", line 30,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp1aw0vlal.py\", line\
    \ 22, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp1aw0vlal.py\", line 19, in order_by_points\n    return\
    \ sorted(nums, key=get_sum_of_digits)\n  File \"/tmp/tmp1aw0vlal.py\", line 17,\
    \ in get_sum_of_digits\n    return sum(int(x) for x in str(n))\n  File \"/tmp/tmp1aw0vlal.py\"\
    , line 17, in <genexpr>\n    return sum(int(x) for x in str(n))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmn4tl7_u.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n  File \"\
    /tmp/tmpmn4tl7_u.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(y)\
    \ for y in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(n) for n in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsb71tghk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpsb71tghk.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpsb71tghk.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpsb71tghk.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n  File \"/tmp/tmpsb71tghk.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(n) for n\
    \ in str(x)))\n  File \"/tmp/tmpsb71tghk.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(y) for y in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp692yfmq4.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp692yfmq4.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp692yfmq4.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmp692yfmq4.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(y) for y\
    \ in str(x)))\n  File \"/tmp/tmp692yfmq4.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmporhz63bn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmporhz63bn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmporhz63bn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\n  File \"/tmp/tmporhz63bn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(n) for n in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmporhz63bn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(n) for n in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmn4tl7_u.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpmn4tl7_u.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(y) for y in str(x)))\n  File \"/tmp/tmpmn4tl7_u.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n  File \"\
    /tmp/tmpmn4tl7_u.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(y)\
    \ for y in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: num if num >= 0 else -num)\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3hrf44ow.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3hrf44ow.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp3hrf44ow.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_sum_of_digits(num: int) -> int:\n        return\
    \ sum(int(num) for num in str(num))\n\n    return sorted(nums, key=get_sum_of_digits)\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexc_lgtc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpexc_lgtc.py\", line 30,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpexc_lgtc.py\", line\
    \ 22, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpexc_lgtc.py\", line 19, in order_by_points\n    return\
    \ sorted(nums, key=get_sum_of_digits)\n  File \"/tmp/tmpexc_lgtc.py\", line 17,\
    \ in get_sum_of_digits\n    return sum(int(num) for num in str(num))\n  File \"\
    /tmp/tmpexc_lgtc.py\", line 17, in <genexpr>\n    return sum(int(num) for num\
    \ in str(num))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(digit) for digit in\
    \ str(num)))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg66ee4yl.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpg66ee4yl.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda num: sum(int(digit) for digit\
    \ in str(num)))\n  File \"/tmp/tmpg66ee4yl.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(digit) for digit in str(num)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(i) for i in str(num)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf73ucpbt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpf73ucpbt.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpf73ucpbt.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpf73ucpbt.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(i) for i in str(num)))\n  File \"/tmp/tmpf73ucpbt.py\", line 16,\
    \ in <lambda>\n    nums.sort(key=lambda num: sum(int(i) for i in str(num)))\n\
    \  File \"/tmp/tmpf73ucpbt.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(i) for i in str(num)))\nValueError: invalid literal for int() with\
    \ base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def get_sum_of_digits(n: int) -> int:\n        return\
    \ sum(int(d) for d in str(n))\n\n    def get_index(n: int) -> int:\n        return\
    \ nums.index(n)\n\n    nums.sort(key=get_sum_of_digits)\n    return [nums[i] for\
    \ i in sorted(range(len(nums)), key=get_index)]\n\ndef check(candidate):\n   \
    \ assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8w_8hg2z.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8w_8hg2z.py\", line 34,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp8w_8hg2z.py\", line\
    \ 26, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp8w_8hg2z.py\", line 22, in order_by_points\n    nums.sort(key=get_sum_of_digits)\n\
    \  File \"/tmp/tmp8w_8hg2z.py\", line 17, in get_sum_of_digits\n    return sum(int(d)\
    \ for d in str(n))\n  File \"/tmp/tmp8w_8hg2z.py\", line 17, in <genexpr>\n  \
    \  return sum(int(d) for d in str(n))\nValueError: invalid literal for int() with\
    \ base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(i) for i\
    \ in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6v9wo4mc.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6v9wo4mc.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(i) for\
    \ i in str(num)))\n  File \"/tmp/tmp6v9wo4mc.py\", line 16, in <genexpr>\n   \
    \ return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(int(i) for i in\
    \ str(x)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqe6zg5rp.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqe6zg5rp.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(int(i) for i\
    \ in str(x)))\n  File \"/tmp/tmpqe6zg5rp.py\", line 16, in <genexpr>\n    return\
    \ sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(num) for\
    \ num in str(num)))\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9dcgbl4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpd9dcgbl4.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpd9dcgbl4.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpd9dcgbl4.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n  File \"/tmp/tmpd9dcgbl4.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(int(num) for\
    \ num in str(num)))\n  File \"/tmp/tmpd9dcgbl4.py\", line 16, in <genexpr>\n \
    \   return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1662460380
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20b2a2ph.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp20b2a2ph.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp20b2a2ph.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp20b2a2ph.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\n  File \"/tmp/tmp20b2a2ph.py\", line 16,\
    \ in <lambda>\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \  File \"/tmp/tmp20b2a2ph.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\nValueError: invalid literal for int() with\
    \ base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphq_savpn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphq_savpn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphq_savpn.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\n  File \"/tmp/tmphq_savpn.py\"\
    , line 16, in <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)),\
    \ reverse=True)\n  File \"/tmp/tmphq_savpn.py\", line 16, in <genexpr>\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk8xntl9w.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk8xntl9w.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in order_by_points\n    nums.sort(key=lambda\
    \ x: sum(int(i) for i in str(x)))\n  File \"/tmp/tmpk8xntl9w.py\", line 16, in\
    \ <lambda>\n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n  File \"\
    /tmp/tmpk8xntl9w.py\", line 16, in <genexpr>\n    nums.sort(key=lambda x: sum(int(i)\
    \ for i in str(x)))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1661984037
