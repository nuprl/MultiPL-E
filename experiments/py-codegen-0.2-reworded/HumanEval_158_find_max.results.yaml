language: py
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz1ktq0p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwz1ktq0p.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwz1ktq0p.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz1ktq0p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwz1ktq0p.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwz1ktq0p.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz1ktq0p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwz1ktq0p.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwz1ktq0p.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz1ktq0p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwz1ktq0p.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwz1ktq0p.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gsxo10k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp1gsxo10k.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1gsxo10k.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 1:\n        return words[0]\n\
    \    \n    max_count = 0\n    max_word = \"\"\n    for word in words:\n      \
    \  count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphddg1lyh.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphddg1lyh.py\", line 41,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmphddg1lyh.py\", line 30,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    return words[-1]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyvmyv87.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplyvmyv87.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplyvmyv87.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz1ktq0p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwz1ktq0p.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwz1ktq0p.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz1ktq0p.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwz1ktq0p.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwz1ktq0p.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    #                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  \ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd3dqy6sz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpd3dqy6sz.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpd3dqy6sz.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 1:\n        return words[0]\n\
    \    else:\n        max_count = 0\n        max_word = \"\"\n        for word in\
    \ words:\n            count = len(set(word))\n            if count > max_count:\n\
    \                max_count = count\n                max_word = word\n        return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1kyzces.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpo1kyzces.py\", line 41,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo1kyzces.py\", line 30,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    #                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  \ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd3dqy6sz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpd3dqy6sz.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpd3dqy6sz.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i + 1, len(words)):\n           \
    \ if len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsacuhr8_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpsacuhr8_.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpsacuhr8_.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    #                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            \ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp61gsgon0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp61gsgon0.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp61gsgon0.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words) - 1):\n        if len(set(words[i])) == len(words[i]):\n  \
    \          return words[i]\n    return words[0]\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7yxg7ts.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_7yxg7ts.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp_7yxg7ts.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 0:\n        return \"\"\n \
    \   if len(words) == 1:\n        return words[0]\n\n    max_count = 0\n    max_word\
    \ = \"\"\n    for word in words:\n        count = len(set(word))\n        if count\
    \ > max_count:\n            max_count = count\n            max_word = word\n\n\
    \    return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7fiu_f5.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpy7fiu_f5.py\", line 44,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpy7fiu_f5.py\", line 33,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    return words[-1]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyvmyv87.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplyvmyv87.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplyvmyv87.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    #                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            \ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprk1mt0bn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprk1mt0bn.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmprk1mt0bn.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return \"\"\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijxir7uz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpijxir7uz.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpijxir7uz.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        if len(set(words[i])) == len(words[i]):\n      \
    \      return words[i]\n    return words[0]\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5ssh_nd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr5ssh_nd.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpr5ssh_nd.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_m56zmw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk_m56zmw.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk_m56zmw.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17b1yc_p.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp17b1yc_p.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp17b1yc_p.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17b1yc_p.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp17b1yc_p.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp17b1yc_p.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words) - 1):\n        if len(words[i]) == len(words[i+1]):\n     \
    \       if words[i] < words[i+1]:\n                return words[i]\n         \
    \   else:\n                return words[i+1]\n    return words[0]\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0yr9yhc.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpu0yr9yhc.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpu0yr9yhc.py\", line 26,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbut0dz_9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbut0dz_9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbut0dz_9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gsxo10k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp1gsxo10k.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1gsxo10k.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbut0dz_9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbut0dz_9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbut0dz_9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17b1yc_p.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp17b1yc_p.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp17b1yc_p.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words) - 1):\n        if len(set(words[i])) == len(words[i]):\n  \
    \          return words[i]\n    return words[0]\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7yxg7ts.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_7yxg7ts.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp_7yxg7ts.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    return words[-1]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyvmyv87.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplyvmyv87.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplyvmyv87.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbut0dz_9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbut0dz_9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbut0dz_9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 0:\n        return \"\"\n \
    \   if len(words) == 1:\n        return words[0]\n\n    max_count = 0\n    max_word\
    \ = \"\"\n    for word in words:\n        count = len(set(word))\n        if count\
    \ > max_count:\n            max_count = count\n            max_word = word\n\n\
    \    return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7fiu_f5.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpy7fiu_f5.py\", line 44,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpy7fiu_f5.py\", line 33,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ max(words, key=lambda x: len(set(x)))\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0h22d0f7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0h22d0f7.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0h22d0f7.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        if len(set(words[i])) == len(words[i]):\n      \
    \      return words[i]\n    return words[0]\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5ssh_nd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr5ssh_nd.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpr5ssh_nd.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 1:\n        return words[0]\n\
    \    else:\n        max_count = 0\n        max_word = \"\"\n        for word in\
    \ words:\n            count = len(set(word))\n            if count > max_count:\n\
    \                max_count = count\n                max_word = word\n        return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1kyzces.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpo1kyzces.py\", line 41,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo1kyzces.py\", line 30,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return \"\"\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijxir7uz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpijxir7uz.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpijxir7uz.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return \"\"\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijxir7uz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpijxir7uz.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpijxir7uz.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return \"\"\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijxir7uz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpijxir7uz.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpijxir7uz.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    words = sorted(words,\
    \ key=len)\n    for i in range(len(words) - 1):\n        if len(words[i]) == len(words[i+1]):\n\
    \            if words[i] > words[i+1]:\n                return words[i]\n    return\
    \ words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3z4_ikn.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpv3z4_ikn.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpv3z4_ikn.py\", line 25,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    return words[-1]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyvmyv87.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplyvmyv87.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplyvmyv87.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 1:\n        return words[0]\n\
    \    \n    max_count = 0\n    max_word = \"\"\n    for word in words:\n      \
    \  count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphddg1lyh.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphddg1lyh.py\", line 41,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmphddg1lyh.py\", line 30,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ max(words, key=lambda x: len(set(x)))\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0h22d0f7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0h22d0f7.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0h22d0f7.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        if len(set(words[i])) == len(words[i]):\n      \
    \      return words[i]\n    return words[0]\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5ssh_nd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr5ssh_nd.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpr5ssh_nd.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 0:\n        return \"\"\n \
    \   if len(words) == 1:\n        return words[0]\n    words.sort(key=len)\n  \
    \  return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ssd4o4f.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp2ssd4o4f.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2ssd4o4f.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbut0dz_9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbut0dz_9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbut0dz_9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return \"\"\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijxir7uz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpijxir7uz.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpijxir7uz.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words) - 1):\n        if len(words[i]) == len(words[i+1]):\n     \
    \       if words[i] < words[i+1]:\n                return words[i]\n    return\
    \ words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1bj0wn3j.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1bj0wn3j.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1bj0wn3j.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        if len(set(words[i])) == len(words[i]):\n      \
    \      return words[i]\n    return words[0]\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5ssh_nd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr5ssh_nd.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpr5ssh_nd.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17b1yc_p.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp17b1yc_p.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp17b1yc_p.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 0:\n        return \"\"\n \
    \   if len(words) == 1:\n        return words[0]\n    words.sort(key=len)\n  \
    \  return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ssd4o4f.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp2ssd4o4f.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2ssd4o4f.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 0:\n        return \"\"\n \
    \   if len(words) == 1:\n        return words[0]\n\n    max_count = 0\n    max_word\
    \ = \"\"\n    for word in words:\n        count = len(set(word))\n        if count\
    \ > max_count:\n            max_count = count\n            max_word = word\n \
    \   return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj965xed4.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpj965xed4.py\", line 43,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpj965xed4.py\", line 32,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    return words[-1]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyvmyv87.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplyvmyv87.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplyvmyv87.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ max(words, key=lambda x: len(set(x)))\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0h22d0f7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0h22d0f7.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0h22d0f7.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_m56zmw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk_m56zmw.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk_m56zmw.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbut0dz_9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbut0dz_9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbut0dz_9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        if len(set(words[i])) == len(words[i]):\n      \
    \      return words[i]\n    return words[0]\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5ssh_nd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr5ssh_nd.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpr5ssh_nd.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ max(words, key=lambda x: len(set(x)))\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0h22d0f7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0h22d0f7.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0h22d0f7.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        for j in range(i+1, len(words)):\n            if\
    \ len(set(words[i]) & set(words[j])) == len(words[i]):\n                return\
    \ words[i]\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkv9d5cai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkv9d5cai.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkv9d5cai.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 0:\n        return \"\"\n \
    \   if len(words) == 1:\n        return words[0]\n\n    max_count = 0\n    max_word\
    \ = \"\"\n    for word in words:\n        count = len(set(word))\n        if count\
    \ > max_count:\n            max_count = count\n            max_word = word\n\n\
    \    return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy7fiu_f5.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpy7fiu_f5.py\", line 44,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpy7fiu_f5.py\", line 33,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gsxo10k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp1gsxo10k.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1gsxo10k.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    if len(words) == 1:\n        return words[0]\n\
    \    \n    max_count = 0\n    max_word = \"\"\n    for word in words:\n      \
    \  count = len(set(word))\n        if count > max_count:\n            max_count\
    \ = count\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphddg1lyh.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphddg1lyh.py\", line 41,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmphddg1lyh.py\", line 30,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return words[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7l8hgse.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk7l8hgse.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk7l8hgse.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_m56zmw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk_m56zmw.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpk_m56zmw.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        if len(set(words[i])) == len(words[i]):\n      \
    \      return words[i]\n    return words[0]\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5ssh_nd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr5ssh_nd.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpr5ssh_nd.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    return words[-1]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyvmyv87.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplyvmyv87.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplyvmyv87.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        if len(set(words[i])) == len(words[i]):\n      \
    \      return words[i]\n    return words[0]\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5ssh_nd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr5ssh_nd.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpr5ssh_nd.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17b1yc_p.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp17b1yc_p.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp17b1yc_p.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    return words[-1]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyvmyv87.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplyvmyv87.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplyvmyv87.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ max(words, key=lambda x: len(set(x)))\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0h22d0f7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0h22d0f7.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0h22d0f7.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=len)\n    for i in\
    \ range(len(words)):\n        if len(set(words[i])) == len(words[i]):\n      \
    \      return words[i]\n    return words[0]\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5ssh_nd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpr5ssh_nd.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpr5ssh_nd.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    return \"\"\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijxir7uz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpijxir7uz.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpijxir7uz.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    return\
    \ words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbut0dz_9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbut0dz_9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbut0dz_9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement function\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml7rpaf9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpml7rpaf9.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpml7rpaf9.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
    , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\",\
    \ \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9k6vvqj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9k6vvqj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo9k6vvqj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
  timestamp: 1662863957
