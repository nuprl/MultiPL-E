name: HumanEval_20_find_closest_elements
language: py
prompt: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
  \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
  \ at least two) select and return two that are the closest to each\n    other and\
  \ return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
  \ == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n\
  \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert\
  \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\
  \ntest_check()\n"
completions: ["    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if\
    \ len(numbers) < 2:\n        raise ValueError(\"The list of numbers must be at\
    \ least 2 long.\")\n    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list of numbers must be at least of length 2\")\n\
    \    \n    numbers.sort()\n    \n    return numbers[0], numbers[-1]\n", "    if\
    \ len(numbers) < 2:\n        raise ValueError(\"The supplied list must contain\
    \ at least two numbers\")\n\n    numbers.sort()\n\n    return numbers[0], numbers[1]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list must contain\
    \ at least two numbers.\")\n    numbers.sort()\n    return numbers[0], numbers[1]\n\
    <|endoftext|><|python|>#                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             ", "    if len(numbers) < 2:\n        raise ValueError(\"The list\
    \ must contain at least two numbers\")\n    numbers.sort()\n    return numbers[0],\
    \ numbers[1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"The supplied\
    \ list of numbers must be at least length 2\")\n    numbers.sort()\n    return\
    \ numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    The supplied list of numbers must be at least two elements long.\")\n    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list of numbers must be at least two elements long\"\
    )\n\n    numbers.sort()\n\n    return numbers[0], numbers[-1]\n<|endoftext|><|python|>#",
  "    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list must contain at least two numbers\")\n\n    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list of numbers must be at least length 2\")\n   \
    \ numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"The supplied list must be at least length 2\"\
    )\n    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"You must supply at least two numbers to find\
    \ the closest two.\")\n    numbers.sort()\n    return numbers[0], numbers[1]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list must be\
    \ at least of length 2\")\n\n    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"Need at least two numbers to find closest pair\"\
    )\n\n    numbers.sort()\n\n    return numbers[0], numbers[1]\n", "    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list of numbers must be at least length 2\")\n   \
    \ \n    numbers.sort()\n    \n    smallest = numbers[0]\n    largest = numbers[-1]\n\
    \    \n    return smallest, largest\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"List of numbers must be at least length 2\")\n    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list must be at least of length 2\")\n    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list of numbers must be at least length 2\")\n   \
    \ numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"List of numbers must be at least of length\
    \ 2\")\n    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"The supplied list of numbers must be at least\
    \ two long\")\n\n    numbers.sort()\n\n    return numbers[0], numbers[-1]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list must contain\
    \ at least two numbers\")\n    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"Input list must be at least length 2\")\n \
    \   numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"Need at least two numbers to find closest pair\"\
    )\n    numbers.sort()\n    return numbers[0], numbers[1]\n", "    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list of numbers must be at least two elements long.\"\
    )\n    \n    # Sort the list\n    numbers.sort()\n    \n    # Find the two closest\
    \ numbers\n    closest_pair = (numbers[0], numbers[1])\n    \n    # Find the second\
    \ closest number\n    second_closest_pair = (numbers[0], numbers[1])\n    \n \
    \   # Find the third closest number\n    third_closest_pair = (numbers[0], numbers[1])\n\
    \    \n    # Find the fourth closest number\n    fourth_closest_pair = (numbers[0],\
    \ numbers[1])\n    \n    # Find the fifth closest number\n    fifth_closest_pair\
    \ = (numbers[0], numbers[1])\n    \n    # Find the sixth closest number\n    sixth_closest_pair\
    \ = (numbers[0], numbers[1])\n    \n    # Find the seventh closest number\n  \
    \  seventh_closest_pair = (numbers[0], numbers[1])\n    \n    # Find the eighth\
    \ closest number\n    eighth_closest_pair = (numbers[0], numbers[1])\n    \n \
    \   # Find the ninth closest number\n    ninth_closest_pair = (numbers[0], numbers[1])\n\
    \    \n    # Find the tenth closest number\n    tenth_closest_pair = (numbers[0],\
    \ numbers[1])\n    \n    # Find the eleventh closest number\n    eleventh_closest_pair\
    \ = (numbers[0], numbers[1])\n    \n    # Find the twelfth closest number\n  \
    \  twelfth_closest_pair = (numbers[0], numbers[1])\n    \n    # Find the thirteenth\
    \ closest number\n    thirteenth_closest_pair = (numbers[0], numbers[1])\n   \
    \ \n    # Find the fourteenth closest number\n    fourteenth_closest_pair = (numbers[0],\
    \ numbers[1])\n    \n    # Find the fifteenth closest number\n    fifteenth_closest_pair\
    \ = (numbers[0], numbers[1])\n    \n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The list of numbers must be at least 2 long\")\n    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list must contain at least two numbers\")\n    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    numbers.sort()\n    return numbers[0],\
    \ numbers[-1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"The supplied\
    \ list of numbers must be at least of length 2\")\n\n    numbers.sort()\n\n  \
    \  return numbers[0], numbers[-1]\n", "    numbers.sort()\n    return numbers[0],\
    \ numbers[-1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"List of\
    \ numbers must be at least two elements long\")\n    numbers.sort()\n    return\
    \ numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    List of numbers must be at least two elements long\")\n    numbers.sort()\n  \
    \  return numbers[0], numbers[-1]\n", "    numbers.sort()\n    return numbers[0],\
    \ numbers[-1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"The supplied\
    \ list of numbers must be at least length 2\")\n    numbers.sort()\n    return\
    \ numbers[0], numbers[-1]\n", "    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list of numbers\
    \ must be at least two elements long.\")\n\n    numbers.sort()\n    return numbers[0],\
    \ numbers[-1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"The supplied\
    \ list of numbers must be at least two long\")\n\n    numbers.sort()\n\n    return\
    \ numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    The supplied list of numbers must be at least two elements long\")\n    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list of numbers must be at least two long\")\n   \
    \ numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"Need at least two numbers to find closest pair\"\
    )\n    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"The supplied list of numbers must be at least\
    \ two elements long\")\n    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list of numbers\
    \ must be at least two elements long.\")\n    numbers.sort()\n    return numbers[0],\
    \ numbers[-1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"The list\
    \ of numbers must be at least two long\")\n    numbers.sort()\n    return numbers[0],\
    \ numbers[-1]\n", "    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list of numbers\
    \ must be at least of length 2\")\n\n    numbers.sort()\n    return numbers[0],\
    \ numbers[-1]\n", "    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list of numbers\
    \ must be at least of length 2\")\n    numbers.sort()\n    return numbers[0],\
    \ numbers[-1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"The supplied\
    \ list must contain at least two numbers\")\n\n    numbers.sort()\n\n    return\
    \ numbers[0], numbers[1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    The supplied list of numbers must be at least two long\")\n    numbers.sort()\n\
    \    return numbers[0], numbers[-1]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"The supplied list must contain at least two numbers.\")\n    \n\
    \    numbers.sort()\n    \n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"The supplied list must be at least of length\
    \ 2\")\n\n    # Sort the list\n    numbers.sort()\n\n    # Find the two closest\
    \ numbers\n    return numbers[0], numbers[1]\n", "    if len(numbers) < 2:\n \
    \       raise ValueError(\"The supplied list of numbers must be at least length\
    \ 2\")\n    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"The supplied list must contain at least two\
    \ numbers\")\n\n    # Sort the list\n    numbers.sort()\n\n    # Find the two\
    \ closest numbers\n    smallest_number = numbers[0]\n    largest_number = numbers[-1]\n\
    \n    # Return the two closest numbers\n    return smallest_number, largest_number\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers\
    \ to find closest pair\")\n    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list must contain\
    \ at least two numbers\")\n    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list of numbers\
    \ must be at least of length 2\")\n    numbers.sort()\n    return numbers[0],\
    \ numbers[-1]\n", "    if len(numbers) < 2:\n        raise ValueError(\"The supplied\
    \ list of numbers must be at least two long\")\n\n    numbers.sort()\n    return\
    \ numbers[0], numbers[-1]\n", "    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"The supplied list must be at least length 2\"\
    )\n\n    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"Need at least two numbers to find closest pair\"\
    )\n    numbers.sort()\n    return numbers[0], numbers[1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"The supplied list must contain at least two\
    \ numbers\")\n    numbers.sort()\n    return numbers[0], numbers[1]\n", "    if\
    \ len(numbers) < 2:\n        raise ValueError(\"The supplied list must be at least\
    \ of length 2\")\n\n    numbers.sort()\n    return numbers[0], numbers[-1]\n",
  "    if len(numbers) < 2:\n        raise ValueError(\"The supplied list must contain\
    \ at least two numbers\")\n    numbers.sort()\n    return numbers[0], numbers[1]\n",
  "    numbers.sort()\n    return numbers[0], numbers[-1]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"List of numbers must be at least two elements\
    \ long.\")\n\n    numbers.sort()\n\n    return numbers[0], numbers[1]\n", "  \
    \  if len(numbers) < 2:\n        raise ValueError(\"The supplied list of numbers\
    \ must be at least two elements long.\")\n\n    numbers.sort()\n\n    return numbers[0],\
    \ numbers[-1]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
