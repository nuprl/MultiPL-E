name: HumanEval_130_tri
language: py
prompt: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
  \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
  \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
  \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
  \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
  \ if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n\
  \    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are\
  \ given a non-negative integer number n, you have to a return a list of the \n \
  \   first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n\
  \    [1, 3, 2, 8]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
  \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n\
  \    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1,\
  \ 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24,\
  \ 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
  \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
  \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
  \    check(tri)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return []\n    elif n == 1:\n        return\
    \ [1, 3, 2]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    else:\n      \
    \  if n % 2 == 0:\n            return [1, 1 + n / 2, 1 + n / 2 - 1, 1 + n / 2\
    \ + 1]\n        else:\n            return [1, 1 + n / 2, 1 + n / 2 - 1, 1 + n\
    \ / 2 + 1, 1 + n / 2 + 2]\n", "    if n == 0:\n        return []\n    elif n ==\
    \ 1:\n        return [3]\n    elif n == 2:\n        return [1, 2]\n    elif n\
    \ % 2 == 0:\n        return [1, 2, 1 + n / 2]\n    else:\n        return [1, 1\
    \ + n / 2, 1 + n / 2 + 1]\n", "    if n < 1:\n        return []\n    if n == 1:\n\
    \        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 1 + (n / 2)]\
    \ + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
  "    if n == 0:\n        return []\n    if n == 1:\n        return [1, 3, 2, 8]\n\
    \    if n == 2:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return\
    \ [1, 1 + n / 2, 1 + n / 2 - 1, 1 + n / 2 + 1]\n    else:\n        return [1,\
    \ 1 + n / 2, 1 + n / 2 - 1, 1 + n / 2 + 1, 1 + n / 2 + 2]\n", "    if n < 1:\n\
    \        return []\n    if n == 1:\n        return [1, 3, 2]\n    if n % 2 ==\
    \ 0:\n        return [1, 1 + n / 2, 1 + n / 2 + 1]\n    else:\n        return\
    \ [1, 1 + n / 2, 1 + n / 2 + 1, 1 + n / 2 + 2]\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,\
    \ 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2 - 1,\
    \ 1 + n / 2 + 1]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 - 1, 1 +\
    \ n / 2 + 1, 1 + n / 2 + 2]\n", "    if n == 0:\n        return []\n    if n ==\
    \ 1:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return [1, 1 +\
    \ (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)]\n    else:\n\
    \        return [1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2)\
    \ + (n / 2) + (n / 2)]\n", "    if n == 0:\n        return []\n    if n == 1:\n\
    \        return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return [1, 1 + n / 2,\
    \ 2, 2 + n / 2, 3]\n    else:\n        return [1, 1 + n / 2, 2, 2 + n / 2, 3,\
    \ 1 + n / 2, 2 + n / 2, 3 + n / 2]\n", "    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return\
    \ [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2\
    \ == 0:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2]\n    else:\n    \
    \    return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2] + tri(n - 1)\n", "    if n ==\
    \ 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n\
    \        return [1, 2]\n    else:\n        if n % 2 == 0:\n            return\
    \ [1, 1 + n / 2] + tri(n - 2)\n        else:\n            return tri(n - 1) +\
    \ [1, 1 + n / 2, 1 + n / 2 + n]\n", "    if n == 0:\n        return []\n    if\
    \ n == 1:\n        return [1, 3, 2]\n    if n == 2:\n        return [1, 3, 2,\
    \ 8]\n    if n % 2 == 0:\n        return [1, 1 + n / 2, 1 + (n - 1) / 2, 1 + (n\
    \ - 2) / 2, 1 + (n - 3) / 2, 1 + (n - 4) / 2]\n    else:\n        return [1, 1\
    \ + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n - 3) / 2, 1 + (n - 4) / 2, 1 + (n - 5)\
    \ / 2, 1 + (n - 6) / 2]\n", "    if n < 0:\n        raise ValueError(\"n should\
    \ be non-negative\")\n    if n == 0:\n        return [0]\n    if n == 1:\n   \
    \     return [1, 3]\n    if n == 2:\n        return [1, 3, 2, 8]\n    if n ==\
    \ 3:\n        return [1, 3, 2, 8, 5, 23]\n    if n == 4:\n        return [1, 3,\
    \ 2, 8, 5, 23, 34]\n    if n == 5:\n        return [1, 3, 2, 8, 5, 23, 34, 55]\n\
    \    if n == 6:\n        return [1, 3, 2, 8, 5, 23, 34, 55, 89]\n    if n == 7:\n\
    \        return [1, 3, 2, 8, 5, 23, 34, 55, 89, 144]\n    if n == 8:\n       \
    \ return [1, 3, 2, 8, 5, 23, 34, 55, 89, 144, 233]\n    if n == 9:\n        return\
    \ [1, 3, 2, 8, 5, 23, 34, 55, 89, 144, 233, 377]\n    if n == 10:\n        return\
    \ [1, 3, 2, 8, 5, 23, 34, 55, 89, 144, 233, 377, 610]\n    if n == 11:\n     \
    \   return [1, 3, 2, 8, 5, 23, 34, 55, 89, 144, 233, 377, 610, 987]\n    if n\
    \ == 12:\n        return [1, 3, 2, 8, 5, 23, 34, 55, 89, 144, 233, 377, 610, 987,\
    \ 1597]\n    if n == 13:\n        return [1, 3, 2, 8, 5, 23, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597, 2584]\n    if n == 14:\n        return [1, 3, 2, 8,\
    \ 5, 23, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n    if n == 15:\n\
    \        return [1, 3, 2, 8, 5, 23, 34, 55, 89", "    if n == 0:\n        return\
    \ []\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1,\
    \ 3, 2]\n    if n % 2 == 0:\n        return [1, 1 + n / 2] + tri(n - 2)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n", "    if n == 0:\n   \
    \     return []\n    elif n == 1:\n        return [1, 3, 2]\n    elif n == 2:\n\
    \        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8, 5,\
    \ 12, 9]\n    elif n == 4:\n        return [1, 3, 2, 8, 5, 12, 9, 13, 20, 18,\
    \ 34, 26, 40, 32, 77, 70, 126, 101, \n                154, 132, 213, 203, 344,\
    \ 286, 473, 378, 715, 636, 1135, 985, 1729, \n                1584, 2465, 2197,\
    \ 4180, 3603, 6764, 5930, 10585, 9183, 18071, 16378, \n                29461,\
    \ 26214, 48620, 41943, 77790, 67863, 125970, 108915, 185964, \n              \
    \  170793, 302478, 263524, 514229, 435965, 789078, 678755, 1333772, \n       \
    \         1114667, 1961490, 1765795, 3245772, 280098, 5271455, 4494440, 8078825,\
    \ \n                7163552, 13340195, 11747030, 20995011, 18671590, 32457720,\
    \ 28009800, \n                52714552, 44944400, 80788250, 71635520, 133401952,\
    \ 117470300, \n                196149008, 176579584, 324577200, 280098000, 527145520,\
    \ 449444000, \n                807882500, 716355216, 1334019520, 1174703040, 1961490080,\
    \ 1765795840, \n                3245772000, 2800980000, 5271455200, 4494440000,\
    \ 8078825000, \n                7163552000, 13340195200, 11747030400, 19614900800,\
    \ 17657958400, \n                324577", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        return\
    \ [1, 3, 2, 8] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n", "    if n == 0:\n  \
    \      return []\n    if n == 1:\n        return [1, 3, 2]\n    if n == 2:\n \
    \       return [1, 3, 2, 8]\n    if n % 2 == 0:\n        return [1, 1 + n / 2,\
    \ 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n - 3) / 2, 1 + (n - 4) / 2, 1 + (n -\
    \ 5) / 2, 1 + (n - 6) / 2, 1 + (n - 7) / 2, 1 + (n - 8) / 2, 1 + (n - 9) / 2,\
    \ 1 + (n - 10) / 2, 1 + (n - 11) / 2, 1 + (n - 12) / 2, 1 + (n - 13) / 2, 1 +\
    \ (n - 14) / 2, 1 + (n - 15) / 2, 1 + (n - 16) / 2, 1 + (n - 17) / 2, 1 + (n -\
    \ 18) / 2, 1 + (n - 19) / 2, 1 + (n - 20) / 2, 1 + (n - 21) / 2, 1 + (n - 22)\
    \ / 2, 1 + (n - 23) / 2, 1 + (n - 24) / 2, 1 + (n - 25) / 2, 1 + (n - 26) / 2,\
    \ 1 + (n - 27) / 2, 1 + (n - 28) / 2, 1 + (n - 29) / 2, 1 + (n - 30) / 2, 1 +\
    \ (n - 31) / 2, 1 + (n - 32) / 2, 1 + (n - 33) / 2, 1 + (n - 34) / 2, 1 + (n -\
    \ 35) / 2, 1 + (n - 36) / 2, 1 + (n - 37) / 2, 1 + (n - 38) / 2, 1 + (n - 39)\
    \ / 2, 1 + (n - 40) / 2, 1 + (n - 41) / 2, 1 + (n - 42) / 2, 1 + (n - 43) / 2,\
    \ 1 + (n - 44) / 2, 1 + (n -", "    if n == 0:\n        return []\n    elif n\
    \ == 1:\n        return [1, 3, 2]\n    elif n == 2:\n        return [1, 3, 2,\
    \ 8]\n    else:\n        if n % 2 == 0:\n            return [1, 1 + n / 2, 1 +\
    \ n / 2 - 1, 1 + n / 2 + 1]\n        else:\n            return [1, 1 + n / 2,\
    \ 1 + n / 2 - 1, 1 + n / 2 + 1, 1 + n / 2 + 2]\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,\
    \ 2]\n    else:\n        if n % 2 == 0:\n            return [1, 1 + n / 2] + tri(n\
    \ - 2)\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
  "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n\
    \ == 2:\n        return [1, 2]\n    if n % 2 == 0:\n        return [1, 1 + n /\
    \ 2] + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n", "    if n < 0:\n        raise ValueError(\"n should be non-negative\"\
    )\n    if n == 0:\n        return []\n    if n == 1:\n        return [1, 3, 2,\
    \ 8]\n    if n == 2:\n        return [1, 3, 2, 8]\n    if n == 3:\n        return\
    \ [1, 3, 2, 8]\n    if n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2, 1\
    \ + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2 + 1]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
