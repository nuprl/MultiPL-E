{
  "language": "py",
  "name": "HumanEval_61_correct_bracketing",
  "results": [
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        if brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp_mmdmjd1.py\", line 22\n    \nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for i in brackets:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpn5vdmkl5.py\", line 22\n    \nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp9pdhnoos.py\", line 22\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack.pop() != '(':\n                return False\n    return len(stack) == 0\n<|endoftext|><|python|>#                              \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpt3mg2q2s.py\", line 24\n    <|endoftext|><|python|>#                              \n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == '(':\n            opening_brackets += 1\n        elif c == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp3239n3y4.py\", line 22\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp9pdhnoos.py\", line 22\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp146revq_.py\", line 22\n    <|endoftext|><|python|n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n        if opening_brackets != closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp33i_2fjp.py\", line 24\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] != '(':\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#                                                                                                                                                                                                                                                                                                                                          \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp940a3cpb.py\", line 22\n    <|endoftext|><|python|>#                                                                                                                                                                                                                                                                                                                                          \n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        if brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpq5k6skxy.py\", line 22\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984089
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpn5vdmkl5.py\", line 22\n    \nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984089
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for i in brackets:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] != '(':\n                return False\n            stack.pop()\n    if len(stack) != 0:\n        return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984089
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp1pj3qqlo.py\", line 22\n    \nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984089
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n        if opening_brackets != closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp54_ntbkx.py\", line 24\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984089
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp3rwb2o4i.py\", line 22\n    <|endoftext|><|python|n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984089
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        elif brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpplej46dw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpplej46dw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpplej46dw.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop() != '(':\n                return False\n    return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        elif brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpplej46dw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpplej46dw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpplej46dw.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for i in brackets:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        if brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpep5m_0li.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpep5m_0li.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpep5m_0li.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == \"(\":\n            opening_brackets += 1\n        elif c == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgd_f1sxz.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgd_f1sxz.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgd_f1sxz.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        if brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpep5m_0li.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpep5m_0li.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpep5m_0li.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop() != '(':\n                return False\n    return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] != '(':\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        if brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnd_9zn8l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpnd_9zn8l.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnd_9zn8l.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n        if opening_brackets != closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxr11wxcy.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpxr11wxcy.py\", line 40, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxr11wxcy.py\", line 26, in check\n    assert candidate('()') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == '(':\n            opening_brackets += 1\n        elif c == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg90tzoz7.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpg90tzoz7.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpg90tzoz7.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack.pop() != '(':\n                return False\n    return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        if brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnd_9zn8l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpnd_9zn8l.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnd_9zn8l.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == \"(\":\n            opening_brackets += 1\n        elif c == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgd_f1sxz.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgd_f1sxz.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgd_f1sxz.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop() != '(':\n                return False\n    return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        if brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnd_9zn8l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpnd_9zn8l.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnd_9zn8l.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for i in brackets:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        elif brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpplej46dw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpplej46dw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpplej46dw.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] != '(':\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop() != '(':\n                return False\n    return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        elif brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpplej46dw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpplej46dw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpplej46dw.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n        if opening_brackets > closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzw2csk3.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpdzw2csk3.py\", line 40, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdzw2csk3.py\", line 26, in check\n    assert candidate('()') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        if brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpep5m_0li.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpep5m_0li.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpep5m_0li.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for i in brackets:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        elif brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpplej46dw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpplej46dw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpplej46dw.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        elif brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpplej46dw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpplej46dw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpplej46dw.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in brackets:\n        if i == \"(\":\n            opening_brackets += 1\n        elif i == \")\":\n            closing_brackets += 1\n        if opening_brackets > closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvxbkf7ve.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpvxbkf7ve.py\", line 40, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvxbkf7ve.py\", line 26, in check\n    assert candidate('()') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack.pop() != '(':\n                return False\n    return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        if brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpep5m_0li.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpep5m_0li.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpep5m_0li.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        elif brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpplej46dw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpplej46dw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpplej46dw.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop() != '(':\n                return False\n    return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == \"(\":\n            opening_brackets += 1\n        elif c == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgd_f1sxz.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgd_f1sxz.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgd_f1sxz.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        if brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnd_9zn8l.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpnd_9zn8l.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnd_9zn8l.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack.pop() != \"(\":\n                return False\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for i in brackets:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            if stack[-1] != \"(\":\n                return False\n            stack.pop()\n    return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        elif brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpplej46dw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpplej46dw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpplej46dw.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == \"(\":\n            opening_brackets += 1\n        elif c == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgd_f1sxz.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpgd_f1sxz.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgd_f1sxz.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening_brackets += 1\n        elif brackets[i] == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpplej46dw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpplej46dw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpplej46dw.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvxocbqf.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbvxocbqf.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbvxocbqf.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack.pop() != '(':\n                return False\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n        if opening_brackets > closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzw2csk3.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpdzw2csk3.py\", line 40, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdzw2csk3.py\", line 26, in check\n    assert candidate('()') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack.pop() != '(':\n                return False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets += 1\n        elif char == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv25xo9km.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpv25xo9km.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv25xo9km.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets += 1\n        elif brackets[i] == \")\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj1967sos.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj1967sos.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj1967sos.py\", line 29, in check\n    assert candidate(')(()') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984088
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662864845
    }
  ]
}