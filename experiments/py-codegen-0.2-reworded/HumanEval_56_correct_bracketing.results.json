{
  "language": "py",
  "name": "HumanEval_56_correct_bracketing",
  "results": [
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    return all(brackets[i] == brackets[i + 1] for i in range(len(brackets) - 1))\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd5urivvt.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpd5urivvt.py\", line 32, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpd5urivvt.py\", line 18, in check\n    assert candidate('<>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    return all(brackets[i] == '<' and brackets[i + 1] == '>' for i in range(len(brackets) - 1))\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcc5skoz4.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpcc5skoz4.py\", line 32, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcc5skoz4.py\", line 19, in check\n    assert candidate('<<><>>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = []\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets.append(char)\n        else:\n            opening_brackets.pop()\n    return not opening_brackets\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8y22bwly.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp8y22bwly.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8y22bwly.py\", line 28, in check\n    assert candidate('<<<><>>>>') == False\n  File \"/tmp/tmp8y22bwly.py\", line 19, in correct_bracketing\n    opening_brackets.pop()\nIndexError: pop from empty list\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(\"<\")\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            if stack.pop() != \"<\":\n                return False\n    return len(stack) == 0\n<|endoftext|><|python|ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp3qu8ixng.py\", line 24\n    \nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack.pop() != \"<\":\n                return False\n    return not stack\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpq8z678pl.py\", line 24\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if not stack:\n                return False\n            if stack.pop() != \"<\":\n                return False\n    return not stack\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpfambpd4o.py\", line 24\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n<|endoftext|><|python|ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpii73euny.py\", line 24\n    \nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    return all(brackets[i] == brackets[i + 1] for i in range(len(brackets) - 1))\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd5urivvt.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpd5urivvt.py\", line 32, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpd5urivvt.py\", line 18, in check\n    assert candidate('<>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpjqw89sst.py\", line 22\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpjqw89sst.py\", line 22\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|>#\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpfk1102ud.py\", line 22\n    <|endoftext|><|python|>#\n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n<|endoftext|><|python|>#                                                                                                                                                                                                                                                                                                                                                                        \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpzmktvz6v.py\", line 24\n    <|endoftext|><|python|>#                                                                                                                                                                                                                                                                                                                                                                        \n    ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n<|endoftext|><|python|ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpuixd87dl.py\", line 22\n    \nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == \"<\":\n            opening_brackets += 1\n        elif c == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4pktxar6.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp4pktxar6.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4pktxar6.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    return all(bracket == \">\" for bracket in brackets)\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp99hcsc78.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp99hcsc78.py\", line 32, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp99hcsc78.py\", line 18, in check\n    assert candidate('<>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n        if opening_brackets < 0:\n            return False\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(\"<\")\n        elif c == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n        if opening_brackets > closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwgctpopg.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpwgctpopg.py\", line 40, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwgctpopg.py\", line 26, in check\n    assert candidate('<>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        else:\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu46r_u9w.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu46r_u9w.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu46r_u9w.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    return all(bracket in brackets for bracket in \"<>\")\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp58chauzz.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp58chauzz.py\", line 32, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp58chauzz.py\", line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack.pop() != \"<\":\n                return False\n    return not stack\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    return all(bracket in brackets for bracket in \"<>\")\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp58chauzz.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp58chauzz.py\", line 32, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp58chauzz.py\", line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        else:\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2lk3stb5.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp2lk3stb5.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2lk3stb5.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n        else:\n            return False\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsczi596c.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpsczi596c.py\", line 40, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsczi596c.py\", line 31, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n        if opening_brackets < 0:\n            return False\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    return all(bracket == \">\" for bracket in brackets)\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp99hcsc78.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp99hcsc78.py\", line 32, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp99hcsc78.py\", line 18, in check\n    assert candidate('<>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        else:\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu46r_u9w.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu46r_u9w.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu46r_u9w.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack.pop() != \"<\":\n                return False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == \"<\":\n            opening_brackets += 1\n        elif c == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4pktxar6.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp4pktxar6.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4pktxar6.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n        if opening_brackets < 0:\n            return False\n    return opening_brackets == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if not stack:\n                return False\n            if stack.pop() != \"<\":\n                return False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n        if opening_brackets > closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwgctpopg.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpwgctpopg.py\", line 40, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwgctpopg.py\", line 26, in check\n    assert candidate('<>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack.pop() != \"<\":\n                return False\n    return not stack\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top != \"<\":\n                return False\n    return not stack\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n        if opening_brackets > closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwgctpopg.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpwgctpopg.py\", line 40, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwgctpopg.py\", line 26, in check\n    assert candidate('<>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for c in brackets:\n        if c == \"<\":\n            opening_brackets += 1\n        elif c == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp151gwxvt.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp151gwxvt.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp151gwxvt.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2xtx_ylw.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp2xtx_ylw.py\", line 37, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2xtx_ylw.py\", line 28, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        else:\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2lk3stb5.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp2lk3stb5.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2lk3stb5.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpine48z0u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpine48z0u.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpine48z0u.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    return all(bracket in brackets for bracket in \"<>\")\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp58chauzz.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp58chauzz.py\", line 32, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp58chauzz.py\", line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(\"<\")\n        elif c == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n        if opening_brackets > closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwgctpopg.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpwgctpopg.py\", line 40, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwgctpopg.py\", line 26, in check\n    assert candidate('<>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        else:\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2lk3stb5.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp2lk3stb5.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2lk3stb5.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        else:\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2lk3stb5.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp2lk3stb5.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2lk3stb5.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2xtx_ylw.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp2xtx_ylw.py\", line 37, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2xtx_ylw.py\", line 28, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if not stack:\n                return False\n            if stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    return all(bracket == \">\" for bracket in brackets)\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp99hcsc78.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp99hcsc78.py\", line 32, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp99hcsc78.py\", line 18, in check\n    assert candidate('<>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu2047345.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpu2047345.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2047345.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == \"<\":\n            opening_brackets += 1\n        elif c == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4pktxar6.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp4pktxar6.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4pktxar6.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if not stack:\n                return False\n            if stack.pop() != \"<\":\n                return False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n        else:\n            return False\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsczi596c.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpsczi596c.py\", line 40, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsczi596c.py\", line 31, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    return all(bracket == \">\" for bracket in brackets)\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp99hcsc78.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp99hcsc78.py\", line 32, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp99hcsc78.py\", line 18, in check\n    assert candidate('<>') == True\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening_brackets += 1\n        elif brackets[i] == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2xtx_ylw.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp2xtx_ylw.py\", line 37, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2xtx_ylw.py\", line 28, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            opening_brackets -= 1\n    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkrrta3b3.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpkrrta3b3.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkrrta3b3.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == \"<\":\n            opening_brackets += 1\n        elif c == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpflc10qyx.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpflc10qyx.py\", line 39, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpflc10qyx.py\", line 30, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1661984028
    },
    {
      "exit_code": 1,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        elif char == \">\":\n            closing_brackets += 1\n    return opening_brackets == closing_brackets\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9edj5yw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmph9edj5yw.py\", line 38, in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph9edj5yw.py\", line 29, in check\n    assert candidate('><<>') == False\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662865602
    },
    {
      "exit_code": 0,
      "program": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662865602
    }
  ]
}