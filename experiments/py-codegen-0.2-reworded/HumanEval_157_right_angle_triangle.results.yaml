language: py
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (b\
    \ + c > a)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparsv4mrz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmparsv4mrz.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmparsv4mrz.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (b\
    \ + c > a)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparsv4mrz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmparsv4mrz.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmparsv4mrz.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (b\
    \ + c > a)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparsv4mrz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmparsv4mrz.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmparsv4mrz.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (b\
    \ + c > a)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparsv4mrz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmparsv4mrz.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmparsv4mrz.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (b\
    \ + c > a)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparsv4mrz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmparsv4mrz.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmparsv4mrz.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and c + a\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5798ix59.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5798ix59.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5798ix59.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c\
    \ > b\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgg3hawi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgg3hawi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgg3hawi.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5) \n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3) \n    False\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (b\
    \ + c > a)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparsv4mrz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmparsv4mrz.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmparsv4mrz.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984002
