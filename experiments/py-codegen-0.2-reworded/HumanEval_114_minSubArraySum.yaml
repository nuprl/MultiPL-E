name: HumanEval_114_minSubArraySum
language: py
prompt: "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n\
  \    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
  \    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n   \
  \ assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10])\
  \ == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert\
  \ candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5])\
  \ == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10,\
  \ 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\
  \    assert candidate([-10]) == -10\n    assert candidate([7]) == 7\n    assert\
  \ candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\ntest_check()\n"
completions: ["    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n\
    \        return nums[0]\n    \n    min_sum = nums[0]\n    min_sum_start = 0\n\
    \    min_sum_end = 0\n    \n    for i in range(1, len(nums)):\n        if nums[i]\
    \ < 0:\n            min_sum = 0\n            min_sum_start = 0\n            min_sum_end\
    \ = 0\n            break\n        \n        if nums[i] + min_sum > 0:\n      \
    \      min_sum += nums[i]\n            min_sum_start = i\n            min_sum_end\
    \ = i\n        else:\n            min_sum = nums[i]\n            min_sum_start\
    \ = i\n            min_sum_end = i\n    \n    if min_sum == 0:\n        return\
    \ 0\n    \n    return min_sum\n", "    if len(nums) == 0:\n        return 0\n\n\
    \    #                                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           ",
  "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum\
    \ = min(min_sum + nums[i], nums[i])\n    return min_sum\n", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    return min_sum\n<|endoftext|><|python|>#          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            ", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  if nums[0] < 0:\n        return minSubArraySum([-x for x in nums])\n    if\
    \ nums[-1] < 0:\n        return minSubArraySum([-x for x in nums])\n    \n   \
    \ #                                                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        ", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    return min_sum\n", "    if len(nums) == 0:\n      \
    \  return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] <\
    \ 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n\
    \        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n\
    \        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n", " \
    \   if len(nums) == 0:\n        return 0\n    \n    #                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        ", "    if len(nums) == 0:\n        return\
    \ 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n\
    \        return nums[0] + nums[1]\n    \n    #                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \           ", "    if len(nums) == 0:\n        return 0\n    if len(nums) ==\
    \ 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n\
    \        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n", " \
    \   if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    min_sum\
    \ = nums[0]\n    \n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n        \n    return min_sum\n", "    if len(nums) == 0:\n\
    \        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0]\
    \ < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n\
    \        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n\
    \        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i:]))\n    return\
    \ min_sum\n", "    if len(nums) == 0:\n        return 0\n\n    min_sum = nums[0]\n\
    \    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    return min_sum\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum\
    \ = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    return min_sum\n", "    if len(nums) == 0:\n      \
    \  return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums)\
    \ == 2:\n        return nums[0] + nums[1]\n    \n    #                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               ", "    if len(nums) == 0:\n \
    \       return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0]\
    \ < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    min_sum\
    \ = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    return min_sum\n", "    if len(nums) == 0:\n      \
    \  return 0\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n    min_sum_start\
    \ = 0\n    min_sum_end = 0\n    \n    for i in range(1, len(nums)):\n        if\
    \ nums[i] < 0:\n            min_sum_end = i\n            min_sum = 0\n       \
    \     break\n        \n        if nums[i] > nums[i-1]:\n            min_sum =\
    \ nums[i]\n            min_sum_start = i\n            min_sum_end = i\n      \
    \      \n        elif nums[i] == nums[i-1]:\n            min_sum = nums[i] + min_sum\n\
    \            min_sum_start = i\n            min_sum_end = i\n            \n  \
    \      else:\n            min_sum = nums[i] + min_sum\n            min_sum_start\
    \ = i\n            min_sum_end = i\n    \n    return min_sum\n", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    return min_sum\n", "    if len(nums) == 0:\n      \
    \  return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n\
    \    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    return min_sum\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([0]\
    \ + nums)\n    if nums[-1] < 0:\n        return minSubArraySum(nums[::-1])\n \
    \   \n    nums_len = len(nums)\n    nums_sum = sum(nums)\n    \n    #        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                ", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if\
    \ nums[0] == 0:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in\
    \ range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n  \
    \  return min_sum\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
  "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n  \
    \  # use a min heap to store the min sum of each sub-array\n    min_heap = []\n\
    \    min_heap.append(nums[0])\n    min_heap.append(nums[1])\n    \n    # use a\
    \ max heap to store the max sum of each sub-array\n    max_heap = []\n    max_heap.append(nums[0])\n\
    \    max_heap.append(nums[1])\n    \n    # use a min heap to store the min sum\
    \ of each sub-array\n    min_heap.append(nums[2])\n    min_heap.append(nums[3])\n\
    \    \n    # use a max heap to store the max sum of each sub-array\n    max_heap.append(nums[2])\n\
    \    max_heap.append(nums[3])\n    \n    # use a min heap to store the min sum\
    \ of each sub-array\n    min_heap.append(nums[4])\n    min_heap.append(nums[5])\n\
    \    \n    # use a max heap to store the max sum of each sub-array\n    max_heap.append(nums[4])\n\
    \    max_heap.append(nums[5])\n    \n    # use a min heap to store the min sum\
    \ of each sub-array\n    min_heap.append(nums[6])\n    min_heap.append(nums[7])\n\
    \    \n    # use a max heap to store the max sum of each sub-array\n    max_heap.append(nums[6])\n\
    \    max_heap.append(nums[7])\n    \n    # use a min heap to store the min sum\
    \ of each sub-array\n    min_heap.append(nums[8])\n    min_heap.append(nums[9])\n\
    \    \n    # use a max heap to store the max sum of", "    if len(nums) == 0:\n\
    \        return 0\n    if len(nums) == 1:\n        return nums[0]\n    dp = [0]\
    \ * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n      \
    \  dp[i] = nums[i] + min(dp[i-1], dp[i-2])\n    return min(dp)\n", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  if nums[0] < 0:\n        return minSubArraySum([nums[0]] + nums[1:])\n    if\
    \ nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    \n    min_sum =\
    \ nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum +\
    \ nums[i], nums[i])\n    return min_sum\n", "    if len(nums) == 0:\n        return\
    \ 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n\
    \        return nums[0] + nums[1]\n    min_sum = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
  "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0]\
    \ < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1]\
    \ < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    if nums[0]\
    \ == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n    \
    \    return minSubArraySum(nums[:-1])\n    \n    # find the minimum sum of the\
    \ sub-array\n    # that starts from index 0 and ends at index i\n    # where i\
    \ is the index of the minimum sum\n    # of the sub-array\n    min_sum = nums[0]\n\
    \    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \        \n    # find the minimum sum of the sub-array\n    # that starts from\
    \ index i and ends at index len(nums)\n    # where i is the index of the minimum\
    \ sum\n    # of the sub-array\n    min_sum = nums[-1]\n    for i in range(len(nums)\
    \ - 2, -1, -1):\n        min_sum = min(min_sum + nums[i], nums[i])\n        \n\
    \    return min(min_sum, minSubArraySum(nums[:-1] + [-nums[-1]]))\n    ", "  \
    \  if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n\
    \    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1]\
    \ + nums[i], dp[i-1])\n    \n    return dp[-1]\n", "    if len(nums) == 0:\n \
    \       return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums)\
    \ == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return\
    \ minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0]]\
    \ + nums)\n    if nums[0] == 0:\n        return minSubArraySum([nums[1]] + nums)\n\
    \    if nums[-1] == 0:\n        return minSubArraySum([nums[0]] + nums)\n    if\
    \ nums[0] == nums[-1]:\n        return nums[0] + minSubArraySum([nums[1]] + nums)\n\
    \    if nums[0] > nums[-1]:\n        return minSubArraySum([nums[0]] + nums)\n\
    \    if nums[0] < nums[-1]:\n        return minSubArraySum([nums[1]] + nums)\n\
    \    return min(minSubArraySum([nums[0]] + nums), minSubArraySum([nums[1]] + nums))\n",
  "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0]\
    \ < 0:\n        return minSubArraySum([nums[1], nums[2]]) + nums[0]\n    if nums[-1]\
    \ < 0:\n        return minSubArraySum([nums[0], nums[1], nums[2]]) + nums[-1]\n\
    \    if nums[0] < nums[-1]:\n        return minSubArraySum([nums[0], nums[1],\
    \ nums[2]]) + nums[0]\n    else:\n        return minSubArraySum([nums[0], nums[1],\
    \ nums[2]]) + nums[-1]\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-x\
    \ for x in nums])\n    if nums[-1] < 0:\n        return minSubArraySum([-x for\
    \ x in nums])\n    \n    # sum of subarray is sum of nums\n    # sum of subarray\
    \ is sum of nums - nums[0]\n    # sum of subarray is sum of nums - nums[0] - nums[1]\n\
    \    # sum of subarray is sum of nums - nums[0] - nums[1] - nums[2]\n    # ...\n\
    \    # sum of subarray is sum of nums - nums[0] - nums[1] - ... - nums[n-1]\n\
    \    # sum of subarray is sum of nums - nums[0] - nums[1] - ... - nums[n-1] -\
    \ nums[n]\n    # sum of subarray is sum of nums - nums[0] - nums[1] - ... - nums[n-1]\
    \ - nums[n] - nums[n+1]\n    # ...\n    # sum of subarray is sum of nums - nums[0]\
    \ - nums[1] - ... - nums[n-1] - nums[n] - nums[n+1] - ... - nums[-1]\n    # sum\
    \ of subarray is sum of nums - nums[0] - nums[1] - ... - nums[n-1] - nums[n] -\
    \ nums[n+1] - ... - nums[-1]\n    # sum of subarray is sum of nums - nums[0] -\
    \ nums[1] - ... - nums[n-1] - nums[n] - nums[n+1] - ... - nums[-1] - nums[0]\n\
    \    # ...\n    # sum of subarray is sum of nums - nums[0] - nums[1] - ... -",
  "    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for\
    \ i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    \n    return min_sum\n", "    if len(nums) == 0:\n        return 0\n    if\
    \ len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return\
    \ nums[0] + nums[1]\n    \n    # dp[i] is the minimum sum of nums[0..i]\n    dp\
    \ = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n\
    \        dp[i] = nums[i] + min(dp[i-1], dp[i-2])\n    return min(dp)\n", "   \
    \ if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n\
    \    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n\
    \    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1]\
    \ == 0:\n        return minSubArraySum(nums[:-1])\n    \n    dp = [0] * len(nums)\n\
    \    dp[0] = nums[0]\n    dp[1] = nums[1]\n    for i in range(2, len(nums)):\n\
    \        dp[i] = nums[i] + min(dp[i-2], dp[i-1])\n    return min(dp)\n", "   \
    \ if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum\
    \ = min(min_sum + nums[i], nums[i])\n    return min_sum\n", "    if len(nums)\
    \ == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return\
    \ min_sum\n", "    if len(nums) == 0:\n        return 0\n    \n    # sum of the\
    \ first element\n    sum_first = nums[0]\n    \n    # sum of the second element\n\
    \    sum_second = nums[1]\n    \n    # sum of the first and second element\n \
    \   sum_first_second = nums[0] + nums[1]\n    \n    # sum of the first and second\
    \ element\n    sum_first_second_third = nums[0] + nums[1] + nums[2]\n    \n  \
    \  # sum of the first, second and third element\n    sum_first_second_third_fourth\
    \ = nums[0] + nums[1] + nums[2] + nums[3]\n    \n    # sum of the first, second,\
    \ third and fourth element\n    sum_first_second_third_fourth_fifth = nums[0]\
    \ + nums[1] + nums[2] + nums[3] + nums[4]\n    \n    # sum of the first, second,\
    \ third, fourth and fifth element\n    sum_first_second_third_fourth_fifth_sixth\
    \ = nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n    \n    # sum\
    \ of the first, second, third, fourth, fifth and sixth element\n    sum_first_second_third_fourth_fifth_sixth_seventh\
    \ = nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]\n    \n\
    \    # sum of the first, second, third, fourth, fifth, sixth and seventh element\n\
    \    sum_first_second_third_fourth_fifth_sixth_seventh_eighth = nums[0] + nums[1]\
    \ + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7]\n    \n    # sum\
    \ of the first, second, third, fourth, fifth, sixth, seventh and eighth element\n\
    \    sum_first_second_third_fourth", "    if len(nums) == 0:\n        return 0\n\
    \    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n    \
    \    return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
  "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0]\
    \ < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1]\
    \ < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    \n    # min\
    \ sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub\
    \ array\n    # min sum of sub array is sum of sub array\n    # min sum of sub\
    \ array is sum of sub array\n    # min sum of sub array is sum of sub array\n\
    \    # min sum of sub array is sum of sub array\n    # min sum of sub array is\
    \ sum of sub array\n    # min sum of sub array is sum of sub array\n    # min\
    \ sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub\
    \ array\n    # min sum of sub array is sum of sub array\n    # min sum of sub\
    \ array is sum of sub array\n    # min sum of sub array is sum of sub array\n\
    \    # min sum of sub array is sum of sub array\n    # min sum of sub array is\
    \ sum of sub array\n    # min sum of sub array is sum of sub array\n    # min\
    \ sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub\
    \ array\n    # min sum of sub array is sum of sub array\n    # min sum of sub\
    \ array is sum of sub array\n    # min sum of sub array is sum of sub array\n\
    \    # min sum of sub array is sum of sub array\n    # min sum of sub array is\
    \ sum of sub array\n    # min sum of sub array is sum of sub array\n    # min\
    \ sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub\
    \ array\n    # min sum of sub array is sum of sub array\n    # min sum of sub\
    \ array is sum of sub array\n    # min sum of sub array is sum of sub array\n\
    \    # min sum of sub array", "    if len(nums) == 0:\n        return 0\n    if\
    \ len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return\
    \ 0\n    if nums[0] == 0:\n        return nums[0]\n    \n    dp = [0] * len(nums)\n\
    \    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = nums[i]\
    \ + min(dp[i-1], 0)\n    \n    min_sum = dp[-1]\n    for i in range(len(nums)-2,\
    \ -1, -1):\n        min_sum = min(dp[i], min_sum)\n    return min_sum\n", "  \
    \  if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n\
    \    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum,\
    \ nums[i] + min_sum - nums[i-1])\n    return min_sum\n", "    if len(nums) ==\
    \ 0:\n        return 0\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n \
    \   for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    \n    return min_sum\n", "    if len(nums) == 0:\n        return 0\n    if\
    \ len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return\
    \ 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum\
    \ = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n     \
    \   min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n", "    if\
    \ len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n\
    \    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n\
    \        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n     \
    \   return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n\
    \    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0]\
    \ < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n      \
    \  return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n\
    \    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0]\
    \ < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n      \
    \  return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n\
    \    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0]\
    \ < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n      \
    \  return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n\
    \    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0]\
    \ < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n      \
    \  return minSubArray", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
  "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]])\n   \
    \ if nums[-1] < 0:\n        return minSubArraySum([nums[-1]])\n    \n    # dp[i]\
    \ = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n\
    \    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i])\n\
    \    \n    # return min(dp)\n    return dp[-1]\n", "    if len(nums) == 0:\n \
    \       return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums)\
    \ == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] = min(dp[i-1] + nums[i],\
    \ dp[i-2] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1]\
    \ = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = min(dp[i-1] +\
    \ nums[i], dp[i-2] + nums[i])\n    \n    return dp[-1]\n", "    if len(nums) ==\
    \ 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if\
    \ len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n\
    \    min_sum_index = 0\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n        if min_sum < min_sum_index:\n            min_sum_index\
    \ = min_sum\n    return min_sum_index\n", "    if len(nums) == 0:\n        return\
    \ 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum\
    \ = min(min_sum + nums[i], nums[i])\n    return min_sum\n", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n\
    \    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    return min_sum\n", "    nums.sort()\n    result = 0\n    for i in range(len(nums)):\n\
    \        result += nums[i]\n        if i > 0 and nums[i] < nums[i-1]:\n      \
    \      result -= nums[i-1]\n    return result\n", "    if len(nums) == 0:\n  \
    \      return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum =\
    \ nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum +\
    \ nums[i], nums[i])\n    return min_sum\n", "    if len(nums) == 0:\n        return\
    \ 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n\
    \        return nums[0] + nums[1]\n    sums = [0] * len(nums)\n    sums[0] = nums[0]\n\
    \    sums[1] = nums[1]\n    for i in range(2, len(nums)):\n        sums[i] = nums[i]\
    \ + sums[i-1]\n    for i in range(1, len(nums)):\n        sums[i] += min(sums[i-1],\
    \ sums[i])\n    return min(sums)\n", "    if len(nums) == 0:\n        return 0\n\
    \    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n    \
    \    return nums[0] + nums[1]\n    \n    # dp[i] is the minimum sum of sub-array\
    \ ending at nums[i]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1]\
    \ = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = nums[i] + min(dp[i-2],\
    \ dp[i-1])\n    \n    return min(dp)\n", "    if len(nums) == 0:\n        return\
    \ 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n\
    \        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]]\
    \ + nums)\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n  \
    \  \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum\
    \ = min(min_sum + nums[i], nums[i])\n    return min_sum\n", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n\
    \        return minSubArraySum([nums[1], nums[2]]) + nums[0]\n    if nums[1] <\
    \ 0:\n        return minSubArraySum([nums[0], nums[2]]) + nums[1]\n    if nums[2]\
    \ < 0:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2]\n    if nums[0]\
    \ < nums[1]:\n        return minSubArraySum([nums[0], nums[2]]) + nums[1]\n  \
    \  if nums[1] < nums[2]:\n        return minSubArraySum([nums[0], nums[1]]) +\
    \ nums[2]\n    return minSubArraySum([nums[0], nums[1], nums[2]])\n", "    if\
    \ len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n\
    \    if len(nums) == 2:\n        return nums[0] + nums[1]\n    min_sum = nums[0]\n\
    \    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    return min_sum\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]])\n\
    \    if nums[-1] < 0:\n        return minSubArraySum([nums[-1]])\n    \n    #\
    \ sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n\
    \    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n\
    \    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum\
    \ of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n\
    \    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n\
    \    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum\
    \ of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n\
    \    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n\
    \    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum\
    \ of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n\
    \    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n\
    \    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum\
    \ of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n\
    \    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n\
    \    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum\
    \ of", "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n\
    \    min_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        min_sum\
    \ = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n", "    if len(nums)\
    \ == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    for\
    \ i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \        \n    return min_sum\n", "    if len(nums) == 0:\n        return 0\n\
    \    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n    \
    \    return nums[0] + nums[1]\n    \n    # dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n\
    \    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1]\n    for i\
    \ in range(2, len(nums)):\n        dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n \
    \   \n    # sum = dp[-1]\n    sum = dp[-1]\n    for i in range(len(nums)-2, -1,\
    \ -1):\n        sum = min(sum, dp[i] + nums[i])\n    return sum\n", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n\
    \        dp[i] = dp[i - 1] + nums[i]\n    for i in range(len(nums) - 2, -1, -1):\n\
    \        dp[i] = min(dp[i], dp[i + 1]) + nums[i]\n    return dp[0]\n", "    if\
    \ len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n\
    \    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n\
    \        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n     \
    \   return minSubArraySum(nums[:-1])\n    \n    # nums[0] >= 0\n    # nums[-1]\
    \ >= 0\n    \n    # nums[0] + nums[1] >= 0\n    # nums[0] + nums[2] >= 0\n   \
    \ # nums[0] + nums[3] >= 0\n    # nums[0] + nums[4] >= 0\n    \n    # nums[1]\
    \ + nums[2] >= 0\n    # nums[1] + nums[3] >= 0\n    # nums[1] + nums[4] >= 0\n\
    \    \n    # nums[2] + nums[3] >= 0\n    # nums[2] + nums[4] >= 0\n    \n    #\
    \ nums[3] + nums[4] >= 0\n    \n    # nums[0] + nums[1] + nums[2] + nums[3] +\
    \ nums[4] >= 0\n    \n    # nums[0] + nums[1] + nums[2] + nums[3] + nums[4] +\
    \ nums[5] >= 0\n    \n    # nums[0] + nums[1] + nums[2] + nums[3] + nums[4] +\
    \ nums[5] + nums[6] >= 0\n    \n    # nums[0] + nums[1] + nums[2] + nums[3] +\
    \ nums[4] + nums[5] + nums[6] + nums[7] >= 0\n    \n    # nums[0] + nums[1] +\
    \ nums[2] + nums[3] +", "    if len(nums) == 0:\n        return 0\n    \n    #\
    \ dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] =\
    \ nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i],\
    \ dp[i-1])\n    \n    return dp[-1]\n", "    if len(nums) == 0:\n        return\
    \ 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n \
    \   for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    return min_sum\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum\
    \ = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    return min_sum\n", "    if len(nums) == 0:\n      \
    \  return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # dp[i]\
    \ = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n\
    \    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i])\n\
    \    \n    # return dp[-1]\n    return dp[-1]\n", "    if len(nums) == 0:\n  \
    \      return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0]\
    \ < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    min_sum\
    \ = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    return min_sum\n", "    if len(nums) == 0:\n      \
    \  return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] <\
    \ 0:\n        return minSubArraySum([-x for x in nums])\n    if nums[-1] < 0:\n\
    \        return minSubArraySum([-x for x in nums])\n    if nums[0] == 0:\n   \
    \     return minSubArraySum([x for x in nums[1:]])\n    if nums[-1] == 0:\n  \
    \      return minSubArraySum([x for x in nums[:-1]])\n    \n    # sum of sub-arrays\n\
    \    sums = [0] * len(nums)\n    sums[0] = nums[0]\n    for i in range(1, len(nums)):\n\
    \        sums[i] = sums[i-1] + nums[i]\n    \n    # min sum of sub-arrays\n  \
    \  min_sums = [0] * len(nums)\n    min_sums[0] = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        min_sums[i] = min(sums[i], min_sums[i-1])\n    \n    return\
    \ min(min_sums)\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if\
    \ nums[0] == 0:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        if nums[i] < 0:\n            min_sum = 0\n            break\n\
    \        if nums[i] == 0:\n            min_sum = nums[i]\n            break\n\
    \        min_sum += nums[i]\n    for i in range(len(nums) - 1, 0, -1):\n     \
    \   if nums[i] < 0:\n            min_sum = 0\n            break\n        if nums[i]\
    \ == 0:\n            min_sum = nums[i]\n            break\n        min_sum +=\
    \ nums[i]\n    return min_sum\n", "    if len(nums) == 0:\n        return 0\n\
    \    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n       \
    \ return 0\n    if nums[0] == 0:\n        return nums[0]\n    \n    min_sum =\
    \ nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum +\
    \ nums[i], nums[i])\n    return min_sum\n", "    if len(nums) == 0:\n        return\
    \ 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n\
    \        return nums[0] + nums[1]\n    \n    # dp[i] = min(dp[i-1], dp[i-2] +\
    \ nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1]\n\
    \    for i in range(2, len(nums)):\n        dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n\
    \    \n    # return min(dp[-1], dp[-2] + nums[-1])\n    return dp[-1]\n", "  \
    \  if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0]\
    \ < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n\
    \        return minSubArraySum([nums[0]] + nums)\n    \n    min_sum = nums[0]\n\
    \    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    return min_sum\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n\
    \    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n\
    \        dp[i] = min(dp[i-1] + nums[i], dp[i-1])\n    \n    # return dp[-1]\n\
    \    return dp[-1]\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0]\
    \ + nums[1]\n    \n    # find the minimum sum of the sub-array\n    min_sum =\
    \ nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum +\
    \ nums[i], nums[i])\n    \n    # find the minimum sum of the sub-array\n    min_sum\
    \ = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n        \n    return min_sum\n", "    if len(nums) == 0:\n\
    \        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums)\
    \ == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for\
    \ i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    return min_sum\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0]\
    \ + nums[1]\n    \n    min_sum = nums[0]\n    min_sum_start = 0\n    min_sum_end\
    \ = 0\n    \n    for i in range(1, len(nums)):\n        min_sum = nums[i] + min_sum\n\
    \        if min_sum < 0:\n            min_sum = 0\n            min_sum_start =\
    \ i\n        if min_sum > 0:\n            min_sum_end = i\n            break\n\
    \    \n    if min_sum_end == 0:\n        return min_sum\n    \n    return min_sum\
    \ - nums[min_sum_start] + minSubArraySum(nums[min_sum_start:min_sum_end+1])\n",
  "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-x for x in nums])\n\
    \    if nums[-1] < 0:\n        return minSubArraySum([-x for x in nums])\n   \
    \ if nums[0] == 0:\n        return minSubArraySum([0] + nums)\n    if nums[-1]\
    \ == 0:\n        return minSubArraySum(nums)\n    \n    # dp[i] = min(dp[i], dp[i-1]\
    \ + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i])\n    return dp[-1]\n",
  "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        dp[i] = dp[i - 1] + nums[i]\n    for i in range(len(nums)\
    \ - 2, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1]) + nums[i]\n    return dp[0]\n",
  "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return\
    \ nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n  \
    \  min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n    return min_sum\n", "    if not nums:\n        return\
    \ 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum\
    \ = min(min_sum + nums[i], nums[i])\n    return min_sum\n", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n\
    \        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n     \
    \   return minSubArraySum(nums[:-1])\n    \n    min_sum = nums[0]\n    for i in\
    \ range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n  \
    \  return min_sum\n", "    if len(nums) == 0:\n        return 0\n\n    min_sum\
    \ = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum\
    \ + nums[i], nums[i])\n\n    return min_sum\n", "    if len(nums) == 0:\n    \
    \    return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums)\
    \ == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return\
    \ minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0]]\
    \ + nums)\n    s = nums[0]\n    for i in range(1, len(nums)):\n        s += nums[i]\n\
    \        if s < 0:\n            s = nums[i]\n    return s\n", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n\
    \    \n    # dp[i] = min(dp[i-1], nums[i] + dp[i-2])\n    dp = [nums[0]]\n   \
    \ for i in range(1, len(nums)):\n        dp.append(min(dp[i-1], nums[i] + dp[i-2]))\n\
    \    return dp[-1]\n", "    if len(nums) == 0:\n        return 0\n    if len(nums)\
    \ == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0]\
    \ + nums[1]\n    \n    # sum of sub-array\n    s = nums[0]\n    for i in range(1,\
    \ len(nums)):\n        s = min(s + nums[i], nums[i])\n    return s\n", "    if\
    \ len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n\
    \    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] =\
    \ min(dp[i-1], dp[i-2] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n\
    \    dp[1] = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = min(dp[i-1],\
    \ dp[i-2] + nums[i])\n    \n    # return min(dp[-1], dp[-2] + nums[-1])\n    return\
    \ dp[-1]\n", "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n\
    \        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n\
    \    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum\
    \ = min(min_sum + nums[i], nums[i])\n    return min_sum\n", "    if len(nums)\
    \ == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n  \
    \  if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n\
    \    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\
    \    return min_sum\n", "    nums.sort()\n    min_sum = 0\n    for i in range(len(nums)):\n\
    \        min_sum += nums[i]\n        if i > 0 and nums[i] == nums[i-1]:\n    \
    \        continue\n        if i + 1 < len(nums) and nums[i] + nums[i+1] < 0:\n\
    \            continue\n        if i + 1 < len(nums) and nums[i] + nums[i+1] ==\
    \ 0:\n            continue\n        if i + 1 < len(nums) and nums[i] + nums[i+1]\
    \ > 0:\n            min_sum = min(min_sum, nums[i] + nums[i+1])\n    return min_sum\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
