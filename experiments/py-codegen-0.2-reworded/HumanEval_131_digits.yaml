name: HumanEval_131_digits
language: py
prompt: "def digits(n: int) -> int:\n    \"\"\"Given a positive integer n, return\
  \ the product of the odd digits.\n    Return 0 if all digits are even.\n    For\
  \ example:\n    >>> digits(1) \n    1\n    >>> digits(4) \n    0\n    >>> digits(235)\n\
  \    15\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(5) == 5\n    assert candidate(54)\
  \ == 5\n    assert candidate(120) == 1\n    assert candidate(5014) == 5\n    assert\
  \ candidate(98765) == 315\n    assert candidate(5576543) == 2625\n    assert candidate(2468)\
  \ == 0\n\ndef test_check():\n    check(digits)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return\
    \ digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n        return 0\n    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n\
    \        return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n\
    \        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return\
    \ 0\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n\
    \ / 2)\n", "    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n\
    \ == 3:\n        return 3\n    if n == 4:\n        return 0\n    if n == 5:\n\
    \        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return\
    \ 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if\
    \ n % 2 == 0:\n        return 0\n    if n % 2 == 1:\n        return n\n    return\
    \ digits(n / 2) * n\n", "    if n < 0:\n        raise ValueError(\"n must be a\
    \ positive integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n    \
    \    return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2)\
    \ * digits(n / 2)\n\n", "    if n == 0:\n        return 0\n    if n < 0:\n   \
    \     return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n       \
    \ return 0\n    if n % 2 == 1:\n        return 1\n    return digits(n / 2) + digits(n\
    \ / 2)\n", "    if n == 0:\n        return 0\n    if n < 0:\n        raise ValueError(\"\
    n must be a positive integer\")\n    if n == 1:\n        return 1\n    if n %\
    \ 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n / 2)\n", "  \
    \  if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n\
    \ - 1) + digits(n - 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n\
    \        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n    \
    \    return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n \
    \       return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ 1\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n\
    \ / 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return\
    \ digits(n / 2) * digits(n / 2)\n", "    if n == 0:\n        return 0\n    if\
    \ n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 ==\
    \ 0:\n        return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n\
    \ < 0:\n        raise ValueError('n must be a positive integer')\n    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n\
    \        return 0\n    return digits(n - 1) * n\n", "    if n < 0:\n        return\
    \ 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if\
    \ n % 2 == 0:\n        return 0\n    return digits(n - 1) * n\n\n", "    if n\
    \ == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n == 1:\n \
    \       return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n /\
    \ 2) * digits(n / 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n  \
    \      return 1\n    digits = 0\n    while n > 0:\n        n, digit = divmod(n,\
    \ 10)\n        digits += digit\n    return digits\n\n", "    if n < 0:\n     \
    \   return 0\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return\
    \ 0\n    return digits(n - 1) * 3 + 1\n", "    if n < 0:\n        return 0\n \
    \   if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n %\
    \ 2 == 0:\n        return 0\n    return digits(n - 1) * n\n", "    if n < 0:\n\
    \        raise ValueError(\"n must be a positive integer\")\n    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n    \
    \    return 0\n    return digits(n // 2) * digits(n % 2)\n", "    if n == 0:\n\
    \        return 0\n    if n < 10:\n        return n\n    if n % 2 == 0:\n    \
    \    return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n \
    \       return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return\
    \ 0\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n\
    \ / 2)\n", "    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return\
    \ digits(n / 2) * digits(n / 2)\n\n", "    if n < 0:\n        return 0\n    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 ==\
    \ 0:\n        return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n\
    \ < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n \
    \       return 0\n    if n % 2 == 0:\n        return 0\n    return digits(n -\
    \ 1) * n\n", "    if n < 0:\n        return 0\n    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n\
    \    return digits(n / 2) * digits(n / 2)\n\n", "    if n < 0:\n        return\
    \ 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if\
    \ n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n / 2)\n",
  "    if n == 0:\n        return 0\n    if n < 0:\n        return -digits(-n)\n \
    \   if n % 2 == 0:\n        return 0\n    return n * digits(n - 1)\n", "    if\
    \ n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return 1\n    if n % 2 == 0:\n        return 0\n    return n * digits(n\
    \ - 1)\n", "    if n < 0:\n        raise ValueError(\"n must be positive\")\n\
    \    if n == 0:\n        return 0\n    return reduce(mul, [int(d) for d in str(n)\
    \ if d.is_odd()])\n", "    if n < 0:\n        return 0\n    if n == 0:\n     \
    \   return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return\
    \ 0\n    return digits(n / 2) * digits(n / 2)\n\n", "    if n < 0:\n        return\
    \ 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if\
    \ n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n / 2)\n\n",
  "    if n == 0:\n        return 0\n    if n < 0:\n        raise ValueError(\"n must\
    \ be a positive integer\")\n    if n == 1:\n        return 1\n    if n % 2 ==\
    \ 0:\n        return 0\n    return digits(n // 2) * digits(n % 2)\n", "    if\
    \ n == 0:\n        return 0\n    if n < 0:\n        raise ValueError(\"n must\
    \ be positive\")\n    if n == 1:\n        return 1\n    return digits(n / 2) *\
    \ digits(n % 2)\n", "    if n == 0:\n        return 0\n    if n < 0:\n       \
    \ return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return\
    \ 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n == 0:\n        return\
    \ 0\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if\
    \ n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n / 2)\n",
  "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n\
    \ / 2) * digits(n / 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n    \
    \    return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n \
    \       return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ 1\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n\
    \ / 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n\
    \    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return\
    \ digits(n - 1) + digits(n - 2)\n", "    if n < 0:\n        return 0\n    if n\
    \ == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n\
    \        return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n\
    \        raise ValueError(\"n must be a positive integer\")\n    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n    \
    \    return 0\n    return digits(n - 1) + digits(n - 3)\n", "    if n < 0:\n \
    \       return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ 1\n    if n % 2 == 0:\n        return 0\n    return digits(n - 1) + digits(n\
    \ - 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n\
    \    return digits(n / 2) * digits(n % 2)\n", "    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n\
    \ % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n / 2)\n", " \
    \   if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n ==\
    \ 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n\
    \ / 2) * digits(n / 2)\n", "    if n == 0:\n        return 0\n    if n < 0:\n\
    \        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n    \
    \    return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n \
    \       return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return\
    \ 0\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n\
    \ / 2)\n", "    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return\
    \ digits(n / 2) * digits(n / 2)\n", "    if n == 0:\n        return 0\n    if\
    \ n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 ==\
    \ 0:\n        return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n\
    \ < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n       \
    \ return 0\n    return n * digits(n - 1)\n", "    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n\
    \ % 2 == 0:\n        return 0\n    return n % 10 * digits(n // 10)\n", "    if\
    \ n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return 1\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits(n\
    \ // 10)\n", "    if n < 0:\n        return 0\n    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n\
    \    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n\
    \ % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n / 2)\n\n",
  "    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n    \
    \    return 0\n    return n * digits(n - 1)\n", "    if n == 0:\n        return\
    \ 0\n    if n < 0:\n        return -digits(-n)\n    if n % 2 == 0:\n        return\
    \ 0\n    return n % 10 * digits(n // 10)\n", "    if n < 0:\n        raise ValueError(\"\
    n must be a positive integer\")\n    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n\
    \ / 2) * digits(n / 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n    \
    \    return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n \
    \       return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ 1\n    if n % 2 == 0:\n        return 0\n    return n * digits(n - 1)\n", " \
    \   if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n\
    \ / 2) * digits(n / 2)\n\n", "    if n < 0:\n        return 0\n    if n == 0:\n\
    \        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n    \
    \    return 0\n    return digits(n / 2) * digits(n / 2)\n\n", "    if n == 0:\n\
    \        return 0\n    if n < 0:\n        return 0\n    if n == 1:\n        return\
    \ 1\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n\
    \ / 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return\
    \ digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n        raise ValueError(\"\
    n must be a positive integer\")\n    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return n * digits(n\
    \ - 1)\n", "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return\
    \ digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n        return 0\n    if n\
    \ == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n\
    \        return 0\n    return digits(n / 2) * digits(n / 2)\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n < 0:\n        return 0\n    if n == 1:\n    \
    \    return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2)\
    \ * digits(n / 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n     \
    \   return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return\
    \ 0\n    return digits(n / 2) * digits(n / 2)\n\n", "    if n < 0:\n        return\
    \ 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if\
    \ n % 2 == 0:\n        return 0\n    return digits(n - 1) * n\n", "    if n <\
    \ 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n   \
    \     return 0\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2)\
    \ * digits(n / 2)\n\n", "    if n == 0:\n        return 0\n    if n < 0:\n   \
    \     return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return\
    \ 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 0\n    if\
    \ n % 2 == 0:\n        return 0\n    return digits(n - 1) + digits(n - 2)\n",
  "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n\
    \ - 1) * n\n", "    if n < 0:\n        return 0\n    if n == 0:\n        return\
    \ 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 0\n\
    \    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n        return 0\n\
    \    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n\
    \ % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n / 2)\n", " \
    \   if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n\
    \ / 2) * digits(n / 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n\
    \        return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n /\
    \ 2) * digits(n / 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n  \
    \      return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n      \
    \  return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n   \
    \     return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ 1\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n\
    \ / 2)\n", "    if n < 0:\n        raise ValueError(\"n must be positive\")\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n\
    \ % 2 == 0:\n        return 0\n    return digits(n // 2) * digits(n % 2)\n", " \
    \   if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return\
    \ digits(n / 2) * digits(n % 2)\n", "    if n == 0:\n        return 0\n    if\
    \ n < 10:\n        return n\n    if n % 2 == 0:\n        return 0\n    return\
    \ digits(n / 2) * 2\n\n", "    if n < 0:\n        return 0\n    if n == 0:\n \
    \       return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n     \
    \   return 0\n    return digits(n / 2) * digits(n / 2)\n", "    if n < 0:\n  \
    \      return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ 1\n    if n % 2 == 0:\n        return 0\n    return digits(n / 2) * digits(n\
    \ / 2)\n", "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return\
    \ digits(n - 1) * n\n", "    if n == 0:\n        return 0\n    if n < 0:\n   \
    \     return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n       \
    \ return 0\n    return digits(n / 2) * digits(n / 2)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
