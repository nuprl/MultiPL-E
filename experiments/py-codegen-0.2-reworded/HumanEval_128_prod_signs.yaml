name: HumanEval_128_prod_signs
language: py
prompt: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n\
  \    \"\"\"\n    You are given an array arr of integers and you need to return\n\
  \    sum of magnitudes of integers multiplied by product of all signs\n    of each\
  \ number in the array, represented by 1, -1 or 0.\n    Note: return None for empty\
  \ arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) \n    9\n    >>> prod_signs([0,\
  \ 1])\n    0\n    >>> prod_signs([])\n    None\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
  \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
  \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
  \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1,\
  \ 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
  \    check(prod_signs)\n\ntest_check()\n"
completions: ["    if not arr:\n        return None\n    signs = [1, -1]\n    signs_prod\
    \ = 1\n    for num in arr:\n        signs_prod *= signs[num % 2]\n    return signs_prod\
    \ * prod_signs(arr[1:])\n", "    if len(arr) == 0:\n        return None\n    signs\
    \ = [1, -1, 0]\n    signs_prod = 1\n    for i in arr:\n        signs_prod *= signs[i]\n\
    \    return arr[0] * signs_prod\n", "    if len(arr) == 0:\n        return None\n\
    \    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0]\
    \ * prod_signs(arr[1:])\n", "    if len(arr) == 0:\n        return None\n    if\
    \ len(arr) == 1:\n        return arr[0]\n    if arr[0] == 0:\n        return 0\n\
    \    if arr[0] < 0:\n        return -1\n    if arr[0] > 0:\n        return 1\n\
    \    return prod_signs(arr[1:]) * prod_signs(arr[0:1])\n", "    if len(arr) ==\
    \ 0:\n        return None\n    signs = [1, -1, 0]\n    signs_prod = 1\n    for\
    \ i in arr:\n        signs_prod *= signs[i]\n    return arr[0] * signs_prod\n",
  "    if not arr:\n        return None\n    signs = [1, -1, 0]\n    result = 0\n\
    \    for i in arr:\n        result += i * signs[i]\n    return result\n", "  \
    \  if len(arr) == 0:\n        return None\n    signs = [1, -1, 0]\n    signs_prod\
    \ = 1\n    for i in arr:\n        signs_prod *= signs[i]\n    return signs_prod\
    \ * prod_signs(arr[1:])\n", "    if len(arr) == 0:\n        return None\n    signs\
    \ = [0, 0, 0]\n    for i in arr:\n        signs[i] = 1 if i > 0 else -1\n    return\
    \ sum(signs) * prod(arr)\n", "    if len(arr) == 0:\n        return None\n   \
    \ signs = [0, 0, 0]\n    for num in arr:\n        signs[num % 2] += 1\n    return\
    \ sum(signs) * prod(arr)\n", "    if len(arr) == 0:\n        return None\n   \
    \ signs = [1, -1, 0]\n    signs_prod = 1\n    for i in arr:\n        signs_prod\
    \ *= signs[i]\n    return signs_prod * prod_signs(arr[1:])\n", "    if len(arr)\
    \ == 0:\n        return None\n    signs = [1, -1, 0]\n    return sum([abs(x) *\
    \ prod_signs(arr[1:]) for x in arr])\n", "    if len(arr) == 0:\n        return\
    \ None\n    signs = [0, 0, 0]\n    for i in arr:\n        signs[i] = 1 if i >\
    \ 0 else -1\n    return sum(signs) * prod(arr)\n", "    if not arr:\n        return\
    \ None\n    signs = [1, -1, 0]\n    sign_prod = 1\n    for i in arr:\n       \
    \ sign_prod *= signs[i]\n    return sign_prod * arr[0]\n", "    if len(arr) ==\
    \ 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return\
    \ arr[0] * prod_signs(arr[1:])\n", "    if len(arr) == 0:\n        return None\n\
    \    if len(arr) == 1:\n        return arr[0]\n    signs = [1, -1]\n    result\
    \ = arr[0]\n    for i in range(1, len(arr)):\n        result *= arr[i]\n     \
    \   result += prod_signs(arr[i:])\n    return result\n", "    if len(arr) == 0:\n\
    \        return None\n    signs = [1 if arr[i] > 0 else -1 if arr[i] < 0 else\
    \ 0 for i in range(len(arr))]\n    return sum(abs(i) * sign for i, sign in zip(arr,\
    \ signs))\n", "    if len(arr) == 0:\n        return None\n    signs = [1, -1,\
    \ 0]\n    return sum([abs(x) * prod_signs(arr[1:]) for x in arr])\n", "    if\
    \ len(arr) == 0:\n        return None\n    signs = [1, -1, 0]\n    return sum([abs(i)\
    \ * sign for i, sign in zip(arr, signs)])\n", "    if len(arr) == 0:\n       \
    \ return None\n    signs = [0, 0, 0]\n    for i in arr:\n        signs[i] = 1\
    \ if i > 0 else -1\n    return sum(signs) * prod(arr)\n", "    if len(arr) ==\
    \ 0:\n        return None\n    signs = [1 if arr[i] > 0 else -1 if arr[i] < 0\
    \ else 0 for i in range(len(arr))]\n    return sum(abs(i) * sign for i, sign in\
    \ zip(arr, signs))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
