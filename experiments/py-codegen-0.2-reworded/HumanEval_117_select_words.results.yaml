language: py
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n   \
    \         if len(words) == n:\n                return words\n            words.append(s[i])\n\
    \        else:\n            if len(words) == n:\n                return words\n\
    \            words.append(s[i])\n    return words\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpknpq4v69.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpknpq4v69.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpknpq4v69.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    #                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt2seiali.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt2seiali.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt2seiali.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n\
    \        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n\
    \            words.append(s[i:i+n])\n            i += n - 1\n        else:\n \
    \           words.append(s[i:i+n])\n            i += n\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp24j4iwt_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp24j4iwt_.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp24j4iwt_.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words =\
    \ [w for w in words if len(w) > 0]\n            continue\n        if s[i] in 'aeiou':\n\
    \            if len(words) > 0:\n                words = [w for w in words if\
    \ len(w) > 0]\n            continue\n        if len(words) > 0:\n            words\
    \ = [w for w in words if len(w) > 0]\n        words.append(s[i:i+1])\n    if len(words)\
    \ > 0:\n        words = [w for w in words if len(w) > 0]\n    return words\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75vu277e.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp75vu277e.py\", line 48,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp75vu277e.py\", line\
    \ 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2zacxijm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2zacxijm.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2zacxijm.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2zacxijm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2zacxijm.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2zacxijm.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return\
    \ words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n\
    \        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) ==\
    \ n:\n                return words\n            words.append(s[i:i+1])\n    return\
    \ words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznrl6gu8.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpznrl6gu8.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpznrl6gu8.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if len(words) == n:\n   \
    \         return words\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            continue\n        words.append(s[i])\n        for j in range(i+1,\
    \ len(s)):\n            if s[j] not in 'abcdefghijklmnopqrstuvwxyz':\n       \
    \         break\n            words.append(s[j])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpazzjlw_s.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpazzjlw_s.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpazzjlw_s.py\", line\
    \ 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                words.pop()\n\
    \            continue\n        if s[i] not in 'aeiou':\n            continue\n\
    \        if len(words) == n:\n            words.pop()\n        words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoallt5dp.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpoallt5dp.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpoallt5dp.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n\
    \        if s[i] == ' ':\n            continue\n        \n        if s[i] in 'aeiou':\n\
    \            if len(words) < n:\n                words.append(s[i])\n        \
    \    else:\n                break\n        else:\n            if len(words) <\
    \ n:\n                words.append(s[i])\n            else:\n                break\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5oxou_8.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpr5oxou_8.py\", line 49,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpr5oxou_8.py\", line\
    \ 40, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n\
    \        if i + n >= len(s):\n            break\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99j2823k.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp99j2823k.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp99j2823k.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqlrbjjdm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqlrbjjdm.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqlrbjjdm.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(word)\
    \ == n and len(set(word)) == n]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgommlswx.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgommlswx.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgommlswx.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
