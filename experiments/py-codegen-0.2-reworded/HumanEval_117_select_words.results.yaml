language: py
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n   \
    \         if len(words) == n:\n                return words\n            words.append(s[i])\n\
    \        else:\n            if len(words) == n:\n                return words\n\
    \            words.append(s[i])\n    return words\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpknpq4v69.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpknpq4v69.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpknpq4v69.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    #                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt2seiali.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt2seiali.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt2seiali.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n\
    \        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n\
    \            words.append(s[i:i+n])\n            i += n - 1\n        else:\n \
    \           words.append(s[i:i+n])\n            i += n\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp24j4iwt_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp24j4iwt_.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp24j4iwt_.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words =\
    \ [w for w in words if len(w) > 0]\n            continue\n        if s[i] in 'aeiou':\n\
    \            if len(words) > 0:\n                words = [w for w in words if\
    \ len(w) > 0]\n            continue\n        if len(words) > 0:\n            words\
    \ = [w for w in words if len(w) > 0]\n        words.append(s[i:i+1])\n    if len(words)\
    \ > 0:\n        words = [w for w in words if len(w) > 0]\n    return words\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75vu277e.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp75vu277e.py\", line 48,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp75vu277e.py\", line\
    \ 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2zacxijm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2zacxijm.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2zacxijm.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2zacxijm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2zacxijm.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2zacxijm.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return\
    \ words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n\
    \        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) ==\
    \ n:\n                return words\n            words.append(s[i:i+1])\n    return\
    \ words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznrl6gu8.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpznrl6gu8.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpznrl6gu8.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if len(words) == n:\n   \
    \         return words\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            continue\n        words.append(s[i])\n        for j in range(i+1,\
    \ len(s)):\n            if s[j] not in 'abcdefghijklmnopqrstuvwxyz':\n       \
    \         break\n            words.append(s[j])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpazzjlw_s.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpazzjlw_s.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpazzjlw_s.py\", line\
    \ 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                words.pop()\n\
    \            continue\n        if s[i] not in 'aeiou':\n            continue\n\
    \        if len(words) == n:\n            words.pop()\n        words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoallt5dp.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpoallt5dp.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpoallt5dp.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n\
    \        if s[i] == ' ':\n            continue\n        \n        if s[i] in 'aeiou':\n\
    \            if len(words) < n:\n                words.append(s[i])\n        \
    \    else:\n                break\n        else:\n            if len(words) <\
    \ n:\n                words.append(s[i])\n            else:\n                break\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5oxou_8.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpr5oxou_8.py\", line 49,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpr5oxou_8.py\", line\
    \ 40, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n\
    \        if i + n >= len(s):\n            break\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99j2823k.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp99j2823k.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp99j2823k.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqlrbjjdm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqlrbjjdm.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqlrbjjdm.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(word)\
    \ == n and len(set(word)) == n]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgommlswx.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgommlswx.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgommlswx.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [w for w in s.split() if len(set(w)) ==\
    \ n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2g7mhh5n.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2g7mhh5n.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2g7mhh5n.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       \ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqclp0g8o.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqclp0g8o.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqclp0g8o.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return []\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvr1qose.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdvr1qose.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdvr1qose.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       \ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqclp0g8o.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqclp0g8o.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqclp0g8o.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                break\n\
    \            else:\n                words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_c1c7426.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_c1c7426.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_c1c7426.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptr3jaokz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptr3jaokz.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptr3jaokz.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s for s in s.split() if len(s.replace(\"\
    \ \", \"\")) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkmh9zbpt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkmh9zbpt.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpkmh9zbpt.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                break\n\
    \            else:\n                words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_c1c7426.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_c1c7426.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_c1c7426.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1) if s[i:i+n].isalpha()]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgj8cbi_6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgj8cbi_6.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgj8cbi_6.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            if len(words) == n:\n                return words\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevczeeln.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpevczeeln.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpevczeeln.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       \ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqclp0g8o.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqclp0g8o.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqclp0g8o.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \            words = []\n        else:\n            words.append(s[i:i+n])\n \
    \   return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplcyg5zl.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpplcyg5zl.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpplcyg5zl.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            else:\n                words = []\n        else:\n      \
    \      words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx70oc02k.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpx70oc02k.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx70oc02k.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                break\n\
    \            else:\n                continue\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            continue\n        if len(words) == n:\n            break\n      \
    \  words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwobl_6cp.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpwobl_6cp.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwobl_6cp.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                             \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2wfcib7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpx2wfcib7.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx2wfcib7.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:])\n\
    \                break\n        else:\n            if len(s[i:]) == n:\n     \
    \           words.append(s[i:])\n    return words\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplz3wn29_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmplz3wn29_.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmplz3wn29_.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s for s in s.split() if len(s.strip())\
    \ == n and len(s.split()) == n]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7a_xzjk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc7a_xzjk.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc7a_xzjk.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n\
    \        if s[i] == ' ':\n            if len(words) == n:\n                break\n\
    \            else:\n                words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkslf9qpc.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpkslf9qpc.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpkslf9qpc.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                               \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo21qlbh_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo21qlbh_.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpo21qlbh_.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1) if s[i:i+n].isalpha()]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgj8cbi_6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgj8cbi_6.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgj8cbi_6.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            if len(words) == n:\n                return words\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevczeeln.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpevczeeln.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpevczeeln.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                break\n\
    \            else:\n                continue\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxmgky9_j.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpxmgky9_j.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxmgky9_j.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            words.append(s[i:i+n])\n            i += n - 1\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgyi48wpe.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpgyi48wpe.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgyi48wpe.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \            words = []\n        else:\n            words.append(s[i:i+n])\n \
    \   return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplcyg5zl.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpplcyg5zl.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpplcyg5zl.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) >= n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_w8nkrxt.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_w8nkrxt.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_w8nkrxt.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \            words = []\n        else:\n            words.append(s[i:i+n])\n \
    \   return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplcyg5zl.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpplcyg5zl.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpplcyg5zl.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if i - 1 >= 0 and s[i-1]\
    \ == ' ':\n            continue\n        if i + 1 < len(s) and s[i+1] == ' ':\n\
    \            continue\n        if s[i] in 'aeiou':\n            continue\n   \
    \     if s[i] in 'bcdfghjklmnpqrstvwxyz':\n            if len(words) < n:\n  \
    \              words.append(s[i:i+1])\n            else:\n                break\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8s6lyfit.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp8s6lyfit.py\", line 48,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp8s6lyfit.py\", line\
    \ 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           \ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7prblj6.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpi7prblj6.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpi7prblj6.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           \ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7prblj6.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpi7prblj6.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpi7prblj6.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               \ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpouj4qncd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpouj4qncd.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpouj4qncd.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if len(words) == n:\n   \
    \         break\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n          \
    \  words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4rs3857.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpf4rs3857.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpf4rs3857.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            if len(words) == n:\n                break\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbm2yq660.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpbm2yq660.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbm2yq660.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n\
    \        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \            words = []\n        else:\n            if len(words) == 0:\n    \
    \            words.append(s[i:i+n])\n            else:\n                words.append(s[i:i+n])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgiq25jhz.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpgiq25jhz.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgiq25jhz.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words =\
    \ []\n        else:\n            if len(words) < n:\n                words.append(s[i:i+1])\n\
    \            else:\n                break\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn8oo4cyt.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpn8oo4cyt.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpn8oo4cyt.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \ \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqguttb4d.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqguttb4d.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqguttb4d.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            else:\n                words = []\n        else:\n      \
    \      words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx70oc02k.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpx70oc02k.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx70oc02k.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if len(words) == n:\n   \
    \         break\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n          \
    \  words.append(s[i])\n            for j in range(i+1, len(s)):\n            \
    \    if s[j] in 'abcdefghijklmnopqrstuvwxyz':\n                    words.append(s[j])\n\
    \                    break\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4ffv5el.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpq4ffv5el.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq4ffv5el.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                words.pop()\n\
    \            continue\n        words.append(s[i])\n        if len(words) == n:\n\
    \            words.pop()\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuxdtv5j.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpmuxdtv5j.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpmuxdtv5j.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4)\
    \ == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnjwvszfe.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnjwvszfe.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnjwvszfe.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            if n == 0:\n                words.append(s[i:])\n               \
    \ break\n            n -= 1\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp7f0qv06.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpp7f0qv06.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp7f0qv06.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                words.pop()\n\
    \            continue\n        words.append(s[i])\n        if len(words) == n:\n\
    \            words.pop()\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuxdtv5j.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpmuxdtv5j.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpmuxdtv5j.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s for s in s.split() if len(s.strip())\
    \ == n and len(s.split()) == n]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7a_xzjk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc7a_xzjk.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc7a_xzjk.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i:i+n] not in words:\n\
    \            words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfns0ii59.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfns0ii59.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfns0ii59.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            if len(words) == n:\n                return words\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevczeeln.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpevczeeln.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpevczeeln.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqt84zk9t.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqt84zk9t.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqt84zk9t.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if i + n >= len(s):\n   \
    \         continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvvqa6kww.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvvqa6kww.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvvqa6kww.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n\
    \        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i+1:])\n\
    \                break\n        else:\n            if len(words) > 0:\n      \
    \          words.append(s[i:])\n                break\n            else:\n   \
    \             if len(s) - i >= n:\n                    words.append(s[i:i+n])\n\
    \                    break\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ac3dn_s.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp1ac3dn_s.py\", line 48,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp1ac3dn_s.py\", line\
    \ 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            words.append(s[i:i+n])\n            i += n - 1\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgyi48wpe.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpgyi48wpe.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgyi48wpe.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s for s in s.split() if len(s.strip())\
    \ == n and len(s.split()) == n]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7a_xzjk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc7a_xzjk.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc7a_xzjk.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return\
    \ words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n\
    \        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) ==\
    \ n:\n                return words\n            words.append(s[i:i+1])\n    return\
    \ words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznrl6gu8.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpznrl6gu8.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpznrl6gu8.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            else:\n                words = []\n        else:\n      \
    \      words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx70oc02k.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpx70oc02k.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx70oc02k.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                break\n\
    \            else:\n                continue\n        else:\n            if len(words)\
    \ < n:\n                words.append(s[i])\n            else:\n              \
    \  break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhy81ylu.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpnhy81ylu.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnhy81ylu.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [w for w in s.split() if len(set(w)) ==\
    \ n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2g7mhh5n.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2g7mhh5n.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2g7mhh5n.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                words.pop()\n\
    \            continue\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            continue\n        if len(words) == n:\n            words.pop()\n\
    \        words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm5esp6xz.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpm5esp6xz.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpm5esp6xz.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtq3ao19.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwtq3ao19.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwtq3ao19.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtq3ao19.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwtq3ao19.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwtq3ao19.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtq3ao19.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwtq3ao19.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwtq3ao19.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) >= n:\n                return\
    \ words\n            else:\n                words = []\n        else:\n      \
    \      words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpivvb22uq.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpivvb22uq.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpivvb22uq.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            if len(words) < n:\n                words.append(s[i])\n        \
    \    else:\n                break\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimw7jqxo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpimw7jqxo.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpimw7jqxo.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshzmp5gr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpshzmp5gr.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpshzmp5gr.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) >= n:\n                break\n\
    \            else:\n                continue\n        if s[i] == ' ':\n      \
    \      continue\n        if s[i] not in 'aeiou':\n            continue\n     \
    \   if len(words) >= n:\n            break\n        words.append(s[i:i+1])\n \
    \   return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoavkwe53.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpoavkwe53.py\", line 47,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpoavkwe53.py\", line\
    \ 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                words.append(s[i:])\n\
    \                break\n            else:\n                words = []\n      \
    \  else:\n            if len(words) == n:\n                words.append(s[i:])\n\
    \                break\n            else:\n                words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6m7f_umk.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp6m7f_umk.py\", line 47,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6m7f_umk.py\", line\
    \ 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            if len(words) == n:\n                return words\n            words.append(s[i:i+1])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ow03tok.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp0ow03tok.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0ow03tok.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if len(words) == n:\n   \
    \         break\n        if s[i] not in 'aeiou':\n            continue\n     \
    \   words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph6eh52aj.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmph6eh52aj.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmph6eh52aj.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if i - 1 >= 0 and s[i - 1]\
    \ == ' ':\n            continue\n        if i + 1 < len(s) and s[i + 1] == ' ':\n\
    \            continue\n        if s[i] not in 'aeiou':\n            continue\n\
    \        if len(words) < n:\n            words.append(s[i:i+1])\n        else:\n\
    \            break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgk6a8gld.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpgk6a8gld.py\", line 47,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgk6a8gld.py\", line\
    \ 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                words.pop()\n\
    \            continue\n        words.append(s[i])\n        if len(words) == n:\n\
    \            words.pop()\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuxdtv5j.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpmuxdtv5j.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpmuxdtv5j.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(set(word))\
    \ == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0hmdctb.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp0hmdctb.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp0hmdctb.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return\
    \ words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n\
    \        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) ==\
    \ n:\n                return words\n            words.append(s[i:i+1])\n    return\
    \ words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznrl6gu8.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpznrl6gu8.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpznrl6gu8.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    #                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcs0gx89o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpcs0gx89o.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpcs0gx89o.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            if len(words) == n:\n                return words\n            words.append(s[i:i+1])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ow03tok.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp0ow03tok.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0ow03tok.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i:i+n] not in words:\n\
    \            words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfns0ii59.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfns0ii59.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfns0ii59.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(word)\
    \ == n and word.isalpha()]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgh1soiu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqgh1soiu.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqgh1soiu.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if i + n < len(s):\n    \
    \        if s[i:i+n] in ['a', 'e', 'i', 'o', 'u']:\n                words.append(s[i:i+n])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeuikijox.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpeuikijox.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpeuikijox.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    #                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     \ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw8hvi955.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpw8hvi955.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpw8hvi955.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n \
    \           continue\n        words.append(s[i:i+n])\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvydevlcv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvydevlcv.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvydevlcv.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                break\n\
    \            else:\n                words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_c1c7426.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_c1c7426.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_c1c7426.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) >= n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_w8nkrxt.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_w8nkrxt.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_w8nkrxt.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            words.append(s[i:i+n])\n            i += n - 1\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgyi48wpe.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpgyi48wpe.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgyi48wpe.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if i + n > len(s):\n    \
    \        break\n        if s[i:i+n] in ['a', 'e', 'i', 'o', 'u', 'y']:\n     \
    \       words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_r8k8ff3.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_r8k8ff3.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_r8k8ff3.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfmweojl0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpfmweojl0.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfmweojl0.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n\
    \        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \            words = []\n        else:\n            if len(words) < n:\n     \
    \           words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbngrlwnq.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpbngrlwnq.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbngrlwnq.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    #                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7yh_ti1e.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7yh_ti1e.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp7yh_ti1e.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) >= n:\n                return\
    \ words\n            else:\n                words = []\n        else:\n      \
    \      words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpivvb22uq.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpivvb22uq.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpivvb22uq.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if len(words) == n:\n   \
    \         break\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n      \
    \      continue\n        words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvy5cl0ud.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpvy5cl0ud.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvy5cl0ud.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if i + n < len(s):\n    \
    \        if s[i:i+n] in ['a', 'e', 'i', 'o', 'u']:\n                words.append(s[i:i+n])\n\
    \                i += n\n            else:\n                words.append(s[i])\n\
    \        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpocrgakxy.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpocrgakxy.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpocrgakxy.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                words.append(s[i:i+1])\n\
    \            else:\n                words = []\n        else:\n            if\
    \ len(words) == n:\n                words.append(s[i:i+1])\n            else:\n\
    \                words = []\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyry9on1a.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpyry9on1a.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyry9on1a.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n \
    \           continue\n        words.append(s[i:i+n])\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvydevlcv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvydevlcv.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvydevlcv.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \            words = []\n        else:\n            if len(words) == 0:\n    \
    \            words.append(s[i:i+n])\n            else:\n                words.append(s[i:i+n])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsn_uu82r.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpsn_uu82r.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpsn_uu82r.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            if len(words) == n:\n                break\n            words.append(s[i:i+1])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_emsto5k.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_emsto5k.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_emsto5k.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if i + n < len(s):\n    \
    \        if s[i:i+n] in ['a', 'e', 'i', 'o', 'u', 'y']:\n                words.append(s[i:i+n])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9sqna9ut.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp9sqna9ut.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9sqna9ut.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return []\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvr1qose.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdvr1qose.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdvr1qose.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    #                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     \ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6vqfqymp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6vqfqymp.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6vqfqymp.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if i + n < len(s):\n    \
    \        if s[i:i+n] in ['a', 'e', 'i', 'o', 'u', 'y']:\n                words.append(s[i:i+n])\n\
    \            else:\n                words.append(s[i:i+n])\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0akq17mi.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp0akq17mi.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0akq17mi.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           \n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ya582gm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0ya582gm.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0ya582gm.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \                break\n        else:\n            if len(words) > 0:\n      \
    \          words.append(s[i:i+n])\n            else:\n                words.append(s[i:i+n])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwh12g_p3.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpwh12g_p3.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwh12g_p3.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \            words = []\n        else:\n            words.append(s[i:i+n])\n \
    \   return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplcyg5zl.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpplcyg5zl.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpplcyg5zl.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \            words = []\n        else:\n            if len(words) < n:\n     \
    \           words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4jqlfo0e.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp4jqlfo0e.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4jqlfo0e.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \            else:\n                words.append(s[i:i+n])\n        else:\n  \
    \          if len(words) > 0:\n                words.append(s[i:i+n])\n      \
    \      else:\n                words.append(s[i:i+n])\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtgaupfi.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpwtgaupfi.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwtgaupfi.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return\
    \ words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n\
    \        if len(words) == n:\n            return words\n        if s[i] not in\
    \ 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        words.append(s[i])\n\
    \        for j in range(i+1, len(s)):\n            if s[j] not in 'abcdefghijklmnopqrstuvwxyz':\n\
    \                break\n            words.append(s[j])\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfq9ibzl8.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpfq9ibzl8.py\", line 48,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfq9ibzl8.py\", line\
    \ 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n\
    \            words = []\n        else:\n            if len(words) < n:\n     \
    \           words.append(s[i:i+n])\n            else:\n                words.append(s[i:i+n])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjf8ry_lh.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpjf8ry_lh.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpjf8ry_lh.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxswb9b8d.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxswb9b8d.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxswb9b8d.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) > 0:\n                words =\
    \ []\n        else:\n            if len(words) == n:\n                words.append(s[i:i+n])\n\
    \            elif len(words) < n:\n                words.append(s[i:i+1])\n  \
    \  return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04jb1vny.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp04jb1vny.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp04jb1vny.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return\
    \ words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i:i+1])\n            continue\n\
    \        if s[i] == ' ':\n            words.append(s[i\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpxiosukay.py\", line 77\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n +\
    \ 1) if s[i:i+n].isalpha()]\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgj8cbi_6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgj8cbi_6.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgj8cbi_6.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvtk_8wm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwvtk_8wm.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwvtk_8wm.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    \n    #                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0r4ix0_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpa0r4ix0_.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpa0r4ix0_.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n   \
    \         if len(words) >= n:\n                return words\n            words.append(s[i:i+1])\n\
    \        else:\n            if len(words) >= n:\n                return words\n\
    \            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq3fxb3e.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpwq3fxb3e.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwq3fxb3e.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n \
    \           continue\n        words.append(s[i:i+n])\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvydevlcv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvydevlcv.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvydevlcv.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                break\n\
    \            else:\n                continue\n        else:\n            words.append(s[i:i+1])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr67vo2mk.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpr67vo2mk.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpr67vo2mk.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return\
    \ words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if\
    \ len(words) == n:\n                return words\n            words = []\n   \
    \     else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpszcl_vui.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpszcl_vui.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpszcl_vui.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            else:\n                words = []\n        else:\n      \
    \      words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx70oc02k.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpx70oc02k.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx70oc02k.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n \
    \           continue\n        words.append(s[i:i+n])\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvydevlcv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvydevlcv.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvydevlcv.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            words.append(s[i:i+n])\n            break\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5n3w12wx.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp5n3w12wx.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp5n3w12wx.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return\
    \ words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n\
    \        words.append(s[i:i+n])\n        i += n\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_w6sbf7.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpg_w6sbf7.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpg_w6sbf7.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            else:\n                words = []\n        else:\n      \
    \      words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx70oc02k.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpx70oc02k.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx70oc02k.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457552
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if len(words) == n:\n   \
    \         break\n        if s[i] in 'aeiou':\n            words.append(s[i])\n\
    \        if s[i] in 'bcdfghjklmnpqrstvwxyz':\n            if len(words) == n:\n\
    \                break\n            words.append(s[i])\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpzsp76u.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpzpzsp76u.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpzpzsp76u.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n \
    \           continue\n        words.append(s[i:i+n])\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvydevlcv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvydevlcv.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvydevlcv.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457553
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n   \
    \         if len(words) == n:\n                return words\n            words.append(s[i])\n\
    \            continue\n        if len(words) == n:\n            return words\n\
    \        for j in range(i+1, len(s)):\n            if s[j] in 'aeiou':\n     \
    \           if len(words) == n:\n                    return words\n          \
    \      words.append(s[j])\n                break\n            if s[j] in ' ':\n\
    \                if len(words) == n:\n                    return words\n     \
    \           words.append(s[j])\n                break\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3d0kewlf.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp3d0kewlf.py\", line 55,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3d0kewlf.py\", line\
    \ 46, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984002
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_morzld.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpx_morzld.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx_morzld.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            if len(words) == n:\n                return\
    \ words\n            words = []\n        else:\n            words.append(s[i])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n   \
    \     if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1661984001
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           \n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2hj2fel.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpz2hj2fel.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpz2hj2fel.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           \n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2hj2fel.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpz2hj2fel.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpz2hj2fel.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"\
    ]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"\
    ]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"\
    Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n \
    \   [\"Uncle\"]\n    \"\"\"\n    #                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           \n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2hj2fel.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpz2hj2fel.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpz2hj2fel.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1662457554
