name: HumanEval_40_triples_sum_to_zero
language: py
prompt: "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n\
  \    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n   \
  \ it returns True if there are three distinct elements in the list that\n    sum\
  \ to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n \
  \   False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1,\
  \ 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n\
  \    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert\
  \ candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n\
  \    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7])\
  \ == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1])\
  \ == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100,\
  \ 3, 5, -100]) == False\n\ndef test_check():\n    check(triples_sum_to_zero)\n\n\
  test_check()\n"
completions: ["    if len(l) < 3:\n        return False\n    for i in range(len(l)\
    \ - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n\
    \    return False\n", "    if len(l) < 3:\n        return False\n    sums = set()\n\
    \    for i in range(len(l)):\n        sums.add(l[i] + l[i + 1] + l[i + 2])\n \
    \   return len(sums) == 3 and all(l[i] + l[i + 1] + l[i + 2] in sums for i in\
    \ range(len(l) - 2))\n", "    if len(l) < 3:\n        return False\n    l.sort()\n\
    \    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n\
    \            return True\n    return False\n", "    return len(l) >= 3 and sum(l)\
    \ == 0\n", "    return len(filter(lambda x: x == 0, l)) == 3\n", "    if len(l)\
    \ < 3:\n        return False\n    l = sorted(l)\n    for i in range(len(l) - 2):\n\
    \        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return\
    \ False\n", "    return len(set(l)) == 3 and sum(l) == 0\n", "    return len(l)\
    \ >= 3 and sum(l) == 0\n", "    return len(set(l)) == 3 and sum(l) == 0\n", " \
    \   if len(l) < 3:\n        return False\n    if len(l) == 3:\n        return\
    \ l[0] + l[1] + l[2] == 0\n    if len(l) == 4:\n        return l[0] + l[1] + l[2]\
    \ == 0 or l[0] + l[1] + l[3] == 0 or l[1] + l[2] + l[3] == 0 or l[2] + l[3] +\
    \ l[0] == 0\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] == 0 or l[0]\
    \ + l[1] + l[3] == 0 or l[0] + l[1] + l[4] == 0 or l[1] + l[2] + l[4] == 0 or\
    \ l[2] + l[3] + l[4] == 0 or l[3] + l[4] + l[0] == 0 or l[4] + l[0] + l[1] ==\
    \ 0 or l[4] + l[1] + l[2] == 0 or l[4] + l[2] + l[3] == 0\n    if len(l) == 6:\n\
    \        return l[0] + l[1] + l[2] == 0 or l[0] + l[1] + l[3] == 0 or l[0] + l[1]\
    \ + l[4] == 0 or l[0] + l[1] + l[5] == 0 or l[1] + l[2] + l[5] == 0 or l[2] +\
    \ l[3] + l[5] == 0 or l[3] + l[4] + l[5] == 0 or l[4] + l[5] + l[0] == 0 or l[5]\
    \ + l[0] + l[1] == 0 or l[5] + l[1] + l[2] == 0 or l[5] + l[2] + l[3] == 0 or\
    \ l[5] + l[3] + l[4] == 0\n    if len(l) == 7", "    return len(set(l)) == 3 and\
    \ sum(l) == 0\n", "    if len(l) < 3:\n        return False\n    l.sort()\n  \
    \  for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n\
    \            return True\n    return False\n", "    if len(l) < 3:\n        return\
    \ False\n    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i\
    \ + 1] + l[i + 2] == 0:\n            return True\n    return False\n", "    if\
    \ len(l) < 3:\n        return False\n    l = sorted(l)\n    for i in range(len(l)\
    \ - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n\
    \    return False\n", "    if len(l) < 3:\n        return False\n    for i in\
    \ range(len(l) - 2):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return\
    \ True\n    return False\n", "    if len(l) < 3:\n        return False\n    l.sort()\n\
    \    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n\
    \            return True\n    return False\n", "    return len(l) >= 3 and sum(l)\
    \ == 0\n", "    if len(l) < 3:\n        return False\n    l.sort()\n    for i\
    \ in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n       \
    \     return True\n    return False\n", "    if len(l) < 3:\n        return False\n\
    \    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i\
    \ + 2] == 0:\n            return True\n    return False\n", "    return len(l)\
    \ >= 3 and sum(l) == 0\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
