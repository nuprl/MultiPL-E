language: py
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        else:\n            bored = 0\n  \
    \  return bored\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwte2d44w.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwte2d44w.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwte2d44w.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and i > 0 and S[i-1] != '.' and S[i-1] != '?' and S[i-1] != '!':\n  \
    \          count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr85lixsp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpr85lixsp.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr85lixsp.py\", line 23,\
    \ in check\n    assert candidate('bIt') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i] == \"I\":\n            bored += 1\n        else:\n      \
    \      bored = 0\n    return bored\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvnjjs86u.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvnjjs86u.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvnjjs86u.py\", line 25,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4g_8a29.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq4g_8a29.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq4g_8a29.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and i > 0 and S[i-1] == '.':\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp40oyamgd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp40oyamgd.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp40oyamgd.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7hrzwu0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7hrzwu0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7hrzwu0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == \"I\":\n            bored += 1\n            break\n\
    \    return bored\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllk7e3zx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpllk7e3zx.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpllk7e3zx.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith('I'):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10ubyjsv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp10ubyjsv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp10ubyjsv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    count = 0\n    for w in words:\n\
    \        if w.startswith(\"I\"):\n            count += 1\n    return count\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptw91nady.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptw91nady.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptw91nady.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bjuop6i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9bjuop6i.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9bjuop6i.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7hrzwu0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7hrzwu0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7hrzwu0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg1q16qb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg1q16qb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg1q16qb.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n        else:\n     \
    \       break\n    return bored\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparklwj68.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmparklwj68.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmparklwj68.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith('I'):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10ubyjsv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp10ubyjsv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp10ubyjsv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    count = 0\n    for i in range(len(words)):\n\
    \        if words[i].startswith(\"I\"):\n            count += 1\n            if\
    \ count > 1:\n                return 0\n    return 1\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0x9meoy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpy0x9meoy.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy0x9meoy.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == \"I\":\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e8ozfgu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0e8ozfgu.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0e8ozfgu.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n        else:\n     \
    \       break\n    return bored\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparklwj68.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmparklwj68.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmparklwj68.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i] == \"I\":\n            bored += 1\n        else:\n      \
    \      bored = 0\n    return bored\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvnjjs86u.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvnjjs86u.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvnjjs86u.py\", line 25,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7hrzwu0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7hrzwu0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7hrzwu0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4g_8a29.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq4g_8a29.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq4g_8a29.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for w in words:\n\
    \        if w.startswith(\"I\"):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e5h75i8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3e5h75i8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3e5h75i8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg1q16qb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg1q16qb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg1q16qb.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bjuop6i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9bjuop6i.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9bjuop6i.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4g_8a29.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq4g_8a29.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq4g_8a29.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len(filter(lambda x: x.startswith(\"I\"), S.split(\"\
    .\")))\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n  \
    \  assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5vpy1bxt.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5vpy1bxt.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5vpy1bxt.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp5vpy1bxt.py\"\
    , line 13, in is_bored\n    return len(filter(lambda x: x.startswith(\"I\"), S.split(\"\
    .\")))\nTypeError: object of type 'filter' has no len()\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7hrzwu0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7hrzwu0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7hrzwu0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == \"I\":\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e8ozfgu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0e8ozfgu.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0e8ozfgu.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and i > 0 and S[i-1] != '.' and S[i-1] != '?' and S[i-1] != '!':\n  \
    \          count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr85lixsp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpr85lixsp.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr85lixsp.py\", line 23,\
    \ in check\n    assert candidate('bIt') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4g_8a29.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq4g_8a29.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq4g_8a29.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4g_8a29.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq4g_8a29.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq4g_8a29.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for w in words:\n\
    \        if w.startswith(\"I\"):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e5h75i8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3e5h75i8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3e5h75i8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg1q16qb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg1q16qb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg1q16qb.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg1q16qb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg1q16qb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg1q16qb.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for w in words:\n\
    \        if w.startswith('I'):\n            bored += 1\n    return bored\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6228qc0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpq6228qc0.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq6228qc0.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i] == \"I\":\n            bored += 1\n        else:\n      \
    \      bored = 0\n    return bored\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvnjjs86u.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvnjjs86u.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvnjjs86u.py\", line 25,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bjuop6i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9bjuop6i.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9bjuop6i.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bjuop6i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9bjuop6i.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9bjuop6i.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == \"I\":\n            bored += 1\n        else:\n   \
    \         break\n    return bored\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8v7rnez0.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8v7rnez0.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8v7rnez0.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4g_8a29.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq4g_8a29.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq4g_8a29.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bjuop6i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9bjuop6i.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9bjuop6i.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n        elif words[i][0]\
    \ == '.' or words[i][0] == '?' or words[i][0] == '!':\n            bored = 0\n\
    \    return bored\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9r4h4l3c.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9r4h4l3c.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9r4h4l3c.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7hrzwu0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7hrzwu0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7hrzwu0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for w in words:\n\
    \        if w.startswith(\"I\"):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e5h75i8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3e5h75i8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3e5h75i8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            count += 1\n            if count == 2:\n            \
    \    return 0\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqboic8rz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqboic8rz.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqboic8rz.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg1q16qb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg1q16qb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg1q16qb.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bjuop6i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9bjuop6i.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9bjuop6i.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg1q16qb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg1q16qb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg1q16qb.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\" and S[i+1] == \".\":\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgc4lv4xf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgc4lv4xf.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgc4lv4xf.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith('I'):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10ubyjsv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp10ubyjsv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp10ubyjsv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7hrzwu0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7hrzwu0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7hrzwu0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7hrzwu0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7hrzwu0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7hrzwu0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        if S[i] == '.' or S[i] == '?' or S[i]\
    \ == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71rxp8nj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp71rxp8nj.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp71rxp8nj.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\" and S[i+1] == \".\":\n            count += 1\n    return count\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeth9vscf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpeth9vscf.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpeth9vscf.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg1q16qb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg1q16qb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg1q16qb.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and i < len(S) - 1 and S[i+1] in ['.', '?', '!']:\n            count\
    \ += 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj5ejzsn9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpj5ejzsn9.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpj5ejzsn9.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bjuop6i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9bjuop6i.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9bjuop6i.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith('I'):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10ubyjsv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp10ubyjsv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp10ubyjsv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == \"I\":\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e8ozfgu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0e8ozfgu.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0e8ozfgu.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i] == \"I\":\n            bored += 1\n        elif words[i]\
    \ == \".\" or words[i] == \"?\" or words[i] == \"!\":\n            bored = 0\n\
    \    return bored\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbjm9gnip.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbjm9gnip.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbjm9gnip.py\", line 25,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith('I'):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10ubyjsv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp10ubyjsv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp10ubyjsv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith('I'):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10ubyjsv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp10ubyjsv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp10ubyjsv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7hrzwu0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7hrzwu0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7hrzwu0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith('I'):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10ubyjsv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp10ubyjsv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp10ubyjsv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        if S[i] == '.' or S[i] == '?' or S[i]\
    \ == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71rxp8nj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp71rxp8nj.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp71rxp8nj.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bjuop6i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9bjuop6i.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9bjuop6i.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for w in words:\n\
    \        if w.startswith(\"I\"):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e5h75i8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3e5h75i8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3e5h75i8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            count += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc34safhl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc34safhl.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc34safhl.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg1q16qb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg1q16qb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg1q16qb.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg1q16qb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg1q16qb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg1q16qb.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith('I'):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10ubyjsv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp10ubyjsv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp10ubyjsv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n            if count == 2:\n              \
    \  return 0\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0uoti1wm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0uoti1wm.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0uoti1wm.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        if S[i] == '.' or S[i] == '?' or S[i]\
    \ == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71rxp8nj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp71rxp8nj.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp71rxp8nj.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    count = 0\n    for w in words:\n\
    \        if w.startswith(\"I\"):\n            count += 1\n    return count\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptw91nady.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptw91nady.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptw91nady.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith(\"\
    I\"):\n            count += 1\n    return count\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfa_v49l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvfa_v49l.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvfa_v49l.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for w in words:\n\
    \        if w.startswith(\"I\"):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e5h75i8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3e5h75i8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3e5h75i8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and i < len(S) - 1 and S[i + 1] == '.':\n            count += 1\n   \
    \ return count\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps28t5edy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps28t5edy.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmps28t5edy.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and i > 0 and S[i-1] == '.':\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp40oyamgd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp40oyamgd.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp40oyamgd.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg1q16qb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwg1q16qb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwg1q16qb.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4g_8a29.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq4g_8a29.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq4g_8a29.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for w in words:\n\
    \        if w.startswith(\"I\"):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e5h75i8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3e5h75i8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3e5h75i8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4g_8a29.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq4g_8a29.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq4g_8a29.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4g_8a29.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq4g_8a29.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq4g_8a29.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n            if count == 2:\n              \
    \  return 0\n        elif S[i] == '.' or S[i] == '?' or S[i] == '!':\n       \
    \     count = 0\n    return count\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4j8bq2f.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpg4j8bq2f.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg4j8bq2f.py\", line 27,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7hrzwu0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7hrzwu0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7hrzwu0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == \"I\":\n            bored += 1\n        elif S[i] == \".\" or S[i] == \"\
    ?\" or S[i] == \"!\":\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7hrzwu0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_7hrzwu0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7hrzwu0.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith('I'):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10ubyjsv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp10ubyjsv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp10ubyjsv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == 'I':\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxszr2u1p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxszr2u1p.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxszr2u1p.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq2b3j1m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjq2b3j1m.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjq2b3j1m.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for i in range(len(words)):\n\
    \        if words[i][0] == \"I\":\n            bored += 1\n        else:\n   \
    \         break\n    return bored\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8v7rnez0.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8v7rnez0.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8v7rnez0.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith(\"\
    I\"):\n            count += 1\n    return count\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfa_v49l.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvfa_v49l.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvfa_v49l.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        else:\n            bored = 0\n    return\
    \ bored\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wosxzfe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wosxzfe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4wosxzfe.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I' and S[i+1] == ' ':\n            bored += 1\n        elif S[i] == '?'\
    \ or S[i] == '!':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpbgidgm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmpbgidgm.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmpbgidgm.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            bored += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            bored = 0\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvt44gdp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgvt44gdp.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgvt44gdp.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984026
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i]\
    \ == 'I':\n            count += 1\n        elif S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!':\n            count = 0\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bjuop6i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9bjuop6i.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9bjuop6i.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1661984025
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    bored = 0\n    for w in words:\n\
    \        if w.startswith(\"I\"):\n            bored += 1\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e5h75i8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3e5h75i8.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3e5h75i8.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1662865757
