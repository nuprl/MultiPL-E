name: HumanEval_90_next_smallest
language: py
prompt: "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) ->\
  \ Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a\
  \ function next_smallest() that returns the 2nd smallest element of the list.\n\
  \    Return None if there is no such element.\n    >>> next_smallest([1, 2, 3, 4,\
  \ 5])\n    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
  \    None\n    >>> next_smallest([1, 1])\n    None\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert\
  \ candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert\
  \ candidate([1, 1]) == None\n    assert candidate([1, 1, 1, 1, 0]) == 1\n    assert\
  \ candidate([1, 1]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n\
  def test_check():\n    check(next_smallest)\n\ntest_check()\n"
completions: ["    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n\
    \    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n           \
    \ smallest = lst[i]\n    return smallest\n", "    if len(lst) == 0:\n        return\
    \ None\n    if len(lst) == 1:\n        return lst[0]\n    smallest = lst[0]\n\
    \    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n           \
    \ smallest = lst[i]\n    return smallest\n", "    if len(lst) < 2:\n        return\
    \ None\n    lst.sort()\n    return lst[1]\n", "    if len(lst) == 0:\n       \
    \ return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) ==\
    \ 2:\n        return lst[0] if lst[0] < lst[1] else lst[1]\n    if len(lst) ==\
    \ 3:\n        return lst[0] if lst[0] < lst[1] else lst[1] if lst[1] < lst[2]\
    \ else lst[2]\n    if len(lst) == 4:\n        return lst[0] if lst[0] < lst[1]\
    \ else lst[1] if lst[1] < lst[2] else lst[2] if lst[2] < lst[3] else lst[3]\n\
    \    if len(lst) == 5:\n        return lst[0] if lst[0] < lst[1] else lst[1] if\
    \ lst[1] < lst[2] else lst[2] if lst[2] < lst[3] else lst[3] if lst[3] < lst[4]\
    \ else lst[4]\n    if len(lst) == 6:\n        return lst[0] if lst[0] < lst[1]\
    \ else lst[1] if lst[1] < lst[2] else lst[2] if lst[2] < lst[3] else lst[3] if\
    \ lst[3] < lst[4] else lst[4] if lst[4] < lst[5] else lst[5]\n    if len(lst)\
    \ == 7:\n        return lst[0] if lst[0] < lst[1] else lst[1] if lst[1] < lst[2]\
    \ else lst[2] if lst[2] < lst[3] else lst[3] if lst[3] < lst[4] else lst[4] if\
    \ lst[4] < lst[5] else lst[5] if lst[5", "    if len(lst) < 2:\n        return\
    \ None\n    lst.sort()\n    return lst[1]\n", "    if len(lst) == 0:\n       \
    \ return None\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n     \
    \   if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n",

  "    if len(lst) < 2:\n        return None\n    elif len(lst) == 2:\n        return\
    \ lst[1]\n    else:\n        return min(lst[1:], key=lst.index)\n", "    if len(lst)\
    \ < 2:\n        return None\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n\
    \        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n",
  "    if len(lst) < 2:\n        return None\n    else:\n        return min(lst, key=lambda\
    \ x: x)\n", "    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n\
    \    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n           \
    \ smallest = lst[i]\n    return smallest\n", "    if len(lst) < 2:\n        return\
    \ None\n    else:\n        return min(lst, key=lambda x: x)\n", "    if len(lst)\
    \ < 2:\n        return None\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n\
    \        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n",
  "    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    for i in\
    \ range(1, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n\
    \    return smallest\n", "    if len(lst) < 2:\n        return None\n    smallest\
    \ = lst[0]\n    for i in lst:\n        if i < smallest:\n            smallest\
    \ = i\n    return smallest\n", "    if len(lst) < 2:\n        return None\n  \
    \  else:\n        return min(lst[1:], key=lambda x: x)\n", "    if len(lst) <\
    \ 2:\n        return None\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n\
    \        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n",
  "    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    for i in\
    \ range(1, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n\
    \    return smallest\n", "    if len(lst) < 2:\n        return None\n    elif\
    \ len(lst) == 2:\n        return lst[1]\n    else:\n        return min(lst[1:],\
    \ key=lambda x: x)\n", "    if len(lst) == 0:\n        return None\n    if len(lst)\
    \ == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0] if\
    \ lst[0] < lst[1] else lst[1]\n    return min(lst[0], lst[1])\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
