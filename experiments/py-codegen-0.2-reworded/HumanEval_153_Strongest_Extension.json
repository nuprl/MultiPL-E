{
  "name": "HumanEval_153_Strongest_Extension",
  "language": "py",
  "prompt": "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\ntest_check()\n",
  "completions": [
    "    #                                                            ",
    "    \n    #",
    "    \n    #",
    "    #                                                            ",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    #                                                            ",
    "    \n    #",
    "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n    extensions = [extension for extension in extensions if len(extension) > 0]\n    extensions = sorted(extensions, key=lambda extension: extension.count('a'))\n    extensions = [extension for extension in extensions if class_name.count(extension) > 0]\n    if len(extensions) == 0:\n        return class_name\n    return class_name + '.' + extensions[0]\n<|endoftext|><|python|>#",
    "    \n
    "    \n    #",
    "    #                                                            ",
    "    \n
    "    class_name = class_name.lower()\n    extensions = [x.lower() for x in extensions]\n    cap = 0\n    sm = 0\n    for x in extensions:\n        cap += sum(1 for c in x if c.isupper())\n        sm += sum(1 for c in x if c.islower())\n    return class_name + '.' + extensions[extensions.index(max(extensions, key=lambda x: (cap - sm, x)))][:cap]\n",
    "    \n    #",
    "    \n    #",
    "    #",
    "    #",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    \n    return class_name + \".\" + max(extensions, key=lambda x: (cap - sm, x))\n",
    "    import re\n    import string\n    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n    class_name = class_name.replace('_', '.')\n    extensions = [ext.replace('_', '.') for ext in extensions]\n    extensions = [ext for ext in extensions if ext != class_name]\n    extensions = [ext for ext in extensions if re.match(r'^[A-Z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[a-z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[A-Z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[a-z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[A-Z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[a-z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[A-Z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[a-z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[A-Z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[a-z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[A-Z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[a-z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[A-Z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[a-z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'^[A-Z]', ext)]\n    extensions = [ext for ext in extensions if re.match(r'",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n    extensions = sorted(extensions, key=lambda x: x.count('a'))\n    extensions = sorted(extensions, key=lambda x: x.count('e'))\n    extensions = sorted(extensions, key=lambda x: x.count('i'))\n    extensions = sorted(extensions, key=lambda x: x.count('o'))\n    extensions = sorted(extensions, key=lambda x: x.count('u'))\n    extensions = sorted(extensions, key=lambda x: x.count('y'))\n    extensions = sorted(extensions, key=lambda x: x.count('c'))\n    extensions = sorted(extensions, key=lambda x: x.count('s'))\n    extensions = sorted(extensions, key=lambda x: x.count('f'))\n    extensions = sorted(extensions, key=lambda x: x.count('h'))\n    extensions = sorted(extensions, key=lambda x: x.count('t'))\n    extensions = sorted(extensions, key=lambda x: x.count('n'))\n    extensions = sorted(extensions, key=lambda x: x.count('l'))\n    extensions = sorted(extensions, key=lambda x: x.count('r'))\n    extensions = sorted(extensions, key=lambda x: x.count('g'))\n    extensions = sorted(extensions, key=lambda x: x.count('m'))\n    extensions = sorted(extensions, key=lambda x: x.count('p'))\n    extensions = sorted(extensions, key=lambda x: x.count('w'))\n    extensions = sorted(extensions, key=lambda x: x.count('b'))\n    extensions = sorted(extensions, key=lambda x: x.count('v'))\n    extensions = sorted(extensions, key=lambda x: x.count('k'))\n    extensions = sorted(extensions, key=lambda x: x.count('j'))\n",
    "    # Your Strongest_Extension code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    class_name = class_name.lower()\n    extensions = [x.lower() for x in extensions]\n    cap = 0\n    sm = 0\n    for x in extensions:\n        if x[0].isupper():\n            cap += 1\n        else:\n            sm += 1\n    strength = cap - sm\n    if strength == 0:\n        return class_name + '.' + extensions[0]\n    else:\n        for x in extensions:\n            if strength == x[0].lower() + x[1:].lower():\n                return class_name + '.' + x\n    return class_name + '.' + extensions[0]\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"\n",
    "    class_name = class_name.lower()\n    extensions = [e.lower() for e in extensions]\n    \n    # count the number of uppercase and lowercase letters in the class name\n    cap = sum([1 for c in class_name if c.isupper()])\n    sm = sum([1 for c in class_name if c.islower()])\n    \n    # find the strongest extension\n    strongest = max(extensions, key=lambda e: (cap - sm) * (e.count('a') + e.count('A')) + e.count('c') + e.count('C'))\n    \n    # return the class name and the strongest extension\n    return class_name + '.' + strongest\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"a\") - x.count(\"A\")).split(\".\")[0]\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n    \n    # Calculate the strength of each extension\n    strengths = [0] * len(extensions)\n    for i, extension in enumerate(extensions):\n        strengths[i] = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    # Sort the extensions by strength\n    sorted_strengths = sorted(strengths, reverse=True)\n    \n    # Return the strongest extension\n    return '.'.join([class_name, sorted_strengths[0]])\n",
    "    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    strength = cap - sm\n    if strength == 0:\n        return class_name + '.' + extensions[0]\n    else:\n        return class_name + '.' + extensions[extensions.index(extensions[0])]\n",
    "    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a'))\n",
    "    # Your Strongest_Extension code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + ext for ext in extensions if ext.lower() == class_name.lower() and cap - sm > 0\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n    ",
    "    # your code here\n    return class_name + '.' + max(extensions, key=lambda x: (x.count('A'), x.count('a')))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + ext for ext in extensions if cap - sm == len(ext)\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    if cap - sm == 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[0] + \".\" + str(cap - sm)\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"a\") - x.count(\"A\"))\n",
    "    \n    # TODO: Implement function\n    pass\n",
    "    # Your Strongest_Extension code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # The strength of the extension is the number of uppercase letters minus the number of lowercase letters\n    # If the strength is 0, the extension is not strong enough\n    # If the strength is 1, the extension is strong enough\n    # If the strength is 2, the extension is very strong\n    # If the strength is 3, the extension is extremely strong\n    \n    # The strength of the extension is the number of uppercase letters minus the number of lowercase letters\n    # If the strength is 0, the extension is not strong enough\n    # If the strength is 1, the extension is strong enough\n    # If the strength is 2, the extension is very strong\n    # If the strength is 3, the extension is extremely strong\n    \n    # The strength of the extension is the number of uppercase letters minus the number of lowercase letters\n    # If the strength is 0, the extension is not strong enough\n    # If the strength is 1, the extension is strong enough\n    # If the strength is 2, the extension is very strong\n    # If the strength is 3, the extension is extremely strong\n    \n    # The strength of the extension is the number of uppercase letters minus the number of lowercase letters\n    # If the strength is 0, the extension is not strong enough\n    # If the strength is 1, the extension is strong enough\n    # If the strength is 2, the extension is very strong\n    # If the strength is 3, the extension is extremely strong\n    \n    # The strength of the extension is the number of uppercase letters minus the number of lowercase letters\n    # If the strength is 0, the extension is not strong enough\n    # If the strength is 1, the extension is strong enough\n    # If the strength is 2, the extension is very strong\n    # If the strength is 3, the extension is extremely strong\n    \n    # The strength of the extension is the number of uppercase letters minus the number of lowercase letters\n    # If the strength is 0, the extension is not strong enough\n    # If the strength is 1, the extension is strong enough\n    # If the strength is 2, the extension is very strong\n    # If the strength is 3, the extension is extremely strong\n    \n    # The strength of the extension is the number of uppercase letters minus the number",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: (x.count('A'), x.count('a')))\n    ",
    "    # Your Strongest_Extension code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a'))\n",
    "    \n    # count the number of uppercase and lowercase letters in the extension\n    cap = 0\n    sm = 0\n    for e in extensions:\n        cap += sum(c.isupper() for c in e)\n        sm += sum(c.islower() for c in e)\n    \n    # calculate the strength\n    strength = cap - sm\n    \n    # return the class name and the strongest extension\n    return class_name + '.' + extensions[0] if strength == 0 else class_name + '.' + extensions[0] + '.' + extensions[0][0] + extensions[0][1]\n",
    "    # your code here\n    return class_name + '.' + max(extensions, key=lambda x: (x.count('A'), x.count('a'))).split('.')[-1]\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: (x.count('A'), x.count('a')))\n",
    "    # TODO: Implement function\n    pass\n",
    "    import re\n    import string\n    import math\n    \n    class_name = class_name.lower()\n    class_name = re.sub(r'[^a-zA-Z0-9]', '', class_name)\n    class_name = class_name.replace(' ', '')\n    \n    extensions = [extension.lower() for extension in extensions]\n    extensions = [extension for extension in extensions if len(extension) > 0]\n    extensions = [extension for extension in extensions if extension not in class_name]\n    \n    extensions = sorted(extensions, key=lambda x: len(x) - len(x.lower()))\n    \n    if len(extensions) == 0:\n        return class_name\n    \n    cap = 0\n    sm = 0\n    for extension in extensions:\n        cap += len(extension) - len(extension.lower())\n        sm += len(extension.lower())\n    \n    strength = math.ceil(cap - sm)\n    \n    return '{}.{}'.format(class_name, extensions[0]) if strength == 1 else '{}.{}'.format(class_name, extensions[0])\n",
    "    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # TODO: Implement function\n    pass\n",
    "    \n    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    \n    return class_name + \".\" + ext for ext in extensions if cap - sm == len(ext)\n",
    "    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + ext for ext in extensions if cap - sm == len(ext)\n",
    "    \n    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    \n    return class_name + \".\" + ext for ext in extensions if cap - sm == len(ext)\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + ext if cap - sm > 0 else \"\"\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # The strength of the extension is the difference between the number of\n    # uppercase and lowercase letters in the extension\n    CAP = 0\n    SM = 0\n    for ext in extensions:\n        CAP += ext.count('A')\n        SM += ext.count('a')\n    strength = CAP - SM\n    \n    # If the strength is 0, the extension is not strong enough\n    if strength == 0:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 1, the extension is strong enough\n    if strength == 1:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 2, the extension is strong enough\n    if strength == 2:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 3, the extension is strong enough\n    if strength == 3:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 4, the extension is strong enough\n    if strength == 4:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 5, the extension is strong enough\n    if strength == 5:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 6, the extension is strong enough\n    if strength == 6:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 7, the extension is strong enough\n    if strength == 7:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 8, the extension is strong enough\n    if strength == 8:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 9, the extension is strong enough\n    if strength == 9:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 10, the extension is strong enough\n    if strength == 10:\n        return class_name + \".\" + extensions[0]\n    \n    # If the strength is 11, the extension is strong enough\n    if strength == 11:\n        return class_name + \"",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + ext for ext in extensions if ext.lower() == class_name.lower() and cap - sm > 0\n    \n    ",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: (len(x) - len(x.lower())))\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    if cap - sm > 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[-1]\n",
    "    \n    # count the number of uppercase and lowercase letters\n    cap = 0\n    sm = 0\n    for c in class_name:\n        if c.isupper():\n            cap += 1\n        else:\n            sm += 1\n    \n    # find the strongest extension\n    strongest = None\n    for ext in extensions:\n        # count the number of uppercase and lowercase letters\n        cap = 0\n        sm = 0\n        for c in ext:\n            if c.isupper():\n                cap += 1\n            else:\n                sm += 1\n        \n        # calculate the strength\n        strength = cap - sm\n        if not strongest or strength > strongest[0]:\n            strongest = (strength, ext)\n    \n    # return the strongest extension\n    return class_name + '.' + strongest[1]\n",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: len(x) - len(x.lower()))\n",
    "    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    import re\n    import string\n    class_name = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n    class_name_list = class_name.split('.')\n    extension_list = []\n    for extension in extensions:\n        extension_list.append(extension.split('.'))\n    extension_list = [extension for extension in extension_list if len(extension) > 1]\n    extension_list = [extension for extension in extension_list if len(extension) == 2]\n    extension_list = [extension for extension in extension_list if class_name_list[0] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[1] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[2] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[3] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[4] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[5] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[6] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[7] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[8] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[9] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[10] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[11] in extension]\n    extension_list = [extension for extension in extension_list if class_name_list[12] in extension]\n    extension_list = [extension for extension in extension_list",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: len(x) - len(x.lower()))\n",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # TODO: Write code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a'))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n    \n    cap_count = 0\n    sm_count = 0\n    for ext in extensions:\n        cap_count += sum(1 for c in ext if c.isupper())\n        sm_count += sum(1 for c in ext if c.islower())\n    \n    strength = cap_count - sm_count\n    \n    if strength == 0:\n        return class_name + '.' + extensions[0]\n    \n    for ext in extensions:\n        if strength == 0:\n            return class_name + '.' + ext\n        if strength < 0:\n            return class_name + '.' + ext\n        \n    return class_name + '.' + extensions[0]\n",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a'))\n",
    "    import re\n    import string\n    class_name = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n    cap_count = 0\n    sm_count = 0\n    for extension in extensions:\n        cap_count += len(re.findall(r'[A-Z]', extension))\n        sm_count += len(re.findall(r'[a-z]', extension))\n    strength = cap_count - sm_count\n    if strength == 0:\n        return class_name + '.' + extensions[0]\n    else:\n        return class_name + '.' + extensions[extensions.index(max(extensions, key=lambda x: strength if strength != 0 else 0))]\n",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: (x.count('A'), x.count('a')))\n",
    "    class_name = class_name.lower()\n    extensions = [e.lower() for e in extensions]\n    cap_count = 0\n    sm_count = 0\n    for e in extensions:\n        cap_count += sum(1 for c in e if c.isupper())\n        sm_count += sum(1 for c in e if c.islower())\n    strength = cap_count - sm_count\n    if strength == 0:\n        return class_name + '.' + extensions[0]\n    else:\n        return class_name + '.' + extensions[extensions.index(max(extensions, key=lambda x: strength if strength != 0 else 0))]\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # TODO: Implement this function\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # TODO: Implement this function\n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"a\") - x.count(\"A\"))\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('A') - x.count('a'))\n    ",
    "    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        if ext[0].isupper():\n            cap += 1\n        else:\n            sm += 1\n    if cap - sm > 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[1]\n",
    "    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # count the number of uppercase and lowercase letters in the extension\n    cap = 0\n    sm = 0\n    for e in extensions:\n        cap += sum(c.isupper() for c in e)\n        sm += sum(c.islower() for c in e)\n    \n    # return the class name and the extension with the strongest strength\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + ext for ext in extensions if ext.lower() == class_name.lower() and cap - sm > 0\n",
    "    # TODO: Implement function\n    pass\n",
    "    return class_name + '.' + max(extensions, key=lambda x: x.count('A') - x.count('a'))\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + ext for ext in extensions if ext.isupper() and cap - sm > 0\n",
    "    \n    # count the number of uppercase and lowercase letters in the extension\n    cap = 0\n    sm = 0\n    for e in extensions:\n        cap += sum(c.isupper() for c in e)\n        sm += sum(c.islower() for c in e)\n    \n    # return the class name and the extension with the strongest strength\n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + ext if cap - sm > 0 else \"\"\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + ext for ext in extensions if cap - sm == 0\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    \n    return class_name + '.' + extensions[0] if cap - sm > 0 else class_name + '.' + extensions[1]\n",
    "    \n    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    \n    return class_name + \".\" + ext for ext in extensions if ext[0].isupper() and ext[0].islower() and ext[0] == ext[0].upper() and ext[0] == ext[0].lower() and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[0] and ext[0] == ext[",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a'))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"a\") - x.count(\"A\"))\n",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # count the number of uppercase and lowercase letters\n    cap = 0\n    sm = 0\n    for i in class_name:\n        if i.isupper():\n            cap += 1\n        else:\n            sm += 1\n    \n    # find the strongest extension\n    strongest = ''\n    for extension in extensions:\n        cap_extension = 0\n        sm_extension = 0\n        for i in extension:\n            if i.isupper():\n                cap_extension += 1\n            else:\n                sm_extension += 1\n        \n        strength = cap_extension - sm_extension\n        if strength > strongest:\n            strongest = strength\n    \n    # return the strongest extension\n    return class_name + '.' + extensions[extensions.index(strongest)]\n",
    "    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    return class_name + '.' + max(extensions, key=lambda x: x.count('a'))\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    if cap - sm > 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[0]\n",
    "    \n    # get the number of uppercase and lowercase letters in the extension\n    CAP = 0\n    SM = 0\n    for char in class_name:\n        if char.isupper():\n            CAP += 1\n        else:\n            SM += 1\n    \n    # calculate the strength\n    strength = CAP - SM\n    \n    # return the class name and the strongest extension\n    return class_name + \".\" + extensions[0] if strength == 0 else class_name + \".\" + extensions[0] + \".\" + str(strength)\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    if cap - sm > 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[-1]\n",
    "    \n    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    \n    return class_name + \".\" + ext for ext in extensions if cap - sm == len(ext)\n",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # TODO: Implement this function\n    pass\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a'))\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    return class_name + '.' + max(extensions, key=lambda x: (x.count('A'), x.count('a')))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    if cap == 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[0] + \".\" + str(cap - sm)\n",
    "    \n    # count the number of uppercase and lowercase letters in the extension\n    cap = 0\n    sm = 0\n    for e in extensions:\n        cap += e.count('A')\n        sm += e.count('a')\n    \n    # calculate the strength\n    strength = cap - sm\n    \n    # find the strongest extension\n    for e in extensions:\n        if strength < e.count('a') - e.count('A'):\n            strength = e.count('a') - e.count('A')\n            strongest_extension = e\n    \n    # return the class name and the strongest extension\n    return class_name + '.' + strongest_extension\n",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # count the number of uppercase and lowercase letters\n    cap = 0\n    sm = 0\n    for i in class_name:\n        if i.isupper():\n            cap += 1\n        else:\n            sm += 1\n    \n    # find the strongest extension\n    strongest = None\n    for ext in extensions:\n        if ext.isupper():\n            cap -= 1\n        else:\n            sm -= 1\n        if (cap - sm) > 0:\n            strongest = ext\n    \n    # return the class name and the strongest extension\n    return class_name + '.' + strongest\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + max(extensions, key=lambda x: (cap - sm, x))\n",
    "    \n    # TODO: Implement this function\n    pass\n",
    "    \n    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + max(extensions, key=lambda x: (cap - sm, x))\n",
    "    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n    cap_count = 0\n    sm_count = 0\n    for ext in extensions:\n        cap_count += sum(1 for c in ext if c.isupper())\n        sm_count += sum(1 for c in ext if c.islower())\n    strength = cap_count - sm_count\n    if strength == 0:\n        return class_name + '.' + extensions[0]\n    else:\n        return class_name + '.' + extensions[extensions.index(max(extensions, key=lambda x: strength if strength != 0 else 0))]\n",
    "    \n    # Your Strongest_Extension function here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + ext for ext in extensions if cap - sm == len(ext) - len(ext.lower())\n    \n    ",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + ext for ext in extensions if cap - sm == 0\n",
    "    \n    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(c.isupper() for c in ext)\n        sm += sum(c.islower() for c in ext)\n    \n    return class_name + \".\" + max(extensions, key=lambda x: (cap - sm, x))\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"a\") - x.count(\"A\"))\n    ",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # TODO: Implement function\n    pass\n",
    "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n    extensions = sorted(extensions, key=lambda x: len(x) - len(x.lower()))\n    for extension in extensions:\n        if extension.startswith(class_name):\n            return class_name + '.' + extension\n    return class_name + '.none'\n",
    "    \n    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.upper())\n        sm += len(ext) - len(ext.lower())\n    \n    if cap - sm > 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[0]\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + '.' + ext for ext in extensions if ext.isupper() and cap - sm > 0\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"a\") - x.count(\"A\")).strip()\n",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # TODO: Implement function\n    pass\n",
    "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n    extensions = sorted(extensions, key=lambda x: x.count('a'))\n    extensions = sorted(extensions, key=lambda x: x.count('e'))\n    extensions = sorted(extensions, key=lambda x: x.count('i'))\n    extensions = sorted(extensions, key=lambda x: x.count('o'))\n    extensions = sorted(extensions, key=lambda x: x.count('u'))\n    extensions = sorted(extensions, key=lambda x: x.count('y'))\n    extensions = sorted(extensions, key=lambda x: x.count('c'))\n    extensions = sorted(extensions, key=lambda x: x.count('s'))\n    extensions = sorted(extensions, key=lambda x: x.count('f'))\n    extensions = sorted(extensions, key=lambda x: x.count('h'))\n    extensions = sorted(extensions, key=lambda x: x.count('n'))\n    extensions = sorted(extensions, key=lambda x: x.count('t'))\n    extensions = sorted(extensions, key=lambda x: x.count('l'))\n    extensions = sorted(extensions, key=lambda x: x.count('r'))\n    extensions = sorted(extensions, key=lambda x: x.count('d'))\n    extensions = sorted(extensions, key=lambda x: x.count('g'))\n    extensions = sorted(extensions, key=lambda x: x.count('p'))\n    extensions = sorted(extensions, key=lambda x: x.count('b'))\n    extensions = sorted(extensions, key=lambda x: x.count('m'))\n    extensions = sorted(extensions, key=lambda x: x.count('w'))\n    extensions = sorted(extensions, key=lambda x: x.count('v'))\n    extensions = sorted(extensions, key=lambda x: x.count('k'))\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # get the number of uppercase and lowercase letters\n    cap = 0\n    sm = 0\n    for c in class_name:\n        if c.isupper():\n            cap += 1\n        else:\n            sm += 1\n    \n    # get the strength\n    strength = cap - sm\n    \n    # return the class name and the strongest extension\n    return class_name + \".\" + extensions[0] if strength == 0 else class_name + \".\" + extensions[0] + \".\" + extensions[0][0] + extensions[0][1]",
    "    \n    # Get the number of uppercase and lowercase letters\n    cap = 0\n    sm = 0\n    for c in class_name:\n        if c.isupper():\n            cap += 1\n        else:\n            sm += 1\n    \n    # Get the strength\n    strength = cap - sm\n    \n    # Sort the extensions by strength\n    extensions.sort(key=lambda x: strength - len(x))\n    \n    # Return the strongest extension\n    return class_name + '.' + extensions[0]\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(c.isupper() for c in ext)\n        sm += sum(c.islower() for c in ext)\n    return class_name + \".\" + ext for ext in extensions if cap - sm == len(ext)\n",
    "    \n    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    \n    return class_name + \".\" + extensions[0] if cap - sm > 0 else \"\"\n",
    "    # TODO: Write code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a'))\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += ext.count('A')\n        sm += ext.count('a')\n    \n    if cap - sm > 0:\n        return class_name + '.' + extensions[0]\n    else:\n        return class_name + '.' + extensions[-1]\n",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # TODO: Implement function\n    pass\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    \n    # Your Strongest_Extension function here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + ext for ext in extensions if cap - sm == len(ext)\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"a\") - x.count(\"A\")).replace(\"a\", \"A\")\n",
    "    import re\n    import string\n    class_name = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n    class_name_regex = re.compile(r'[A-Z]')\n    extension_regex = re.compile(r'[a-z]')\n    class_name_strength = class_name_regex.count(class_name)\n    extension_strength = 0\n    for extension in extensions:\n        extension_strength += extension_regex.count(extension)\n    if class_name_strength > extension_strength:\n        return class_name + '.' + extensions[0]\n    else:\n        return class_name + '.' + max(extensions, key=lambda x: extension_regex.count(x))\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n    \n    # Get the number of uppercase letters in the class name\n    cap = class_name.count('A') + class_name.count('B') + class_name.count('C')\n    \n    # Get the number of lowercase letters in the class name\n    sm = class_name.count('a') + class_name.count('b') + class_name.count('c')\n    \n    # Get the strength of the extension\n    strength = cap - sm\n    \n    # Sort the extensions by strength\n    extensions = sorted(extensions, key=lambda x: x.count('a'))\n    \n    # Return the strongest extension\n    return '.'.join([class_name, extensions[0]])\n",
    "    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # Your Strongest_Extension code here\n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    strength = cap - sm\n    if strength == 0:\n        return class_name + '.' + extensions[0]\n    else:\n        return class_name + '.' + extensions[extensions.index(extensions[0])]\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + max(extensions, key=lambda x: (cap - sm, x))\n",
    "    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n    extensions = sorted(extensions, key=lambda x: len(x) - len(x.lower()))\n    for ext in extensions:\n        if class_name.endswith(ext):\n            return class_name + \".\" + ext\n    return class_name + \".strongest_extension\"\n",
    "    # Your Strongest_Extension function here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    if cap - sm == 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[0] + \".\" + str(cap - sm)\n",
    "    # your code here\n    return class_name + '.' + max(extensions, key=lambda x: x.count('a'))\n",
    "    # Your Strongest_Extension function here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += len(ext) - len(ext.lower())\n        sm += len(ext)\n    return class_name + \".\" + ext for ext in extensions if ext[0].isupper() and ext[0] == ext[0].upper()[0] and cap - sm > 0\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count(\"a\") - x.count(\"A\")).strip()\n",
    "    \n    # Your Strongest_Extension code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a'))\n",
    "    \n    # TODO: Implement function\n    pass\n",
    "    # Your Strongest_Extension code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    if cap - sm == 0:\n        return class_name + \".\" + extensions[0]\n    else:\n        return class_name + \".\" + extensions[0] + \".\" + str(cap - sm)\n",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # TODO: Implement function\n    return class_name + \".\" + extensions[0]\n",
    "    \n    # TODO: Implement this function\n    pass\n",
    "    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n    extensions = sorted(extensions, key=lambda x: x.count('a'))\n    extensions = [ext for ext in extensions if class_name in ext]\n    if len(extensions) == 0:\n        return class_name\n    else:\n        return class_name + '.' + extensions[0]\n",
    "    \n    # your code here\n    \n    return class_name + \".\" + max(extensions, key=lambda x: x.count('a') - x.count('A'))\n",
    "    # TODO: Implement function\n    pass\n",
    "    # your code here\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap += sum(1 for c in ext if c.isupper())\n        sm += sum(1 for c in ext if c.islower())\n    return class_name + \".\" + max(extensions, key=lambda x: (cap - sm, x))\n",
    "    \n    # your code here\n    \n    return class_name + '.' + max(extensions, key=lambda x: x.count('a'))\n",
    "    # TODO: Implement function\n    pass\n",
    "    \n    # get the number of uppercase and lowercase letters\n    cap = 0\n    sm = 0\n    for i in class_name:\n        if i.isupper():\n            cap += 1\n        else:\n            sm += 1\n    \n    # get the strength\n    strength = cap - sm\n    \n    # get the extension with the strongest strength\n    extension = extensions[0]\n    for i in extensions:\n        if strength > strength_of_extension(i):\n            extension = i\n    \n    # return the class name and extension\n    return class_name + '.' + extension\n"
  ],
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ]
}