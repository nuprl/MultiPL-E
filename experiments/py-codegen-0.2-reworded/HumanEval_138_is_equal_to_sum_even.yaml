name: HumanEval_138_is_equal_to_sum_even
language: py
prompt: "def is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"Evaluate whether the\
  \ given number n can be written as the sum of exactly 4 positive even numbers\n\
  \    Example\n    >>> is_equal_to_sum_even(4) \n    False\n    >>> is_equal_to_sum_even(6)\
  \ \n    False\n    >>> is_equal_to_sum_even(8) \n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6)\
  \ == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n\
  \    assert candidate(11) == False\n    assert candidate(12) == True\n    assert\
  \ candidate(13) == False\n    assert candidate(16) == True\n\ndef test_check():\n\
  \    check(is_equal_to_sum_even)\n\ntest_check()\n"
completions: ["    return sum(n for n in range(1, n + 1) if n % 2 == 0) == n\n\n",
  "    return sum(i for i in range(1, n + 1) if i % 2 == 0) == n\n\n", "    return\
    \ sum(filter(lambda x: x % 2 == 0, range(1, n + 1))) == n\n", "    return sum(filter(lambda\
    \ x: x % 2 == 0, range(n))) == 4\n", "    return sum(i for i in range(1, n + 1)\
    \ if i % 2 == 0) == n\n", "    if n < 4:\n        return False\n    else:\n  \
    \      return True if sum(filter(lambda x: x % 2 == 0, range(n))) == 4 else False\n\
    \n", "    return sum(i for i in range(1, n + 1) if i % 2 == 0) == n\n", "    if\
    \ n < 4:\n        return False\n    if n % 2 == 0:\n        return False\n   \
    \ if n % 4 == 0:\n        return False\n    if n % 6 == 0:\n        return False\n\
    \    return True\n", "    if n < 4:\n        return False\n    if n % 2 == 0:\n\
    \        return False\n    if n % 4 != 0:\n        return False\n    if n % 8\
    \ != 0:\n        return False\n    return True\n\n", "    return sum(filter(lambda\
    \ x: x % 2 == 0 and x >= 0 and x <= n, range(n, 0, -2))) == 4\n", "    return\
    \ sum(i for i in range(1, n + 1) if i % 2 == 0) == n\n", "    return sum(filter(lambda\
    \ x: x % 2 == 0, range(1, n + 1))) == n\n\n", "    return n == sum(filter(lambda\
    \ x: x % 2 == 0, range(1, n + 1)))\n\n", "    return sum(filter(lambda x: x %\
    \ 2 == 0, range(1, n + 1))) == n\n", "    return sum(filter(lambda x: x % 2 ==\
    \ 0, range(1, n + 1))) == n\n", "    if n < 4:\n        return False\n    else:\n\
    \        return n % 4 == 0 and sum(filter(lambda x: x % 2 == 0, range(1, n //\
    \ 2 + 1))) == n\n", "    if n < 4:\n        return False\n    else:\n        return\
    \ n % 2 == 0 and sum(i for i in range(4, n, 2)) == n\n", "    if n % 2 == 0:\n\
    \        return False\n    if n % 4 != 0:\n        return False\n    if n < 4:\n\
    \        return False\n    return True\n", "    if n < 4:\n        return False\n\
    \    else:\n        return sum(filter(lambda x: x % 2 == 0, range(n, 0, -2)))\
    \ == n\n", "    return n == sum(filter(lambda x: x % 2 == 0, range(1, n + 1)))\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
