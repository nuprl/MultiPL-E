name: HumanEval_9_rolling_max
language: py
prompt: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
  \    \"\"\" From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3,\
  \ 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
  \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
  \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
  \    check(rolling_max)\n\ntest_check()\n"
completions: ["    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:i+numbers.count(numbers[i])]))\n\
    \    return result\n", "    max_list = []\n    for i in range(len(numbers)):\n\
    \        max_list.append(max(numbers[i:i+numbers.index(i)+1]))\n    return max_list\n",
  "    if len(numbers) == 0:\n        return []\n    max_so_far = numbers[0]\n   \
    \ result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far\
    \ = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return\
    \ result\n", "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:i+numbers.index(i)]))\n\
    \    return result\n", "    result = []\n    for i in range(len(numbers)):\n \
    \       result.append(max(numbers[i:i+numbers.index(i)]))\n    return result\n",
  "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:i+numbers.count(numbers[i])]))\n\
    \    return result\n", "    if len(numbers) == 0:\n        return []\n    else:\n\
    \        return [max(numbers[:i + 1]) for i in range(len(numbers))]\n", "    if\
    \ len(numbers) == 0:\n        return []\n    max_so_far = numbers[0]\n    result\
    \ = [max_so_far]\n    for number in numbers[1:]:\n        max_so_far = max(max_so_far,\
    \ number)\n        result.append(max_so_far)\n    return result\n", "    max_list\
    \ = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max(numbers[i], max_list[i-1]))\n\
    \    return max_list\n", "    result = []\n    for i in range(len(numbers)):\n\
    \        result.append(max(numbers[i:i+numbers.index(i)]))\n    return result\n",
  "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+numbers[i]]))\n\
    \    return max_list\n", "    result = []\n    for i in range(len(numbers)):\n\
    \        result.append(max(numbers[i:i+numbers.index(max(numbers[i:]))+1]))\n\
    \    return result\n", "    if not numbers:\n        return []\n    result = []\n\
    \    for i in range(len(numbers)):\n        result.append(max(numbers[i:i+numbers.index(numbers[i])+1]))\n\
    \    return result\n", "    result = []\n    for i in range(len(numbers)):\n \
    \       result.append(max(numbers[i:i+numbers.index(i)]))\n    return result\n",
  "    if len(numbers) == 0:\n        return []\n    max_so_far = numbers[0]\n   \
    \ result = [max_so_far]\n    for number in numbers[1:]:\n        max_so_far =\
    \ max(max_so_far, number)\n        result.append(max_so_far)\n    return result\n",
  "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:i+numbers.count(numbers[i])]))\n\
    \    return result\n", "    result = []\n    for i in range(len(numbers)):\n \
    \       result.append(max(numbers[i:i+numbers.index(i)]))\n    return result\n",
  "    if len(numbers) == 0:\n        return []\n    max_so_far = numbers[0]\n   \
    \ result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far\
    \ = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return\
    \ result\n", "    if len(numbers) == 0:\n        return []\n    max_list = []\n\
    \    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:], key=lambda\
    \ x: x))\n    return max_list\n", "    result = []\n    for i in range(len(numbers)):\n\
    \        result.append(max(numbers[i:i+numbers.index(i)+1]))\n    return result\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
