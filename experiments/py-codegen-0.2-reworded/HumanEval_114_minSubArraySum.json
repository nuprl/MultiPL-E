{
  "name": "HumanEval_114_minSubArraySum",
  "language": "py",
  "prompt": "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n    assert candidate([-10]) == -10\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n\ndef test_check():\n    check(minSubArraySum)\n\ntest_check()\n",
  "completions": [
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    min_sum = nums[0]\n    min_sum_start = 0\n    min_sum_end = 0\n    \n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            min_sum = 0\n            min_sum_start = 0\n            min_sum_end = 0\n            break\n        \n        if nums[i] + min_sum > 0:\n            min_sum += nums[i]\n            min_sum_start = i\n            min_sum_end = i\n        else:\n            min_sum = nums[i]\n            min_sum_start = i\n            min_sum_end = i\n    \n    if min_sum == 0:\n        return 0\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n\n
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n<|endoftext|><|python|
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-x for x in nums])\n    if nums[-1] < 0:\n        return minSubArraySum([-x for x in nums])\n    \n
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i:]))\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    #                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n    min_sum_start = 0\n    min_sum_end = 0\n    \n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            min_sum_end = i\n            min_sum = 0\n            break\n        \n        if nums[i] > nums[i-1]:\n            min_sum = nums[i]\n            min_sum_start = i\n            min_sum_end = i\n            \n        elif nums[i] == nums[i-1]:\n            min_sum = nums[i] + min_sum\n            min_sum_start = i\n            min_sum_end = i\n            \n        else:\n            min_sum = nums[i] + min_sum\n            min_sum_start = i\n            min_sum_end = i\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([0] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum(nums[::-1])\n    \n    nums_len = len(nums)\n    nums_sum = sum(nums)\n    \n
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # use a min heap to store the min sum of each sub-array\n    min_heap = []\n    min_heap.append(nums[0])\n    min_heap.append(nums[1])\n    \n    # use a max heap to store the max sum of each sub-array\n    max_heap = []\n    max_heap.append(nums[0])\n    max_heap.append(nums[1])\n    \n    # use a min heap to store the min sum of each sub-array\n    min_heap.append(nums[2])\n    min_heap.append(nums[3])\n    \n    # use a max heap to store the max sum of each sub-array\n    max_heap.append(nums[2])\n    max_heap.append(nums[3])\n    \n    # use a min heap to store the min sum of each sub-array\n    min_heap.append(nums[4])\n    min_heap.append(nums[5])\n    \n    # use a max heap to store the max sum of each sub-array\n    max_heap.append(nums[4])\n    max_heap.append(nums[5])\n    \n    # use a min heap to store the min sum of each sub-array\n    min_heap.append(nums[6])\n    min_heap.append(nums[7])\n    \n    # use a max heap to store the max sum of each sub-array\n    max_heap.append(nums[6])\n    max_heap.append(nums[7])\n    \n    # use a min heap to store the min sum of each sub-array\n    min_heap.append(nums[8])\n    min_heap.append(nums[9])\n    \n    # use a max heap to store the max sum of",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = nums[i] + min(dp[i-1], dp[i-2])\n    return min(dp)\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n        return minSubArraySum(nums[:-1])\n    \n    # find the minimum sum of the sub-array\n    # that starts from index 0 and ends at index i\n    # where i is the index of the minimum sum\n    # of the sub-array\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        \n    # find the minimum sum of the sub-array\n    # that starts from index i and ends at index len(nums)\n    # where i is the index of the minimum sum\n    # of the sub-array\n    min_sum = nums[-1]\n    for i in range(len(nums) - 2, -1, -1):\n        min_sum = min(min_sum + nums[i], nums[i])\n        \n    return min(min_sum, minSubArraySum(nums[:-1] + [-nums[-1]]))\n    ",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i-1])\n    \n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0]] + nums)\n    if nums[0] == 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] == 0:\n        return minSubArraySum([nums[0]] + nums)\n    if nums[0] == nums[-1]:\n        return nums[0] + minSubArraySum([nums[1]] + nums)\n    if nums[0] > nums[-1]:\n        return minSubArraySum([nums[0]] + nums)\n    if nums[0] < nums[-1]:\n        return minSubArraySum([nums[1]] + nums)\n    return min(minSubArraySum([nums[0]] + nums), minSubArraySum([nums[1]] + nums))\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1], nums[2]]) + nums[0]\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0], nums[1], nums[2]]) + nums[-1]\n    if nums[0] < nums[-1]:\n        return minSubArraySum([nums[0], nums[1], nums[2]]) + nums[0]\n    else:\n        return minSubArraySum([nums[0], nums[1], nums[2]]) + nums[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-x for x in nums])\n    if nums[-1] < 0:\n        return minSubArraySum([-x for x in nums])\n    \n    # sum of subarray is sum of nums\n    # sum of subarray is sum of nums - nums[0]\n    # sum of subarray is sum of nums - nums[0] - nums[1]\n    # sum of subarray is sum of nums - nums[0] - nums[1] - nums[2]\n    # ...\n    # sum of subarray is sum of nums - nums[0] - nums[1] - ... - nums[n-1]\n    # sum of subarray is sum of nums - nums[0] - nums[1] - ... - nums[n-1] - nums[n]\n    # sum of subarray is sum of nums - nums[0] - nums[1] - ... - nums[n-1] - nums[n] - nums[n+1]\n    # ...\n    # sum of subarray is sum of nums - nums[0] - nums[1] - ... - nums[n-1] - nums[n] - nums[n+1] - ... - nums[-1]\n    # sum of subarray is sum of nums - nums[0] - nums[1] - ... - nums[n-1] - nums[n] - nums[n+1] - ... - nums[-1]\n    # sum of subarray is sum of nums - nums[0] - nums[1] - ... - nums[n-1] - nums[n] - nums[n+1] - ... - nums[-1] - nums[0]\n    # ...\n    # sum of subarray is sum of nums - nums[0] - nums[1] - ... -",
    "    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] is the minimum sum of nums[0..i]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = nums[i] + min(dp[i-1], dp[i-2])\n    return min(dp)\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n        return minSubArraySum(nums[:-1])\n    \n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = nums[i] + min(dp[i-2], dp[i-1])\n    return min(dp)\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    # sum of the first element\n    sum_first = nums[0]\n    \n    # sum of the second element\n    sum_second = nums[1]\n    \n    # sum of the first and second element\n    sum_first_second = nums[0] + nums[1]\n    \n    # sum of the first and second element\n    sum_first_second_third = nums[0] + nums[1] + nums[2]\n    \n    # sum of the first, second and third element\n    sum_first_second_third_fourth = nums[0] + nums[1] + nums[2] + nums[3]\n    \n    # sum of the first, second, third and fourth element\n    sum_first_second_third_fourth_fifth = nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n    \n    # sum of the first, second, third, fourth and fifth element\n    sum_first_second_third_fourth_fifth_sixth = nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n    \n    # sum of the first, second, third, fourth, fifth and sixth element\n    sum_first_second_third_fourth_fifth_sixth_seventh = nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]\n    \n    # sum of the first, second, third, fourth, fifth, sixth and seventh element\n    sum_first_second_third_fourth_fifth_sixth_seventh_eighth = nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7]\n    \n    # sum of the first, second, third, fourth, fifth, sixth, seventh and eighth element\n    sum_first_second_third_fourth",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    \n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array is sum of sub array\n    # min sum of sub array",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    \n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = nums[i] + min(dp[i-1], 0)\n    \n    min_sum = dp[-1]\n    for i in range(len(nums)-2, -1, -1):\n        min_sum = min(dp[i], min_sum)\n    return min_sum\n",
    "    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum - nums[i-1])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n        return minSubArray",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]])\n    if nums[-1] < 0:\n        return minSubArraySum([nums[-1]])\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i])\n    \n    # return min(dp)\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] = min(dp[i-1] + nums[i], dp[i-2] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i-2] + nums[i])\n    \n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    min_sum_index = 0\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        if min_sum < min_sum_index:\n            min_sum_index = min_sum\n    return min_sum_index\n",
    "    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    nums.sort()\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i]\n        if i > 0 and nums[i] < nums[i-1]:\n            result -= nums[i-1]\n    return result\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    sums = [0] * len(nums)\n    sums[0] = nums[0]\n    sums[1] = nums[1]\n    for i in range(2, len(nums)):\n        sums[i] = nums[i] + sums[i-1]\n    for i in range(1, len(nums)):\n        sums[i] += min(sums[i-1], sums[i])\n    return min(sums)\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] is the minimum sum of sub-array ending at nums[i]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = nums[i] + min(dp[i-2], dp[i-1])\n    \n    return min(dp)\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1], nums[2]]) + nums[0]\n    if nums[1] < 0:\n        return minSubArraySum([nums[0], nums[2]]) + nums[1]\n    if nums[2] < 0:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2]\n    if nums[0] < nums[1]:\n        return minSubArraySum([nums[0], nums[2]]) + nums[1]\n    if nums[1] < nums[2]:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2]\n    return minSubArraySum([nums[0], nums[1], nums[2]])\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]])\n    if nums[-1] < 0:\n        return minSubArraySum([nums[-1]])\n    \n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of",
    "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n    \n    # sum = dp[-1]\n    sum = dp[-1]\n    for i in range(len(nums)-2, -1, -1):\n        sum = min(sum, dp[i] + nums[i])\n    return sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = dp[i - 1] + nums[i]\n    for i in range(len(nums) - 2, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1]) + nums[i]\n    return dp[0]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    \n    # nums[0] >= 0\n    # nums[-1] >= 0\n    \n    # nums[0] + nums[1] >= 0\n    # nums[0] + nums[2] >= 0\n    # nums[0] + nums[3] >= 0\n    # nums[0] + nums[4] >= 0\n    \n    # nums[1] + nums[2] >= 0\n    # nums[1] + nums[3] >= 0\n    # nums[1] + nums[4] >= 0\n    \n    # nums[2] + nums[3] >= 0\n    # nums[2] + nums[4] >= 0\n    \n    # nums[3] + nums[4] >= 0\n    \n    # nums[0] + nums[1] + nums[2] + nums[3] + nums[4] >= 0\n    \n    # nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] >= 0\n    \n    # nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] >= 0\n    \n    # nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] >= 0\n    \n    # nums[0] + nums[1] + nums[2] + nums[3] +",
    "    if len(nums) == 0:\n        return 0\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i-1])\n    \n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i])\n    \n    # return dp[-1]\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-x for x in nums])\n    if nums[-1] < 0:\n        return minSubArraySum([-x for x in nums])\n    if nums[0] == 0:\n        return minSubArraySum([x for x in nums[1:]])\n    if nums[-1] == 0:\n        return minSubArraySum([x for x in nums[:-1]])\n    \n    # sum of sub-arrays\n    sums = [0] * len(nums)\n    sums[0] = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n    \n    # min sum of sub-arrays\n    min_sums = [0] * len(nums)\n    min_sums[0] = nums[0]\n    for i in range(1, len(nums)):\n        min_sums[i] = min(sums[i], min_sums[i-1])\n    \n    return min(min_sums)\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            min_sum = 0\n            break\n        if nums[i] == 0:\n            min_sum = nums[i]\n            break\n        min_sum += nums[i]\n    for i in range(len(nums) - 1, 0, -1):\n        if nums[i] < 0:\n            min_sum = 0\n            break\n        if nums[i] == 0:\n            min_sum = nums[i]\n            break\n        min_sum += nums[i]\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n    \n    # return min(dp[-1], dp[-2] + nums[-1])\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0]] + nums)\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i-1])\n    \n    # return dp[-1]\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # find the minimum sum of the sub-array\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    # find the minimum sum of the sub-array\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    min_sum_start = 0\n    min_sum_end = 0\n    \n    for i in range(1, len(nums)):\n        min_sum = nums[i] + min_sum\n        if min_sum < 0:\n            min_sum = 0\n            min_sum_start = i\n        if min_sum > 0:\n            min_sum_end = i\n            break\n    \n    if min_sum_end == 0:\n        return min_sum\n    \n    return min_sum - nums[min_sum_start] + minSubArraySum(nums[min_sum_start:min_sum_end+1])\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-x for x in nums])\n    if nums[-1] < 0:\n        return minSubArraySum([-x for x in nums])\n    if nums[0] == 0:\n        return minSubArraySum([0] + nums)\n    if nums[-1] == 0:\n        return minSubArraySum(nums)\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i])\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = dp[i - 1] + nums[i]\n    for i in range(len(nums) - 2, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1]) + nums[i]\n    return dp[0]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if not nums:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0]] + nums)\n    s = nums[0]\n    for i in range(1, len(nums)):\n        s += nums[i]\n        if s < 0:\n            s = nums[i]\n    return s\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    \n    # dp[i] = min(dp[i-1], nums[i] + dp[i-2])\n    dp = [nums[0]]\n    for i in range(1, len(nums)):\n        dp.append(min(dp[i-1], nums[i] + dp[i-2]))\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # sum of sub-array\n    s = nums[0]\n    for i in range(1, len(nums)):\n        s = min(s + nums[i], nums[i])\n    return s\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n    \n    # return min(dp[-1], dp[-2] + nums[-1])\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    nums.sort()\n    min_sum = 0\n    for i in range(len(nums)):\n        min_sum += nums[i]\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        if i + 1 < len(nums) and nums[i] + nums[i+1] < 0:\n            continue\n        if i + 1 < len(nums) and nums[i] + nums[i+1] == 0:\n            continue\n        if i + 1 < len(nums) and nums[i] + nums[i+1] > 0:\n            min_sum = min(min_sum, nums[i] + nums[i+1])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    \n    # sum of sub-array\n    sum_of_sub_array = 0\n    # sum of sub-array\n    sum_of_sub_array_2 = 0\n    # sum of sub-array\n    sum_of_sub_array_3 = 0\n    # sum of sub-array\n    sum_of_sub_array_4 = 0\n    # sum of sub-array\n    sum_of_sub_array_5 = 0\n    # sum of sub-array\n    sum_of_sub_array_6 = 0\n    # sum of sub-array\n    sum_of_sub_array_7 = 0\n    # sum of sub-array\n    sum_of_sub_array_8 = 0\n    # sum of sub-array\n    sum_of_sub_array_9 = 0\n    # sum of sub-array\n    sum_of_sub_array_10 = 0\n    # sum of sub-array\n    sum_of_sub_array_11 = 0\n    # sum of sub-array\n    sum_of_sub_array_12 = 0\n    # sum of sub-array\n    sum_of_sub_array_13 = 0\n    # sum of sub-array\n    sum_of_sub_array_14 = 0\n    # sum of sub-array\n    sum_of_sub_array_15 = 0\n    # sum of sub-array\n    sum_of_sub_array_16 = 0\n    # sum of sub-array\n    sum_of_sub_array_17 = 0\n    # sum of sub-array\n    sum_of_sub_array_18 = 0\n    # sum of sub-array\n    sum_of_sub_array_19 = 0\n    # sum of sub-array\n    sum_of",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1], nums[2]]) + nums[0]\n    if nums[1] < 0:\n        return minSubArraySum([nums[0], nums[2]]) + nums[1]\n    if nums[2] < 0:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2]\n    if nums[0] == 0:\n        return minSubArraySum([nums[1], nums[2]])\n    if nums[1] == 0:\n        return minSubArraySum([nums[0], nums[2]])\n    if nums[2] == 0:\n        return minSubArraySum([nums[0], nums[1]])\n    if nums[0] == nums[1] == nums[2]:\n        return nums[0]\n    if nums[0] + nums[1] < nums[2]:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2]\n    if nums[0] + nums[1] == nums[2]:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2]\n    if nums[0] + nums[1] > nums[2]:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2]\n    if nums[0] + nums[1] == nums[2] + nums[3]:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2] + nums[3]\n    if nums[0] + nums[1] == nums[2] + nums[3] + nums[4]:\n        return min",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # dp[i] = min(dp[i-1] + nums[i], nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], nums[i])\n    \n    # return min(dp[-1], dp[-2])\n    return min(dp[-1], dp[-2])\n",
    "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    min_sum = nums[0]\n    for i in range(len(nums)):\n        s += nums[i]\n        if s < min_sum:\n            min_sum = s\n        if i == len(nums) - 1:\n            break\n        s -= nums[i]\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    min_sum = nums[0]\n    min_sum_index = 0\n    for i in range(1, len(nums)):\n        min_sum += nums[i]\n        if min_sum < 0:\n            min_sum = 0\n            min_sum_index = i\n        elif min_sum == 0:\n            break\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    s = nums[0]\n    for i in range(1, len(nums)):\n        s = min(s + nums[i], nums[i])\n    return s\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if not nums:\n        return 0\n\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[-1] < 0:\n        return 0\n    \n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = dp[i-1] + nums[i]\n    \n    for i in range(1, len(nums)):\n        for j in range(i, len(nums)):\n            if dp[j] - dp[i-1] >= 0:\n                dp[i] = min(dp[i], dp[j] - dp[i-1])\n    \n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    min_sum_index = 0\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        if min_sum < 0:\n            min_sum = 0\n        if min_sum > 0 and min_sum_index == 0:\n            min_sum_index = i\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    sum = 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        sum += nums[i]\n        if sum < min_sum:\n            min_sum = sum\n        if sum >= 0:\n            sum = 0\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    min_sum_start = 0\n    min_sum_end = 0\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            min_sum_end = i\n            break\n        if nums[i] > 0:\n            min_sum += nums[i]\n            if min_sum < 0:\n                min_sum = 0\n            if min_sum > 0:\n                min_sum_start = i\n                min_sum_end = i\n                break\n    if min_sum_end == 0:\n        return 0\n    else:\n        return min_sum_start + min_sum_end\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i:]))\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]])\n    if nums[-1] < 0:\n        return minSubArraySum([nums[-1]])\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum([nums[0], nums[-1]])\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]]) + minSubArraySum(nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1]) + nums[-1]\n    return min(minSubArraySum(nums[:i]) + nums[i] for i in range(1, len(nums)))\n",
    "    if len(nums) == 0:\n        return 0\n\n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i])\n\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [nums[-1]])\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum(nums[1:-1])\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:]) + nums[0]\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1]) + nums[-1]\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum(nums[1:-1]) + nums[-1]\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:]) + nums[0]\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1]) + nums[-1]\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum(nums[1:-1]) + nums[-1]\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:]) + nums[0]\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1]) + nums[-1]\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum(nums[1:-1]) + nums[-1]\n    if nums[0] < 0:\n        return minSubArraySum(nums[1:]) + nums[0]\n    if num",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # find the min sum of nums[0...i]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    # find the min sum of nums[i...len(nums)]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [nums[-1]])\n    \n    # min sum of subarray\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    # min sum of subarray\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n        return minSubArraySum(nums[:-1])\n    # print(nums)\n    # print(nums[0])\n    # print(nums[-1])\n    # print(nums[0] + nums[-1])\n    # print(nums[0] + nums[-1] + nums[1])\n    # print(nums[0] + nums[-1] + nums[1] + nums[2])\n    # print(nums[0] + nums[-1] + nums[1] + nums[2] + nums[3])\n    # print(nums[0] + nums[-1] + nums[1] + nums[2] + nums[3] + nums[4])\n    # print(nums[0] + nums[-1] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5])\n    # print(nums[0] + nums[-1] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6])\n    # print(nums[0] + nums[-1] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7])\n    #",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[-1] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    nums = sorted(nums)\n    min_sum = 0\n    for i in range(len(nums)):\n        min_sum += nums[i]\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, len(nums)):\n            if nums[j] == nums[i]:\n                min_sum += nums[j]\n                break\n            if nums[j] > nums[i]:\n                break\n            if nums[j] < nums[i]:\n                min_sum += nums[i] - nums[j]\n                break\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    s = nums[0]\n    for i in range(1, len(nums)):\n        s += nums[i]\n        if s < 0:\n            s = nums[i]\n        else:\n            s = min(s, nums[i])\n    return s\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-x for x in nums])\n    if nums[-1] < 0:\n        return minSubArraySum([-x for x in nums])\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n        return minSubArraySum(nums[:-1])\n    \n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s = 0\n    # sum of subarray\n    s =",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    min_sum_index = 0\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        if min_sum == nums[i]:\n            min_sum_index = i\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0]] + nums)\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0]] + nums)\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[0] < 0 and nums[-1] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[0",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n        return minSubArraySum(nums[:-1])\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if not nums:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if not nums:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n        return minSubArraySum(nums[:-1])\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i], min_sum)\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [nums[-1]])\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1], nums[2]]) + nums[0]\n    if nums[1] < 0:\n        return minSubArraySum([nums[0], nums[2]]) + nums[1]\n    if nums[2] < 0:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2]\n    if nums[0] < nums[1]:\n        return minSubArraySum([nums[1], nums[2]]) + nums[0]\n    if nums[1] < nums[2]:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2]\n    return minSubArraySum([nums[0], nums[1]]) + nums[2]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    min_sum_index = 0\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        if min_sum < 0:\n            min_sum = 0\n        if min_sum > min_sum_index:\n            min_sum_index = i\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    sums = [0] * len(nums)\n    sums[0] = nums[0]\n    sums[1] = nums[1]\n    for i in range(2, len(nums)):\n        sums[i] = nums[i] + min(sums[i-2], sums[i-1])\n    return min(sums)\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if not nums:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0]] + nums)\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if not nums:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # min sum of sub array\n    min_sum = nums[0]\n    # sum of sub array\n    sum_of_sub_array = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        sum_of_sub_array += nums[i]\n        if sum_of_sub_array < 0:\n            sum_of_sub_array = 0\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    min_sum_index = 0\n    for i in range(1, len(nums)):\n        min_sum = nums[i] + min_sum\n        if min_sum < 0:\n            min_sum = 0\n            min_sum_index = i\n        elif min_sum == 0:\n            break\n    \n    if min_sum_index == 0:\n        return min_sum\n    \n    return min_sum - nums[min_sum_index]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # use a min heap to store the sums of the sub-arrays\n    minHeap = []\n    minHeap.append(nums[0])\n    minHeap.append(0)\n    for i in range(1, len(nums)):\n        minHeap.append(nums[i] + minHeap[0])\n        minHeap[0] = minHeap[1]\n        minHeap[1] = minHeap[2]\n        minHeap[2] = minHeap[3]\n        minHeap[3] = minHeap[4]\n        minHeap[4] = minHeap[5]\n        minHeap[5] = minHeap[6]\n        minHeap[6] = minHeap[7]\n        minHeap[7] = minHeap[8]\n        minHeap[8] = minHeap[9]\n        minHeap[9] = minHeap[10]\n        minHeap[10] = minHeap[11]\n        minHeap[11] = minHeap[12]\n        minHeap[12] = minHeap[13]\n        minHeap[13] = minHeap[14]\n        minHeap[14] = minHeap[15]\n        minHeap[15] = minHeap[16]\n        minHeap[16] = minHeap[17]\n        minHeap[17] = minHeap[18]\n        minHeap[18] = minHeap[19]\n        minHeap[19] = minHeap[20]\n        minHeap[20] = minHeap[21]\n        minHeap[21] = minHeap[22]\n        minHeap[22] = minHeap[23]\n        minHeap[23] = minHeap[24]\n        minHeap[24] = minHeap[25]\n        minHeap[25] = minHeap[26]\n        minHeap",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    \n    # sum of subarray\n    s = nums[0]\n    # sum of subarray\n    s_prev = nums[0]\n    # sum of subarray\n    s_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev_prev_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev_prev_prev_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = nums[0]\n    # sum of subarray\n    s_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[-1] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if not nums:\n        return 0\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    for i in range(1, n):\n        dp[i] = dp[i-1] + nums[i]\n    for i in range(n-1, -1, -1):\n        dp[i] = min(dp[i], dp[i+1])\n    return dp[0]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    # dp[i] = min(dp[i-1], nums[i]) + nums[i]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1], nums[i]) + nums[i]\n    \n    # return min(dp)\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-x for x in nums])\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        nums[0] = 0\n    if nums[-1] < 0:\n        nums[-1] = 0\n    \n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1] + nums[0]\n    for i in range(2, len(nums)):\n        dp[i] = min(dp[i-1], dp[i-2]) + nums[i]\n    \n    min_sum = dp[-1]\n    for i in range(len(nums) - 2, -1, -1):\n        min_sum = min(min_sum, dp[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    # dp[i] is the minimum sum of subarray ending at nums[i]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = max(nums[i], dp[i-1] + nums[i])\n    \n    # return the minimum of the last element\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i:]))\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([0] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum(nums[::-1])\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] + nums\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i], dp[i-1] + nums[i])\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[-1] < 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    if nums[0] == nums[1]:\n        return nums[0] + nums[1]\n    if nums[0] == nums[2]:\n        return nums[0] + nums[2]\n    if nums[0] == nums[3]:\n        return nums[0] + nums[3]\n    if nums[0] == nums[4]:\n        return nums[0] + nums[4]\n    if nums[0] == nums[5]:\n        return nums[0] + nums[5]\n    if nums[0] == nums[6]:\n        return nums[0] + nums[6]\n    if nums[0] == nums[7]:\n        return nums[0] + nums[7]\n    if nums[0] == nums[8]:\n        return nums[0] + nums[8]\n    if nums[0] == nums[9]:\n        return nums[0] + nums[9]\n    if nums[0] == nums[10]:\n        return nums[0] + nums[10]\n    if nums[0] == nums[11]:\n        return nums[0] + nums[11]\n    if nums[0] == nums[12]:\n        return nums[0] + nums[12]\n    if nums[0] == nums[13]:\n        return nums[0] + nums[13]\n    if nums[0] == nums[14]:\n        return nums[0] + nums[14]\n    if nums[0] == nums[15]:\n        return nums[0] + nums[15]\n    if nums[0] == nums[16]:\n        return nums[0] + nums",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[-1] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(len(nums) - 2, -1, -1):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n    \n    # return min(dp)\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # sum of sub-array\n    s = nums[0]\n    # sum of sub-array\n    s_ = nums[0]\n    # sum of sub-array\n    s__ = 0\n    # sum of sub-array\n    s___ = 0\n    # sum of sub-array\n    s____ = 0\n    # sum of sub-array\n    s_____ = 0\n    # sum of sub-array\n    s______ = 0\n    # sum of sub-array\n    s_______ = 0\n    # sum of sub-array\n    s________ = 0\n    # sum of sub-array\n    s_________ = 0\n    # sum of sub-array\n    s__________ = 0\n    # sum of sub-array\n    s___________ = 0\n    # sum of sub-array\n    s____________ = 0\n    # sum of sub-array\n    s_____________ = 0\n    # sum of sub-array\n    s______________ = 0\n    # sum of sub-array\n    s_______________ = 0\n    # sum of sub-array\n    s________________ = 0\n    # sum of sub-array\n    s_________________ = 0\n    # sum of sub-array\n    s__________________ = 0\n    # sum of sub-array\n    s___________________ = 0\n    # sum of sub-array\n    s____________________ = 0\n    # sum of sub-array\n    s_____________________ = 0\n    # sum of sub-array\n    s______________________ = 0\n    # sum of sub-array\n    s_______________________ = 0\n    # sum of sub-array\n    s________________________ = 0\n    # sum of sub-array\n    s_________________________ = 0\n    # sum of sub-array\n    s__________________________ = 0\n    # sum of sub-array\n    s___________________________ = 0\n    # sum of sub-array\n    s____________________________ = 0\n    #",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i])\n    \n    # return min(dp)\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n        return minSubArraySum(nums[:-1])\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i], min_sum)\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n        return minSubArraySum(nums[:-1])\n    \n    # sum of sub-arrays\n    sums = [0] * len(nums)\n    sums[0] = nums[0]\n    for i in range(1, len(nums)):\n        sums[i] = sums[i-1] + nums[i]\n    \n    # min sum of sub-arrays\n    min_sums = [0] * len(nums)\n    min_sums[0] = nums[0]\n    for i in range(1, len(nums)):\n        min_sums[i] = min(min_sums[i-1], sums[i])\n    \n    return min(min_sums)\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    if nums[0] == 0:\n        return nums[0]\n    \n    min_sum = nums[0]\n    min_start = 0\n    min_end = 0\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            min_sum = 0\n            min_start = 0\n            min_end = 0\n            break\n        if nums[i] == 0:\n            min_sum = 0\n            min_start = 0\n            min_end = 0\n            break\n        if nums[i] > nums[i-1]:\n            min_sum += nums[i]\n            min_start = i\n            min_end = i\n        else:\n            min_sum = max(min_sum, nums[i-1])\n            min_start = i-1\n            min_end = i-1\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0]] + nums)\n    if nums[0] < nums[-1]:\n        return minSubArraySum(nums[1:])\n    else:\n        return minSubArraySum(nums[:-1])\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([-x for x in nums])\n    if nums[-1] < 0:\n        return minSubArraySum([-x for x in nums[::-1]])\n    \n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    # sum of sub-array\n    s = 0\n    ",
    "    if len(nums) == 0:\n        return 0\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    \n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i])\n    \n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum([nums[0]] + nums)\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if len(nums) == 3:\n        return nums[0] + nums[1] + nums[2]\n    if len(nums) == 4:\n        return nums[0] + nums[1] + nums[2] + nums[3]\n    if len(nums) == 5:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n    if len(nums) == 6:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n    if len(nums) == 7:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]\n    if len(nums) == 8:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7]\n    if len(nums) == 9:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8]\n    if len(nums) == 10:\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8] + nums[9]\n    if len(nums) == 11:\n        return nums[0] + nums[1] + nums[2] + nums[3] +",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n    dp = [nums[0]]\n    for i in range(1, len(nums)):\n        dp.append(min(dp[i-1], dp[i-2] + nums[i]))\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i-1])\n    \n    # return min(dp)\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1], nums[2]]) + nums[0]\n    if nums[1] < 0:\n        return minSubArraySum([nums[0], nums[2]]) + nums[1]\n    if nums[2] < 0:\n        return minSubArraySum([nums[0], nums[1]]) + nums[2]\n    if nums[0] == 0:\n        return minSubArraySum([nums[1], nums[2]])\n    if nums[1] == 0:\n        return minSubArraySum([nums[0], nums[2]])\n    if nums[2] == 0:\n        return minSubArraySum([nums[0], nums[1]])\n    if nums[0] + nums[1] + nums[2] == 0:\n        return 0\n    return min(minSubArraySum([nums[0], nums[1]]), minSubArraySum([nums[1], nums[2]]))\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] = min(dp[i-1], dp[i-2] + nums[i])\n    dp = [nums[0]]\n    for i in range(1, len(nums)):\n        dp.append(min(dp[i-1], dp[i-2] + nums[i]))\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    sums = [0] * len(nums)\n    sums[0] = nums[0]\n    sums[1] = nums[1]\n    for i in range(2, len(nums)):\n        sums[i] = nums[i] + sums[i-1]\n    sums[0] = nums[0] + sums[1]\n    for i in range(1, len(nums)):\n        sums[i] += min(sums[i-1], sums[i])\n    return min(sums)\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-nums[0]] + nums[1:])\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1] + [-nums[-1]])\n    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0] == nums[-1]:\n        return nums[0]\n    if nums[0] == nums[-1] + 1:\n        return nums[0]\n    if nums[0] == nums[-1] - 1:\n        return nums[0]\n    if nums[0] == nums[-1] + 2:\n        return nums[0]\n    if nums[0] == nums[-1] - 2:\n        return nums[0]\n    if nums[0] == nums[-1] + 3:\n        return nums[0]\n    if nums[0] == nums[-1] - 3:\n        return nums[0]\n    if nums[0] == nums[-1] + 4:\n        return nums[0]\n    if nums[0] == nums[-1] - 4:\n        return nums[0]\n    if nums[0] == nums[-1] + 5:\n        return nums[0]\n    if nums[0] == nums[-1] - 5:\n        return nums[0]\n    if nums[0] == nums[-1] + 6:\n        return nums[0]\n    if nums[0] == nums[-1] - 6:\n        return nums[0]\n    if nums[0] == nums[-1] + 7:\n        return nums[0]",
    "    if len(nums) == 0:\n        return 0\n    \n    nums.sort()\n    \n    min_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    if nums[0] < 0:\n        return minSubArraySum([nums[1]] + nums)\n    if nums[-1] < 0:\n        return minSubArraySum(nums[:-1])\n    if nums[0] == 0:\n        return minSubArraySum(nums[1:])\n    if nums[-1] == 0:\n        return minSubArraySum(nums[:-1])\n    # nums[0] > 0 and nums[-1] > 0\n    # nums[0] > 0 and nums[-1] < 0\n    # nums[0] < 0 and nums[-1] > 0\n    # nums[0] < 0 and nums[-1] < 0\n    # nums[0] == 0 and nums[-1] > 0\n    # nums[0] == 0 and nums[-1] < 0\n    # nums[0] > 0 and nums[-1] == 0\n    # nums[0] < 0 and nums[-1] == 0\n    # nums[0] == 0 and nums[-1] == 0\n    # nums[0] > 0 and nums[-1] > 0\n    # nums[0] < 0 and nums[-1] > 0\n    # nums[0] < 0 and nums[-1] < 0\n    # nums[0] > 0 and nums[-1] < 0\n    # nums[0] > 0 and nums[-1] > 0\n    # nums[0] < 0 and nums[-1] < 0\n    # nums[0] < 0 and nums[-1] > 0\n    # nums[0] < 0 and nums[-1] < 0\n    # nums[0] > 0 and nums[-1] > 0\n    # nums[0",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + minSubArraySum(nums[i:]))\n    return min_sum\n",
    "    if not nums:\n        return 0\n    \n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    \n    return min_sum\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < 0:\n        return minSubArraySum([-x for x in nums])\n    if nums[-1] < 0:\n        return minSubArraySum([-x for x in nums])\n    \n    # dp[i] = min(dp[i], dp[i+1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i], dp[i-1] + nums[i])\n    \n    # return min(dp)\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    # dp[i] = min(dp[i], dp[i-1] + nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i])\n    \n    # return min(dp)\n    return dp[-1]\n",
    "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # dp[i] = min(dp[i-1], dp[i-2], nums[i])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1]\n    for i in range(2, len(nums)):\n        dp[i] = min(dp[i-1], dp[i-2], nums[i])\n    \n    # return min(dp[-1], dp[-2])\n    return dp[-1]\n"
  ],
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ]
}