language: py
name: HumanEval_12_longest
results:
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if not strings:\n        return None\n    if len(strings) == 1:\n    \
    \    return strings[0]\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if not strings:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n\
    \        return strings[0]\n    longest_string = strings[0]\n    for string in\
    \ strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if not strings:\n        return None\n    if len(strings) == 1:\n    \
    \    return strings[0]\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    else:\n        return\
    \ max(strings, key=len)\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if not strings:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if not strings:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n\
    \        return strings[0]\n    longest_string = strings[0]\n    for string in\
    \ strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if not strings:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n\
    \        return strings[0]\n    longest_string = strings[0]\n    for string in\
    \ strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if not strings:\n        return None\n    if len(strings) == 1:\n    \
    \    return strings[0]\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n\
    \    for string in strings:\n        if len(string) > len(longest_string):\n \
    \           longest_string = string\n    return longest_string\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
- exit_code: 0
  program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a',\
    \ 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\
    \"\n    if len(strings) == 0:\n        return None\n    else:\n        return\
    \ max(strings, key=len)\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1661984072
