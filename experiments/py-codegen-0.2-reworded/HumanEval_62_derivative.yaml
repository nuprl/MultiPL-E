name: HumanEval_62_derivative
language: py
prompt: "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n\
  \    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
  \ xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
  \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
  \ 2, 3])\n    [2, 6]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12,\
  \ 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1])\
  \ == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert\
  \ candidate([1]) == []\n\ndef test_check():\n    check(derivative)\n\ntest_check()\n"
completions: ["    result = [0] * len(xs)\n    for i in range(1, len(xs)):\n     \
    \   result[i] = result[i - 1] + xs[i]\n    return result\n", "    result = [0]\
    \ * len(xs)\n    for i in range(1, len(xs)):\n        result[i] = result[i - 1]\
    \ + xs[i]\n    return result\n", "    result = []\n    for i in range(len(xs)):\n\
    \        result.append(xs[i + 1] * i)\n    return result\n", "    return [0] +\
    \ [i * x for i, x in enumerate(xs[1:])]\n", "    return [x * (i + 1) for i, x\
    \ in enumerate(xs[:-1])]\n", "    if len(xs) == 0:\n        return []\n    if\
    \ len(xs) == 1:\n        return [0]\n    return [xs[i] for i in range(len(xs)\
    \ - 1)]\n", "    result = [0] * len(xs)\n    for i in range(len(xs) - 1):\n  \
    \      result[i] = result[i + 1] + xs[i + 1]\n    return result\n", "    return\
    \ [0] + [i * xs[i] for i in range(1, len(xs))]\n", "    if len(xs) == 1:\n   \
    \     return [0]\n    return [xs[i] for i in range(1, len(xs))]\n", "    n = len(xs)\n\
    \    d = [0] * n\n    d[0] = 1\n    for i in range(1, n):\n        d[i] = d[i\
    \ - 1] * (i + 1)\n    for i in range(n - 1, -1, -1):\n        d[i] = d[i] * i\n\
    \    return d\n", "    result = [0] * len(xs)\n    for i in range(len(xs) - 1):\n\
    \        result[i] = (i + 1) * xs[i + 1]\n    result[-1] = xs[-1]\n    return\
    \ result\n", "    n = len(xs)\n    if n == 1:\n        return [0]\n    return\
    \ [i for i in range(n - 1)]\n", "    return [x * (i + 1) for i, x in enumerate(xs[::-1])]\n",
  "    n = len(xs)\n    if n == 1:\n        return [0]\n    return [i for i in range(n\
    \ - 1)]\n", "    result = []\n    for i in range(len(xs)):\n        result.append(xs[i+1]\
    \ - xs[i])\n    return result\n", "    result = [0] * len(xs)\n    for i in range(1,\
    \ len(xs)):\n        result[i] = result[i-1] + xs[i]\n    return result\n", " \
    \   if len(xs) == 0:\n        return []\n    else:\n        return [xs[i] for\
    \ i in range(1, len(xs))] + [0]\n", "    result = []\n    for i in range(len(xs)\
    \ - 1):\n        result.append(xs[i + 1] - xs[i])\n    return result\n", "   \
    \ if len(xs) < 2:\n        return []\n    else:\n        return [xs[i] for i in\
    \ range(len(xs) - 1)]\n", "    result = []\n    for i in range(len(xs)):\n   \
    \     result.append(i * xs[i])\n    return result\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
