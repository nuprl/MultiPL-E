{
  "language": "py",
  "name": "HumanEval_25_factorize",
  "results": [
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [2, 5]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 3]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 5]\n    if n == 21:\n        return [3, 3, 7]\n    if n == 22:\n        return [2, 2, 11]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 13]\n    if n == 27:\n        return [3, 3, 3, 7]\n    if n == 28:\n        return [2, 2, 2, 7]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2, 2, 2, 2, 2]\n    if n == 33:\n        return [3, 3, 3]\n    if n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpgspptbcf.py\", line 80\n    if n\n        ^\nSyntaxError: invalid syntax\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2381lcj.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpq2381lcj.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpq2381lcj.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpooatgdhu.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpooatgdhu.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpooatgdhu.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            factors.append(2)\n            n = 3 * n + 1\n    factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzg73htlu.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpzg73htlu.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpzg73htlu.py\", line 25, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl6ukhfit.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpl6ukhfit.py\", line 43, in test_check\n    check(factorize)\n  File \"/tmp/tmpl6ukhfit.py\", line 37, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        else:\n            factors.append(3)\n            n = n // 3\n    factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp53l2ynb3.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmp53l2ynb3.py\", line 36, in test_check\n    check(factorize)\n  File \"/tmp/tmp53l2ynb3.py\", line 26, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        else:\n            factors.append(3)\n            n = n / 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp04rufxw0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp04rufxw0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmp04rufxw0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    factors.append(2)\n    while n % 3 == 0:\n        factors.append(3)\n        n = n // 3\n    while n % 5 == 0:\n        factors.append(5)\n        n = n // 5\n    while n % 7 == 0:\n        factors.append(7)\n        n = n // 7\n    while n % 11 == 0:\n        factors.append(11)\n        n = n // 11\n    while n % 13 == 0:\n        factors.append(13)\n        n = n // 13\n    while n % 17 == 0:\n        factors.append(17)\n        n = n // 17\n    while n % 19 == 0:\n        factors.append(19)\n        n = n // 19\n    while n % 23 == 0:\n        factors.append(23)\n        n = n // 23\n    while n % 29 == 0:\n        factors.append(29)\n        n = n // 29\n    while n % 31 == 0:\n        factors.append(31)\n        n = n // 31\n    while n % 37 == 0:\n        factors.append(37)\n        n = n // 37\n    while n % 41 == 0:\n        factors.append(41)\n        n = n // 41\n    while n % 43 == 0:\n        factors.append(43)\n        n = n // 43\n    while n % 47 == 0:\n        factors.append(47)\n        n = n // 47\n    while n % 53 == 0:\n        factors.append(53)\n        n = n // 53\n    while n % 59 == 0:\n        factors.append(59)\n        n = n // 59\n    while n % 61 == 0:\n        factors.append(61)\n        n = n // 61\n    while n % 67 == 0:\n        factors.append(67)\n        n = n // 67\n    while n % 71 == 0:\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "  File \"/tmp/tmpt1wrx98f.py\", line 77\n    def check(candidate):\nIndentationError: expected an indented block\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    factors.append(2)\n    while n % 3 == 0:\n        factors.append(3)\n        n /= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n /= 5\n    while n % 7 == 0:\n        factors.append(7)\n        n /= 7\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgq0e9czo.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpgq0e9czo.py\", line 45, in test_check\n    check(factorize)\n  File \"/tmp/tmpgq0e9czo.py\", line 35, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6ssgqke2.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp6ssgqke2.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmp6ssgqke2.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        else:\n            factors.append(3)\n            n = n // 3\n    factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6xf7hr4t.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp6xf7hr4t.py\", line 38, in test_check\n    check(factorize)\n  File \"/tmp/tmp6xf7hr4t.py\", line 28, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n = n / 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n = n / 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpux58rmaf.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpux58rmaf.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpux58rmaf.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            if n % 3 == 0:\n                n /= 3\n                factors.append(3)\n            else:\n                if n % 5 == 0:\n                    n /= 5\n                    factors.append(5)\n                else:\n                    if n % 7 == 0:\n                        n /= 7\n                        factors.append(7)\n                    else:\n                        factors.append(n)\n                        n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphkgyxwp6.py\", line 49, in <module>\n    test_check()\n  File \"/tmp/tmphkgyxwp6.py\", line 47, in test_check\n    check(factorize)\n  File \"/tmp/tmphkgyxwp6.py\", line 41, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppvfuxymo.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmppvfuxymo.py\", line 37, in test_check\n    check(factorize)\n  File \"/tmp/tmppvfuxymo.py\", line 30, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 31:\n        return [31]\n    if n == 32\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpro_0qo2_.py\", line 76\n    if n == 32\n              ^\nSyntaxError: expected ':'\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8dspq95v.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp8dspq95v.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp8dspq95v.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa2aui9ay.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpa2aui9ay.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpa2aui9ay.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        else:\n            factors.append(3)\n            n = n // 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdxa9pkhy.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpdxa9pkhy.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpdxa9pkhy.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmps_qute9v.py\", line 77\n    return [2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    factors.append(2)\n    while n % 3 == 0:\n        factors.append(3)\n        n = n // 3\n    factors.append(3)\n    while n % 5 == 0:\n        factors.append(5)\n        n = n // 5\n    factors.append(5)\n    while n % 7 == 0:\n        factors.append(7)\n        n = n // 7\n    factors.append(7)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn5fbx2ch.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpn5fbx2ch.py\", line 48, in test_check\n    check(factorize)\n  File \"/tmp/tmpn5fbx2ch.py\", line 38, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmaphcytn.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpmaphcytn.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpmaphcytn.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc7ikedkz.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpc7ikedkz.py\", line 37, in test_check\n    check(factorize)\n  File \"/tmp/tmpc7ikedkz.py\", line 30, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": -1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            n = 3\n            while n <= n // 2:\n                if n % 2 == 0:\n                    n /= 2\n                    factors.append(2)\n                else:\n                    n = n + 2\n                    factors.append(3)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863112
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2, 2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp36sdjtpg.py\", line 77\n    return [2, 2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    if n == 1:\n        return factors\n    factors.append(3)\n    while n % 3 == 0:\n        factors.append(3)\n        n /= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n /= 5\n    if n == 1:\n        return factors\n    factors.append(7)\n    while n % 7 == 0:\n        factors.append(7)\n        n /= 7\n    if n == 1:\n        return factors\n    factors.append(11)\n    while n % 11 == 0:\n        factors.append(11)\n        n /= 11\n    if n == 1:\n        return factors\n    factors.append(13)\n    while n % 13 == 0:\n        factors.append(13)\n        n /= 13\n    if n == 1:\n        return factors\n    factors.append(17)\n    while n % 17 == 0:\n        factors.append(17)\n        n /= 17\n    if n == 1:\n        return factors\n    factors.append(19)\n    while n % 19 == 0:\n        factors.append(19)\n        n /= 19\n    if n == 1:\n        return factors\n    factors.append(23)\n    while n % 23 == 0:\n        factors.append(23)\n        n /= 23\n    if n == 1:\n        return factors\n    factors.append(29)\n    while n % 29 == 0:\n        factors.append(29)\n        n /= 29\n    if n == 1:\n        return factors\n    factors.append(31)\n    while n % 31 == 0:\n        factors.append(31)\n        n /= 31\n    if n == 1:\n        return factors\n    factors.append(37)\n    while n % 37 == 0:\n        factors.append(37)\n        n /= 37\n    if n == 1:\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "  File \"/tmp/tmploxs7j44.py\", line 85\n    def check(candidate):\nIndentationError: expected an indented block after 'if' statement on line 83\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjnfjujja.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpjnfjujja.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpjnfjujja.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmps_qute9v.py\", line 77\n    return [2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqlzk_zcv.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpqlzk_zcv.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpqlzk_zcv.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": -1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            n = 3\n            while n <= n // 2:\n                if n % 2 == 0:\n                    n /= 2\n                    factors.append(2)\n                else:\n                    n = n + 2\n                    factors.append(3)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863112
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2, 2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpcm64ayul.py\", line 77\n    return [2, 2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppvfuxymo.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmppvfuxymo.py\", line 37, in test_check\n    check(factorize)\n  File \"/tmp/tmppvfuxymo.py\", line 30, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        else:\n            factors.append(3)\n            n = n // 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdxa9pkhy.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpdxa9pkhy.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpdxa9pkhy.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n = n / 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n = n / 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpux58rmaf.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpux58rmaf.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpux58rmaf.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw34sc8a2.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpw34sc8a2.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpw34sc8a2.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmps_qute9v.py\", line 77\n    return [2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmaphcytn.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpmaphcytn.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpmaphcytn.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n = n // 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n = n // 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzu8le7y7.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpzu8le7y7.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpzu8le7y7.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    if n == 1:\n        return factors\n    factors.append(3)\n    while n % 3 == 0:\n        factors.append(3)\n        n /= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n /= 5\n    if n == 1:\n        return factors\n    factors.append(7)\n    while n % 7 == 0:\n        factors.append(7)\n        n /= 7\n    if n == 1:\n        return factors\n    factors.append(11)\n    while n % 11 == 0:\n        factors.append(11)\n        n /= 11\n    if n == 1:\n        return factors\n    factors.append(13)\n    while n % 13 == 0:\n        factors.append(13)\n        n /= 13\n    if n == 1:\n        return factors\n    factors.append(17)\n    while n % 17 == 0:\n        factors.append(17)\n        n /= 17\n    if n == 1:\n        return factors\n    factors.append(19)\n    while n % 19 == 0:\n        factors.append(19)\n        n /= 19\n    if n == 1:\n        return factors\n    factors.append(23)\n    while n % 23 == 0:\n        factors.append(23)\n        n /= 23\n    if n == 1:\n        return factors\n    factors.append(29)\n    while n % 29 == 0:\n        factors.append(29)\n        n /= 29\n    if n == 1:\n        return factors\n    factors.append(31)\n    while n % 31 == 0:\n        factors.append(31)\n        n /= 31\n    if n == 1:\n        return factors\n    factors.append(37)\n    while n % 37 == 0:\n        factors.append(37)\n        n /= 37\n    if n == 1\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp81zm8gho.py\", line 83\n    if n == 1\n             ^\nSyntaxError: expected ':'\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 0,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl6ukhfit.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpl6ukhfit.py\", line 43, in test_check\n    check(factorize)\n  File \"/tmp/tmpl6ukhfit.py\", line 37, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 31:\n        return [31]\n    if n == 32\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpro_0qo2_.py\", line 76\n    if n == 32\n              ^\nSyntaxError: expected ':'\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        else:\n            factors.append(3)\n            n = n // 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdxa9pkhy.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpdxa9pkhy.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpdxa9pkhy.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": -1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            n = 3\n            while n <= n // 2:\n                if n % 2 == 0:\n                    n /= 2\n                    factors.append(2)\n                else:\n                    n = n + 2\n                    factors.append(3)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863112
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjnfjujja.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpjnfjujja.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpjnfjujja.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    while n % 3 == 0:\n        factors.append(3)\n        n /= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n /= 5\n    while n % 7 == 0:\n        factors.append(7)\n        n /= 7\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiqtpp15m.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpiqtpp15m.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpiqtpp15m.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8dspq95v.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp8dspq95v.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp8dspq95v.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6ssgqke2.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp6ssgqke2.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmp6ssgqke2.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n = n / 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n = n / 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpux58rmaf.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpux58rmaf.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpux58rmaf.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": -1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            n = 3\n            while n <= n // 2:\n                if n % 2 == 0:\n                    n /= 2\n                    factors.append(2)\n                else:\n                    n = n + 2\n                    factors.append(3)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863112
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n = n / 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n = n / 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpux58rmaf.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpux58rmaf.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpux58rmaf.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8dspq95v.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp8dspq95v.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp8dspq95v.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmaphcytn.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpmaphcytn.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpmaphcytn.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpooatgdhu.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpooatgdhu.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpooatgdhu.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpooatgdhu.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpooatgdhu.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpooatgdhu.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmps_qute9v.py\", line 77\n    return [2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2, 2, 2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpfp35nj3p.py\", line 77\n    return [2, 2, 2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    while n % 3 == 0:\n        factors.append(3)\n        n /= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n /= 5\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpskgueu_6.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpskgueu_6.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpskgueu_6.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpooatgdhu.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpooatgdhu.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpooatgdhu.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8dspq95v.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp8dspq95v.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp8dspq95v.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmaphcytn.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpmaphcytn.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpmaphcytn.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6ssgqke2.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp6ssgqke2.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmp6ssgqke2.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmps_qute9v.py\", line 77\n    return [2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzpov2fey.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpzpov2fey.py\", line 38, in test_check\n    check(factorize)\n  File \"/tmp/tmpzpov2fey.py\", line 28, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdde_g0uz.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpdde_g0uz.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpdde_g0uz.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    while n % 3 == 0:\n        factors.append(3)\n        n /= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n /= 5\n    while n % 7 == 0:\n        factors.append(7)\n        n /= 7\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpiqtpp15m.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpiqtpp15m.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpiqtpp15m.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    if n % 3 == 0:\n        return [3] + factorize(n // 3)\n    if n % 5 == 0:\n        return [5] + factorize(n // 5)\n    if n % 7 == 0:\n        return [7] + factorize(n // 7)\n    if n % 11 == 0:\n        return [11] + factorize(n // 11)\n    if n % 13 == 0:\n        return [13] + factorize(n // 13)\n    if n % 17 == 0:\n        return [17] + factorize(n // 17)\n    if n % 19 == 0:\n        return [19] + factorize(n // 19)\n    if n % 23 == 0:\n        return [23] + factorize(n // 23)\n    if n % 29 == 0:\n        return [29] + factorize(n // 29)\n    if n % 31 == 0:\n        return [31] + factorize(n // 31)\n    if n % 37 == 0:\n        return [37] + factorize(n // 37)\n    if n % 41 == 0:\n        return [41] + factorize(n // 41)\n    if n % 43 == 0:\n        return [43] + factorize(n // 43)\n    if n % 47 == 0:\n        return [47] + factorize(n // 47)\n    if n % 53 == 0:\n        return [53] + factorize(n // 53)\n    if n % 59 == 0:\n        return [59] + factorize(n // 59)\n    if n % 61 == 0:\n        return [61] + factorize(n // 61)\n    if n % 67 == 0:\n        return [67] + factorize(n // 67)\n    if n % 71 == 0:\n        return [71] + factorize(n // 71)\n    if n % 73 == 0:\n        return [73\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpyb09o8e4.py\", line 61\n    return [73\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8dspq95v.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp8dspq95v.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp8dspq95v.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            break\n    factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz0qcm7j.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpxz0qcm7j.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpxz0qcm7j.py\", line 31, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    while n % 3 == 0:\n        factors.append(3)\n        n /= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n /= 5\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpskgueu_6.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpskgueu_6.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpskgueu_6.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 0,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    if n == 1:\n        return factors\n    factors.append(3)\n    while n % 3 == 0:\n        factors.append(3)\n        n /= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n /= 5\n    if n == 1:\n        return factors\n    factors.append(7)\n    while n % 7 == 0:\n        factors.append(7)\n        n /= 7\n    if n == 1:\n        return factors\n    factors.append(11)\n    while n % 11 == 0:\n        factors.append(11)\n        n /= 11\n    if n == 1:\n        return factors\n    factors.append(13)\n    while n % 13 == 0:\n        factors.append(13)\n        n /= 13\n    if n == 1:\n        return factors\n    factors.append(17)\n    while n % 17 == 0:\n        factors.append(17)\n        n /= 17\n    if n == 1:\n        return factors\n    factors.append(19)\n    while n % 19 == 0:\n        factors.append(19)\n        n /= 19\n    if n == 1:\n        return factors\n    factors.append(23)\n    while n % 23 == 0:\n        factors.append(23)\n        n /= 23\n    if n == 1:\n        return factors\n    factors.append(29)\n    while n % 29 == 0:\n        factors.append(29)\n        n /= 29\n    if n == 1:\n        return factors\n    factors.append(31)\n    while n % 31 == 0:\n        factors.append(31)\n        n /= 31\n    if n == 1:\n        return factors\n    factors.append(37)\n    while n % 37 == 0:\n        factors.append(37)\n        n /= 37\n    if n == 1\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmp81zm8gho.py\", line 83\n    if n == 1\n             ^\nSyntaxError: expected ':'\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": -1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            n = 3\n            while n <= n // 2:\n                if n % 2 == 0:\n                    n /= 2\n                    factors.append(2)\n                else:\n                    n = n + 2\n                    factors.append(3)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863112
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjnfjujja.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpjnfjujja.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpjnfjujja.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": -1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            n = 3\n            while n <= n // 2:\n                if n % 2 == 0:\n                    n /= 2\n                    factors.append(2)\n                else:\n                    n = n + 2\n                    factors.append(3)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863112
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqlzk_zcv.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpqlzk_zcv.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpqlzk_zcv.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            factors.append(2)\n            n = n - 1\n    factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnbyis0ct.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpnbyis0ct.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpnbyis0ct.py\", line 25, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp77ttpupr.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp77ttpupr.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp77ttpupr.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl6ukhfit.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpl6ukhfit.py\", line 43, in test_check\n    check(factorize)\n  File \"/tmp/tmpl6ukhfit.py\", line 37, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvhtueik3.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpvhtueik3.py\", line 43, in test_check\n    check(factorize)\n  File \"/tmp/tmpvhtueik3.py\", line 37, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [7, 2]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 31:\n        return [31]\n    if n == 32\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpimgp2sm3.py\", line 76\n    if n == 32\n              ^\nSyntaxError: expected ':'\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": -1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            n = 3\n            while n <= n // 2:\n                if n % 2 == 0:\n                    n /= 2\n                    factors.append(2)\n                else:\n                    n = n + 2\n                    factors.append(3)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863112
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    factors.append(2)\n    while n % 3 == 0:\n        factors.append(3)\n        n /= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n /= 5\n    while n % 7 == 0:\n        factors.append(7)\n        n /= 7\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe970jp75.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpe970jp75.py\", line 45, in test_check\n    check(factorize)\n  File \"/tmp/tmpe970jp75.py\", line 35, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        else:\n            factors.append(3)\n            n = n // 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdxa9pkhy.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpdxa9pkhy.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpdxa9pkhy.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        else:\n            factors.append(3)\n            n = n / 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp04rufxw0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp04rufxw0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmp04rufxw0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 31:\n        return [3, 3, 3, 3]\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmhdfm6yv.py\", line 89, in <module>\n    test_check()\n  File \"/tmp/tmpmhdfm6yv.py\", line 87, in test_check\n    check(factorize)\n  File \"/tmp/tmpmhdfm6yv.py\", line 80, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 31:\n        return [31]\n    if n == 32\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpro_0qo2_.py\", line 76\n    if n == 32\n              ^\nSyntaxError: expected ':'\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmaphcytn.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpmaphcytn.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpmaphcytn.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    while n % 3 == 0:\n        factors.append(3)\n        n /= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n /= 5\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqdbn9wgs.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpqdbn9wgs.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpqdbn9wgs.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": -1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            n = 3\n            while n <= n // 2:\n                if n % 2 == 0:\n                    n /= 2\n                    factors.append(2)\n                else:\n                    n = n + 2\n                    factors.append(3)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863112
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6ssgqke2.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp6ssgqke2.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmp6ssgqke2.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8dspq95v.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp8dspq95v.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp8dspq95v.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpooatgdhu.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpooatgdhu.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpooatgdhu.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 31:\n        return [31]\n    if n == 32\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpro_0qo2_.py\", line 76\n    if n == 32\n              ^\nSyntaxError: expected ':'\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            if n % 3 == 0:\n                n /= 3\n                factors.append(3)\n            else:\n                if n % 5 == 0:\n                    n /= 5\n                    factors.append(5)\n                else:\n                    if n % 7 == 0:\n                        n /= 7\n                        factors.append(7)\n                    else:\n                        factors.append(n)\n                        n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphkgyxwp6.py\", line 49, in <module>\n    test_check()\n  File \"/tmp/tmphkgyxwp6.py\", line 47, in test_check\n    check(factorize)\n  File \"/tmp/tmphkgyxwp6.py\", line 41, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa2aui9ay.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpa2aui9ay.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpa2aui9ay.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa2aui9ay.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpa2aui9ay.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpa2aui9ay.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            factors.append(2)\n            n = 3*n + 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjkmyywbb.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpjkmyywbb.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpjkmyywbb.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8dspq95v.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp8dspq95v.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp8dspq95v.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2, 2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmpcm64ayul.py\", line 77\n    return [2, 2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        else:\n            factors.append(3)\n            n = n / 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp04rufxw0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp04rufxw0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmp04rufxw0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpooatgdhu.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpooatgdhu.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpooatgdhu.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpooatgdhu.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpooatgdhu.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpooatgdhu.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpooatgdhu.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpooatgdhu.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpooatgdhu.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjnfjujja.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpjnfjujja.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpjnfjujja.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxvx31ebo.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxvx31ebo.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpxvx31ebo.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmps_qute9v.py\", line 77\n    return [2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8dspq95v.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp8dspq95v.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp8dspq95v.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            if n % 3 == 0:\n                n /= 3\n                factors.append(3)\n            elif n % 5 == 0:\n                n /= 5\n                factors.append(5)\n            else:\n                factors.append(n)\n                n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprep5k34z.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmprep5k34z.py\", line 42, in test_check\n    check(factorize)\n  File \"/tmp/tmprep5k34z.py\", line 35, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfrvtp_az.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpfrvtp_az.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpfrvtp_az.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw34sc8a2.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpw34sc8a2.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpw34sc8a2.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    factors.append(n)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9f8ai2d7.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmp9f8ai2d7.py\", line 36, in test_check\n    check(factorize)\n  File \"/tmp/tmp9f8ai2d7.py\", line 26, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662891956
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n = n // 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n = n // 5\n        else:\n            factors.append(n)\n            n = n - 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzu8le7y7.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpzu8le7y7.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpzu8le7y7.py\", line 34, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfs1hgv0h.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfs1hgv0h.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpfs1hgv0h.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxc9sxtra.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpxc9sxtra.py\", line 44, in test_check\n    check(factorize)\n  File \"/tmp/tmpxc9sxtra.py\", line 38, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7efiu3q3.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmp7efiu3q3.py\", line 43, in test_check\n    check(factorize)\n  File \"/tmp/tmp7efiu3q3.py\", line 37, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662891956
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n /= 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n /= 5\n        elif n % 7 == 0:\n            factors.append(7)\n            n /= 7\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwewprj89.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmpwewprj89.py\", line 46, in test_check\n    check(factorize)\n  File \"/tmp/tmpwewprj89.py\", line 40, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662891956
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpooatgdhu.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpooatgdhu.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpooatgdhu.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8dspq95v.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp8dspq95v.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp8dspq95v.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n /= 2\n        else:\n            factors.append(3)\n            n /= 3\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy__8_7c0.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpy__8_7c0.py\", line 35, in test_check\n    check(factorize)\n  File \"/tmp/tmpy__8_7c0.py\", line 28, in check\n    assert candidate(57) == [3, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [2, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3]\n    if n == 10:\n        return [5, 2]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 2, 2]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [3, 3, 3]\n    if n == 22:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 27:\n        return [3, 3, 3]\n    if n == 28:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 5, 5]\n    if n == 31:\n        return [31]\n    if n == 32:\n        return [2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "SyntaxError",
      "stderr": "  File \"/tmp/tmps_qute9v.py\", line 77\n    return [2\n           ^\nSyntaxError: '[' was never closed\n",
      "stdout": "",
      "timestamp": 1662863097
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        elif n % 3 == 0:\n            n /= 3\n            factors.append(3)\n        elif n % 5 == 0:\n            n /= 5\n            factors.append(5)\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpooatgdhu.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpooatgdhu.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpooatgdhu.py\", line 35, in check\n    assert candidate(3249) == [3, 3, 19, 19]\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984051
    },
    {
      "exit_code": -1,
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            factors.append(2)\n        else:\n            n = 3\n            while n <= n // 2:\n                if n % 2 == 0:\n                    n /= 2\n                    factors.append(2)\n                else:\n                    n = n + 2\n                    factors.append(3)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1662863112
    }
  ]
}