language: py
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if len(l) == 2:\n        return l[0] <= l[1]\n\
    \    if l[0] < l[1]:\n        return monotonic(l[1:])\n    return monotonic(l[:-1])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpegj4dpdl.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpegj4dpdl.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpegj4dpdl.py\", line 24,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    for\
    \ i in range(1, len(l) - 1):\n        if l[i] < l[i - 1] and l[i] < l[i + 1]:\n\
    \            return True\n        if l[i] > l[i - 1] and l[i] > l[i + 1]:\n  \
    \          return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl5cyv3k7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpl5cyv3k7.py\", line 34,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpl5cyv3k7.py\", line 27,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    for\
    \ i in range(1, len(l) - 1):\n        if l[i] < l[i - 1] and l[i] < l[i + 1]:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjmnq8qc.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwjmnq8qc.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpwjmnq8qc.py\", line 25,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if len(l) == 2:\n        return l[0] <= l[1]\n\
    \    if l[0] > l[1]:\n        return False\n    for i in range(1, len(l) - 1):\n\
    \        if l[i] < l[i - 1] and l[i] < l[i + 1]:\n            return False\n \
    \   return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5enqakic.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5enqakic.py\", line 34,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp5enqakic.py\", line 27,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    for\
    \ i in range(1, len(l) - 1):\n        if l[i] < l[i - 1] and l[i] < l[i + 1]:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjmnq8qc.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwjmnq8qc.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpwjmnq8qc.py\", line 25,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        return True\n    if\
    \ l[0] > l[1]:\n        return False\n    return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9cg4mot.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmps9cg4mot.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmps9cg4mot.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        return True\n    if\
    \ l[0] > l[1]:\n        return False\n    return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9cg4mot.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmps9cg4mot.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmps9cg4mot.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if len(l) == 2:\n        return l[0] <= l[1]\n\
    \    if l[0] > l[1]:\n        return False\n    return monotonic(l[1:])\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9mjt25bb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9mjt25bb.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp9mjt25bb.py\", line 24,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    for\
    \ i in range(1, len(l) - 1):\n        if l[i] < l[i - 1] and l[i] < l[i + 1]:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjmnq8qc.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwjmnq8qc.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpwjmnq8qc.py\", line 25,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    for\
    \ i in range(1, len(l) - 1):\n        if l[i] < l[i - 1] and l[i] < l[i + 1]:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjmnq8qc.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwjmnq8qc.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpwjmnq8qc.py\", line 25,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    for\
    \ i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiaign5f8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpiaign5f8.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpiaign5f8.py\", line 25,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return\
    \ all(l[i] <= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeudqzluh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpeudqzluh.py\", line 25,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpeudqzluh.py\", line 18,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    for\
    \ i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiaign5f8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpiaign5f8.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpiaign5f8.py\", line 25,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        return True\n    if\
    \ l[-1] < l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp441s8pky.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp441s8pky.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp441s8pky.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        return True\n    if\
    \ l[0] > l[1]:\n        return False\n    return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9cg4mot.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmps9cg4mot.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmps9cg4mot.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if len(l) == 2:\n        return l[0] <= l[1]\n\
    \    if l[0] > l[1]:\n        return False\n    return monotonic(l[1:])\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9mjt25bb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9mjt25bb.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp9mjt25bb.py\", line 24,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        return True\n    if\
    \ l[0] > l[1]:\n        return False\n    return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9cg4mot.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmps9cg4mot.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmps9cg4mot.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    for\
    \ i in range(1, len(l) - 1):\n        if l[i] < l[i - 1] and l[i] < l[i + 1]:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjmnq8qc.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwjmnq8qc.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpwjmnq8qc.py\", line 25,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        return True\n    if\
    \ l[0] > l[1]:\n        return False\n    return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9cg4mot.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmps9cg4mot.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmps9cg4mot.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    for\
    \ i in range(1, len(l) - 1):\n        if l[i] < l[i - 1] and l[i] < l[i + 1]:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjmnq8qc.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwjmnq8qc.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpwjmnq8qc.py\", line 25,\
    \ in check\n    assert candidate([4, 1, 0, -10]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
