language: py
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict.keys():\n        if not isinstance(key, str):\n         \
    \   return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4os6dhcv.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4os6dhcv.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4os6dhcv.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    for key in dict:\n        if not\
    \ isinstance(key, str):\n            return False\n        if key.isupper() and\
    \ key != key.lower():\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9wpuy15i.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9wpuy15i.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9wpuy15i.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key != key.lower():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpk1blfv1l.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.islower() and key.isupper():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0dsmiie.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpq0dsmiie.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq0dsmiie.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict.keys():\n        if not isinstance(key, str):\n \
    \           return False\n        if key.isupper():\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp55wifq2f.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp55wifq2f.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp55wifq2f.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.islower() or key.isupper():\n            continue\n  \
    \      return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8i2pevy.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpp8i2pevy.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpp8i2pevy.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key != key.lower():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpk1blfv1l.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key.islower():\n            return\
    \ False\n        if key.islower() and key.isupper():\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpcaf94sli.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict.keys():\n        if not isinstance(key, str):\n         \
    \   return False\n        if key.isupper() and key != key.lower():\n         \
    \   return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplcuwjbel.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmplcuwjbel.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmplcuwjbel.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key.islower():\n            return False\n\
    \        if key.islower() and key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl346lxm2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpl346lxm2.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpl346lxm2.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    for key in dict:\n        if not\
    \ isinstance(key, str):\n            return False\n        if key.isupper():\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4e7hwvt7.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4e7hwvt7.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4e7hwvt7.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key.islower():\n            return\
    \ False\n        if key.islower() and key.isupper():\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpcaf94sli.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key != key.lower():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpk1blfv1l.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key != key.lower():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpk1blfv1l.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.islower() and key.isupper():\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyhq3dpwx.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpyhq3dpwx.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpyhq3dpwx.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key.islower():\n            return False\n\
    \        if key.islower() and key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl346lxm2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpl346lxm2.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpl346lxm2.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key.islower():\n            return False\n\
    \        if key.islower() and key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl346lxm2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpl346lxm2.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpl346lxm2.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key.islower():\n            return\
    \ False\n        if key.islower() and key.isupper():\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpcaf94sli.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    for key in dict:\n        if not\
    \ isinstance(key, str):\n            return False\n        if key.isupper():\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4e7hwvt7.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4e7hwvt7.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4e7hwvt7.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key != key.lower():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpk1blfv1l.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key != key.lower():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpk1blfv1l.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key != key.lower():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpk1blfv1l.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.islower() and key.isupper():\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyhq3dpwx.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpyhq3dpwx.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpyhq3dpwx.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key != key.lower():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpk1blfv1l.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk1blfv1l.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key.islower():\n            return False\n\
    \        if key.islower() and key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl346lxm2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpl346lxm2.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpl346lxm2.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key.islower():\n            return\
    \ False\n        if key.islower() and key.isupper():\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpcaf94sli.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key.islower():\n            return\
    \ False\n        if key.islower() and key.isupper():\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpcaf94sli.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper() and key.islower():\n            return False\n\
    \        if key.islower() and key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl346lxm2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpl346lxm2.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpl346lxm2.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict.keys():\n        if not isinstance(key, str):\n         \
    \   return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4os6dhcv.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4os6dhcv.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4os6dhcv.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.islower() and key.isupper():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0dsmiie.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpq0dsmiie.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq0dsmiie.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key.islower():\n            return\
    \ False\n        if key.islower() and key.isupper():\n            return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpcaf94sli.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcaf94sli.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict.keys():\n        if not isinstance(key, str):\n         \
    \   return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4os6dhcv.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4os6dhcv.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4os6dhcv.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    for key in dict:\n        if not\
    \ isinstance(key, str):\n            return False\n        if key.isupper() and\
    \ key != key.lower():\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9wpuy15i.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9wpuy15i.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9wpuy15i.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.islower() and key.isupper():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0dsmiie.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpq0dsmiie.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq0dsmiie.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper() and key != key.lower():\n        \
    \    return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpir16btom.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpir16btom.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpir16btom.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1662863984
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if not dict:\n        return False\n\
    \    for key in dict:\n        if not isinstance(key, str):\n            return\
    \ False\n        if key.isupper():\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi8o1wrqe.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi8o1wrqe.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>>\
    \ check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n   \
    \ False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"\
    })\n    False\n    >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"})\n    False\n    >>> check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n    True\n    \"\"\"\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if key.isupper():\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpi_58v_ij.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi_58v_ij.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1661984066
