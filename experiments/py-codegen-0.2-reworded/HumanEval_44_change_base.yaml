name: HumanEval_44_change_base
language: py
prompt: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base\
  \ of input number x to base.\n    return string representation after the conversion.\n\
  \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>>\
  \ change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\
  \n"
tests: "def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
  \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
  \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2)\
  \ == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n\
  \    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert\
  \ candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
  \    check(change_base)\n\ntest_check()\n"
completions: ["    if base < 2:\n        raise ValueError(\"Base must be greater than\
    \ 1\")\n    if base > 10:\n        raise ValueError(\"Base must be less than 10\"\
    )\n    if x < 0:\n        raise ValueError(\"Input must be a positive number\"\
    )\n    if x == 0:\n        return \"0\"\n    #                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       ", "    if base < 2:\n        raise ValueError(\"Base must be greater\
    \ than 1.\")\n    if base > 36:\n        raise ValueError(\"Base must be less\
    \ than 36.\")\n    if x < 0:\n        raise ValueError(\"Input number must be\
    \ non-negative.\")\n    if x == 0:\n        return '0'\n    if base == 10:\n \
    \       return str(x)\n    return str(x).zfill(int(math.log(x, base)) + 1)\n\n",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n \
    \   if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x < base:\n\
    \        return str(x)\n    else:\n        return change_base(x // base, base)\
    \ + str(x % base)\n\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 10:\n        raise ValueError(\"Base must\
    \ be less than 10\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ a positive number\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    return str(x).zfill(int(math.log(x, base)) + 1)\n\n",
  "    if base < 2:\n        raise ValueError(\"Base should be greater than 1.\")\n\
    \    if base > 36:\n        raise ValueError(\"Base should be less than 36.\"\
    )\n    if x < 0:\n        raise ValueError(\"Input should be positive.\")\n  \
    \  if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return\
    \ bin(x)[2:].rjust(3, '0')\n    if base == 4:\n        return bin(x)[2:].rjust(4,\
    \ '0')\n    if base == 5:\n        return bin(x)[2:].rjust(5, '0')\n    if base\
    \ == 6:\n        return bin(x)[2:].rjust(6, '0')\n    if base == 7:\n        return\
    \ bin(x)[2:].rjust(7, '0')\n    if base == 8:\n        return bin(x)[2:].rjust(8,\
    \ '0')\n    if base == 9:\n        return bin(x)[2:].rjust(9, '0')\n    if base\
    \ == 16:\n        return hex(x)[2:].rjust(8, '0')\n    if base == 17:\n      \
    \  return hex(x)[2:].rjust(9, '0')\n    if base == 18:\n        return hex(x)[2:].rjust(10,\
    \ '0')\n    if base == 19:\n        return hex(x)[2:].rjust(11, '0')\n    if base\
    \ == 20:\n        return hex(x)[2:].rjust(12, '0')\n    if base == 21:\n     \
    \   return hex(x)[2:].rjust(13, '0')\n    if base == 22:\n        return hex(x)[2:].rjust(14,\
    \ '0')\n    if base == 23:\n        return hex(x)[2:].rjust(15, '0')\n    if base\
    \ == 24:\n        return hex(x)[2:].rjust(16, '0')\n    if base == 25:\n     \
    \   return hex(", "    if base < 2:\n        raise ValueError('base must be greater\
    \ than 1')\n    if base > 10:\n        raise ValueError('base must be less than\
    \ 11')\n    if x < 0:\n        raise ValueError('x must be positive')\n    if\
    \ x == 0:\n        return '0'\n    if x < base:\n        return '0' + change_base(x,\
    \ base)\n    if x % base == 0:\n        return change_base(x // base, base)\n\
    \    return change_base(x // base, base) + change_base(x % base, base)\n\n", " \
    \   if base < 2:\n        raise ValueError(\"Base should be greater than 1\")\n\
    \    if base > 36:\n        raise ValueError(\"Base should be less than 36\")\n\
    \    if x < 0:\n        raise ValueError(\"Input should be positive\")\n    if\
    \ x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n \
    \   if base == 2:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 3:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 4:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 6:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 7:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 9:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i else \"0\" for i in\
    \ bin(x)[2:]])\n    if base == 17:\n        return \"\".join([\"1\" if i else\
    \ \"0\" for i in bin(x)[2:]])\n    if base == 18:\n        return \"\".join([\"\
    1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 19:\n        return\
    \ \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 20:\n\
    \        return \"\".join([\"1\" if i else", "    if base < 2:\n        raise\
    \ ValueError(\"Base must be greater than 1.\")\n    if base > 36:\n        raise\
    \ ValueError(\"Base must be less than 36.\")\n    if x < 0:\n        raise ValueError(\"\
    Input number must be positive.\")\n    if x == 0:\n        return '0'\n    if\
    \ base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return trin(x)[2:]\n\
    \    if base == 4:\n        return quad(x)[2:]\n    if base == 5:\n        return\
    \ pent(x)[2:]\n    if base == 6:\n        return hex(x)[2:]\n    if base == 7:\n\
    \        return hept(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n  \
    \  if base == 9:\n        return non(x)[2:]\n    if base == 10:\n        return\
    \ dec(x)[2:]\n    if base == 11:\n        return bin(x)[2:]\n    if base == 12:\n\
    \        return trin(x)[2:]\n    if base == 13:\n        return quad(x)[2:]\n\
    \    if base == 14:\n        return pent(x)[2:]\n    if base == 15:\n        return\
    \ hex(x)[2:]\n    if base == 16:\n        return hept(x)[2:]\n    if base == 17:\n\
    \        return oct(x)[2:]\n    if base == 18:\n        return non(x)[2:]\n  \
    \  if base == 19:\n        return dec(x)[2:]\n    if base == 20:\n        return\
    \ bin(x)[2:]\n    if base == 21:\n        return trin(x)[2:]\n    if base == 22:\n\
    \        return quad(x)[2:]\n    if base == 23:\n        return pent(x)[2:]\n\
    \    if base == 24:\n        return hex(x)[2:]\n    if base == 25:\n        return\
    \ hept(x)[2:]\n    if base == 26:\n        return oct(x)[2:]\n    if base == 27:\n\
    \        return non(x)[2:]\n    if base == 28:\n        return dec(x)[2:]\n  \
    \  if", "    if base < 2:\n        raise ValueError(\"Base must be greater than\
    \ 1.\")\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x ==\
    \ 0:\n        return '0'\n    if x < base:\n        return str(x)\n    else:\n\
    \        return change_base(x // base, base) + str(x % base)\n", "    if base\
    \ < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base\
    \ > 36:\n        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n\
    \        raise ValueError(\"Input must be a positive number\")\n    if x == 0:\n\
    \        return \"0\"\n    if base == 10:\n        return str(x)\n    if x < base:\n\
    \        return \"0\"\n    if x % base == 0:\n        return str(x // base)\n\
    \    else:\n        return str(x // base) + str(x % base)\n<|endoftext|><|python|>#\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ", "    if base < 2:\n\
    \        raise ValueError(\"Base should be greater than 1.\")\n    if base > 36:\n\
    \        raise ValueError(\"Base should be less than 36.\")\n    if x < 0:\n \
    \       raise ValueError(\"Input should be a positive number.\")\n    if x ==\
    \ 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n    if\
    \ base == 2:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 3:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 4:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 6:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 7:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 9:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i else \"0\" for i in\
    \ bin(x)[2:]])\n    if base == 17:\n        return \"\".join([\"1\" if i else\
    \ \"0\" for i in bin(x)[2:]])\n    if base == 18:\n        return \"\".join([\"\
    1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 19:\n        return\
    \ \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 20:\n\
    \        return \"\".join([\"1\" if", "    if base < 2:\n        raise ValueError(\"\
    Base should be greater than 1.\")\n    if base > 10:\n        raise ValueError(\"\
    Base should be less than 10.\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ number should be positive.\")\n    if x == 0:\n        return \"0\"\n    if\
    \ base == 10:\n        return str(x)\n    return str(x).zfill(int(math.log(x,\
    \ base)) + 1)\n\n", "    if base < 2:\n        raise ValueError(\"Base should\
    \ be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base should\
    \ be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input should\
    \ be a positive number.\")\n    if x == 0:\n        return '0'\n    if x == 1:\n\
    \        return '1'\n    if x == 2:\n        return '10'\n    if x == 3:\n   \
    \     return '11'\n    if x == 4:\n        return '100'\n    if x == 5:\n    \
    \    return '101'\n    if x == 6:\n        return '110'\n    if x == 7:\n    \
    \    return '111'\n    if x == 8:\n        return '1000'\n    if x == 9:\n   \
    \     return '1001'\n    if x == 10:\n        return '1010'\n    if x == 11:\n\
    \        return '1011'\n    if x == 12:\n        return '1100'\n    if x == 13:\n\
    \        return '1101'\n    if x == 14:\n        return '1110'\n    if x == 15:\n\
    \        return '1111'\n    if x == 16:\n        return '10000'\n    if x == 17:\n\
    \        return '10001'\n    if x == 18:\n        return '10010'\n    if x ==\
    \ 19:\n        return '10011'\n    if x == 20:\n        return '10100'\n    if\
    \ x == 21:\n        return '10101'\n    if x == 22:\n        return '10110'\n\
    \    if x == 23:\n        return '10111'\n    if x == 24:\n        return '11000'\n\
    \    if x == 25:\n        return '11001'\n    if x == 26:\n        return '11010'\n\
    \    if x == 27:\n        return '11011'\n    if x == 28:\n        return '11100'\n\
    \    if x == 29:\n        return '11101'\n    if x == 30:\n        return '11110'\n\
    \    if x == 31:\n        return '11111'\n    if x == 32:\n        return '100000'\n\
    \    if x", "    if base < 2:\n        raise ValueError(\"Base should be greater\
    \ than 1\")\n    if base > 10:\n        raise ValueError(\"Base should be less\
    \ than 10\")\n    if x < 0:\n        raise ValueError(\"Input number should be\
    \ positive\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n    \
    \    return str(x)\n    return str(x).zfill(base)\n\n", "    if base < 2:\n  \
    \      raise ValueError(\"Base should be greater than 1\")\n    if base > 10:\n\
    \        raise ValueError(\"Base should be less than 10\")\n    if x < 0:\n  \
    \      return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n\
    \    if x == 1:\n        return '1'\n    if x == 2:\n        return '2'\n    if\
    \ x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n    if x ==\
    \ 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n\
    \        return '7'\n    if x == 8:\n        return '8'\n    if x == 9:\n    \
    \    return '9'\n    if x == 10:\n        return '10'\n    if x == 11:\n     \
    \   return '11'\n    if x == 12:\n        return '12'\n    if x == 13:\n     \
    \   return '13'\n    if x == 14:\n        return '14'\n    if x == 15:\n     \
    \   return '15'\n    if x == 16:\n        return '16'\n    if x == 17:\n     \
    \   return '17'\n    if x == 18:\n        return '18'\n    if x == 19:\n     \
    \   return '19'\n    if x == 20:\n        return '20'\n    if x == 21:\n     \
    \   return '21'\n    if x == 22:\n        return '22'\n    if x == 23:\n     \
    \   return '23'\n    if x == 24:\n        return '24'\n    if x == 25:\n     \
    \   return '25'\n    if x == 26:\n        return '26'\n    if x == 27:\n     \
    \   return '27'\n    if x == 28:\n        return '28'\n    if x == 29:\n     \
    \   return '29'\n    if x == 30:\n        return '30'\n    if x == 31:\n     \
    \   return '31'\n    if x == 32:\n        return '32'\n    if x == 33:\n     \
    \   return '33'\n    if x == 34:\n        return", "    if base < 2:\n       \
    \ raise ValueError('Base must be greater than 1')\n    if base == 2:\n       \
    \ return str(x)\n    if x < 0:\n        return '-' + change_base(-x, base)\n \
    \   if x == 0:\n        return '0'\n    return ''.join(str(x // base ** i) for\
    \ i in range(base))\n", "    if base < 2:\n        raise ValueError(\"Base should\
    \ be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base should\
    \ be less than 36.\")\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n\
    \    if x < base:\n        return str(x)\n    else:\n        return change_base(x\
    \ // base, base) + str(x % base)\n\n", "    if base < 2:\n        raise ValueError('Base\
    \ should be greater than 1.')\n    if base > 36:\n        raise ValueError('Base\
    \ should be less than 36.')\n    if x < 0:\n        raise ValueError('Input number\
    \ should be positive.')\n    if x == 0:\n        return '0'\n    if x == 1:\n\
    \        return '1'\n    if x == 2:\n        return '10'\n    if x == 3:\n   \
    \     return '11'\n    if x == 4:\n        return '100'\n    if x == 5:\n    \
    \    return '101'\n    if x == 6:\n        return '110'\n    if x == 7:\n    \
    \    return '111'\n    if x == 8:\n        return '1000'\n    if x == 9:\n   \
    \     return '1001'\n    if x == 10:\n        return '1010'\n    if x == 11:\n\
    \        return '1011'\n    if x == 12:\n        return '1100'\n    if x == 13:\n\
    \        return '1101'\n    if x == 14:\n        return '1110'\n    if x == 15:\n\
    \        return '1111'\n    if x == 16:\n        return '10000'\n    if x == 17:\n\
    \        return '10001'\n    if x == 18:\n        return '10010'\n    if x ==\
    \ 19:\n        return '10011'\n    if x == 20:\n        return '10100'\n    if\
    \ x == 21:\n        return '10101'\n    if x == 22:\n        return '10110'\n\
    \    if x == 23:\n        return '10111'\n    if x == 24:\n        return '11000'\n\
    \    if x == 25:\n        return '11001'\n    if x == 26:\n        return '11010'\n\
    \    if x == 27:\n        return '11011'\n    if x == 28:\n        return '11100'\n\
    \    if x == 29:\n        return '11101'\n    if x == 30:\n        return '11110'\n\
    \    if x == 31:\n        return '11111'\n    if x == 32:\n        return '100000'\n\
    \    ", "    if base < 2:\n        raise ValueError(\"Base must be greater than\
    \ 1\")\n    if base > 10:\n        raise ValueError(\"Base must be less than 10\"\
    )\n    if x < 0:\n        raise ValueError(\"Input must be a positive integer\"\
    )\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n\
    \    if x == 2:\n        return \"10\"\n    if x == 3:\n        return \"11\"\n\
    \    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"101\"\
    \n    if x == 6:\n        return \"110\"\n    if x == 7:\n        return \"111\"\
    \n    if x == 8:\n        return \"1000\"\n    if x == 9:\n        return \"1001\"\
    \n    if x == 10:\n        return \"1010\"\n    if x == 11:\n        return \"\
    1011\"\n    if x == 12:\n        return \"1100\"\n    if x == 13:\n        return\
    \ \"1101\"\n    if x == 14:\n        return \"1110\"\n    if x == 15:\n      \
    \  return \"1111\"\n    if x == 16:\n        return \"10000\"\n    if x == 17:\n\
    \        return \"10001\"\n    if x == 18:\n        return \"10010\"\n    if x\
    \ == 19:\n        return \"10011\"\n    if x == 20:\n        return \"10100\"\n\
    \    if x == 21:\n        return \"10101\"\n    if x == 22:\n        return \"\
    10110\"\n    if x == 23:\n        return \"10111\"\n    if x == 24:\n        return\
    \ \"11000\"\n    if x == 25:\n        return \"11001\"\n    if x == 26:\n    \
    \    return \"11010\"\n    if x == 27:\n        return \"11011\"\n    if x ==\
    \ 28:\n        return \"11100\"\n    if x == 29:\n        return \"11101\"\n \
    \   if x == 30:\n        return \"11110\"\n    if x == 31:\n        return \"\
    11111\"\n    if x == 32:\n        return \"100000\"\n    if x", "    if base <\
    \ 2:\n        raise ValueError(\"Base must be greater than 1.\")\n    if base\
    \ > 10:\n        raise ValueError(\"Base must be less than 10.\")\n    if x <\
    \ 0:\n        raise ValueError(\"Input must be a positive number.\")\n    if x\
    \ == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x\
    \ == 2:\n        return \"10\"\n    if x == 3:\n        return \"11\"\n    if\
    \ x == 4:\n        return \"100\"\n    if x == 5:\n        return \"101\"\n  \
    \  if x == 6:\n        return \"110\"\n    if x == 7:\n        return \"111\"\n\
    \    if x == 8:\n        return \"1000\"\n    if x == 9:\n        return \"1001\"\
    \n    if x == 10:\n        return \"1010\"\n    if x == 11:\n        return \"\
    1011\"\n    if x == 12:\n        return \"1100\"\n    if x == 13:\n        return\
    \ \"1101\"\n    if x == 14:\n        return \"1110\"\n    if x == 15:\n      \
    \  return \"1111\"\n    if x == 16:\n        return \"10000\"\n    if x == 17:\n\
    \        return \"10001\"\n    if x == 18:\n        return \"10010\"\n    if x\
    \ == 19:\n        return \"10011\"\n    if x == 20:\n        return \"10100\"\n\
    \    if x == 21:\n        return \"10101\"\n    if x == 22:\n        return \"\
    10110\"\n    if x == 23:\n        return \"10111\"\n    if x == 24:\n        return\
    \ \"11000\"\n    if x == 25:\n        return \"11001\"\n    if x == 26:\n    \
    \    return \"11010\"\n    if x == 27:\n        return \"11011\"\n    if x ==\
    \ 28:\n        return \"11100\"\n    if x == 29:\n        return \"11101\"\n \
    \   if x == 30:\n        return \"11110\"\n    if x == 31:\n        return \"\
    11111\"\n    if x == 32:\n        return \"100000\"\n    if x", "    if base <\
    \ 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base >\
    \ 36:\n        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n\
    \        raise ValueError(\"Input must be positive\")\n    if x == 0:\n      \
    \  return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n      \
    \  return \"10\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n    \
    \    return \"100\"\n    if x == 5:\n        return \"101\"\n    if x == 6:\n\
    \        return \"110\"\n    if x == 7:\n        return \"111\"\n    if x == 8:\n\
    \        return \"1000\"\n    if x == 9:\n        return \"1001\"\n    if x ==\
    \ 10:\n        return \"1010\"\n    if x == 11:\n        return \"1011\"\n   \
    \ if x == 12:\n        return \"1100\"\n    if x == 13:\n        return \"1101\"\
    \n    if x == 14:\n        return \"1110\"\n    if x == 15:\n        return \"\
    1111\"\n    if x == 16:\n        return \"10000\"\n    if x == 17:\n        return\
    \ \"10001\"\n    if x == 18:\n        return \"10010\"\n    if x == 19:\n    \
    \    return \"10011\"\n    if x == 20:\n        return \"10100\"\n    if x ==\
    \ 21:\n        return \"10101\"\n    if x == 22:\n        return \"10110\"\n \
    \   if x == 23:\n        return \"10111\"\n    if x == 24:\n        return \"\
    11000\"\n    if x == 25:\n        return \"11001\"\n    if x == 26:\n        return\
    \ \"11010\"\n    if x == 27:\n        return \"11011\"\n    if x == 28:\n    \
    \    return \"11100\"\n    if x == 29:\n        return \"11101\"\n    if x ==\
    \ 30:\n        return \"11110\"\n    if x == 31:\n        return \"11111\"\n \
    \   if x == 32:\n        return \"100000\"\n    if x == 33", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1\")\n    if x < 0:\n  \
    \      return \"-\" + change_base(-x, base)\n    if x < base:\n        return\
    \ str(x)\n    if x % base == 0:\n        return str(x // base)\n    return str(x\
    \ // base) + \".\" + change_base(x % base, base)\n\n", "    if base < 2:\n   \
    \     raise ValueError(\"Base must be greater than 1.\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36.\")\n    if x < 0:\n   \
    \     raise ValueError(\"Input must be positive.\")\n    if x == 0:\n        return\
    \ '0'\n    if x < base:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\"\
    )\n    if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be a positive integer\"\
    )\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n\
    \    if x == 2:\n        return \"10\"\n    if x == 3:\n        return \"11\"\n\
    \    if x == 4:\n        return \"100\"\n    if x == 5:\n        return \"101\"\
    \n    if x == 6:\n        return \"110\"\n    if x == 7:\n        return \"111\"\
    \n    if x == 8:\n        return \"1000\"\n    if x == 9:\n        return \"1001\"\
    \n    if x == 10:\n        return \"1010\"\n    if x == 11:\n        return \"\
    1011\"\n    if x == 12:\n        return \"1100\"\n    if x == 13:\n        return\
    \ \"1101\"\n    if x == 14:\n        return \"1110\"\n    if x == 15:\n      \
    \  return \"1111\"\n    if x == 16:\n        return \"10000\"\n    if x == 17:\n\
    \        return \"10001\"\n    if x == 18:\n        return \"10010\"\n    if x\
    \ == 19:\n        return \"10011\"\n    if x == 20:\n        return \"10100\"\n\
    \    if x == 21:\n        return \"10101\"\n    if x == 22:\n        return \"\
    10110\"\n    if x == 23:\n        return \"10111\"\n    if x == 24:\n        return\
    \ \"11000\"\n    if x == 25:\n        return \"11001\"\n    if x == 26:\n    \
    \    return \"11010\"\n    if x == 27:\n        return \"11011\"\n    if x ==\
    \ 28:\n        return \"11100\"\n    if x == 29:\n        return \"11101\"\n \
    \   if x == 30:\n        return \"11110\"\n    if x == 31:\n        return \"\
    11111\"\n    if x == 32:\n        return \"100000\"\n    if x", "    if base <\
    \ 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base >\
    \ 36:\n        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n\
    \        raise ValueError(\"Input must be a positive number\")\n    if x == 0:\n\
    \        return '0'\n    if x < base:\n        return '0' + change_base(x, base)\n\
    \    result = ''\n    while x > 0:\n        result = str(x % base) + result\n\
    \        x = x // base\n    return result\n\n", "    if base < 2:\n        raise\
    \ ValueError(\"Base should be greater than 1.\")\n    if base > 10:\n        raise\
    \ ValueError(\"Base should be less than 10.\")\n    if x < 0:\n        raise ValueError(\"\
    Input should be a positive number.\")\n    if x == 0:\n        return \"0\"\n\
    \    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n\
    \        x = x // base\n    return result\n\n", "    if base < 2:\n        raise\
    \ ValueError(\"Base must be greater than 1.\")\n    if base > 36:\n        raise\
    \ ValueError(\"Base must be less than 36.\")\n    if x < 0:\n        raise ValueError(\"\
    Input number must be positive.\")\n    if x == 0:\n        return \"0\"\n    if\
    \ base == 10:\n        return str(x)\n    return str(x).zfill(int(math.log(x,\
    \ base)) + 1)\n\n", "    if base < 2:\n        raise ValueError(\"Base should\
    \ be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base should\
    \ be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input number\
    \ should be non-negative.\")\n    if x == 0:\n        return '0'\n    result =\
    \ []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n\
    \    return ''.join(reversed(result))\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1.\")\n    if base > 10:\n        raise ValueError(\"\
    Base must be less than 10.\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be a positive number.\")\n    if x == 0:\n        return '0'\n    if base\
    \ == 10:\n        return str(x)\n    return str(x).zfill(base)\n\n", "    if base\
    \ < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base\
    \ > 36:\n        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n\
    \        return \"-\" + change_base(-x, base)\n    if x == 0:\n        return\
    \ \"0\"\n    if x < base:\n        return change_base(x, base)\n    else:\n  \
    \      return change_base(x // base, base) + change_base(x % base, base)\n\n",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n\
    \    if base > 36:\n        raise ValueError(\"Base must be less than 36.\")\n\
    \    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n\
    \    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return '{:b}'.format(x)\n    if base == 3:\n     \
    \   return '{:b}'.format(x)\n    if base == 4:\n        return '{:b}'.format(x)\n\
    \    if base == 5:\n        return '{:b}'.format(x)\n    if base == 6:\n     \
    \   return '{:b}'.format(x)\n    if base == 7:\n        return '{:b}'.format(x)\n\
    \    if base == 8:\n        return '{:b}'.format(x)\n    if base == 9:\n     \
    \   return '{:b}'.format(x)\n    if base == 16:\n        return '{:x}'.format(x)\n\
    \    if base == 17:\n        return '{:x}'.format(x)\n    if base == 18:\n   \
    \     return '{:x}'.format(x)\n    if base == 19:\n        return '{:x}'.format(x)\n\
    \    if base == 20:\n        return '{:x}'.format(x)\n    if base == 21:\n   \
    \     return '{:x}'.format(x)\n    if base == 22:\n        return '{:x}'.format(x)\n\
    \    if base == 23:\n        return '{:x}'.format(x)\n    if base == 24:\n   \
    \     return '{:x}'.format(x)\n    if base == 25:\n        return '{:x}'.format(x)\n\
    \    if base == 26:\n        return '{:x}'.format(x)\n    if base == 27:\n   \
    \     return '{:x}'.format(x)\n    if base == 28:\n        return '{:x}'.format(x)\n\
    \    if base == 29:", "    if base < 2:\n        raise ValueError(\"Base should\
    \ be greater than 1.\")\n    if base == 2:\n        return str(x)\n    if x <\
    \ 0:\n        return \"-\" + change_base(-x, base)\n    if x == 0:\n        return\
    \ \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return\
    \ \"10\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n        return\
    \ \"100\"\n    if x == 5:\n        return \"101\"\n    if x == 6:\n        return\
    \ \"110\"\n    if x == 7:\n        return \"111\"\n    if x == 8:\n        return\
    \ \"1000\"\n    if x == 9:\n        return \"1001\"\n    if x == 10:\n       \
    \ return \"1010\"\n    if x == 11:\n        return \"1011\"\n    if x == 12:\n\
    \        return \"1100\"\n    if x == 13:\n        return \"1101\"\n    if x ==\
    \ 14:\n        return \"1110\"\n    if x == 15:\n        return \"1111\"\n   \
    \ if x == 16:\n        return \"10000\"\n    if x == 17:\n        return \"10001\"\
    \n    if x == 18:\n        return \"10010\"\n    if x == 19:\n        return \"\
    10011\"\n    if x == 20:\n        return \"10100\"\n    if x == 21:\n        return\
    \ \"10101\"\n    if x == 22:\n        return \"10110\"\n    if x == 23:\n    \
    \    return \"10111\"\n    if x == 24:\n        return \"11000\"\n    if x ==\
    \ 25:\n        return \"11001\"\n    if x == 26:\n        return \"11010\"\n \
    \   if x == 27:\n        return \"11011\"\n    if x == 28:\n        return \"\
    11100\"\n    if x == 29:\n        return \"11101\"\n    if x == 30:\n        return\
    \ \"11110\"\n    if x == 31:\n        return \"11111\"\n    if x == 32:\n    \
    \    return \"100000\"\n    if x == 33:\n        ", "    if base < 2:\n      \
    \  raise ValueError('Base must be greater than 1.')\n    if base > 36:\n     \
    \   raise ValueError('Base must be less than 36.')\n    if x < 0:\n        raise\
    \ ValueError('Input must be a positive number.')\n    if x == 0:\n        return\
    \ '0'\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return\
    \ '{0:b}'.format(x)\n    if base == 3:\n        return '{0:b}'.format(x)\n   \
    \ if base == 4:\n        return '{0:b}'.format(x)\n    if base == 5:\n       \
    \ return '{0:b}'.format(x)\n    if base == 6:\n        return '{0:b}'.format(x)\n\
    \    if base == 7:\n        return '{0:b}'.format(x)\n    if base == 8:\n    \
    \    return '{0:b}'.format(x)\n    if base == 9:\n        return '{0:b}'.format(x)\n\
    \    if base == 16:\n        return '{0:x}'.format(x)\n    if base == 17:\n  \
    \      return '{0:x}'.format(x)\n    if base == 18:\n        return '{0:x}'.format(x)\n\
    \    if base == 19:\n        return '{0:x}'.format(x)\n    if base == 20:\n  \
    \      return '{0:x}'.format(x)\n    if base == 21:\n        return '{0:x}'.format(x)\n\
    \    if base == 22:\n        return '{0:x}'.format(x)\n    if base == 23:\n  \
    \      return '{0:x}'.format(x)\n    if base == 24:\n        return '{0:x}'.format(x)\n\
    \    if base == 25:\n        return '{0:x}'.format(x)\n    if base == 26:\n  \
    \      return '{0:x}'.format(x)\n    if base == 27:\n        return '{0:x}'.format(x)\n\
    \    if", "    if base < 2:\n        raise ValueError(\"Base must be greater than\
    \ 1\")\n    if base > 36:\n        raise ValueError(\"Base must be less than 36\"\
    )\n    if x < 0:\n        raise ValueError(\"Input number must be positive\")\n\
    \    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return\
    \ bin(x)[2:].rjust(3, '0')\n    if base == 4:\n        return bin(x)[2:].rjust(4,\
    \ '0')\n    if base == 5:\n        return bin(x)[2:].rjust(5, '0')\n    if base\
    \ == 6:\n        return bin(x)[2:].rjust(6, '0')\n    if base == 7:\n        return\
    \ bin(x)[2:].rjust(7, '0')\n    if base == 8:\n        return bin(x)[2:].rjust(8,\
    \ '0')\n    if base == 9:\n        return bin(x)[2:].rjust(9, '0')\n    if base\
    \ == 16:\n        return hex(x)[2:].rjust(8, '0')\n    if base == 17:\n      \
    \  return hex(x)[2:].rjust(9, '0')\n    if base == 18:\n        return hex(x)[2:].rjust(10,\
    \ '0')\n    if base == 19:\n        return hex(x)[2:].rjust(11, '0')\n    if base\
    \ == 20:\n        return hex(x)[2:].rjust(12, '0')\n    if base == 21:\n     \
    \   return hex(x)[2:].rjust(13, '0')\n    if base == 22:\n        return hex(x)[2:].rjust(14,\
    \ '0')\n    if base == 23:\n        return hex(x)[2:].rjust(15, '0')\n    if base\
    \ == 24:\n        return hex(x)[2:].rjust(16, '0')\n    if base == 25:\n     \
    \   return hex", "    if base < 2:\n        raise ValueError(\"Base must be greater\
    \ than 1.\")\n    if base > 36:\n        raise ValueError(\"Base must be less\
    \ than 36.\")\n    if x < 0:\n        raise ValueError(\"Input must be positive.\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"{0:b}\".format(x)\n    if base == 3:\n  \
    \      return \"{0:b}\".format(x)\n    if base == 4:\n        return \"{0:b}\"\
    .format(x)\n    if base == 5:\n        return \"{0:b}\".format(x)\n    if base\
    \ == 6:\n        return \"{0:b}\".format(x)\n    if base == 7:\n        return\
    \ \"{0:b}\".format(x)\n    if base == 8:\n        return \"{0:b}\".format(x)\n\
    \    if base == 9:\n        return \"{0:b}\".format(x)\n    if base == 16:\n \
    \       return \"{0:x}\".format(x)\n    if base == 17:\n        return \"{0:x}\"\
    .format(x)\n    if base == 18:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 19:\n        return \"{0:x}\".format(x)\n    if base == 20:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 21:\n        return \"{0:x}\".format(x)\n\
    \    if base == 22:\n        return \"{0:x}\".format(x)\n    if base == 23:\n\
    \        return \"{0:x}\".format(x)\n    if base == 24:\n        return \"{0:x}\"\
    .format(x)\n    if base == 25:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 26:\n        return \"{0:x}\".format(x)\n    if base == 27:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 28:\n        return \"{0:x}\".format(x)\n\
    \    if base == 29:\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36\")\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n\
    \    if x == 0:\n        return \"0\"\n    if x < base:\n        return change_base(x,\
    \ base)\n    else:\n        return change_base(x // base, base) + change_base(x\
    \ % base, base)\n\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ a positive integer.\")\n    if x == 0:\n        return '0'\n    result = []\n\
    \    while x > 0:\n        result.append(str(x % base))\n        x //= base\n\
    \    return ''.join(reversed(result))\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be a positive number\")\n    if x == 0:\n        return \"0\"\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 3:\n        return \"\
    \".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 4:\n    \
    \    return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n    if base\
    \ == 5:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 6:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 7:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 9:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i else \"0\" for i in\
    \ bin(x)[2:]])\n    if base == 17:\n        return \"\".join([\"1\" if i else\
    \ \"0\" for i in bin(x)[2:]])\n    if base == 18:\n        return \"\".join([\"\
    1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 19:\n        return\
    \ \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 20:\n\
    \        return \"\".join([\"1\" if", "    if base < 2:\n        raise ValueError('Base\
    \ must be greater than 1')\n    if base > 36:\n        raise ValueError('Base\
    \ must be less than 36')\n    if x < 0:\n        raise ValueError('Input must\
    \ be a positive number')\n    if x == 0:\n        return '0'\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return '{0:b}'.format(x)\n\
    \    if base == 3:\n        return '{0:b}'.format(x)\n    if base == 4:\n    \
    \    return '{0:b}'.format(x)\n    if base == 5:\n        return '{0:b}'.format(x)\n\
    \    if base == 6:\n        return '{0:b}'.format(x)\n    if base == 7:\n    \
    \    return '{0:b}'.format(x)\n    if base == 8:\n        return '{0:b}'.format(x)\n\
    \    if base == 9:\n        return '{0:b}'.format(x)\n    if base == 16:\n   \
    \     return '{0:x}'.format(x)\n    if base == 17:\n        return '{0:x}'.format(x)\n\
    \    if base == 18:\n        return '{0:x}'.format(x)\n    if base == 19:\n  \
    \      return '{0:x}'.format(x)\n    if base == 20:\n        return '{0:x}'.format(x)\n\
    \    if base == 21:\n        return '{0:x}'.format(x)\n    if base == 22:\n  \
    \      return '{0:x}'.format(x)\n    if base == 23:\n        return '{0:x}'.format(x)\n\
    \    if base == 24:\n        return '{0:x}'.format(x)\n    if base == 25:\n  \
    \      return '{0:x}'.format(x)\n    if base == 26:\n        return '{0:x}'.format(x)\n\
    \    if base == 27:\n        return '{0:x}'.format(x)\n    if base == 28", " \
    \   if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n\
    \    if base > 10:\n        raise ValueError(\"Base must be less than 10.\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n\
    \        result = str(x % base) + result\n        x //= base\n    return result\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\"\
    )\n    if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n\
    \    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x == 0:\n\
    \        return \"0\"\n    if x < base:\n        return change_base(x, base)\n\
    \    if x % base == 0:\n        return change_base(x // base, base)\n    return\
    \ change_base(x // base, base) + change_base(x % base, base)\n\n", "    if base\
    \ < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base\
    \ > 10:\n        raise ValueError(\"Base must be less than 10\")\n    if x < 0:\n\
    \        raise ValueError(\"Input number must be positive\")\n    if x == 0:\n\
    \        return \"0\"\n    if base == 10:\n        return str(x)\n    return str(x).zfill(base)\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\"\
    )\n    if base > 36:\n        raise ValueError(\"Base must be less than 36.\"\
    )\n    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n\
    \        result = str(x % base) + result\n        x = x // base\n    return result\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\"\
    )\n    if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n\
    \    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x == 0:\n\
    \        return \"0\"\n    if x < base:\n        return change_base(x, base)\n\
    \    else:\n        return change_base(x // base, base) + change_base(x % base,\
    \ base)\n\n", "    if base < 2:\n        raise ValueError(\"Base must be greater\
    \ than 1\")\n    if base > 36:\n        raise ValueError(\"Base must be less than\
    \ 36\")\n    if x < 0:\n        raise ValueError(\"Input must be positive\")\n\
    \    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return '{0:b}'.format(x)\n    if base == 3:\n    \
    \    return '{0:b}'.format(x)\n    if base == 4:\n        return '{0:b}'.format(x)\n\
    \    if base == 5:\n        return '{0:b}'.format(x)\n    if base == 6:\n    \
    \    return '{0:b}'.format(x)\n    if base == 7:\n        return '{0:b}'.format(x)\n\
    \    if base == 8:\n        return '{0:b}'.format(x)\n    if base == 9:\n    \
    \    return '{0:b}'.format(x)\n    if base == 16:\n        return '{0:x}'.format(x)\n\
    \    if base == 17:\n        return '{0:x}'.format(x)\n    if base == 18:\n  \
    \      return '{0:x}'.format(x)\n    if base == 19:\n        return '{0:x}'.format(x)\n\
    \    if base == 20:\n        return '{0:x}'.format(x)\n    if base == 21:\n  \
    \      return '{0:x}'.format(x)\n    if base == 22:\n        return '{0:x}'.format(x)\n\
    \    if base == 23:\n        return '{0:x}'.format(x)\n    if base == 24:\n  \
    \      return '{0:x}'.format(x)\n    if base == 25:\n        return '{0:x}'.format(x)\n\
    \    if base == 26:\n        return '{0:x}'.format(x)\n    if base == 27:\n  \
    \      return '{0:x}'.format(x)\n    if base == 28:\n", "    if base < 2:\n  \
    \      raise ValueError(\"Base must be greater than 1\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n    \
    \    raise ValueError(\"Input must be a positive integer\")\n    if x == 0:\n\
    \        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n    \
    \    return '10'\n    if x == 3:\n        return '11'\n    if x == 4:\n      \
    \  return '100'\n    if x == 5:\n        return '101'\n    if x == 6:\n      \
    \  return '110'\n    if x == 7:\n        return '111'\n    if x == 8:\n      \
    \  return '1000'\n    if x == 9:\n        return '1001'\n    if x == 10:\n   \
    \     return '1010'\n    if x == 11:\n        return '1011'\n    if x == 12:\n\
    \        return '1100'\n    if x == 13:\n        return '1101'\n    if x == 14:\n\
    \        return '1110'\n    if x == 15:\n        return '1111'\n    if x == 16:\n\
    \        return '10000'\n    if x == 17:\n        return '10001'\n    if x ==\
    \ 18:\n        return '10010'\n    if x == 19:\n        return '10011'\n    if\
    \ x == 20:\n        return '10100'\n    if x == 21:\n        return '10101'\n\
    \    if x == 22:\n        return '10110'\n    if x == 23:\n        return '10111'\n\
    \    if x == 24:\n        return '11000'\n    if x == 25:\n        return '11001'\n\
    \    if x == 26:\n        return '11010'\n    if x == 27:\n        return '11011'\n\
    \    if x == 28:\n        return '11100'\n    if x == 29:\n        return '11101'\n\
    \    if x == 30:\n        return '11110'\n    if x == 31:\n        return '11111'\n\
    \    if x == 32:\n        return '100000'\n    if x", "    if base < 2:\n    \
    \    raise ValueError('Base must be greater than 1.')\n    if x < 0:\n       \
    \ raise ValueError('Input must be a positive number.')\n    if x == 0:\n     \
    \   return '0'\n    if base == 2:\n        return str(x)\n    if base == 10:\n\
    \        return str(x)\n    if base == 16:\n        return hex(x)\n    if base\
    \ == 8:\n        return bin(x)[2:]\n    if base == 3:\n        return str(x)\n\
    \    return '0'\n\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ a positive number.\")\n    if x == 0:\n        return \"0\"\n    if base ==\
    \ 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:].zfill(8)\n\
    \    if base == 3:\n        return bin(x)[2:].zfill(6)\n    if base == 4:\n  \
    \      return bin(x)[2:].zfill(4)\n    if base == 5:\n        return bin(x)[2:].zfill(5)\n\
    \    if base == 6:\n        return bin(x)[2:].zfill(3)\n    if base == 7:\n  \
    \      return bin(x)[2:].zfill(4)\n    if base == 8:\n        return bin(x)[2:].zfill(2)\n\
    \    if base == 9:\n        return bin(x)[2:].zfill(3)\n    if base == 16:\n \
    \       return hex(x)[2:].zfill(8)\n    if base == 17:\n        return hex(x)[2:].zfill(6)\n\
    \    if base == 18:\n        return hex(x)[2:].zfill(4)\n    if base == 19:\n\
    \        return hex(x)[2:].zfill(5)\n    if base == 20:\n        return hex(x)[2:].zfill(3)\n\
    \    if base == 21:\n        return hex(x)[2:].zfill(4)\n    if base == 22:\n\
    \        return hex(x)[2:].zfill(2)\n    if base == 23:\n        return hex(x)[2:].zfill(3)\n\
    \    if base == 24:\n        return hex(x)[2:].zfill(2)\n    if base == 25:\n\
    \        return hex(x)[2:].zfill(3)\n    if base == 26:\n        return hex(x)[2:].zfill(2)\n\
    \    if base == 27:\n", "    if base < 2:\n        raise ValueError('Base must\
    \ be greater than 1.')\n    if base > 36:\n        raise ValueError('Base must\
    \ be less than 36.')\n    if x < 0:\n        raise ValueError('Input must be a\
    \ positive number.')\n    if x == 0:\n        return '0'\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base\
    \ == 3:\n        return bin(x)[2:]\n    if base == 4:\n        return bin(x)[2:]\n\
    \    if base == 5:\n        return bin(x)[2:]\n    if base == 6:\n        return\
    \ bin(x)[2:]\n    if base == 7:\n        return bin(x)[2:]\n    if base == 8:\n\
    \        return bin(x)[2:]\n    if base == 9:\n        return bin(x)[2:]\n   \
    \ if base == 16:\n        return hex(x)[2:]\n    if base == 17:\n        return\
    \ hex(x)[2:]\n    if base == 18:\n        return hex(x)[2:]\n    if base == 19:\n\
    \        return hex(x)[2:]\n    if base == 20:\n        return hex(x)[2:]\n  \
    \  if base == 21:\n        return hex(x)[2:]\n    if base == 22:\n        return\
    \ hex(x)[2:]\n    if base == 23:\n        return hex(x)[2:]\n    if base == 24:\n\
    \        return hex(x)[2:]\n    if base == 25:\n        return hex(x)[2:]\n  \
    \  if base == 26:\n        return hex(x)[2:]\n    if base == 27:\n        return\
    \ hex(x)[2:]\n    if base == 28:\n        return hex(x)[2:]\n    if base == 29:\n\
    \        return hex(x)[2:]\n    if base == 30:\n        return hex(x)[2:]\n  \
    \  if base == 31:\n        return hex(x)[2:]\n    if base == 32:\n        return\
    \ hex(x)[2:]\n    if base == 33:\n        return hex(x)[2:]\n    if base == 34:",
  "    if base < 2:\n        raise ValueError(\"Base should be greater than 1.\")\n\
    \    if base > 36:\n        raise ValueError(\"Base should be less than 36.\"\
    )\n    if x < 0:\n        raise ValueError(\"Input should be positive.\")\n  \
    \  if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return\
    \ str(x)\n    if base == 4:\n        return bin(x)[2:].zfill(3)\n    if base ==\
    \ 5:\n        return bin(x)[2:].zfill(4)\n    if base == 6:\n        return bin(x)[2:].zfill(5)\n\
    \    if base == 7:\n        return bin(x)[2:].zfill(6)\n    if base == 8:\n  \
    \      return bin(x)[2:].zfill(7)\n    if base == 9:\n        return bin(x)[2:].zfill(8)\n\
    \    if base == 16:\n        return hex(x)[2:].zfill(2)\n    if base == 17:\n\
    \        return hex(x)[2:].zfill(3)\n    if base == 18:\n        return hex(x)[2:].zfill(4)\n\
    \    if base == 19:\n        return hex(x)[2:].zfill(5)\n    if base == 20:\n\
    \        return hex(x)[2:].zfill(6)\n    if base == 21:\n        return hex(x)[2:].zfill(7)\n\
    \    if base == 22:\n        return hex(x)[2:].zfill(8)\n    if base == 23:\n\
    \        return hex(x)[2:].zfill(9)\n    if base == 24:\n        return hex(x)[2:].zfill(10)\n\
    \    if base == 25:\n        return hex(x)[2:].zfill(11)\n    if base == 26:\n\
    \        return hex(x)[2:].zfill(12)\n    if base == 27:\n        return hex(x)[2:].zfill(13)\n\
    \    ", "    if base < 2:\n        raise ValueError(\"Base must be greater than\
    \ 1\")\n    if base > 36:\n        raise ValueError(\"Base must be less than 36\"\
    )\n    if x < 0:\n        raise ValueError(\"Input must be positive\")\n    if\
    \ x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n \
    \   return str(x).zfill(int(math.log(x, base)) + 1)\n\n", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n    \
    \    return \"-\" + change_base(-x, base)\n    if x == 0:\n        return \"0\"\
    \n    if x < base:\n        return str(x)\n    else:\n        return change_base(x\
    \ // base, base) + str(x % base)\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be a positive number.\")\n    if x == 0:\n        return \"0\"\n    if\
    \ x < base:\n        return str(x)\n    else:\n        return str(x).zfill(base)\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\"\
    )\n    if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be positive\")\n    if x\
    \ == 0:\n        return '0'\n    if x < base:\n        return '0' + change_base(x,\
    \ base)\n    else:\n        return change_base(x // base, base) + change_base(x\
    \ % base, base)\n\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 10:\n        raise ValueError(\"Base must\
    \ be less than 10\")\n    if x < 0:\n        return '-' + change_base(-x, base)\n\
    \    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n     \
    \   result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base should be greater than\
    \ 1.\")\n    if base == 2:\n        return str(x)\n    if x < 0:\n        return\
    \ \"-\" + change_base(-x, base)\n    if x == 0:\n        return \"0\"\n    if\
    \ x < base:\n        return change_base(x, base)\n    else:\n        return change_base(x\
    \ // base, base) + change_base(x % base, base)\n\n", "    if base < 2:\n     \
    \   raise ValueError(\"Base should be greater than 1.\")\n    if base > 36:\n\
    \        raise ValueError(\"Base should be less than 36.\")\n    if x < 0:\n \
    \       raise ValueError(\"Input number should be non-negative.\")\n    if x ==\
    \ 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    return\
    \ str(x).zfill(int(math.log(x, base)) + 1)\n\n", "    if base < 2:\n        raise\
    \ ValueError(\"Base must be greater than 1\")\n    if base > 36:\n        raise\
    \ ValueError(\"Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"\
    Input must be positive\")\n    if x == 0:\n        return \"0\"\n    if base ==\
    \ 10:\n        return str(x)\n    if base == 2:\n        return \"{0:b}\".format(x)\n\
    \    if base == 3:\n        return \"{0:b}\".format(x)\n    if base == 4:\n  \
    \      return \"{0:b}\".format(x)\n    if base == 5:\n        return \"{0:b}\"\
    .format(x)\n    if base == 6:\n        return \"{0:b}\".format(x)\n    if base\
    \ == 7:\n        return \"{0:b}\".format(x)\n    if base == 8:\n        return\
    \ \"{0:b}\".format(x)\n    if base == 9:\n        return \"{0:b}\".format(x)\n\
    \    if base == 16:\n        return \"{0:x}\".format(x)\n    if base == 17:\n\
    \        return \"{0:x}\".format(x)\n    if base == 18:\n        return \"{0:x}\"\
    .format(x)\n    if base == 19:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 20:\n        return \"{0:x}\".format(x)\n    if base == 21:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 22:\n        return \"{0:x}\".format(x)\n\
    \    if base == 23:\n        return \"{0:x}\".format(x)\n    if base == 24:\n\
    \        return \"{0:x}\".format(x)\n    if base == 25:\n        return \"{0:x}\"\
    .format(x)\n    if base == 26:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 27:\n        return \"{0:x}\".format(x)\n    if base == 28:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 29:\n", "    if base < 2:\n        raise\
    \ ValueError(\"Base should be greater than 1.\")\n    if base > 10:\n        raise\
    \ ValueError(\"Base should be less than 10.\")\n    if x < 0:\n        raise ValueError(\"\
    Input number should be greater than 0.\")\n    if x == 0:\n        return \"0\"\
    \n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n\
    \        x = x // base\n    return result\n\n", "    if base < 2:\n        raise\
    \ ValueError(\"Base must be greater than 1\")\n    if base > 36:\n        raise\
    \ ValueError(\"Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"\
    Input must be a positive integer\")\n    if x == 0:\n        return '0'\n    if\
    \ base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n\
    \    if base == 3:\n        return bin(x)[2:].rjust(3, '0')\n    if base == 4:\n\
    \        return bin(x)[2:].rjust(4, '0')\n    if base == 5:\n        return bin(x)[2:].rjust(5,\
    \ '0')\n    if base == 6:\n        return bin(x)[2:].rjust(6, '0')\n    if base\
    \ == 7:\n        return bin(x)[2:].rjust(7, '0')\n    if base == 8:\n        return\
    \ bin(x)[2:].rjust(8, '0')\n    if base == 9:\n        return bin(x)[2:].rjust(9,\
    \ '0')\n    if base == 16:\n        return hex(x)[2:].rjust(8, '0')\n    if base\
    \ == 17:\n        return hex(x)[2:].rjust(9, '0')\n    if base == 18:\n      \
    \  return hex(x)[2:].rjust(10, '0')\n    if base == 19:\n        return hex(x)[2:].rjust(11,\
    \ '0')\n    if base == 20:\n        return hex(x)[2:].rjust(12, '0')\n    if base\
    \ == 21:\n        return hex(x)[2:].rjust(13, '0')\n    if base == 22:\n     \
    \   return hex(x)[2:].rjust(14, '0')\n    if base == 23:\n        return hex(x)[2:].rjust(15,\
    \ '0')\n    if base == 24:\n        return hex(x)[2:].rjust(16, '0')\n    if base\
    \ == 25:\n        return", "    if base < 2:\n        raise ValueError(\"Base\
    \ must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base\
    \ must be less than 36\")\n    if x < 0:\n        return \"-\" + change_base(-x,\
    \ base)\n    if x == 0:\n        return \"0\"\n    if x < base:\n        return\
    \ str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n \
    \   if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n \
    \   if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x == 0:\n\
    \        return \"0\"\n    if x < base:\n        return change_base(x, base)\n\
    \    else:\n        return change_base(x // base, base) + change_base(x % base,\
    \ base)\n\n", "    if base < 2:\n        raise ValueError(\"Base must be greater\
    \ than 1.\")\n    if base == 2:\n        return str(x)\n    if base == 10:\n \
    \       return str(x)\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n\
    \    if x == 0:\n        return \"0\"\n    return str(x).zfill(base)\n\n", " \
    \   if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n\
    \    if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be a positive number\")\n\
    \    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    return str(x).zfill(int(math.log(x, base)) + 1)\n\n", "    if base < 2:\n\
    \        raise ValueError(\"Base should be greater than 1.\")\n    if base > 10:\n\
    \        raise ValueError(\"Base should be less than 10.\")\n    if x < 0:\n \
    \       raise ValueError(\"Input should be a positive number.\")\n    if x ==\
    \ 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n    return\
    \ str(x).zfill(base)\n\n", "    if base < 2:\n        raise ValueError(\"Base\
    \ must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base\
    \ must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input must\
    \ be positive\")\n    if x == 0:\n        return '0'\n    if base == 10:\n   \
    \     return str(x)\n    if base == 2:\n        return '{:b}'.format(x)\n    if\
    \ base == 3:\n        return '{:b}'.format(x)\n    if base == 4:\n        return\
    \ '{:b}'.format(x)\n    if base == 5:\n        return '{:b}'.format(x)\n    if\
    \ base == 6:\n        return '{:b}'.format(x)\n    if base == 7:\n        return\
    \ '{:b}'.format(x)\n    if base == 8:\n        return '{:b}'.format(x)\n    if\
    \ base == 9:\n        return '{:b}'.format(x)\n    if base == 16:\n        return\
    \ '{:x}'.format(x)\n    if base == 17:\n        return '{:x}'.format(x)\n    if\
    \ base == 18:\n        return '{:x}'.format(x)\n    if base == 19:\n        return\
    \ '{:x}'.format(x)\n    if base == 20:\n        return '{:x}'.format(x)\n    if\
    \ base == 21:\n        return '{:x}'.format(x)\n    if base == 22:\n        return\
    \ '{:x}'.format(x)\n    if base == 23:\n        return '{:x}'.format(x)\n    if\
    \ base == 24:\n        return '{:x}'.format(x)\n    if base == 25:\n        return\
    \ '{:x}'.format(x)\n    if base == 26:\n        return '{:x}'.format(x)\n    if\
    \ base == 27:\n        return '{:x}'.format(x)\n    if base == 28:\n        return\
    \ '{:x}'.format(x)\n    if base == 29:\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be a positive number\")\n    if x == 0:\n        return \"0\"\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n\
    \    if base == 3:\n        return bin(x)[2:].rjust(3, \"0\")\n    if base ==\
    \ 4:\n        return bin(x)[2:].rjust(4, \"0\")\n    if base == 5:\n        return\
    \ bin(x)[2:].rjust(5, \"0\")\n    if base == 6:\n        return bin(x)[2:].rjust(6,\
    \ \"0\")\n    if base == 7:\n        return bin(x)[2:].rjust(7, \"0\")\n    if\
    \ base == 8:\n        return bin(x)[2:].rjust(8, \"0\")\n    if base == 9:\n \
    \       return bin(x)[2:].rjust(9, \"0\")\n    if base == 16:\n        return\
    \ hex(x)[2:].rjust(4, \"0\")\n    if base == 17:\n        return hex(x)[2:].rjust(5,\
    \ \"0\")\n    if base == 18:\n        return hex(x)[2:].rjust(6, \"0\")\n    if\
    \ base == 19:\n        return hex(x)[2:].rjust(7, \"0\")\n    if base == 20:\n\
    \        return hex(x)[2:].rjust(8, \"0\")\n    if base == 21:\n        return\
    \ hex(x)[2:].rjust(9, \"0\")\n    if base == 22:\n        return hex(x)[2:].rjust(10,\
    \ \"0\")\n    if base == 23:\n        return hex(x)[2:].rjust(11, \"0\")\n   \
    \ if base == 24:\n        return hex(x)[2:].rjust(12, \"0\")\n    if base == 25:\n\
    \        return", "    if base < 2:\n        raise ValueError(\"Base must be greater\
    \ than 1\")\n    if base > 36:\n        raise ValueError(\"Base must be less than\
    \ 36\")\n    if x < 0:\n        raise ValueError(\"Input must be positive\")\n\
    \    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return '{:b}'.format(x)\n    if base == 3:\n     \
    \   return '{:b}'.format(x)\n    if base == 4:\n        return '{:b}'.format(x)\n\
    \    if base == 5:\n        return '{:b}'.format(x)\n    if base == 6:\n     \
    \   return '{:b}'.format(x)\n    if base == 7:\n        return '{:b}'.format(x)\n\
    \    if base == 8:\n        return '{:b}'.format(x)\n    if base == 9:\n     \
    \   return '{:b}'.format(x)\n    if base == 16:\n        return '{:x}'.format(x)\n\
    \    if base == 17:\n        return '{:x}'.format(x)\n    if base == 18:\n   \
    \     return '{:x}'.format(x)\n    if base == 19:\n        return '{:x}'.format(x)\n\
    \    if base == 20:\n        return '{:x}'.format(x)\n    if base == 21:\n   \
    \     return '{:x}'.format(x)\n    if base == 22:\n        return '{:x}'.format(x)\n\
    \    if base == 23:\n        return '{:x}'.format(x)\n    if base == 24:\n   \
    \     return '{:x}'.format(x)\n    if base == 25:\n        return '{:x}'.format(x)\n\
    \    if base == 26:\n        return '{:x}'.format(x)\n    if base == 27:\n   \
    \     return '{:x}'.format(x)\n    if base == 28:\n        return '{:x}'.format(x)\n\
    \    if base == 29:\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 10:\n        raise ValueError(\"Base must\
    \ be less than 11\")\n    if x < 0:\n        return '-' + change_base(-x, base)\n\
    \    if x == 0:\n        return '0'\n    if x < base:\n        return '0' + change_base(x,\
    \ base)\n    else:\n        return change_base(x // base, base) + change_base(x\
    \ % base, base)\n\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1.\")\n    if base == 2:\n        return str(x)\n    if x <\
    \ 0:\n        return \"-\" + change_base(-x, base)\n    if x == 0:\n        return\
    \ \"0\"\n    # if x is a power of base, return it\n    if x == 1:\n        return\
    \ \"1\"\n    if x % base == 0:\n        return change_base(x // base, base)\n\
    \    # if x is not a power of base, return the sum of the digits of x in base\n\
    \    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x\
    \ //= base\n    return \"\".join(map(str, digits))\n\n", "    if base < 2:\n \
    \       raise ValueError(\"Base should be greater than 1.\")\n    if base > 36:\n\
    \        raise ValueError(\"Base should be less than 36.\")\n    if x < 0:\n \
    \       raise ValueError(\"Input should be a positive number.\")\n    if x ==\
    \ 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n    if\
    \ base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return bin(x)[2:].rjust(3,\
    \ \"0\")\n    if base == 4:\n        return bin(x)[2:].rjust(4, \"0\")\n    if\
    \ base == 5:\n        return bin(x)[2:].rjust(5, \"0\")\n    if base == 6:\n \
    \       return bin(x)[2:].rjust(6, \"0\")\n    if base == 7:\n        return bin(x)[2:].rjust(7,\
    \ \"0\")\n    if base == 8:\n        return bin(x)[2:].rjust(8, \"0\")\n    if\
    \ base == 9:\n        return bin(x)[2:].rjust(9, \"0\")\n    if base == 16:\n\
    \        return hex(x)[2:].rjust(4, \"0\")\n    if base == 17:\n        return\
    \ hex(x)[2:].rjust(5, \"0\")\n    if base == 18:\n        return hex(x)[2:].rjust(6,\
    \ \"0\")\n    if base == 19:\n        return hex(x)[2:].rjust(7, \"0\")\n    if\
    \ base == 20:\n        return hex(x)[2:].rjust(8, \"0\")\n    if base == 21:\n\
    \        return hex(x)[2:].rjust(9, \"0\")\n    if base == 22:\n        return\
    \ hex(x)[2:].rjust(10, \"0\")\n    if base == 23:\n        return hex(x)[2:].rjust(11,\
    \ \"0\")\n    if base == 24:\n        return hex(x)[2:].rjust(12, \"0\")\n   \
    \ if base == 25:\n        return", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be a positive number\")\n    if x == 0:\n        return \"0\"\n    if x\
    \ == 1:\n        return \"1\"\n    if x == 2:\n        return \"10\"\n    if x\
    \ == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n    if\
    \ x == 5:\n        return \"101\"\n    if x == 6:\n        return \"110\"\n  \
    \  if x == 7:\n        return \"111\"\n    if x == 8:\n        return \"1000\"\
    \n    if x == 9:\n        return \"1001\"\n    if x == 10:\n        return \"\
    1010\"\n    if x == 11:\n        return \"1011\"\n    if x == 12:\n        return\
    \ \"1100\"\n    if x == 13:\n        return \"1101\"\n    if x == 14:\n      \
    \  return \"1110\"\n    if x == 15:\n        return \"1111\"\n    if x == 16:\n\
    \        return \"10000\"\n    if x == 17:\n        return \"10001\"\n    if x\
    \ == 18:\n        return \"10010\"\n    if x == 19:\n        return \"10011\"\n\
    \    if x == 20:\n        return \"10100\"\n    if x == 21:\n        return \"\
    10101\"\n    if x == 22:\n        return \"10110\"\n    if x == 23:\n        return\
    \ \"10111\"\n    if x == 24:\n        return \"11000\"\n    if x == 25:\n    \
    \    return \"11001\"\n    if x == 26:\n        return \"11010\"\n    if x ==\
    \ 27:\n        return \"11011\"\n    if x == 28:\n        return \"11100\"\n \
    \   if x == 29:\n        return \"11101\"\n    if x == 30:\n        return \"\
    11110\"\n    if x == 31:\n        return \"11111\"\n    if x == 32:\n        return\
    \ \"100000\"\n    if x", "    if base < 2:\n        raise ValueError(\"Base should\
    \ be greater than 1\")\n    if base > 10:\n        raise ValueError(\"Base should\
    \ be less than 10\")\n    if x < 0:\n        raise ValueError(\"Input should be\
    \ positive\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n    \
    \    return str(x)\n    return str(x).zfill(int(math.log(x, base)) + 1)\n\n",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n\
    \    if base > 36:\n        raise ValueError(\"Base must be less than 36.\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\"] * x)\n    if base == 3:\n\
    \        return \"\".join([\"1\"] * (x - 1) + [\"10\"])\n    if base == 4:\n \
    \       return \"\".join([\"1\"] * (x - 1) + [\"100\"])\n    if base == 5:\n \
    \       return \"\".join([\"1\"] * (x - 1) + [\"1000\"])\n    if base == 6:\n\
    \        return \"\".join([\"1\"] * (x - 1) + [\"10000\"])\n    if base == 7:\n\
    \        return \"\".join([\"1\"] * (x - 1) + [\"100000\"])\n    if base == 8:\n\
    \        return \"\".join([\"1\"] * (x - 1) + [\"1000000\"])\n    if base == 9:\n\
    \        return \"\".join([\"1\"] * (x - 1) + [\"10000000\"])\n    if base ==\
    \ 10:\n        return \"\".join([\"1\"] * (x - 1) + [\"100000000\"])\n    if base\
    \ == 11:\n        return \"\".join([\"1\"] * (x - 1) + [\"1000000000\"])\n   \
    \ if base == 12:\n        return \"\".join([\"1\"] * (x - 1) + [\"10000000000\"\
    ])\n    if base == 13:\n        return \"\".join([\"1\"] * (x - 1) + [\"100000000000\"\
    ])\n    if base == 14:\n        return \"\".join([\"1\"] * (x - 1) + [\"1000000000000\"\
    ])\n    if base == 15:\n        return \"\".join([\"1\"] * (x - 1) + [\"10000000000000\"\
    ])\n    if base == 16:\n        return \"\".join([\"1\"] * (x - 1) + [\"100000000000000",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n\
    \    if base > 36:\n        raise ValueError(\"Base must be less than 36.\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 3:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 4:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 6:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 7:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 9:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i else \"0\" for i in\
    \ bin(x)[2:]])\n    if base == 17:\n        return \"\".join([\"1\" if i else\
    \ \"0\" for i in bin(x)[2:]])\n    if base == 18:\n        return \"\".join([\"\
    1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 19:\n        return\
    \ \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 20:\n\
    \        return \"\".join([\"1\" if", "    if base < 2:\n        raise ValueError(\"\
    Base should be greater than 1\")\n    if base > 10:\n        raise ValueError(\"\
    Base should be less than 10\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ number should be positive\")\n    if x == 0:\n        return \"0\"\n    if x\
    \ == 1:\n        return \"1\"\n    if x == 2:\n        return \"10\"\n    if x\
    \ == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n    if\
    \ x == 5:\n        return \"101\"\n    if x == 6:\n        return \"110\"\n  \
    \  if x == 7:\n        return \"111\"\n    if x == 8:\n        return \"1000\"\
    \n    if x == 9:\n        return \"1001\"\n    if x == 10:\n        return \"\
    1010\"\n    if x == 11:\n        return \"1011\"\n    if x == 12:\n        return\
    \ \"1100\"\n    if x == 13:\n        return \"1101\"\n    if x == 14:\n      \
    \  return \"1110\"\n    if x == 15:\n        return \"1111\"\n    if x == 16:\n\
    \        return \"10000\"\n    if x == 17:\n        return \"10001\"\n    if x\
    \ == 18:\n        return \"10010\"\n    if x == 19:\n        return \"10011\"\n\
    \    if x == 20:\n        return \"10100\"\n    if x == 21:\n        return \"\
    10101\"\n    if x == 22:\n        return \"10110\"\n    if x == 23:\n        return\
    \ \"10111\"\n    if x == 24:\n        return \"11000\"\n    if x == 25:\n    \
    \    return \"11001\"\n    if x == 26:\n        return \"11010\"\n    if x ==\
    \ 27:\n        return \"11011\"\n    if x == 28:\n        return \"11100\"\n \
    \   if x == 29:\n        return \"11101\"\n    if x == 30:\n        return \"\
    11110\"\n    if x == 31:\n        return \"11111\"\n    if x == 32:\n        return\
    \ \"100000\"\n    if x ==", "    if base < 2:\n        raise ValueError(\"Base\
    \ must be greater than 1.\")\n    if base > 10:\n        raise ValueError(\"Base\
    \ must be less than 10.\")\n    if x < 0:\n        raise ValueError(\"Input number\
    \ must be positive.\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    return str(x).zfill(base)\n\n", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n    \
    \    return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n\
    \    if x < base:\n        return '0' + change_base(x, base)\n    else:\n    \
    \    return change_base(x // base, base) + change_base(x % base, base)\n\n", " \
    \   if base < 2:\n        raise ValueError('Base must be greater than 1')\n  \
    \  if base > 36:\n        raise ValueError('Base must be less than 36')\n    if\
    \ x < 0:\n        raise ValueError('Input must be a positive number')\n    if\
    \ x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n   \
    \ if base == 2:\n        return '{:b}'.format(x).zfill(len(str(x)))\n    if base\
    \ == 3:\n        return '{:b}'.format(x).zfill(len(str(x)))\n    if base == 4:\n\
    \        return '{:b}'.format(x).zfill(len(str(x)))\n    if base == 5:\n     \
    \   return '{:b}'.format(x).zfill(len(str(x)))\n    if base == 6:\n        return\
    \ '{:b}'.format(x).zfill(len(str(x)))\n    if base == 7:\n        return '{:b}'.format(x).zfill(len(str(x)))\n\
    \    if base == 8:\n        return '{:b}'.format(x).zfill(len(str(x)))\n    if\
    \ base == 9:\n        return '{:b}'.format(x).zfill(len(str(x)))\n    if base\
    \ == 16:\n        return '{:x}'.format(x).zfill(len(str(x)))\n    if base == 17:\n\
    \        return '{:x}'.format(x).zfill(len(str(x)))\n    if base == 18:\n    \
    \    return '{:x}'.format(x).zfill(len(str(x)))\n    if base == 19:\n        return\
    \ '{:x}'.format(x).zfill(len(str(x)))\n    if base == 20:\n        return '{:x}'.format(x).zfill(len(str(x)))\n\
    \    if base == 21:\n        return '{:x}'.format(x).zfill(len(str(x)))\n    if\
    \ base == 22:\n        return '{:x}'.format(x).", "    if base < 2:\n        raise\
    \ ValueError(\"Base must be greater than 1\")\n    if base > 10:\n        raise\
    \ ValueError(\"Base must be less than 10\")\n    if x < 0:\n        raise ValueError(\"\
    Input number must be positive\")\n    if x == 0:\n        return '0'\n    if x\
    \ == 1:\n        return '1'\n    if x == 2:\n        return '10'\n    if x ==\
    \ 3:\n        return '11'\n    if x == 4:\n        return '100'\n    if x == 5:\n\
    \        return '101'\n    if x == 6:\n        return '110'\n    if x == 7:\n\
    \        return '111'\n    if x == 8:\n        return '1000'\n    if x == 9:\n\
    \        return '1001'\n    if x == 10:\n        return '1010'\n    if x == 11:\n\
    \        return '1011'\n    if x == 12:\n        return '1100'\n    if x == 13:\n\
    \        return '1101'\n    if x == 14:\n        return '1110'\n    if x == 15:\n\
    \        return '1111'\n    if x == 16:\n        return '10000'\n    if x == 17:\n\
    \        return '10001'\n    if x == 18:\n        return '10010'\n    if x ==\
    \ 19:\n        return '10011'\n    if x == 20:\n        return '10100'\n    if\
    \ x == 21:\n        return '10101'\n    if x == 22:\n        return '10110'\n\
    \    if x == 23:\n        return '10111'\n    if x == 24:\n        return '11000'\n\
    \    if x == 25:\n        return '11001'\n    if x == 26:\n        return '11010'\n\
    \    if x == 27:\n        return '11011'\n    if x == 28:\n        return '11100'\n\
    \    if x == 29:\n        return '11101'\n    if x == 30:\n        return '11110'\n\
    \    if x == 31:\n        return '11111'\n    if x == 32:\n        return '100000'\n\
    \    if x ==", "    if base < 2:\n        raise ValueError(\"Base must be greater\
    \ than 1\")\n    if base > 36:\n        raise ValueError(\"Base must be less than\
    \ 36\")\n    if x < 0:\n        raise ValueError(\"Input must be positive\")\n\
    \    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"{0:b}\".format(x)\n    if base == 3:\n  \
    \      return \"{0:b}\".format(x)\n    if base == 4:\n        return \"{0:b}\"\
    .format(x)\n    if base == 5:\n        return \"{0:b}\".format(x)\n    if base\
    \ == 6:\n        return \"{0:b}\".format(x)\n    if base == 7:\n        return\
    \ \"{0:b}\".format(x)\n    if base == 8:\n        return \"{0:b}\".format(x)\n\
    \    if base == 9:\n        return \"{0:b}\".format(x)\n    if base == 16:\n \
    \       return \"{0:x}\".format(x)\n    if base == 17:\n        return \"{0:x}\"\
    .format(x)\n    if base == 18:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 19:\n        return \"{0:x}\".format(x)\n    if base == 20:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 21:\n        return \"{0:x}\".format(x)\n\
    \    if base == 22:\n        return \"{0:x}\".format(x)\n    if base == 23:\n\
    \        return \"{0:x}\".format(x)\n    if base == 24:\n        return \"{0:x}\"\
    .format(x)\n    if base == 25:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 26:\n        return \"{0:x}\".format(x)\n    if base == 27:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 28:\n        return \"{0:x}\".format(x)\n\
    \    if base == 29:\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ a positive number.\")\n    if x == 0:\n        return \"0\"\n    if base ==\
    \ 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n \
    \   if base == 3:\n        return str(x)\n    if base == 4:\n        return bin(x)[2:]\n\
    \    if base == 5:\n        return str(x)\n    if base == 6:\n        return bin(x)[2:]\n\
    \    if base == 7:\n        return str(x)\n    if base == 8:\n        return bin(x)[2:]\n\
    \    if base == 9:\n        return str(x)\n    if base == 16:\n        return\
    \ hex(x)[2:]\n    if base == 17:\n        return hex(x)[2:]\n    if base == 18:\n\
    \        return hex(x)[2:]\n    if base == 19:\n        return hex(x)[2:]\n  \
    \  if base == 20:\n        return hex(x)[2:]\n    if base == 21:\n        return\
    \ hex(x)[2:]\n    if base == 22:\n        return hex(x)[2:]\n    if base == 23:\n\
    \        return hex(x)[2:]\n    if base == 24:\n        return hex(x)[2:]\n  \
    \  if base == 25:\n        return hex(x)[2:]\n    if base == 26:\n        return\
    \ hex(x)[2:]\n    if base == 27:\n        return hex(x)[2:]\n    if base == 28:\n\
    \        return hex(x)[2:]\n    if base == 29:\n        return hex(x)[2:]\n  \
    \  if base == 30:\n        return hex(x)[2:]\n    if base == 31:\n        return\
    \ hex(x)[2:]\n    if base == 32:\n        return hex(x)[2:]\n    if base == 33:\n\
    \        return hex(x)[2:]\n    if base == 34:\n        return hex(x)[2:]\n  \
    \  ", "    if base < 2:\n        raise ValueError(\"Base must be greater than\
    \ 1.\")\n    if base > 36:\n        raise ValueError(\"Base must be less than\
    \ 36.\")\n    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"{0:b}\".format(x)\n    if base == 3:\n  \
    \      return \"{0:b}\".format(x)\n    if base == 4:\n        return \"{0:b}\"\
    .format(x)\n    if base == 5:\n        return \"{0:b}\".format(x)\n    if base\
    \ == 6:\n        return \"{0:b}\".format(x)\n    if base == 7:\n        return\
    \ \"{0:b}\".format(x)\n    if base == 8:\n        return \"{0:b}\".format(x)\n\
    \    if base == 9:\n        return \"{0:b}\".format(x)\n    if base == 16:\n \
    \       return \"{0:x}\".format(x)\n    if base == 17:\n        return \"{0:x}\"\
    .format(x)\n    if base == 18:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 19:\n        return \"{0:x}\".format(x)\n    if base == 20:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 21:\n        return \"{0:x}\".format(x)\n\
    \    if base == 22:\n        return \"{0:x}\".format(x)\n    if base == 23:\n\
    \        return \"{0:x}\".format(x)\n    if base == 24:\n        return \"{0:x}\"\
    .format(x)\n    if base == 25:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 26:\n        return \"{0:x}\".format(x)\n    if base == 27:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 28:\n        return \"{0:x}\".format(x)\n\
    \    if base == 29", "    if base < 2:\n        raise ValueError(\"Base should\
    \ be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base should\
    \ be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input should be\
    \ positive\")\n    if x == 0:\n        return '0'\n    if base == 10:\n      \
    \  return str(x)\n    if base == 2:\n        return '{0:b}'.format(x)\n    if\
    \ base == 3:\n        return '{0:b}'.format(x)\n    if base == 4:\n        return\
    \ '{0:b}'.format(x)\n    if base == 5:\n        return '{0:b}'.format(x)\n   \
    \ if base == 6:\n        return '{0:b}'.format(x)\n    if base == 7:\n       \
    \ return '{0:b}'.format(x)\n    if base == 8:\n        return '{0:b}'.format(x)\n\
    \    if base == 9:\n        return '{0:b}'.format(x)\n    if base == 16:\n   \
    \     return '{0:x}'.format(x)\n    if base == 17:\n        return '{0:x}'.format(x)\n\
    \    if base == 18:\n        return '{0:x}'.format(x)\n    if base == 19:\n  \
    \      return '{0:x}'.format(x)\n    if base == 20:\n        return '{0:x}'.format(x)\n\
    \    if base == 21:\n        return '{0:x}'.format(x)\n    if base == 22:\n  \
    \      return '{0:x}'.format(x)\n    if base == 23:\n        return '{0:x}'.format(x)\n\
    \    if base == 24:\n        return '{0:x}'.format(x)\n    if base == 25:\n  \
    \      return '{0:x}'.format(x)\n    if base == 26:\n        return '{0:x}'.format(x)\n\
    \    if base == 27:\n        return '{0:x}'.format(x)\n    if base == 28:\n",
  "    if base < 2:\n        raise ValueError('Base must be greater than 1')\n   \
    \ if base > 36:\n        raise ValueError('Base must be less than 36')\n    if\
    \ x < 0:\n        raise ValueError('Input number must be positive')\n    if x\
    \ == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    if\
    \ base == 2:\n        return '{:b}'.format(x)\n    if base == 3:\n        return\
    \ '{:b}'.format(x)\n    if base == 4:\n        return '{:b}'.format(x)\n    if\
    \ base == 5:\n        return '{:b}'.format(x)\n    if base == 6:\n        return\
    \ '{:b}'.format(x)\n    if base == 7:\n        return '{:b}'.format(x)\n    if\
    \ base == 8:\n        return '{:b}'.format(x)\n    if base == 9:\n        return\
    \ '{:b}'.format(x)\n    if base == 16:\n        return '{:x}'.format(x)\n    if\
    \ base == 17:\n        return '{:x}'.format(x)\n    if base == 18:\n        return\
    \ '{:x}'.format(x)\n    if base == 19:\n        return '{:x}'.format(x)\n    if\
    \ base == 20:\n        return '{:x}'.format(x)\n    if base == 21:\n        return\
    \ '{:x}'.format(x)\n    if base == 22:\n        return '{:x}'.format(x)\n    if\
    \ base == 23:\n        return '{:x}'.format(x)\n    if base == 24:\n        return\
    \ '{:x}'.format(x)\n    if base == 25:\n        return '{:x}'.format(x)\n    if\
    \ base == 26:\n        return '{:x}'.format(x)\n    if base == 27:\n        return\
    \ '{:x}'.format(x)\n    if base == 28:\n        return '{:x}'.format(x)\n    if\
    \ base == 29:", "    if base < 2:\n        raise ValueError(\"Base should be greater\
    \ than 1.\")\n    if base > 36:\n        raise ValueError(\"Base should be less\
    \ than 36.\")\n    if x < 0:\n        raise ValueError(\"Input should be a positive\
    \ number.\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n     \
    \   return str(x)\n    if base == 2:\n        return bin(x)[2:].zfill(8)\n   \
    \ if base == 3:\n        return str(x)\n    if base == 4:\n        return bin(x)[2:].zfill(6)\n\
    \    if base == 5:\n        return bin(x)[2:].zfill(4)\n    if base == 6:\n  \
    \      return bin(x)[2:].zfill(3)\n    if base == 7:\n        return bin(x)[2:].zfill(2)\n\
    \    if base == 8:\n        return bin(x)[2:].zfill(1)\n    if base == 9:\n  \
    \      return bin(x)[2:].zfill(0)\n    if base == 16:\n        return hex(x)[2:].zfill(8)\n\
    \    if base == 17:\n        return hex(x)[2:].zfill(6)\n    if base == 18:\n\
    \        return hex(x)[2:].zfill(4)\n    if base == 19:\n        return hex(x)[2:].zfill(3)\n\
    \    if base == 20:\n        return hex(x)[2:].zfill(2)\n    if base == 21:\n\
    \        return hex(x)[2:].zfill(1)\n    if base == 22:\n        return hex(x)[2:].zfill(0)\n\
    \    if base == 23:\n        return hex(x)[2:].zfill(0)\n    if base == 24:\n\
    \        return hex(x)[2:].zfill(0)\n    if base == 25:\n        return hex(x)[2:].zfill(0)\n\
    \    if base == 26:\n        return hex(x)[2:].zfill(0)\n    if base == 27:\n\
    \        return hex(x)[2:", "    if base < 2:\n        raise ValueError(\"Base\
    \ must be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base\
    \ must be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input must\
    \ be a positive integer.\")\n    if x == 0:\n        return '0'\n    if base ==\
    \ 10:\n        return str(x)\n    return str(x).zfill(int(math.log(x, base)) +\
    \ 1)\n\n", "    if base < 2 or base > 10:\n        raise ValueError(\"base must\
    \ be between 2 and 10\")\n    if x < 0:\n        return \"-\" + change_base(-x,\
    \ base)\n    if x == 0:\n        return \"0\"\n    if x < base:\n        return\
    \ change_base(x, base)\n    else:\n        return change_base(x // base, base)\
    \ + change_base(x % base, base)\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1.\")\n    if base == 2:\n        return str(x)\n  \
    \  if base == 10:\n        return str(x)\n    if x < 0:\n        return '-' +\
    \ change_base(-x, base)\n    if x == 0:\n        return '0'\n    if x == 1:\n\
    \        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n    \
    \    return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return\
    \ '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n\
    \    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if\
    \ x == 10:\n        return '10'\n    if x == 11:\n        return '11'\n    if\
    \ x == 12:\n        return '12'\n    if x == 13:\n        return '13'\n    if\
    \ x == 14:\n        return '14'\n    if x == 15:\n        return '15'\n    if\
    \ x == 16:\n        return '16'\n    if x == 17:\n        return '17'\n    if\
    \ x == 18:\n        return '18'\n    if x == 19:\n        return '19'\n    if\
    \ x == 20:\n        return '20'\n    if x == 21:\n        return '21'\n    if\
    \ x == 22:\n        return '22'\n    if x == 23:\n        return '23'\n    if\
    \ x == 24:\n        return '24'\n    if x == 25:\n        return '25'\n    if\
    \ x == 26:\n        return '26'\n    if x == 27:\n        return '27'\n    if\
    \ x == 28:\n        return '28'\n    if x == 29:\n        return '29'\n    if\
    \ x == 30:\n        return '30'\n    if x == 31:\n        return '31'\n    if\
    \ x == 32:\n        return '32'\n    if x == 33:\n        return '33'\n    ",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n \
    \   if base > 10:\n        raise ValueError(\"Base must be less than 10\")\n \
    \   if x < 0:\n        raise ValueError(\"Input number must be positive\")\n \
    \   if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return '{:b}'.format(x)\n    if base == 3:\n     \
    \   return '{:b}'.format(x)\n    if base == 4:\n        return '{:b}'.format(x)\n\
    \    if base == 5:\n        return '{:b}'.format(x)\n    if base == 6:\n     \
    \   return '{:b}'.format(x)\n    if base == 7:\n        return '{:b}'.format(x)\n\
    \    if base == 8:\n        return '{:b}'.format(x)\n    if base == 9:\n     \
    \   return '{:b}'.format(x)\n    if base == 16:\n        return '{:x}'.format(x)\n\
    \    if base == 17:\n        return '{:x}'.format(x)\n    if base == 18:\n   \
    \     return '{:x}'.format(x)\n    if base == 19:\n        return '{:x}'.format(x)\n\
    \    if base == 20:\n        return '{:x}'.format(x)\n    if base == 21:\n   \
    \     return '{:x}'.format(x)\n    if base == 22:\n        return '{:x}'.format(x)\n\
    \    if base == 23:\n        return '{:x}'.format(x)\n    if base == 24:\n   \
    \     return '{:x}'.format(x)\n    if base == 25:\n        return '{:x}'.format(x)\n\
    \    if base == 26:\n        return '{:x}'.format(x)\n    if base == 27:\n   \
    \     return '{:x}'.format(x)\n    if base == 28:\n        return '{:x}'.format(x)\n\
    \    if base == 29:", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ positive\")\n    if x == 0:\n        return '0'\n    if base == 10:\n      \
    \  return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base ==\
    \ 3:\n        return bin(x)[2:]\n    if base == 4:\n        return bin(x)[2:]\n\
    \    if base == 5:\n        return bin(x)[2:]\n    if base == 6:\n        return\
    \ bin(x)[2:]\n    if base == 7:\n        return bin(x)[2:]\n    if base == 8:\n\
    \        return bin(x)[2:]\n    if base == 9:\n        return bin(x)[2:]\n   \
    \ if base == 16:\n        return hex(x)[2:]\n    if base == 17:\n        return\
    \ hex(x)[2:]\n    if base == 18:\n        return hex(x)[2:]\n    if base == 19:\n\
    \        return hex(x)[2:]\n    if base == 20:\n        return hex(x)[2:]\n  \
    \  if base == 21:\n        return hex(x)[2:]\n    if base == 22:\n        return\
    \ hex(x)[2:]\n    if base == 23:\n        return hex(x)[2:]\n    if base == 24:\n\
    \        return hex(x)[2:]\n    if base == 25:\n        return hex(x)[2:]\n  \
    \  if base == 26:\n        return hex(x)[2:]\n    if base == 27:\n        return\
    \ hex(x)[2:]\n    if base == 28:\n        return hex(x)[2:]\n    if base == 29:\n\
    \        return hex(x)[2:]\n    if base == 30:\n        return hex(x)[2:]\n  \
    \  if base == 31:\n        return hex(x)[2:]\n    if base == 32:\n        return\
    \ hex(x)[2:]\n    if base == 33:\n        return hex(x)[2:]\n    if base == 34:\n\
    \        return hex(", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input number must\
    \ be positive\")\n    if x == 0:\n        return '0'\n    if x == 1:\n       \
    \ return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return\
    \ '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n\
    \    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if\
    \ x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x ==\
    \ 10:\n        return '10'\n    if x == 11:\n        return '11'\n    if x ==\
    \ 12:\n        return '12'\n    if x == 13:\n        return '13'\n    if x ==\
    \ 14:\n        return '14'\n    if x == 15:\n        return '15'\n    if x ==\
    \ 16:\n        return '16'\n    if x == 17:\n        return '17'\n    if x ==\
    \ 18:\n        return '18'\n    if x == 19:\n        return '19'\n    if x ==\
    \ 20:\n        return '20'\n    if x == 21:\n        return '21'\n    if x ==\
    \ 22:\n        return '22'\n    if x == 23:\n        return '23'\n    if x ==\
    \ 24:\n        return '24'\n    if x == 25:\n        return '25'\n    if x ==\
    \ 26:\n        return '26'\n    if x == 27:\n        return '27'\n    if x ==\
    \ 28:\n        return '28'\n    if x == 29:\n        return '29'\n    if x ==\
    \ 30:\n        return '30'\n    if x == 31:\n        return '31'\n    if x ==\
    \ 32:\n        return '32'\n    if x == 33:\n        return '33'\n    if x ==\
    \ 34:\n        return '34", "    if base < 2:\n        raise ValueError(\"Base\
    \ must be greater than 1.\")\n    if base == 2:\n        return str(x)\n    if\
    \ base == 10:\n        return str(x)\n    if x < 0:\n        return \"-\" + change_base(-x,\
    \ base)\n    if x == 0:\n        return \"0\"\n    return str(x).zfill(base)\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\"\
    )\n    if base > 10:\n        raise ValueError(\"Base must be less than 10\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be a positive number\")\n\
    \    if x == 0:\n        return '0'\n    result = \"\"\n    while x > 0:\n   \
    \     result = str(x % base) + result\n        x = x // base\n    return result\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\"\
    )\n    if base > 36:\n        raise ValueError(\"Base must be less than 36.\"\
    )\n    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:].zfill(8)\n    if base == 3:\n  \
    \      return bin(x)[2:].zfill(6)\n    if base == 4:\n        return bin(x)[2:].zfill(4)\n\
    \    if base == 5:\n        return bin(x)[2:].zfill(3)\n    if base == 6:\n  \
    \      return bin(x)[2:].zfill(2)\n    if base == 7:\n        return bin(x)[2:].zfill(1)\n\
    \    if base == 8:\n        return bin(x)[2:].zfill(0)\n    if base == 9:\n  \
    \      return bin(x)[2:].zfill(0)\n    if base == 16:\n        return hex(x)[2:].zfill(8)\n\
    \    if base == 17:\n        return hex(x)[2:].zfill(6)\n    if base == 18:\n\
    \        return hex(x)[2:].zfill(4)\n    if base == 19:\n        return hex(x)[2:].zfill(3)\n\
    \    if base == 20:\n        return hex(x)[2:].zfill(2)\n    if base == 21:\n\
    \        return hex(x)[2:].zfill(1)\n    if base == 22:\n        return hex(x)[2:].zfill(0)\n\
    \    if base == 23:\n        return hex(x)[2:].zfill(0)\n    if base == 24:\n\
    \        return hex(x)[2:].zfill(0)\n    if base == 25:\n        return hex(x)[2:].zfill(0)\n\
    \    if base == 26:\n        return hex(x)[2:].zfill(0)\n    if base == 27:\n",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n \
    \   if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n \
    \   if x < 0:\n        raise ValueError(\"Input number must be positive\")\n \
    \   if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return '{:b}'.format(x)\n    if base == 3:\n     \
    \   return '{:b}'.format(x)\n    if base == 4:\n        return '{:b}'.format(x)\n\
    \    if base == 5:\n        return '{:b}'.format(x)\n    if base == 6:\n     \
    \   return '{:b}'.format(x)\n    if base == 7:\n        return '{:b}'.format(x)\n\
    \    if base == 8:\n        return '{:b}'.format(x)\n    if base == 9:\n     \
    \   return '{:b}'.format(x)\n    if base == 16:\n        return '{:x}'.format(x)\n\
    \    if base == 17:\n        return '{:x}'.format(x)\n    if base == 18:\n   \
    \     return '{:x}'.format(x)\n    if base == 19:\n        return '{:x}'.format(x)\n\
    \    if base == 20:\n        return '{:x}'.format(x)\n    if base == 21:\n   \
    \     return '{:x}'.format(x)\n    if base == 22:\n        return '{:x}'.format(x)\n\
    \    if base == 23:\n        return '{:x}'.format(x)\n    if base == 24:\n   \
    \     return '{:x}'.format(x)\n    if base == 25:\n        return '{:x}'.format(x)\n\
    \    if base == 26:\n        return '{:x}'.format(x)\n    if base == 27:\n   \
    \     return '{:x}'.format(x)\n    if base == 28:\n        return '{:x}'.format(x)\n\
    \    if base == 29:", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 10:\n        raise ValueError(\"Base must\
    \ be less than 10\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ a positive integer\")\n    if x == 0:\n        return \"0\"\n    if base ==\
    \ 10:\n        return str(x)\n    if x < base:\n        return \"0\"\n    else:\n\
    \        return str(x) + \"\".join([\"1\" for i in range(base - 2, 0, -1)])\n",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n \
    \   if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n \
    \   if x < 0:\n        raise ValueError(\"Input must be a positive number\")\n\
    \    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return\
    \ bin(x)[2:]\n    if base == 4:\n        return bin(x)[2:]\n    if base == 5:\n\
    \        return bin(x)[2:]\n    if base == 6:\n        return bin(x)[2:]\n   \
    \ if base == 7:\n        return bin(x)[2:]\n    if base == 8:\n        return\
    \ bin(x)[2:]\n    if base == 9:\n        return bin(x)[2:]\n    if base == 16:\n\
    \        return hex(x)[2:]\n    if base == 17:\n        return hex(x)[2:]\n  \
    \  if base == 18:\n        return hex(x)[2:]\n    if base == 19:\n        return\
    \ hex(x)[2:]\n    if base == 20:\n        return hex(x)[2:]\n    if base == 21:\n\
    \        return hex(x)[2:]\n    if base == 22:\n        return hex(x)[2:]\n  \
    \  if base == 23:\n        return hex(x)[2:]\n    if base == 24:\n        return\
    \ hex(x)[2:]\n    if base == 25:\n        return hex(x)[2:]\n    if base == 26:\n\
    \        return hex(x)[2:]\n    if base == 27:\n        return hex(x)[2:]\n  \
    \  if base == 28:\n        return hex(x)[2:]\n    if base == 29:\n        return\
    \ hex(x)[2:]\n    if base == 30:\n        return hex(x)[2:]\n    if base == 31:\n\
    \        return hex(x)[2:]\n    if base == 32:\n        return hex(x)[2:]\n  \
    \  if base == 33:\n        return hex(x)[2:]\n    if base == 34:\n        return",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n\
    \    if base > 36:\n        raise ValueError(\"Base must be less than 36.\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be positive.\")\n    if\
    \ x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n   \
    \ if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return\
    \ bin(x)[2:]\n    if base == 4:\n        return bin(x)[2:]\n    if base == 5:\n\
    \        return bin(x)[2:]\n    if base == 6:\n        return bin(x)[2:]\n   \
    \ if base == 7:\n        return bin(x)[2:]\n    if base == 8:\n        return\
    \ bin(x)[2:]\n    if base == 9:\n        return bin(x)[2:]\n    if base == 16:\n\
    \        return hex(x)[2:]\n    if base == 17:\n        return hex(x)[2:]\n  \
    \  if base == 18:\n        return hex(x)[2:]\n    if base == 19:\n        return\
    \ hex(x)[2:]\n    if base == 20:\n        return hex(x)[2:]\n    if base == 21:\n\
    \        return hex(x)[2:]\n    if base == 22:\n        return hex(x)[2:]\n  \
    \  if base == 23:\n        return hex(x)[2:]\n    if base == 24:\n        return\
    \ hex(x)[2:]\n    if base == 25:\n        return hex(x)[2:]\n    if base == 26:\n\
    \        return hex(x)[2:]\n    if base == 27:\n        return hex(x)[2:]\n  \
    \  if base == 28:\n        return hex(x)[2:]\n    if base == 29:\n        return\
    \ hex(x)[2:]\n    if base == 30:\n        return hex(x)[2:]\n    if base == 31:\n\
    \        return hex(x)[2:]\n    if base == 32:\n        return hex(x)[2:]\n  \
    \  if base == 33:\n        return hex(x)[2:]\n    if base == 34:\n        return\
    \ hex(", "    if base < 2:\n        raise ValueError(\"Base must be greater than\
    \ 1\")\n    if base > 36:\n        raise ValueError(\"Base must be less than 36\"\
    )\n    if x < 0:\n        raise ValueError(\"Input must be a positive number\"\
    )\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return '{:b}'.format(x)\n    if base == 3:\n     \
    \   return '{:b}'.format(x)\n    if base == 4:\n        return '{:b}'.format(x)\n\
    \    if base == 5:\n        return '{:b}'.format(x)\n    if base == 6:\n     \
    \   return '{:b}'.format(x)\n    if base == 7:\n        return '{:b}'.format(x)\n\
    \    if base == 8:\n        return '{:b}'.format(x)\n    if base == 9:\n     \
    \   return '{:b}'.format(x)\n    if base == 16:\n        return '{:x}'.format(x)\n\
    \    if base == 17:\n        return '{:x}'.format(x)\n    if base == 18:\n   \
    \     return '{:x}'.format(x)\n    if base == 19:\n        return '{:x}'.format(x)\n\
    \    if base == 20:\n        return '{:x}'.format(x)\n    if base == 21:\n   \
    \     return '{:x}'.format(x)\n    if base == 22:\n        return '{:x}'.format(x)\n\
    \    if base == 23:\n        return '{:x}'.format(x)\n    if base == 24:\n   \
    \     return '{:x}'.format(x)\n    if base == 25:\n        return '{:x}'.format(x)\n\
    \    if base == 26:\n        return '{:x}'.format(x)\n    if base == 27:\n   \
    \     return '{:x}'.format(x)\n    if base == 28:\n        return '{:x}'.format(x)\n\
    \    if base == 29", "    if base < 2:\n        raise ValueError(\"Base must be\
    \ greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36.\")\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n\
    \    if x == 0:\n        return \"0\"\n    if x < base:\n        return str(x)\n\
    \    else:\n        return change_base(x // base, base) + str(x % base)\n\n",
  "    if base < 2:\n        raise ValueError(\"Base should be greater than 1.\")\n\
    \    if base > 10:\n        raise ValueError(\"Base should be less than 10.\"\
    )\n    if x < 0:\n        raise ValueError(\"Input should be positive.\")\n  \
    \  if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\"] * x)\n    if base == 3:\n\
    \        return \"\".join([\"1\"] * (x // 3) + [\"2\"] * (x % 3))\n    if base\
    \ == 4:\n        return \"\".join([\"1\"] * (x // 4) + [\"2\"] * (x % 4) + [\"\
    3\"] * (x % 4))\n    if base == 5:\n        return \"\".join([\"1\"] * (x // 5)\
    \ + [\"2\"] * (x % 5) + [\"3\"] * (x % 5))\n    if base == 6:\n        return\
    \ \"\".join([\"1\"] * (x // 6) + [\"2\"] * (x % 6) + [\"3\"] * (x % 6))\n    if\
    \ base == 7:\n        return \"\".join([\"1\"] * (x // 7) + [\"2\"] * (x % 7)\
    \ + [\"3\"] * (x % 7))\n    if base == 8:\n        return \"\".join([\"1\"] *\
    \ (x // 8) + [\"2\"] * (x % 8) + [\"3\"] * (x % 8))\n    if base == 9:\n     \
    \   return \"\".join([\"1\"] * (x // 9) + [\"2\"] * (x % 9) + [\"3\"] * (x % 9))\n\
    \    if base == 10:\n        return \"\".join([\"1\"] * (x // 10) + [\"2\"] *\
    \ (x % 10) + [\"3\"] * (x % 10))\n    if base == 11:\n        return \"\".join([\"\
    1\"] * (x // 11) + [\"2\"] * (x % 11) + [\"3\"] * (x % 11))\n    if base == 12:\n\
    \        return \"\".join([\"1\"] * (x // 12) + [\"2\"] * (x %", "    if base\
    \ < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n    if base\
    \ > 10:\n        raise ValueError(\"Base must be less than 10.\")\n    if x <\
    \ 0:\n        raise ValueError(\"Input must be positive.\")\n    if x == 0:\n\
    \        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n\
    \        return \"10\"\n    if x == 3:\n        return \"11\"\n    if x == 4:\n\
    \        return \"100\"\n    if x == 5:\n        return \"101\"\n    if x == 6:\n\
    \        return \"110\"\n    if x == 7:\n        return \"111\"\n    if x == 8:\n\
    \        return \"1000\"\n    if x == 9:\n        return \"1001\"\n    if x ==\
    \ 10:\n        return \"1010\"\n    if x == 11:\n        return \"1011\"\n   \
    \ if x == 12:\n        return \"1100\"\n    if x == 13:\n        return \"1101\"\
    \n    if x == 14:\n        return \"1110\"\n    if x == 15:\n        return \"\
    1111\"\n    if x == 16:\n        return \"10000\"\n    if x == 17:\n        return\
    \ \"10001\"\n    if x == 18:\n        return \"10010\"\n    if x == 19:\n    \
    \    return \"10011\"\n    if x == 20:\n        return \"10100\"\n    if x ==\
    \ 21:\n        return \"10101\"\n    if x == 22:\n        return \"10110\"\n \
    \   if x == 23:\n        return \"10111\"\n    if x == 24:\n        return \"\
    11000\"\n    if x == 25:\n        return \"11001\"\n    if x == 26:\n        return\
    \ \"11010\"\n    if x == 27:\n        return \"11011\"\n    if x == 28:\n    \
    \    return \"11100\"\n    if x == 29:\n        return \"11101\"\n    if x ==\
    \ 30:\n        return \"11110\"\n    if x == 31:\n        return \"11111\"\n \
    \   if x == 32:\n        return \"100000\"\n    if x == 33", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n    \
    \    raise ValueError(\"Input must be positive\")\n    if x == 0:\n        return\
    \ '0'\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return\
    \ bin(x)[2:]\n    if base == 3:\n        return str(x)\n    if base == 4:\n  \
    \      return bin(x)[2:]\n    if base == 5:\n        return str(x)\n    if base\
    \ == 6:\n        return bin(x)[2:]\n    if base == 7:\n        return str(x)\n\
    \    if base == 8:\n        return bin(x)[2:]\n    if base == 9:\n        return\
    \ str(x)\n    if base == 16:\n        return hex(x)[2:]\n    if base == 17:\n\
    \        return str(x)\n    if base == 18:\n        return bin(x)[2:]\n    if\
    \ base == 19:\n        return str(x)\n    if base == 20:\n        return bin(x)[2:]\n\
    \    if base == 21:\n        return str(x)\n    if base == 22:\n        return\
    \ bin(x)[2:]\n    if base == 23:\n        return str(x)\n    if base == 24:\n\
    \        return bin(x)[2:]\n    if base == 25:\n        return str(x)\n    if\
    \ base == 26:\n        return bin(x)[2:]\n    if base == 27:\n        return str(x)\n\
    \    if base == 28:\n        return bin(x)[2:]\n    if base == 29:\n        return\
    \ str(x)\n    if base == 30:\n        return bin(x)[2:]\n    if base == 31:\n\
    \        return str(x)\n    if base == 32:\n        return bin(x)[2:]\n    if\
    \ base == 33:\n        return str(x)\n    if base == 34:\n        return bin(x)[2:]\n\
    \    if base == 35:\n        return str(x)\n    if base == 36:\n", "    if base\
    \ < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base\
    \ > 36:\n        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n\
    \        raise ValueError(\"Input number must be non-negative\")\n    if x ==\
    \ 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    return\
    \ str(x).zfill(int(math.log(x, base)) + 1)\n\n", "    if base < 2:\n        raise\
    \ ValueError(\"Base must be greater than 1\")\n    if x < 0:\n        return \"\
    -\" + change_base(-x, base)\n    if x == 0:\n        return \"0\"\n    if base\
    \ == 10:\n        return str(x)\n    return str(x).zfill(base)\n\n", "    if base\
    \ < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n    if base\
    \ > 10:\n        raise ValueError(\"Base must be less than 11.\")\n    if x <\
    \ 0:\n        return \"-\" + change_base(-x, base)\n    if x == 0:\n        return\
    \ \"0\"\n    if x < base:\n        return change_base(x, base)\n    else:\n  \
    \      return change_base(x // base, base) + change_base(x % base, base)\n", " \
    \   if base < 2:\n        raise ValueError(\"Base should be greater than 1.\"\
    )\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x == 0:\n\
    \        return \"0\"\n    if x < base:\n        return change_base(x, base)\n\
    \    else:\n        return change_base(x // base, base) + change_base(x % base,\
    \ base)\n\n", "    if base < 2:\n        raise ValueError('base must be greater\
    \ than 1')\n    if base > 36:\n        raise ValueError('base must be less than\
    \ 36')\n    if x < 0:\n        raise ValueError('x must be positive')\n    if\
    \ x == 0:\n        return '0'\n    if x < base:\n        return '0' + change_base(x,\
    \ base)\n    if x % base == 0:\n        return str(x // base)\n    return str(x\
    \ // base) + change_base(x % base, base)\n", "    if base < 2:\n        raise\
    \ ValueError(\"Base must be greater than 1.\")\n    if base > 36:\n        raise\
    \ ValueError(\"Base must be less than 36.\")\n    if x < 0:\n        raise ValueError(\"\
    Input must be positive.\")\n    if x == 0:\n        return '0'\n    if base ==\
    \ 10:\n        return str(x)\n    if base == 2:\n        return '{:b}'.format(x).zfill(len(str(x)))\n\
    \    if base == 3:\n        return '{:b}'.format(x).zfill(len(str(x)))\n    if\
    \ base == 4:\n        return '{:b}'.format(x).zfill(len(str(x)))\n    if base\
    \ == 5:\n        return '{:b}'.format(x).zfill(len(str(x)))\n    if base == 6:\n\
    \        return '{:b}'.format(x).zfill(len(str(x)))\n    if base == 7:\n     \
    \   return '{:b}'.format(x).zfill(len(str(x)))\n    if base == 8:\n        return\
    \ '{:b}'.format(x).zfill(len(str(x)))\n    if base == 9:\n        return '{:b}'.format(x).zfill(len(str(x)))\n\
    \    if base == 16:\n        return '{:x}'.format(x).zfill(len(str(x)))\n    if\
    \ base == 17:\n        return '{:x}'.format(x).zfill(len(str(x)))\n    if base\
    \ == 18:\n        return '{:x}'.format(x).zfill(len(str(x)))\n    if base == 19:\n\
    \        return '{:x}'.format(x).zfill(len(str(x)))\n    if base == 20:\n    \
    \    return '{:x}'.format(x).zfill(len(str(x)))\n    if base == 21:\n        return\
    \ '{:x}'.format(x).zfill(len(str(x)))\n    if base == 22:\n        return '{:x}'.format(x).zfill",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n\
    \    if base > 36:\n        raise ValueError(\"Base must be less than 36.\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:].zfill(8)\n    if base == 3:\n  \
    \      return bin(x)[2:].zfill(6)\n    if base == 4:\n        return bin(x)[2:].zfill(4)\n\
    \    if base == 5:\n        return bin(x)[2:].zfill(5)\n    if base == 6:\n  \
    \      return bin(x)[2:].zfill(3)\n    if base == 7:\n        return bin(x)[2:].zfill(7)\n\
    \    if base == 8:\n        return bin(x)[2:].zfill(8)\n    if base == 9:\n  \
    \      return bin(x)[2:].zfill(9)\n    if base == 16:\n        return hex(x)[2:].zfill(8)\n\
    \    if base == 17:\n        return hex(x)[2:].zfill(6)\n    if base == 18:\n\
    \        return hex(x)[2:].zfill(5)\n    if base == 19:\n        return hex(x)[2:].zfill(4)\n\
    \    if base == 20:\n        return hex(x)[2:].zfill(3)\n    if base == 21:\n\
    \        return hex(x)[2:].zfill(7)\n    if base == 22:\n        return hex(x)[2:].zfill(8)\n\
    \    if base == 23:\n        return hex(x)[2:].zfill(9)\n    if base == 24:\n\
    \        return hex(x)[2:].zfill(10)\n    if base == 25:\n        return hex(x)[2:].zfill(11)\n\
    \    if base == 26:\n        return hex(x)[2:].zfill(12)\n    if base == 27:\n",
  "    if base < 2:\n        raise ValueError(\"Base should be greater than 1\")\n\
    \    if base > 36:\n        raise ValueError(\"Base should be less than 36\")\n\
    \    if x < 0:\n        raise ValueError(\"Input should be positive\")\n    if\
    \ x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n \
    \   return str(x).zfill(int(math.log(x, base)) + 1)\n\n", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1.\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36.\")\n    if x < 0:\n   \
    \     raise ValueError(\"Input must be a positive number.\")\n    if x == 0:\n\
    \        return \"0\"\n    if base == 10:\n        return str(x)\n    if base\
    \ == 2:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 3:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 4:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 5:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 6:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 7:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 9:\n        return \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n\
    \    if base == 16:\n        return \"\".join([\"1\" if i else \"0\" for i in\
    \ bin(x)[2:]])\n    if base == 17:\n        return \"\".join([\"1\" if i else\
    \ \"0\" for i in bin(x)[2:]])\n    if base == 18:\n        return \"\".join([\"\
    1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 19:\n        return\
    \ \"\".join([\"1\" if i else \"0\" for i in bin(x)[2:]])\n    if base == 20:\n\
    \        return \"\".join([\"1\" if", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ number must be positive\")\n    if x == 0:\n        return \"0\"\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:].zfill(8)\n\
    \    if base == 3:\n        return bin(x)[2:].zfill(6)\n    if base == 4:\n  \
    \      return bin(x)[2:].zfill(4)\n    if base == 5:\n        return bin(x)[2:].zfill(5)\n\
    \    if base == 6:\n        return bin(x)[2:].zfill(3)\n    if base == 7:\n  \
    \      return bin(x)[2:].zfill(2)\n    if base == 8:\n        return bin(x)[2:].zfill(1)\n\
    \    if base == 9:\n        return bin(x)[2:].zfill(0)\n    if base == 16:\n \
    \       return hex(x)[2:].zfill(8)\n    if base == 17:\n        return hex(x)[2:].zfill(6)\n\
    \    if base == 18:\n        return hex(x)[2:].zfill(4)\n    if base == 19:\n\
    \        return hex(x)[2:].zfill(5)\n    if base == 20:\n        return hex(x)[2:].zfill(3)\n\
    \    if base == 21:\n        return hex(x)[2:].zfill(2)\n    if base == 22:\n\
    \        return hex(x)[2:].zfill(1)\n    if base == 23:\n        return hex(x)[2:].zfill(0)\n\
    \    if base == 24:\n        return hex(x)[2:].zfill(0)\n    if base == 25:\n\
    \        return hex(x)[2:].zfill(0)\n    if base == 26:\n        return hex(x)[2:].zfill(0)\n\
    \    if base == 27:\n        ", "    if base < 2:\n        raise ValueError(\"\
    Base should be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"\
    Base should be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ should be a positive number.\")\n    if x == 0:\n        return \"0\"\n    if\
    \ base == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if i % 2 else \"0\" for i in range(x)])\n    if base == 3:\n        return\
    \ \"\".join([\"1\" if i % 3 else \"0\" for i in range(x)])\n    if base == 4:\n\
    \        return \"\".join([\"1\" if i % 4 else \"0\" for i in range(x)])\n   \
    \ if base == 5:\n        return \"\".join([\"1\" if i % 5 else \"0\" for i in\
    \ range(x)])\n    if base == 6:\n        return \"\".join([\"1\" if i % 6 else\
    \ \"0\" for i in range(x)])\n    if base == 7:\n        return \"\".join([\"1\"\
    \ if i % 7 else \"0\" for i in range(x)])\n    if base == 8:\n        return \"\
    \".join([\"1\" if i % 8 else \"0\" for i in range(x)])\n    if base == 9:\n  \
    \      return \"\".join([\"1\" if i % 9 else \"0\" for i in range(x)])\n    if\
    \ base == 16:\n        return \"\".join([\"1\" if i % 16 else \"0\" for i in range(x)])\n\
    \    if base == 17:\n        return \"\".join([\"1\" if i % 17 else \"0\" for\
    \ i in range(x)])\n    if base == 18:\n        return \"\".join([\"1\" if i %\
    \ 18 else \"0\" for i in range(x)])\n    if base == 19:\n        return \"\".join([\"\
    1\" if i % 19 else \"0\" for i in range(x)])\n    if base == 20:\n        return\
    \ \"\".join([\"1\" if i % 20 else \"0\" for i in range(", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1.\")\n    if base > 10:\n\
    \        raise ValueError(\"Base must be less than 10.\")\n    if x < 0:\n   \
    \     raise ValueError(\"Input must be positive.\")\n    if x == 0:\n        return\
    \ \"0\"\n    if base == 10:\n        return str(x)\n    if base == 2:\n      \
    \  return \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(x)])\n    if\
    \ base == 3:\n        return \"\".join([\"1\" if i % 3 == 0 else \"0\" for i in\
    \ range(x)])\n    if base == 4:\n        return \"\".join([\"1\" if i % 4 == 0\
    \ else \"0\" for i in range(x)])\n    if base == 5:\n        return \"\".join([\"\
    1\" if i % 5 == 0 else \"0\" for i in range(x)])\n    if base == 6:\n        return\
    \ \"\".join([\"1\" if i % 6 == 0 else \"0\" for i in range(x)])\n    if base ==\
    \ 7:\n        return \"\".join([\"1\" if i % 7 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i % 8 == 0 else \"0\" for\
    \ i in range(x)])\n    if base == 9:\n        return \"\".join([\"1\" if i % 9\
    \ == 0 else \"0\" for i in range(x)])\n    if base == 11:\n        return \"\"\
    .join([\"1\" if i % 11 == 0 else \"0\" for i in range(x)])\n    if base == 13:\n\
    \        return \"\".join([\"1\" if i % 13 == 0 else \"0\" for i in range(x)])\n\
    \    if base == 14:\n        return \"\".join([\"1\" if i % 14 == 0 else \"0\"\
    \ for i in range(x)])\n    if base == 15:\n        return \"\".join([\"1\" if\
    \ i % 15 == 0 else \"0\" for i in range(x)])\n    if base == 16:\n", "    if base\
    \ < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base\
    \ > 10:\n        raise ValueError(\"Base must be less than 11\")\n    if x < 0:\n\
    \        raise ValueError(\"Input number must be positive\")\n    if x == 0:\n\
    \        return \"0\"\n    if base == 10:\n        return str(x)\n    if x < base:\n\
    \        return \"0\"\n    if x % base == 0:\n        return str(x // base)\n\
    \    if x % base == 1:\n        return str(x // base) + \"1\"\n    if x % base\
    \ == 2:\n        return str(x // base) + \"2\"\n    if x % base == 3:\n      \
    \  return str(x // base) + \"3\"\n    if x % base == 4:\n        return str(x\
    \ // base) + \"4\"\n    if x % base == 5:\n        return str(x // base) + \"\
    5\"\n    if x % base == 6:\n        return str(x // base) + \"6\"\n    if x %\
    \ base == 7:\n        return str(x // base) + \"7\"\n    if x % base == 8:\n \
    \       return str(x // base) + \"8\"\n    if x % base == 9:\n        return str(x\
    \ // base) + \"9\"\n    return str(x // base) + \"10\"\n\n", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n    \
    \    raise ValueError(\"Input number must be positive\")\n    if x == 0:\n   \
    \     return '0'\n    if base == 10:\n        return str(x)\n    if base == 2:\n\
    \        return '{:b}'.format(x).zfill(len(str(x)))\n    if base == 3:\n     \
    \   return '{:b}'.format(x).zfill(len(str(x)))\n    if base == 4:\n        return\
    \ '{:b}'.format(x).zfill(len(str(x)))\n    if base == 5:\n        return '{:b}'.format(x).zfill(len(str(x)))\n\
    \    if base == 6:\n        return '{:b}'.format(x).zfill(len(str(x)))\n    if\
    \ base == 7:\n        return '{:b}'.format(x).zfill(len(str(x)))\n    if base\
    \ == 8:\n        return '{:b}'.format(x).zfill(len(str(x)))\n    if base == 9:\n\
    \        return '{:b}'.format(x).zfill(len(str(x)))\n    if base == 16:\n    \
    \    return '{:x}'.format(x).zfill(len(str(x)))\n    if base == 17:\n        return\
    \ '{:x}'.format(x).zfill(len(str(x)))\n    if base == 18:\n        return '{:x}'.format(x).zfill(len(str(x)))\n\
    \    if base == 19:\n        return '{:x}'.format(x).zfill(len(str(x)))\n    if\
    \ base == 20:\n        return '{:x}'.format(x).zfill(len(str(x)))\n    if base\
    \ == 21:\n        return '{:x}'.format(x).zfill(len(str(x)))\n    if base == 22:\n\
    \        return '{:x}'.format(x).z", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base == 2:\n        return str(x)\n   \
    \ if base == 10:\n        return str(x)\n    if x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x\
    \ / base, base) + str(x % base)\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be positive.\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base\
    \ == 3:\n        return str(x)\n    if base == 4:\n        return bin(x)[2:]\n\
    \    if base == 5:\n        return str(x)\n    if base == 6:\n        return bin(x)[2:]\n\
    \    if base == 7:\n        return str(x)\n    if base == 8:\n        return bin(x)[2:]\n\
    \    if base == 9:\n        return str(x)\n    if base == 16:\n        return\
    \ hex(x)[2:]\n    if base == 17:\n        return str(x)\n    if base == 18:\n\
    \        return bin(x)[2:]\n    if base == 19:\n        return str(x)\n    if\
    \ base == 20:\n        return bin(x)[2:]\n    if base == 21:\n        return str(x)\n\
    \    if base == 22:\n        return bin(x)[2:]\n    if base == 23:\n        return\
    \ str(x)\n    if base == 24:\n        return bin(x)[2:]\n    if base == 25:\n\
    \        return str(x)\n    if base == 26:\n        return bin(x)[2:]\n    if\
    \ base == 27:\n        return str(x)\n    if base == 28:\n        return bin(x)[2:]\n\
    \    if base == 29:\n        return str(x)\n    if base == 30:\n        return\
    \ bin(x)[2:]\n    if base == 31:\n        return str(x)\n    if base == 32:\n\
    \        return bin(x)[2:]\n    if base == 33:\n        return str(x)\n    if\
    \ base == 34:\n        return bin(x)[2:]\n    if base == 35:\n        return str(x)\n\
    \    if base == 36:\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ a positive integer\")\n    if x == 0:\n        return \"0\"\n    result = \"\
    \"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\
    \    return result\n\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ a positive number.\")\n    if x == 0:\n        return \"0\"\n    if base ==\
    \ 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:].zfill(8)\n\
    \    if base == 3:\n        return bin(x)[2:].zfill(6)\n    if base == 4:\n  \
    \      return bin(x)[2:].zfill(4)\n    if base == 5:\n        return bin(x)[2:].zfill(5)\n\
    \    if base == 6:\n        return bin(x)[2:].zfill(3)\n    if base == 7:\n  \
    \      return bin(x)[2:].zfill(7)\n    if base == 8:\n        return bin(x)[2:].zfill(8)\n\
    \    if base == 9:\n        return bin(x)[2:].zfill(9)\n    if base == 16:\n \
    \       return hex(x)[2:].zfill(8)\n    if base == 17:\n        return hex(x)[2:].zfill(6)\n\
    \    if base == 18:\n        return hex(x)[2:].zfill(5)\n    if base == 19:\n\
    \        return hex(x)[2:].zfill(4)\n    if base == 20:\n        return hex(x)[2:].zfill(3)\n\
    \    if base == 21:\n        return hex(x)[2:].zfill(7)\n    if base == 22:\n\
    \        return hex(x)[2:].zfill(8)\n    if base == 23:\n        return hex(x)[2:].zfill(9)\n\
    \    if base == 24:\n        return hex(x)[2:].zfill(10)\n    if base == 25:\n\
    \        return hex(x)[2:].zfill(11)\n    if base == 26:\n        return hex(x)[2:].zfill(12)\n\
    \    if base == 27:\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36\")\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n\
    \    if x < base:\n        return str(x)\n    if x % base == 0:\n        return\
    \ \"0\"\n    return change_base(x // base, base) + str(x % base)\n\n", "    if\
    \ base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n    if\
    \ base > 36:\n        raise ValueError(\"Base must be less than 36.\")\n    if\
    \ x < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n  \
    \  if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"{0:b}\".format(x)\n    if base == 3:\n  \
    \      return \"{0:b}\".format(x)\n    if base == 4:\n        return \"{0:b}\"\
    .format(x)\n    if base == 5:\n        return \"{0:b}\".format(x)\n    if base\
    \ == 6:\n        return \"{0:b}\".format(x)\n    if base == 7:\n        return\
    \ \"{0:b}\".format(x)\n    if base == 8:\n        return \"{0:b}\".format(x)\n\
    \    if base == 9:\n        return \"{0:b}\".format(x)\n    if base == 16:\n \
    \       return \"{0:x}\".format(x)\n    if base == 17:\n        return \"{0:x}\"\
    .format(x)\n    if base == 18:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 19:\n        return \"{0:x}\".format(x)\n    if base == 20:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 21:\n        return \"{0:x}\".format(x)\n\
    \    if base == 22:\n        return \"{0:x}\".format(x)\n    if base == 23:\n\
    \        return \"{0:x}\".format(x)\n    if base == 24:\n        return \"{0:x}\"\
    .format(x)\n    if base == 25:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 26:\n        return \"{0:x}\".format(x)\n    if base == 27:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 28:\n        return \"{0:x}\".format(x)\n\
    \    if base == 29", "    if base < 2:\n        raise ValueError(\"Base must be\
    \ greater than 1\")\n    if base > 10:\n        raise ValueError(\"Base must be\
    \ less than 10\")\n    if x < 0:\n        raise ValueError(\"Input must be a positive\
    \ number\")\n    if x == 0:\n        return '0'\n    if x == 1:\n        return\
    \ '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n\
    \    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if\
    \ x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x ==\
    \ 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n\
    \        return '10'\n    if x == 11:\n        return '11'\n    if x == 12:\n\
    \        return '12'\n    if x == 13:\n        return '13'\n    if x == 14:\n\
    \        return '14'\n    if x == 15:\n        return '15'\n    if x == 16:\n\
    \        return '16'\n    if x == 17:\n        return '17'\n    if x == 18:\n\
    \        return '18'\n    if x == 19:\n        return '19'\n    if x == 20:\n\
    \        return '20'\n    if x == 21:\n        return '21'\n    if x == 22:\n\
    \        return '22'\n    if x == 23:\n        return '23'\n    if x == 24:\n\
    \        return '24'\n    if x == 25:\n        return '25'\n    if x == 26:\n\
    \        return '26'\n    if x == 27:\n        return '27'\n    if x == 28:\n\
    \        return '28'\n    if x == 29:\n        return '29'\n    if x == 30:\n\
    \        return '30'\n    if x == 31:\n        return '31'\n    if x == 32:\n\
    \        return '32'\n    if x == 33:\n        return '33'\n    if x == 34:\n\
    \        return '", "    if base < 2:\n        raise ValueError(\"Base must be\
    \ greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ positive.\")\n    if x == 0:\n        return '0'\n    if x == 1:\n        return\
    \ '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n        return '3'\n\
    \    if x == 4:\n        return '4'\n    if x == 5:\n        return '5'\n    if\
    \ x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n    if x ==\
    \ 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if x == 10:\n\
    \        return '10'\n    if x == 11:\n        return '11'\n    if x == 12:\n\
    \        return '12'\n    if x == 13:\n        return '13'\n    if x == 14:\n\
    \        return '14'\n    if x == 15:\n        return '15'\n    if x == 16:\n\
    \        return '16'\n    if x == 17:\n        return '17'\n    if x == 18:\n\
    \        return '18'\n    if x == 19:\n        return '19'\n    if x == 20:\n\
    \        return '20'\n    if x == 21:\n        return '21'\n    if x == 22:\n\
    \        return '22'\n    if x == 23:\n        return '23'\n    if x == 24:\n\
    \        return '24'\n    if x == 25:\n        return '25'\n    if x == 26:\n\
    \        return '26'\n    if x == 27:\n        return '27'\n    if x == 28:\n\
    \        return '28'\n    if x == 29:\n        return '29'\n    if x == 30:\n\
    \        return '30'\n    if x == 31:\n        return '31'\n    if x == 32:\n\
    \        return '32'\n    if x == 33:\n        return '33'\n    if x == 34:\n\
    \        return '34'", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ a positive number\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return bin(x)[2:].zfill(8)\n\
    \    if base == 3:\n        return bin(x)[2:].zfill(6)\n    if base == 4:\n  \
    \      return bin(x)[2:].zfill(4)\n    if base == 5:\n        return bin(x)[2:].zfill(5)\n\
    \    if base == 6:\n        return bin(x)[2:].zfill(3)\n    if base == 7:\n  \
    \      return bin(x)[2:].zfill(4)\n    if base == 8:\n        return bin(x)[2:].zfill(2)\n\
    \    if base == 9:\n        return bin(x)[2:].zfill(3)\n    if base == 10:\n \
    \       return bin(x)[2:].zfill(5)\n    if base == 11:\n        return bin(x)[2:].zfill(6)\n\
    \    if base == 12:\n        return bin(x)[2:].zfill(7)\n    if base == 13:\n\
    \        return bin(x)[2:].zfill(8)\n    if base == 14:\n        return bin(x)[2:].zfill(9)\n\
    \    if base == 15:\n        return bin(x)[2:].zfill(10)\n    if base == 16:\n\
    \        return bin(x)[2:].zfill(11)\n    if base == 17:\n        return bin(x)[2:].zfill(12)\n\
    \    if base == 18:\n        return bin(x)[2:].zfill(13)\n    if base == 19:\n\
    \        return bin(x)[2:].zfill(14)\n    if base == 20:\n        return bin(x)[2:].zfill(15)\n\
    \    if base == 21:\n", "    if base < 2 or base > 10:\n        raise ValueError(\"\
    base should be 2 to 10\")\n    if x < 0:\n        return \"-\" + change_base(-x,\
    \ base)\n    if x == 0:\n        return \"0\"\n    if x < base:\n        return\
    \ change_base(x, base)\n    else:\n        return change_base(x // base, base)\
    \ + change_base(x % base, base)\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36\")\n    if x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    if x == 0:\n        return '0'\n    if x < base:\n        return\
    \ change_base(x, base)\n    else:\n        return change_base(x // base, base)\
    \ + change_base(x % base, base)\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ number must be positive\")\n    if x == 0:\n        return \"0\"\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n\
    \    if base == 3:\n        return str(x)\n    if base == 4:\n        return bin(x)[2:]\n\
    \    if base == 5:\n        return str(x)\n    if base == 6:\n        return bin(x)[2:]\n\
    \    if base == 7:\n        return str(x)\n    if base == 8:\n        return bin(x)[2:]\n\
    \    if base == 9:\n        return str(x)\n    if base == 16:\n        return\
    \ hex(x)[2:]\n    if base == 17:\n        return str(x)\n    if base == 18:\n\
    \        return bin(x)[2:]\n    if base == 19:\n        return str(x)\n    if\
    \ base == 20:\n        return bin(x)[2:]\n    if base == 21:\n        return str(x)\n\
    \    if base == 22:\n        return bin(x)[2:]\n    if base == 23:\n        return\
    \ str(x)\n    if base == 24:\n        return bin(x)[2:]\n    if base == 25:\n\
    \        return str(x)\n    if base == 26:\n        return bin(x)[2:]\n    if\
    \ base == 27:\n        return str(x)\n    if base == 28:\n        return bin(x)[2:]\n\
    \    if base == 29:\n        return str(x)\n    if base == 30:\n        return\
    \ bin(x)[2:]\n    if base == 31:\n        return str(x)\n    if base == 32:\n\
    \        return bin(x)[2:]\n    if base == 33:\n        return str(x)\n    if\
    \ base == 34:\n        return bin(x)[2:]\n    if base == 35:\n        return str(x)\n\
    \    if base == 36:", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ a positive number.\")\n    if x == 0:\n        return \"0\"\n    result = \"\
    \"\n    while x > 0:\n        result = str(x % base) + result\n        x = x //\
    \ base\n    return result\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be a positive number.\")\n    if x == 0:\n        return \"0\"\n    if\
    \ x == 1:\n        return \"1\"\n    if x == 2:\n        return \"10\"\n    if\
    \ x == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\n   \
    \ if x == 5:\n        return \"101\"\n    if x == 6:\n        return \"110\"\n\
    \    if x == 7:\n        return \"111\"\n    if x == 8:\n        return \"1000\"\
    \n    if x == 9:\n        return \"1001\"\n    if x == 10:\n        return \"\
    1010\"\n    if x == 11:\n        return \"1011\"\n    if x == 12:\n        return\
    \ \"1100\"\n    if x == 13:\n        return \"1101\"\n    if x == 14:\n      \
    \  return \"1110\"\n    if x == 15:\n        return \"1111\"\n    if x == 16:\n\
    \        return \"10000\"\n    if x == 17:\n        return \"10001\"\n    if x\
    \ == 18:\n        return \"10010\"\n    if x == 19:\n        return \"10011\"\n\
    \    if x == 20:\n        return \"10100\"\n    if x == 21:\n        return \"\
    10101\"\n    if x == 22:\n        return \"10110\"\n    if x == 23:\n        return\
    \ \"10111\"\n    if x == 24:\n        return \"11000\"\n    if x == 25:\n    \
    \    return \"11001\"\n    if x == 26:\n        return \"11010\"\n    if x ==\
    \ 27:\n        return \"11011\"\n    if x == 28:\n        return \"11100\"\n \
    \   if x == 29:\n        return \"11101\"\n    if x == 30:\n        return \"\
    11110\"\n    if x == 31:\n        return \"11111\"\n    if x == 32:\n        return\
    \ \"100000\"\n    if x", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input number\
    \ must be positive.\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n\
    \        return \"1\"\n    if x == 2:\n        return \"10\"\n    if x == 3:\n\
    \        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n\
    \        return \"101\"\n    if x == 6:\n        return \"110\"\n    if x == 7:\n\
    \        return \"111\"\n    if x == 8:\n        return \"1000\"\n    if x ==\
    \ 9:\n        return \"1001\"\n    if x == 10:\n        return \"1010\"\n    if\
    \ x == 11:\n        return \"1011\"\n    if x == 12:\n        return \"1100\"\n\
    \    if x == 13:\n        return \"1101\"\n    if x == 14:\n        return \"\
    1110\"\n    if x == 15:\n        return \"1111\"\n    if x == 16:\n        return\
    \ \"10000\"\n    if x == 17:\n        return \"10001\"\n    if x == 18:\n    \
    \    return \"10010\"\n    if x == 19:\n        return \"10011\"\n    if x ==\
    \ 20:\n        return \"10100\"\n    if x == 21:\n        return \"10101\"\n \
    \   if x == 22:\n        return \"10110\"\n    if x == 23:\n        return \"\
    10111\"\n    if x == 24:\n        return \"11000\"\n    if x == 25:\n        return\
    \ \"11001\"\n    if x == 26:\n        return \"11010\"\n    if x == 27:\n    \
    \    return \"11011\"\n    if x == 28:\n        return \"11100\"\n    if x ==\
    \ 29:\n        return \"11101\"\n    if x == 30:\n        return \"11110\"\n \
    \   if x == 31:\n        return \"11111\"\n    if x == 32:\n        return \"\
    100000\"\n    if x ==", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1.\")\n    if base > 10:\n        raise ValueError(\"Base must\
    \ be less than 10.\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ a positive number.\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n\
    \        return \"1\"\n    if x == 2:\n        return \"10\"\n    if x == 3:\n\
    \        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n\
    \        return \"101\"\n    if x == 6:\n        return \"110\"\n    if x == 7:\n\
    \        return \"111\"\n    if x == 8:\n        return \"1000\"\n    if x ==\
    \ 9:\n        return \"1001\"\n    if x == 10:\n        return \"1010\"\n    if\
    \ x == 11:\n        return \"1011\"\n    if x == 12:\n        return \"1100\"\n\
    \    if x == 13:\n        return \"1101\"\n    if x == 14:\n        return \"\
    1110\"\n    if x == 15:\n        return \"1111\"\n    if x == 16:\n        return\
    \ \"10000\"\n    if x == 17:\n        return \"10001\"\n    if x == 18:\n    \
    \    return \"10010\"\n    if x == 19:\n        return \"10011\"\n    if x ==\
    \ 20:\n        return \"10100\"\n    if x == 21:\n        return \"10101\"\n \
    \   if x == 22:\n        return \"10110\"\n    if x == 23:\n        return \"\
    10111\"\n    if x == 24:\n        return \"11000\"\n    if x == 25:\n        return\
    \ \"11001\"\n    if x == 26:\n        return \"11010\"\n    if x == 27:\n    \
    \    return \"11011\"\n    if x == 28:\n        return \"11100\"\n    if x ==\
    \ 29:\n        return \"11101\"\n    if x == 30:\n        return \"11110\"\n \
    \   if x == 31:\n        return \"11111\"\n    if x == 32:\n        return \"\
    100000\"\n    if x", "    if base < 2:\n        raise ValueError(\"Base must be\
    \ greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base must be\
    \ less than 36\")\n    if x < 0:\n        raise ValueError(\"Input must be a positive\
    \ integer\")\n    if x == 0:\n        return '0'\n    result = ''\n    while x\
    \ > 0:\n        result = str(x % base) + result\n        x = x // base\n    return\
    \ result\n\n", "    if base < 2:\n        raise ValueError(\"Base must be greater\
    \ than 1.\")\n    if base > 10:\n        raise ValueError(\"Base must be less\
    \ than 10.\")\n    if x < 0:\n        raise ValueError(\"Input number must be\
    \ positive.\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n       \
    \ return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n       \
    \ return \"3\"\n    if x == 4:\n        return \"4\"\n    if x == 5:\n       \
    \ return \"5\"\n    if x == 6:\n        return \"6\"\n    if x == 7:\n       \
    \ return \"7\"\n    if x == 8:\n        return \"8\"\n    if x == 9:\n       \
    \ return \"9\"\n    if x == 10:\n        return \"10\"\n    if x == 11:\n    \
    \    return \"11\"\n    if x == 12:\n        return \"12\"\n    if x == 13:\n\
    \        return \"13\"\n    if x == 14:\n        return \"14\"\n    if x == 15:\n\
    \        return \"15\"\n    if x == 16:\n        return \"16\"\n    if x == 17:\n\
    \        return \"17\"\n    if x == 18:\n        return \"18\"\n    if x == 19:\n\
    \        return \"19\"\n    if x == 20:\n        return \"20\"\n    if x == 21:\n\
    \        return \"21\"\n    if x == 22:\n        return \"22\"\n    if x == 23:\n\
    \        return \"23\"\n    if x == 24:\n        return \"24\"\n    if x == 25:\n\
    \        return \"25\"\n    if x == 26:\n        return \"26\"\n    if x == 27:\n\
    \        return \"27\"\n    if x == 28:\n        return \"28\"\n    if x == 29:\n\
    \        return \"29\"\n    if x == 30:\n        return \"30\"\n    if x == 31:\n\
    \        return \"31\"\n    if x == 32:\n        return \"32\"\n    if x == 33:\n\
    \        return \"33\"\n    if x == 34:\n        return \"34", "    if base <\
    \ 2:\n        raise ValueError(\"Base should be greater than 1.\")\n    if base\
    \ > 10:\n        raise ValueError(\"Base should be less than 10.\")\n    if x\
    \ < 0:\n        raise ValueError(\"Input should be a positive number.\")\n   \
    \ if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    return str(x).zfill(base)\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1.\")\n    if base > 10:\n        raise ValueError(\"\
    Base must be less than 10.\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ number must be positive.\")\n    if x == 0:\n        return \"0\"\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\"] * x)\n    if base == 3:\n        return \"\".join([\"1\"] * (x - 1) + [\"\
    2\"])\n    if base == 4:\n        return \"\".join([\"1\"] * (x - 1) + [\"2\"\
    ] + [\"3\"])\n    if base == 5:\n        return \"\".join([\"1\"] * (x - 1) +\
    \ [\"2\"] + [\"3\"] + [\"4\"])\n    if base == 6:\n        return \"\".join([\"\
    1\"] * (x - 1) + [\"2\"] + [\"3\"] + [\"4\"] + [\"5\"])\n    if base == 7:\n \
    \       return \"\".join([\"1\"] * (x - 1) + [\"2\"] + [\"3\"] + [\"4\"] + [\"\
    5\"] + [\"6\"])\n    if base == 8:\n        return \"\".join([\"1\"] * (x - 1)\
    \ + [\"2\"] + [\"3\"] + [\"4\"] + [\"5\"] + [\"6\"] + [\"7\"])\n    if base ==\
    \ 9:\n        return \"\".join([\"1\"] * (x - 1) + [\"2\"] + [\"3\"] + [\"4\"\
    ] + [\"5\"] + [\"6\"] + [\"7\"] + [\"8\"])\n    if base == 10:\n        return\
    \ \"\".join([\"1\"] * (x - 1) + [\"2\"] + [\"3\"] + [\"4\"] + [\"5\"] + [\"6\"\
    ] + [\"7\"] + [\"8\"] + [\"9\"])\n    if base == 11:\n        return \"\".join([\"\
    1\"] * (x - 1) + [\"2\"] + [\"3\"] + [\"4\"] + [\"5\"] + [\"6\"] + [\"7\"] + [\"\
    8\"] + [\"9\"] + [\"10\"])\n    if base == 12:\n        return \"", "    if base\
    \ < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if base\
    \ > 36:\n        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n\
    \        raise ValueError(\"Input must be a positive integer\")\n    if x == 0:\n\
    \        return \"0\"\n    if x < base:\n        return str(x)\n    else:\n  \
    \      return str(x).zfill(base)\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be a positive integer\")\n    if x == 0:\n        return \"0\"\n    if\
    \ base == 10:\n        return str(x)\n    if base == 2:\n        return bin(x)[2:]\n\
    \    if base == 3:\n        return bin(x)[2:].rjust(3, \"0\")\n    if base ==\
    \ 4:\n        return bin(x)[2:].rjust(4, \"0\")\n    if base == 5:\n        return\
    \ bin(x)[2:].rjust(5, \"0\")\n    if base == 6:\n        return bin(x)[2:].rjust(6,\
    \ \"0\")\n    if base == 7:\n        return bin(x)[2:].rjust(7, \"0\")\n    if\
    \ base == 8:\n        return bin(x)[2:].rjust(8, \"0\")\n    if base == 9:\n \
    \       return bin(x)[2:].rjust(9, \"0\")\n    if base == 16:\n        return\
    \ hex(x)[2:].rjust(8, \"0\")\n    if base == 17:\n        return hex(x)[2:].rjust(9,\
    \ \"0\")\n    if base == 18:\n        return hex(x)[2:].rjust(10, \"0\")\n   \
    \ if base == 19:\n        return hex(x)[2:].rjust(11, \"0\")\n    if base == 20:\n\
    \        return hex(x)[2:].rjust(12, \"0\")\n    if base == 21:\n        return\
    \ hex(x)[2:].rjust(13, \"0\")\n    if base == 22:\n        return hex(x)[2:].rjust(14,\
    \ \"0\")\n    if base == 23:\n        return hex(x)[2:].rjust(15, \"0\")\n   \
    \ if base == 24:\n        return hex(x)[2:].rjust(16, \"0\")\n    if base == 25:\n\
    \        return", "    if base < 2:\n        raise ValueError(\"Base should be\
    \ greater than 1.\")\n    if base > 10:\n        raise ValueError(\"Base should\
    \ be less than 10.\")\n    if x < 0:\n        raise ValueError(\"Input number\
    \ should be positive.\")\n    if x == 0:\n        return '0'\n    if base == 10:\n\
    \        return str(x)\n    return str(x).zfill(int(math.log(x, base)) + 1)\n\n",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n \
    \   if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n \
    \   if x < 0:\n        raise ValueError(\"Input must be positive\")\n    if x\
    \ == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n\
    \        return '10'\n    if x == 3:\n        return '11'\n    if x == 4:\n  \
    \      return '100'\n    if x == 5:\n        return '101'\n    if x == 6:\n  \
    \      return '110'\n    if x == 7:\n        return '111'\n    if x == 8:\n  \
    \      return '1000'\n    if x == 9:\n        return '1001'\n    if x == 10:\n\
    \        return '1010'\n    if x == 11:\n        return '1011'\n    if x == 12:\n\
    \        return '1100'\n    if x == 13:\n        return '1101'\n    if x == 14:\n\
    \        return '1110'\n    if x == 15:\n        return '1111'\n    if x == 16:\n\
    \        return '10000'\n    if x == 17:\n        return '10001'\n    if x ==\
    \ 18:\n        return '10010'\n    if x == 19:\n        return '10011'\n    if\
    \ x == 20:\n        return '10100'\n    if x == 21:\n        return '10101'\n\
    \    if x == 22:\n        return '10110'\n    if x == 23:\n        return '10111'\n\
    \    if x == 24:\n        return '11000'\n    if x == 25:\n        return '11001'\n\
    \    if x == 26:\n        return '11010'\n    if x == 27:\n        return '11011'\n\
    \    if x == 28:\n        return '11100'\n    if x == 29:\n        return '11101'\n\
    \    if x == 30:\n        return '11110'\n    if x == 31:\n        return '11111'\n\
    \    if x == 32:\n        return '100000'\n    if x == 33", "    if base < 2:\n\
    \        raise ValueError('Base must be greater than 1')\n    if base > 10:\n\
    \        raise ValueError('Base must be less than 10')\n    if x < 0:\n      \
    \  raise ValueError('Input must be a positive number')\n    if x == 0:\n     \
    \   return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return\
    \ '2'\n    if x == 3:\n        return '3'\n    if x == 4:\n        return '4'\n\
    \    if x == 5:\n        return '5'\n    if x == 6:\n        return '6'\n    if\
    \ x == 7:\n        return '7'\n    if x == 8:\n        return '8'\n    if x ==\
    \ 9:\n        return '9'\n    if x == 10:\n        return '10'\n    if x == 11:\n\
    \        return '11'\n    if x == 12:\n        return '12'\n    if x == 13:\n\
    \        return '13'\n    if x == 14:\n        return '14'\n    if x == 15:\n\
    \        return '15'\n    if x == 16:\n        return '16'\n    if x == 17:\n\
    \        return '17'\n    if x == 18:\n        return '18'\n    if x == 19:\n\
    \        return '19'\n    if x == 20:\n        return '20'\n    if x == 21:\n\
    \        return '21'\n    if x == 22:\n        return '22'\n    if x == 23:\n\
    \        return '23'\n    if x == 24:\n        return '24'\n    if x == 25:\n\
    \        return '25'\n    if x == 26:\n        return '26'\n    if x == 27:\n\
    \        return '27'\n    if x == 28:\n        return '28'\n    if x == 29:\n\
    \        return '29'\n    if x == 30:\n        return '30'\n    if x == 31:\n\
    \        return '31'\n    if x == 32:\n        return '32'\n    if x == 33:\n\
    \        return '33'\n    if x == 34:\n        return '", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1.\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36.\")\n    if x < 0:\n   \
    \     return \"-\" + change_base(-x, base)\n    if x == 0:\n        return \"\
    0\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x\
    \ // base, base) + str(x % base)\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be positive\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n\
    \        return str(x)\n    if x < base:\n        return \"0\"\n    if x >= base:\n\
    \        return str(x)\n    if x >= base ** 2:\n        return str(x)\n    if\
    \ x >= base ** 3:\n        return str(x)\n    if x >= base ** 4:\n        return\
    \ str(x)\n    if x >= base ** 5:\n        return str(x)\n    if x >= base ** 6:\n\
    \        return str(x)\n    if x >= base ** 7:\n        return str(x)\n    if\
    \ x >= base ** 8:\n        return str(x)\n    if x >= base ** 9:\n        return\
    \ str(x)\n    if x >= base ** 10:\n        return str(x)\n    if x >= base **\
    \ 11:\n        return str(x)\n    if x >= base ** 12:\n        return str(x)\n\
    \    if x >= base ** 13:\n        return str(x)\n    if x >= base ** 14:\n   \
    \     return str(x)\n    if x >= base ** 15:\n        return str(x)\n    if x\
    \ >= base ** 16:\n        return str(x)\n    if x >= base ** 17:\n        return\
    \ str(x)\n    if x >= base ** 18:\n        return str(x)\n    if x >= base **\
    \ 19:\n        return str(x)\n    if x >= base ** 20:\n        return str(x)\n\
    \    if x >= base ** 21:\n        return str(x)\n    if x >= base ** 22:\n   \
    \     return str(x)\n    if x >= base ** 23:\n        return str(x)\n    if x\
    \ >= base ** 24:\n        return str(x)\n    if x >= base ** 25:\n        return\
    \ str(x)\n    if x >= base ** 26:\n        return str(x)\n", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1.\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36.\")\n    if x < 0:\n   \
    \     raise ValueError(\"Input must be positive.\")\n    if x == 0:\n        return\
    \ '0'\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return\
    \ '{:b}'.format(x).zfill(int(math.log(x, 2)) + 1)\n    if base == 3:\n       \
    \ return '{:b}'.format(x).zfill(int(math.log(x, 3)) + 1)\n    if base == 4:\n\
    \        return '{:b}'.format(x).zfill(int(math.log(x, 4)) + 1)\n    if base ==\
    \ 5:\n        return '{:b}'.format(x).zfill(int(math.log(x, 5)) + 1)\n    if base\
    \ == 6:\n        return '{:b}'.format(x).zfill(int(math.log(x, 6)) + 1)\n    if\
    \ base == 7:\n        return '{:b}'.format(x).zfill(int(math.log(x, 7)) + 1)\n\
    \    if base == 8:\n        return '{:b}'.format(x).zfill(int(math.log(x, 8))\
    \ + 1)\n    if base == 9:\n        return '{:b}'.format(x).zfill(int(math.log(x,\
    \ 9)) + 1)\n    if base == 16:\n        return '{:x}'.format(x).zfill(int(math.log(x,\
    \ 16)) + 1)\n    if base == 17:\n        return '{:x}'.format(x).zfill(int(math.log(x,\
    \ 17)) + 1)\n    if base == 18:\n        return '{:x}'.format(x).zfill(int(math.log(x,\
    \ 18)) + 1)\n    if base == 19:\n        return '{:x}'.format(x).zfill(int(math.log(x,\
    \ 19", "    if base < 2:\n        raise ValueError(\"Base must be greater than\
    \ 1.\")\n    if base > 10:\n        raise ValueError(\"Base must be less than\
    \ 10.\")\n    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return '0'\n    result = []\n    while x > 0:\n   \
    \     result.append(str(x % base))\n        x //= base\n    return ''.join(reversed(result))\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\"\
    )\n    if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be a positive number\")\n\
    \    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return \"\".join([\"1\" if i % 2 else \"0\" for i\
    \ in range(x)])\n    if base == 3:\n        return \"\".join([\"1\" if i % 3 else\
    \ \"0\" for i in range(x)])\n    if base == 4:\n        return \"\".join([\"1\"\
    \ if i % 4 else \"0\" for i in range(x)])\n    if base == 5:\n        return \"\
    \".join([\"1\" if i % 5 else \"0\" for i in range(x)])\n    if base == 6:\n  \
    \      return \"\".join([\"1\" if i % 6 else \"0\" for i in range(x)])\n    if\
    \ base == 7:\n        return \"\".join([\"1\" if i % 7 else \"0\" for i in range(x)])\n\
    \    if base == 8:\n        return \"\".join([\"1\" if i % 8 else \"0\" for i\
    \ in range(x)])\n    if base == 9:\n        return \"\".join([\"1\" if i % 9 else\
    \ \"0\" for i in range(x)])\n    if base == 16:\n        return \"\".join([\"\
    1\" if i % 16 else \"0\" for i in range(x)])\n    if base == 17:\n        return\
    \ \"\".join([\"1\" if i % 17 else \"0\" for i in range(x)])\n    if base == 18:\n\
    \        return \"\".join([\"1\" if i % 18 else \"0\" for i in range(x)])\n  \
    \  if base == 19:\n        return \"\".join([\"1\" if i % 19 else \"0\" for i\
    \ in range(x)])\n    if base == 20:\n        return \"\".join([\"1\" if i % 20\
    \ else \"0\" for i in range(", "    if base < 2:\n        raise ValueError(\"\
    Base should be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base should be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ should be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n\
    \        return \"1\"\n    if x == 2:\n        return \"10\"\n    if x == 3:\n\
    \        return \"11\"\n    if x == 4:\n        return \"100\"\n    if x == 5:\n\
    \        return \"101\"\n    if x == 6:\n        return \"110\"\n    if x == 7:\n\
    \        return \"111\"\n    if x == 8:\n        return \"1000\"\n    if x ==\
    \ 9:\n        return \"1001\"\n    if x == 10:\n        return \"1010\"\n    if\
    \ x == 11:\n        return \"1011\"\n    if x == 12:\n        return \"1100\"\n\
    \    if x == 13:\n        return \"1101\"\n    if x == 14:\n        return \"\
    1110\"\n    if x == 15:\n        return \"1111\"\n    if x == 16:\n        return\
    \ \"10000\"\n    if x == 17:\n        return \"10001\"\n    if x == 18:\n    \
    \    return \"10010\"\n    if x == 19:\n        return \"10011\"\n    if x ==\
    \ 20:\n        return \"10100\"\n    if x == 21:\n        return \"10101\"\n \
    \   if x == 22:\n        return \"10110\"\n    if x == 23:\n        return \"\
    10111\"\n    if x == 24:\n        return \"11000\"\n    if x == 25:\n        return\
    \ \"11001\"\n    if x == 26:\n        return \"11010\"\n    if x == 27:\n    \
    \    return \"11011\"\n    if x == 28:\n        return \"11100\"\n    if x ==\
    \ 29:\n        return \"11101\"\n    if x == 30:\n        return \"11110\"\n \
    \   if x == 31:\n        return \"11111\"\n    if x == 32:\n        return \"\
    100000\"\n    if x == 33", "    if base < 2:\n        raise ValueError(\"Base\
    \ must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base\
    \ must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input must\
    \ be positive\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n \
    \       return str(x)\n    if base == 2:\n        return \"{0:b}\".format(x)\n\
    \    if base == 3:\n        return \"{0:b}\".format(x)\n    if base == 4:\n  \
    \      return \"{0:b}\".format(x)\n    if base == 5:\n        return \"{0:b}\"\
    .format(x)\n    if base == 6:\n        return \"{0:b}\".format(x)\n    if base\
    \ == 7:\n        return \"{0:b}\".format(x)\n    if base == 8:\n        return\
    \ \"{0:b}\".format(x)\n    if base == 9:\n        return \"{0:b}\".format(x)\n\
    \    if base == 16:\n        return \"{0:x}\".format(x)\n    if base == 17:\n\
    \        return \"{0:x}\".format(x)\n    if base == 18:\n        return \"{0:x}\"\
    .format(x)\n    if base == 19:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 20:\n        return \"{0:x}\".format(x)\n    if base == 21:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 22:\n        return \"{0:x}\".format(x)\n\
    \    if base == 23:\n        return \"{0:x}\".format(x)\n    if base == 24:\n\
    \        return \"{0:x}\".format(x)\n    if base == 25:\n        return \"{0:x}\"\
    .format(x)\n    if base == 26:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 27:\n        return \"{0:x}\".format(x)\n    if base == 28:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 29:\n", "    if base < 2:\n        raise\
    \ ValueError(\"Base must be greater than 1.\")\n    if base > 10:\n        raise\
    \ ValueError(\"Base must be less than 10.\")\n    if x < 0:\n        raise ValueError(\"\
    Input must be positive.\")\n    if x == 0:\n        return \"0\"\n    result =\
    \ \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x =\
    \ x // base\n    return result\n\n", "    if base < 2:\n        raise ValueError('base\
    \ must be greater than 1')\n    if base > 10:\n        raise ValueError('base\
    \ must be less than 10')\n    if x < 0:\n        raise ValueError('x must be positive')\n\
    \    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if\
    \ x == 2:\n        return '10'\n    if x == 3:\n        return '11'\n    if x\
    \ == 4:\n        return '100'\n    if x == 5:\n        return '101'\n    if x\
    \ == 6:\n        return '110'\n    if x == 7:\n        return '111'\n    if x\
    \ == 8:\n        return '1000'\n    if x == 9:\n        return '1001'\n    if\
    \ x == 10:\n        return '1010'\n    if x == 11:\n        return '1011'\n  \
    \  if x == 12:\n        return '1100'\n    if x == 13:\n        return '1101'\n\
    \    if x == 14:\n        return '1110'\n    if x == 15:\n        return '1111'\n\
    \    if x == 16:\n        return '10000'\n    if x == 17:\n        return '10001'\n\
    \    if x == 18:\n        return '10010'\n    if x == 19:\n        return '10011'\n\
    \    if x == 20:\n        return '10100'\n    if x == 21:\n        return '10101'\n\
    \    if x == 22:\n        return '10110'\n    if x == 23:\n        return '10111'\n\
    \    if x == 24:\n        return '11000'\n    if x == 25:\n        return '11001'\n\
    \    if x == 26:\n        return '11010'\n    if x == 27:\n        return '11011'\n\
    \    if x == 28:\n        return '11100'\n    if x == 29:\n        return '11101'\n\
    \    if x == 30:\n        return '11110'\n    if x == 31:\n        return '11111'\n\
    \    if x == 32:\n        return '100000'\n    if x == 33", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1.\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36.\")\n    if x < 0:\n   \
    \     return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n\
    \    if x < base:\n        return str(x)\n    else:\n        return change_base(x\
    \ // base, base) + str(x % base)\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if x < 0:\n        return \"-\" + change_base(-x,\
    \ base)\n    if x == 0:\n        return \"0\"\n    if x < base:\n        return\
    \ change_base(x, base)\n    else:\n        return change_base(x // base, base)\
    \ + change_base(x % base, base)\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1.\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36.\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ number must be positive.\")\n    if x == 0:\n        return \"0\"\n    if base\
    \ == 10:\n        return str(x)\n    if base == 2:\n        return \"\".join([\"\
    1\" if x % 2 == 0 else \"0\"] * (x // 2))\n    if base == 3:\n        return \"\
    \".join([\"1\" if x % 3 == 0 else \"0\"] * (x // 3))\n    if base == 4:\n    \
    \    return \"\".join([\"1\" if x % 4 == 0 else \"0\"] * (x // 4))\n    if base\
    \ == 5:\n        return \"\".join([\"1\" if x % 5 == 0 else \"0\"] * (x // 5))\n\
    \    if base == 6:\n        return \"\".join([\"1\" if x % 6 == 0 else \"0\"]\
    \ * (x // 6))\n    if base == 7:\n        return \"\".join([\"1\" if x % 7 ==\
    \ 0 else \"0\"] * (x // 7))\n    if base == 8:\n        return \"\".join([\"1\"\
    \ if x % 8 == 0 else \"0\"] * (x // 8))\n    if base == 9:\n        return \"\"\
    .join([\"1\" if x % 9 == 0 else \"0\"] * (x // 9))\n    if base == 16:\n     \
    \   return \"\".join([\"1\" if x % 16 == 0 else \"0\"] * (x // 16))\n    if base\
    \ == 17:\n        return \"\".join([\"1\" if x % 17 == 0 else \"0\"] * (x // 17))\n\
    \    if base == 18:\n        return \"\".join([\"1\" if x % 18 == 0 else \"0\"\
    ] * (x // 18))\n    if base == 19:\n        return \"\".join([\"1\" if x % 19\
    \ == 0 else \"0\"] * (x // 19))\n    if base == 20:\n        return \"\".join([\"\
    1\" if x % 20 == 0 else \"0\"] * (x //", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base == 2:\n        return str(x)\n   \
    \ return str(x).zfill(base)\n\n", "    if base < 2:\n        raise ValueError(\"\
    Base should be greater than 1.\")\n    if base == 2:\n        return str(x)\n\
    \    if base == 10:\n        return str(x)\n    if x < 0:\n        return '-'\
    \ + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if x == 1:\n\
    \        return '1'\n    if x == 2:\n        return '2'\n    if x == 3:\n    \
    \    return '3'\n    if x == 4:\n        return '4'\n    if x == 5:\n        return\
    \ '5'\n    if x == 6:\n        return '6'\n    if x == 7:\n        return '7'\n\
    \    if x == 8:\n        return '8'\n    if x == 9:\n        return '9'\n    if\
    \ x % base == 0:\n        return str(x // base)\n    if x % base == 1:\n     \
    \   return str(x // base) + '1'\n    if x % base == 2:\n        return str(x //\
    \ base) + '2'\n    if x % base == 3:\n        return str(x // base) + '3'\n  \
    \  if x % base == 4:\n        return str(x // base) + '4'\n    if x % base ==\
    \ 5:\n        return str(x // base) + '5'\n    if x % base == 6:\n        return\
    \ str(x // base) + '6'\n    if x % base == 7:\n        return str(x // base) +\
    \ '7'\n    if x % base == 8:\n        return str(x // base) + '8'\n    if x %\
    \ base == 9:\n        return str(x // base) + '9'\n    return change_base(x //\
    \ base, base) + change_base(x % base, base)\n\n", "    if base < 2:\n        raise\
    \ ValueError(\"Base must be greater than 1.\")\n    if base > 10:\n        raise\
    \ ValueError(\"Base must be less than 11.\")\n    if x < 0:\n        raise ValueError(\"\
    Input must be a positive integer.\")\n    if x == 0:\n        return \"0\"\n \
    \   if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"10\"\n\
    \    if x == 3:\n        return \"11\"\n    if x == 4:\n        return \"100\"\
    \n    if x == 5:\n        return \"101\"\n    if x == 6:\n        return \"110\"\
    \n    if x == 7:\n        return \"111\"\n    if x == 8:\n        return \"1000\"\
    \n    if x == 9:\n        return \"1001\"\n    if x == 10:\n        return \"\
    1010\"\n    if x == 11:\n        return \"1011\"\n    if x == 12:\n        return\
    \ \"1100\"\n    if x == 13:\n        return \"1101\"\n    if x == 14:\n      \
    \  return \"1110\"\n    if x == 15:\n        return \"1111\"\n    if x == 16:\n\
    \        return \"10000\"\n    if x == 17:\n        return \"10001\"\n    if x\
    \ == 18:\n        return \"10010\"\n    if x == 19:\n        return \"10011\"\n\
    \    if x == 20:\n        return \"10100\"\n    if x == 21:\n        return \"\
    10101\"\n    if x == 22:\n        return \"10110\"\n    if x == 23:\n        return\
    \ \"10111\"\n    if x == 24:\n        return \"11000\"\n    if x == 25:\n    \
    \    return \"11001\"\n    if x == 26:\n        return \"11010\"\n    if x ==\
    \ 27:\n        return \"11011\"\n    if x == 28:\n        return \"11100\"\n \
    \   if x == 29:\n        return \"11101\"\n    if x == 30:\n        return \"\
    11110\"\n    if x == 31:\n        return \"11111\"\n    if x == 32:\n        return\
    \ \"100000\"\n    if x", "    if base < 2:\n        raise ValueError('Base must\
    \ be greater than 1.')\n    if base > 36:\n        raise ValueError('Base must\
    \ be less than 36.')\n    if x < 0:\n        raise ValueError('Input must be a\
    \ positive number.')\n    if x == 0:\n        return '0'\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return '{0:b}'.format(x)\n\
    \    if base == 3:\n        return '{0:b}'.format(x)\n    if base == 4:\n    \
    \    return '{0:b}'.format(x)\n    if base == 5:\n        return '{0:b}'.format(x)\n\
    \    if base == 6:\n        return '{0:b}'.format(x)\n    if base == 7:\n    \
    \    return '{0:b}'.format(x)\n    if base == 8:\n        return '{0:b}'.format(x)\n\
    \    if base == 9:\n        return '{0:b}'.format(x)\n    if base == 16:\n   \
    \     return '{0:x}'.format(x)\n    if base == 17:\n        return '{0:x}'.format(x)\n\
    \    if base == 18:\n        return '{0:x}'.format(x)\n    if base == 19:\n  \
    \      return '{0:x}'.format(x)\n    if base == 20:\n        return '{0:x}'.format(x)\n\
    \    if base == 21:\n        return '{0:x}'.format(x)\n    if base == 22:\n  \
    \      return '{0:x}'.format(x)\n    if base == 23:\n        return '{0:x}'.format(x)\n\
    \    if base == 24:\n        return '{0:x}'.format(x)\n    if base == 25:\n  \
    \      return '{0:x}'.format(x)\n    if base == 26:\n        return '{0:x}'.format(x)\n\
    \    if base == 27:\n        return '{0:x}'.format(x)\n    if", "    if base <\
    \ 2:\n        raise ValueError(\"Base should be greater than 1.\")\n    if base\
    \ > 36:\n        raise ValueError(\"Base should be less than 36.\")\n    if x\
    \ < 0:\n        raise ValueError(\"Input number should be positive.\")\n    if\
    \ x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n \
    \   if base == 2:\n        return \"\".join([\"1\"] * x)\n    if base == 3:\n\
    \        return \"\".join([\"1\"] * x)\n    if base == 4:\n        return \"\"\
    .join([\"1\"] * x)\n    if base == 5:\n        return \"\".join([\"1\"] * x)\n\
    \    if base == 6:\n        return \"\".join([\"1\"] * x)\n    if base == 7:\n\
    \        return \"\".join([\"1\"] * x)\n    if base == 8:\n        return \"\"\
    .join([\"1\"] * x)\n    if base == 9:\n        return \"\".join([\"1\"] * x)\n\
    \    if base == 16:\n        return \"\".join([\"1\"] * x)\n    if base == 17:\n\
    \        return \"\".join([\"1\"] * x)\n    if base == 18:\n        return \"\"\
    .join([\"1\"] * x)\n    if base == 19:\n        return \"\".join([\"1\"] * x)\n\
    \    if base == 20:\n        return \"\".join([\"1\"] * x)\n    if base == 21:\n\
    \        return \"\".join([\"1\"] * x)\n    if base == 22:\n        return \"\"\
    .join([\"1\"] * x)\n    if base == 23:\n        return \"\".join([\"1\"] * x)\n\
    \    if base == 24:\n        return \"\".join([\"1\"] * x)\n    if base == 25:\n\
    \        return \"\".join([\"1\"] * x)\n    if base == 26:\n        return \"\"\
    .join([\"1\"] * x)\n    if base == 27:\n        return \"\".join([\"1\"] * x)\n\
    \    if base == 28:\n        return \"\".join([\"1\"] * x)\n    if base == 29:",
  "    if base < 2:\n        raise ValueError(\"Base should be greater than 1\")\n\
    \    if base > 36:\n        raise ValueError(\"Base should be less than 36\")\n\
    \    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n \
    \       return '0'\n    if x < base:\n        return '0' + change_base(x, base)\n\
    \    if x % base == 0:\n        return change_base(x // base, base)\n    if x\
    \ % base > 0:\n        return change_base(x // base, base) + change_base(x % base,\
    \ base)\n    return change_base(x // base, base) + change_base(x % base, base)\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base should be greater than\
    \ 1\")\n    if base > 36:\n        raise ValueError(\"Base should be less than\
    \ 36\")\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x\
    \ == 0:\n        return \"0\"\n    if x < base:\n        return str(x)\n    else:\n\
    \        return change_base(x//base, base) + str(x%base)\n", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n    \
    \    raise ValueError(\"Input must be positive\")\n    if x == 0:\n        return\
    \ \"0\"\n    if base == 10:\n        return str(x)\n    if base == 2:\n      \
    \  return bin(x)[2:]\n    if base == 3:\n        return bin(x)[2:].rjust(3, \"\
    0\")\n    if base == 4:\n        return bin(x)[2:].rjust(4, \"0\")\n    if base\
    \ == 5:\n        return bin(x)[2:].rjust(5, \"0\")\n    if base == 6:\n      \
    \  return bin(x)[2:].rjust(6, \"0\")\n    if base == 7:\n        return bin(x)[2:].rjust(7,\
    \ \"0\")\n    if base == 8:\n        return bin(x)[2:].rjust(8, \"0\")\n    if\
    \ base == 9:\n        return bin(x)[2:].rjust(9, \"0\")\n    if base == 16:\n\
    \        return hex(x)[2:].rjust(8, \"0\")\n    if base == 17:\n        return\
    \ hex(x)[2:].rjust(9, \"0\")\n    if base == 18:\n        return hex(x)[2:].rjust(10,\
    \ \"0\")\n    if base == 19:\n        return hex(x)[2:].rjust(11, \"0\")\n   \
    \ if base == 20:\n        return hex(x)[2:].rjust(12, \"0\")\n    if base == 21:\n\
    \        return hex(x)[2:].rjust(13, \"0\")\n    if base == 22:\n        return\
    \ hex(x)[2:].rjust(14, \"0\")\n    if base == 23:\n        return hex(x)[2:].rjust(15,\
    \ \"0\")\n    if base == 24:\n        return hex(x)[2:].rjust(16, \"0\")\n   \
    \ if base == 25:\n        return hex(", "    if base < 2:\n        raise ValueError('Base\
    \ should be greater than 1')\n    if base > 36:\n        raise ValueError('Base\
    \ should be less than 36')\n    if x < 0:\n        raise ValueError('Input should\
    \ be positive')\n    if x == 0:\n        return '0'\n    if base == 10:\n    \
    \    return str(x)\n    if base == 2:\n        return '{:b}'.format(x)\n    if\
    \ base == 3:\n        return '{:b}'.format(x)\n    if base == 4:\n        return\
    \ '{:b}'.format(x)\n    if base == 5:\n        return '{:b}'.format(x)\n    if\
    \ base == 6:\n        return '{:b}'.format(x)\n    if base == 7:\n        return\
    \ '{:b}'.format(x)\n    if base == 8:\n        return '{:b}'.format(x)\n    if\
    \ base == 9:\n        return '{:b}'.format(x)\n    if base == 16:\n        return\
    \ '{:x}'.format(x)\n    if base == 17:\n        return '{:x}'.format(x)\n    if\
    \ base == 18:\n        return '{:x}'.format(x)\n    if base == 19:\n        return\
    \ '{:x}'.format(x)\n    if base == 20:\n        return '{:x}'.format(x)\n    if\
    \ base == 21:\n        return '{:x}'.format(x)\n    if base == 22:\n        return\
    \ '{:x}'.format(x)\n    if base == 23:\n        return '{:x}'.format(x)\n    if\
    \ base == 24:\n        return '{:x}'.format(x)\n    if base == 25:\n        return\
    \ '{:x}'.format(x)\n    if base == 26:\n        return '{:x}'.format(x)\n    if\
    \ base == 27:\n        return '{:x}'.format(x)\n    if base == 28:\n        return\
    \ '{:x}'.format(x)\n    if base == 29:\n", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be a positive number\")\n    if x == 0:\n        return \"0\"\n    if base\
    \ == 10:\n        return str(x)\n    if x < base:\n        return \"0\"\n    return\
    \ str(x) + \"\".join([\"\".join([\"0\" for i in range(base - len(str(x)) - 1)])\
    \ for j in range(base)])\n\n", "    if base < 2:\n        raise ValueError('Base\
    \ must be greater than 1')\n    if base > 36:\n        raise ValueError('Base\
    \ must be less than 36')\n    if x < 0:\n        raise ValueError('Input number\
    \ must be positive')\n    if x == 0:\n        return '0'\n    if base == 10:\n\
    \        return str(x)\n    if base == 2:\n        return '{:b}'.format(x)\n \
    \   if base == 3:\n        return '{:b}'.format(x)\n    if base == 4:\n      \
    \  return '{:b}'.format(x)\n    if base == 5:\n        return '{:b}'.format(x)\n\
    \    if base == 6:\n        return '{:b}'.format(x)\n    if base == 7:\n     \
    \   return '{:b}'.format(x)\n    if base == 8:\n        return '{:b}'.format(x)\n\
    \    if base == 9:\n        return '{:b}'.format(x)\n    if base == 16:\n    \
    \    return '{:x}'.format(x)\n    if base == 17:\n        return '{:x}'.format(x)\n\
    \    if base == 18:\n        return '{:x}'.format(x)\n    if base == 19:\n   \
    \     return '{:x}'.format(x)\n    if base == 20:\n        return '{:x}'.format(x)\n\
    \    if base == 21:\n        return '{:x}'.format(x)\n    if base == 22:\n   \
    \     return '{:x}'.format(x)\n    if base == 23:\n        return '{:x}'.format(x)\n\
    \    if base == 24:\n        return '{:x}'.format(x)\n    if base == 25:\n   \
    \     return '{:x}'.format(x)\n    if base == 26:\n        return '{:x}'.format(x)\n\
    \    if base == 27:\n        return '{:x}'.format(x)\n    if base == 28:\n   \
    \     return '{:x}'.format(x)\n    if base == 29:", "    if base < 2:\n      \
    \  raise ValueError(\"Base must be greater than 1\")\n    if base > 36:\n    \
    \    raise ValueError(\"Base must be less than 36\")\n    if x < 0:\n        raise\
    \ ValueError(\"Input must be a positive number\")\n    if x == 0:\n        return\
    \ \"0\"\n    if base == 10:\n        return str(x)\n    if base == 2:\n      \
    \  return \"{0:b}\".format(x)\n    if base == 3:\n        return \"{0:b}\".format(x)\n\
    \    if base == 4:\n        return \"{0:b}\".format(x)\n    if base == 5:\n  \
    \      return \"{0:b}\".format(x)\n    if base == 6:\n        return \"{0:b}\"\
    .format(x)\n    if base == 7:\n        return \"{0:b}\".format(x)\n    if base\
    \ == 8:\n        return \"{0:b}\".format(x)\n    if base == 9:\n        return\
    \ \"{0:b}\".format(x)\n    if base == 16:\n        return \"{0:x}\".format(x)\n\
    \    if base == 17:\n        return \"{0:x}\".format(x)\n    if base == 18:\n\
    \        return \"{0:x}\".format(x)\n    if base == 19:\n        return \"{0:x}\"\
    .format(x)\n    if base == 20:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 21:\n        return \"{0:x}\".format(x)\n    if base == 22:\n        return\
    \ \"{0:x}\".format(x)\n    if base == 23:\n        return \"{0:x}\".format(x)\n\
    \    if base == 24:\n        return \"{0:x}\".format(x)\n    if base == 25:\n\
    \        return \"{0:x}\".format(x)\n    if base == 26:\n        return \"{0:x}\"\
    .format(x)\n    if base == 27:\n        return \"{0:x}\".format(x)\n    if base\
    \ == 28:\n        return \"{0:x}\".format(x)\n    if base == 29", "    if base\
    \ < 2:\n        raise ValueError(\"Base should be greater than 1\")\n    if base\
    \ > 10:\n        raise ValueError(\"Base should be less than 10\")\n    if x <\
    \ 0:\n        raise ValueError(\"Input number should be positive\")\n    if x\
    \ == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    return\
    \ str(x).zfill(int(math.log(x, base)) + 1)\n\n", "    if base < 2:\n        raise\
    \ ValueError(\"Base must be greater than 1\")\n    if base > 36:\n        raise\
    \ ValueError(\"Base must be less than 36\")\n    if x < 0:\n        return \"\
    -\" + change_base(-x, base)\n    if x == 0:\n        return \"0\"\n    if x <\
    \ base:\n        return str(x)\n    else:\n        return change_base(x // base,\
    \ base) + str(x % base)\n\n", "    if base < 2:\n        raise ValueError(\"Base\
    \ must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base\
    \ must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input must\
    \ be positive\")\n    if x == 0:\n        return \"0\"\n    if x < base:\n   \
    \     return str(x)\n    else:\n        return str(x).zfill(base)\n\n", "    if\
    \ base < 2:\n        raise ValueError('Base must be greater than 1')\n    if base\
    \ > 36:\n        raise ValueError('Base must be less than 36')\n    if x < 0:\n\
    \        raise ValueError('Input must be positive')\n    if x == 0:\n        return\
    \ '0'\n    if base == 10:\n        return str(x)\n    if base == 2:\n        return\
    \ '{:b}'.format(x)\n    if base == 3:\n        return '{:b}'.format(x)\n    if\
    \ base == 4:\n        return '{:b}'.format(x)\n    if base == 5:\n        return\
    \ '{:b}'.format(x)\n    if base == 6:\n        return '{:b}'.format(x)\n    if\
    \ base == 7:\n        return '{:b}'.format(x)\n    if base == 8:\n        return\
    \ '{:b}'.format(x)\n    if base == 9:\n        return '{:b}'.format(x)\n    if\
    \ base == 16:\n        return '{:x}'.format(x)\n    if base == 17:\n        return\
    \ '{:x}'.format(x)\n    if base == 18:\n        return '{:x}'.format(x)\n    if\
    \ base == 19:\n        return '{:x}'.format(x)\n    if base == 20:\n        return\
    \ '{:x}'.format(x)\n    if base == 21:\n        return '{:x}'.format(x)\n    if\
    \ base == 22:\n        return '{:x}'.format(x)\n    if base == 23:\n        return\
    \ '{:x}'.format(x)\n    if base == 24:\n        return '{:x}'.format(x)\n    if\
    \ base == 25:\n        return '{:x}'.format(x)\n    if base == 26:\n        return\
    \ '{:x}'.format(x)\n    if base == 27:\n        return '{:x}'.format(x)\n    if\
    \ base == 28:\n        return '{:x}'.format(x)\n    if base == 29:\n", "    if\
    \ base < 2:\n        raise ValueError(\"Base should be greater than 1\")\n   \
    \ if base > 36:\n        raise ValueError(\"Base should be less than 36\")\n \
    \   if x < 0:\n        raise ValueError(\"Input should be positive\")\n    if\
    \ x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n \
    \   if base == 2:\n        return bin(x)[2:].zfill(8)\n    if base == 3:\n   \
    \     return bin(x)[2:].zfill(6)\n    if base == 4:\n        return bin(x)[2:].zfill(4)\n\
    \    if base == 5:\n        return bin(x)[2:].zfill(5)\n    if base == 6:\n  \
    \      return bin(x)[2:].zfill(3)\n    if base == 7:\n        return bin(x)[2:].zfill(7)\n\
    \    if base == 8:\n        return bin(x)[2:].zfill(8)\n    if base == 9:\n  \
    \      return bin(x)[2:].zfill(9)\n    if base == 16:\n        return hex(x)[2:].zfill(8)\n\
    \    if base == 17:\n        return hex(x)[2:].zfill(9)\n    if base == 18:\n\
    \        return hex(x)[2:].zfill(10)\n    if base == 19:\n        return hex(x)[2:].zfill(11)\n\
    \    if base == 20:\n        return hex(x)[2:].zfill(12)\n    if base == 21:\n\
    \        return hex(x)[2:].zfill(13)\n    if base == 22:\n        return hex(x)[2:].zfill(14)\n\
    \    if base == 23:\n        return hex(x)[2:].zfill(15)\n    if base == 24:\n\
    \        return hex(x)[2:].zfill(16)\n    if base == 25:\n        return hex(x)[2:].zfill(17)\n\
    \    if base == 26:\n        return hex(x)[2:].zfill(18)\n    if base == 27:\n\
    \        return", "    if base < 2:\n        raise ValueError(\"Base must be greater\
    \ than 1\")\n    if base > 36:\n        raise ValueError(\"Base must be less than\
    \ 36\")\n    if x < 0:\n        raise ValueError(\"Input must be positive\")\n\
    \    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:].zfill(8)\n    if base == 3:\n  \
    \      return bin(x)[2:].zfill(6)\n    if base == 4:\n        return bin(x)[2:].zfill(4)\n\
    \    if base == 5:\n        return bin(x)[2:].zfill(5)\n    if base == 6:\n  \
    \      return bin(x)[2:].zfill(3)\n    if base == 7:\n        return bin(x)[2:].zfill(2)\n\
    \    if base == 8:\n        return bin(x)[2:].zfill(1)\n    if base == 9:\n  \
    \      return bin(x)[2:].zfill(0)\n    if base == 16:\n        return hex(x)[2:].zfill(8)\n\
    \    if base == 17:\n        return hex(x)[2:].zfill(6)\n    if base == 18:\n\
    \        return hex(x)[2:].zfill(4)\n    if base == 19:\n        return hex(x)[2:].zfill(3)\n\
    \    if base == 20:\n        return hex(x)[2:].zfill(2)\n    if base == 21:\n\
    \        return hex(x)[2:].zfill(1)\n    if base == 22:\n        return hex(x)[2:].zfill(0)\n\
    \    if base == 23:\n        return hex(x)[2:].zfill(0)\n    if base == 24:\n\
    \        return hex(x)[2:].zfill(0)\n    if base == 25:\n        return hex(x)[2:].zfill(0)\n\
    \    if base == 26:\n        return hex(x)[2:].zfill(0)\n    if base == 27:\n\
    \        return", "    if base < 2:\n        raise ValueError('Base must be greater\
    \ than 1')\n    if base > 36:\n        raise ValueError('Base must be less than\
    \ 36')\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x ==\
    \ 0:\n        return '0'\n    if x < base:\n        return '0' + change_base(x,\
    \ base)\n    else:\n        return change_base(x // base, base) + change_base(x\
    \ % base, base)\n\n", "    if base < 2:\n        raise ValueError(\"Base must\
    \ be greater than 1\")\n    if base > 36:\n        raise ValueError(\"Base must\
    \ be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input must be\
    \ positive\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n    \
    \    return str(x)\n    if base == 2:\n        return bin(x)[2:]\n    if base\
    \ == 3:\n        return bin(x)[2:].rjust(2, \"0\")\n    if base == 4:\n      \
    \  return bin(x)[2:].rjust(3, \"0\")\n    if base == 5:\n        return bin(x)[2:].rjust(4,\
    \ \"0\")\n    if base == 6:\n        return bin(x)[2:].rjust(5, \"0\")\n    if\
    \ base == 7:\n        return bin(x)[2:].rjust(6, \"0\")\n    if base == 8:\n \
    \       return bin(x)[2:].rjust(7, \"0\")\n    if base == 9:\n        return bin(x)[2:].rjust(8,\
    \ \"0\")\n    if base == 16:\n        return hex(x)[2:].rjust(4, \"0\")\n    if\
    \ base == 17:\n        return hex(x)[2:].rjust(5, \"0\")\n    if base == 18:\n\
    \        return hex(x)[2:].rjust(6, \"0\")\n    if base == 19:\n        return\
    \ hex(x)[2:].rjust(7, \"0\")\n    if base == 20:\n        return hex(x)[2:].rjust(8,\
    \ \"0\")\n    if base == 21:\n        return hex(x)[2:].rjust(9, \"0\")\n    if\
    \ base == 22:\n        return hex(x)[2:].rjust(10, \"0\")\n    if base == 23:\n\
    \        return hex(x)[2:].rjust(11, \"0\")\n    if base == 24:\n        return\
    \ hex(x)[2:].rjust(12, \"0\")\n    if base == 25:\n        return hex(", "   \
    \ if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n \
    \   if base > 36:\n        raise ValueError(\"Base must be less than 36.\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:].zfill(8)\n    if base == 3:\n  \
    \      return bin(x)[2:].zfill(6)\n    if base == 4:\n        return bin(x)[2:].zfill(4)\n\
    \    if base == 5:\n        return bin(x)[2:].zfill(5)\n    if base == 6:\n  \
    \      return bin(x)[2:].zfill(3)\n    if base == 7:\n        return bin(x)[2:].zfill(7)\n\
    \    if base == 8:\n        return bin(x)[2:].zfill(8)\n    if base == 9:\n  \
    \      return bin(x)[2:].zfill(9)\n    if base == 16:\n        return hex(x)[2:].zfill(8)\n\
    \    if base == 17:\n        return hex(x)[2:].zfill(9)\n    if base == 18:\n\
    \        return hex(x)[2:].zfill(10)\n    if base == 19:\n        return hex(x)[2:].zfill(11)\n\
    \    if base == 20:\n        return hex(x)[2:].zfill(12)\n    if base == 21:\n\
    \        return hex(x)[2:].zfill(13)\n    if base == 22:\n        return hex(x)[2:].zfill(14)\n\
    \    if base == 23:\n        return hex(x)[2:].zfill(15)\n    if base == 24:\n\
    \        return hex(x)[2:].zfill(16)\n    if base == 25:\n        return hex(x)[2:].zfill(17)\n\
    \    if base == 26:\n        return hex(x)[2:].zfill(18)\n    if base == 27:\n",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n \
    \   if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n \
    \   if x < 0:\n        raise ValueError(\"Input must be positive\")\n    if x\
    \ == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n   \
    \ if base == 2:\n        return bin(x)[2:].zfill(8)\n    if base == 3:\n     \
    \   return bin(x)[2:].zfill(6)\n    if base == 4:\n        return bin(x)[2:].zfill(4)\n\
    \    if base == 5:\n        return bin(x)[2:].zfill(5)\n    if base == 6:\n  \
    \      return bin(x)[2:].zfill(3)\n    if base == 7:\n        return bin(x)[2:].zfill(4)\n\
    \    if base == 8:\n        return bin(x)[2:].zfill(2)\n    if base == 9:\n  \
    \      return bin(x)[2:].zfill(3)\n    if base == 16:\n        return hex(x)[2:].zfill(8)\n\
    \    if base == 17:\n        return hex(x)[2:].zfill(6)\n    if base == 18:\n\
    \        return hex(x)[2:].zfill(4)\n    if base == 19:\n        return hex(x)[2:].zfill(5)\n\
    \    if base == 20:\n        return hex(x)[2:].zfill(3)\n    if base == 21:\n\
    \        return hex(x)[2:].zfill(4)\n    if base == 22:\n        return hex(x)[2:].zfill(2)\n\
    \    if base == 23:\n        return hex(x)[2:].zfill(3)\n    if base == 24:\n\
    \        return hex(x)[2:].zfill(2)\n    if base == 25:\n        return hex(x)[2:].zfill(3)\n\
    \    if base == 26:\n        return hex(x)[2:].zfill(2)\n    if base == 27:\n\
    \        return", "    if base < 2:\n        raise ValueError(\"Base must be greater\
    \ than 1\")\n    if base > 10:\n        raise ValueError(\"Base must be less than\
    \ 10\")\n    if x < 0:\n        raise ValueError(\"Input must be a positive number\"\
    )\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n\
    \        result = str(x % base) + result\n        x //= base\n    return result\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\"\
    )\n    if base > 36:\n        raise ValueError(\"Base must be less than 36.\"\
    )\n    if x < 0:\n        raise ValueError(\"Input must be a positive integer.\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:].zfill(8)\n    if base == 3:\n  \
    \      return bin(x)[2:].zfill(6)\n    if base == 4:\n        return bin(x)[2:].zfill(4)\n\
    \    if base == 5:\n        return bin(x)[2:].zfill(5)\n    if base == 6:\n  \
    \      return bin(x)[2:].zfill(3)\n    if base == 7:\n        return bin(x)[2:].zfill(7)\n\
    \    if base == 8:\n        return bin(x)[2:].zfill(8)\n    if base == 9:\n  \
    \      return bin(x)[2:].zfill(9)\n    if base == 16:\n        return hex(x)[2:].zfill(8)\n\
    \    if base == 17:\n        return hex(x)[2:].zfill(6)\n    if base == 18:\n\
    \        return hex(x)[2:].zfill(5)\n    if base == 19:\n        return hex(x)[2:].zfill(4)\n\
    \    if base == 20:\n        return hex(x)[2:].zfill(3)\n    if base == 21:\n\
    \        return hex(x)[2:].zfill(7)\n    if base == 22:\n        return hex(x)[2:].zfill(8)\n\
    \    if base == 23:\n        return hex(x)[2:].zfill(9)\n    if base == 24:\n\
    \        return hex(x)[2:].zfill(10)\n    if base == 25:\n        return hex(x)[2:].zfill(11)\n\
    \    if base == 26:\n        return hex(x)[2:].zfill(12)\n    if base == 27:\n",
  "    if base < 2:\n        raise ValueError(\"Base should be greater than 1.\")\n\
    \    if base > 10:\n        raise ValueError(\"Base should be less than 10.\"\
    )\n    if x < 0:\n        raise ValueError(\"Input should be positive.\")\n  \
    \  if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    return str(x).zfill(int(math.log(x, base)) + 1)\n\n", "    if base < 2:\n\
    \        raise ValueError(\"Base must be greater than 1.\")\n    if base > 36:\n\
    \        raise ValueError(\"Base must be less than 36.\")\n    if x < 0:\n   \
    \     raise ValueError(\"Input must be positive.\")\n    if x == 0:\n        return\
    \ \"0\"\n    if base == 10:\n        return str(x)\n    if base == 2:\n      \
    \  return bin(x)[2:]\n    if base == 3:\n        return bin(x)[2:].rjust(3, \"\
    0\")\n    if base == 4:\n        return bin(x)[2:].rjust(4, \"0\")\n    if base\
    \ == 5:\n        return bin(x)[2:].rjust(5, \"0\")\n    if base == 6:\n      \
    \  return bin(x)[2:].rjust(6, \"0\")\n    if base == 7:\n        return bin(x)[2:].rjust(7,\
    \ \"0\")\n    if base == 8:\n        return bin(x)[2:].rjust(8, \"0\")\n    if\
    \ base == 9:\n        return bin(x)[2:].rjust(9, \"0\")\n    if base == 16:\n\
    \        return hex(x)[2:].rjust(4, \"0\")\n    if base == 17:\n        return\
    \ hex(x)[2:].rjust(5, \"0\")\n    if base == 18:\n        return hex(x)[2:].rjust(6,\
    \ \"0\")\n    if base == 19:\n        return hex(x)[2:].rjust(7, \"0\")\n    if\
    \ base == 20:\n        return hex(x)[2:].rjust(8, \"0\")\n    if base == 21:\n\
    \        return hex(x)[2:].rjust(9, \"0\")\n    if base == 22:\n        return\
    \ hex(x)[2:].rjust(10, \"0\")\n    if base == 23:\n        return hex(x)[2:].rjust(11,\
    \ \"0\")\n    if base == 24:\n        return hex(x)[2:].rjust(12, \"0\")\n   \
    \ if base == 25:\n        return hex(", "    if base < 2:\n        raise ValueError(\"\
    Base must be greater than 1\")\n    if base > 36:\n        raise ValueError(\"\
    Base must be less than 36\")\n    if x < 0:\n        raise ValueError(\"Input\
    \ must be positive\")\n    if x == 0:\n        return \"0\"\n    if x < base:\n\
    \        return str(x)\n    else:\n        return str(x).zfill(base)\n\n", " \
    \   if base < 2:\n        raise ValueError('base must be greater than 1')\n  \
    \  if base > 36:\n        raise ValueError('base must be less than 36')\n    if\
    \ x < 0:\n        raise ValueError('x must be positive')\n    if x == 0:\n   \
    \     return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n       \
    \ return '10'\n    if x == 3:\n        return '11'\n    if x == 4:\n        return\
    \ '100'\n    if x == 5:\n        return '101'\n    if x == 6:\n        return\
    \ '110'\n    if x == 7:\n        return '111'\n    if x == 8:\n        return\
    \ '1000'\n    if x == 9:\n        return '1001'\n    if x == 10:\n        return\
    \ '1010'\n    if x == 11:\n        return '1011'\n    if x == 12:\n        return\
    \ '1100'\n    if x == 13:\n        return '1101'\n    if x == 14:\n        return\
    \ '1110'\n    if x == 15:\n        return '1111'\n    if x == 16:\n        return\
    \ '10000'\n    if x == 17:\n        return '10001'\n    if x == 18:\n        return\
    \ '10010'\n    if x == 19:\n        return '10011'\n    if x == 20:\n        return\
    \ '10100'\n    if x == 21:\n        return '10101'\n    if x == 22:\n        return\
    \ '10110'\n    if x == 23:\n        return '10111'\n    if x == 24:\n        return\
    \ '11000'\n    if x == 25:\n        return '11001'\n    if x == 26:\n        return\
    \ '11010'\n    if x == 27:\n        return '11011'\n    if x == 28:\n        return\
    \ '11100'\n    if x == 29:\n        return '11101'\n    if x == 30:\n        return\
    \ '11110'\n    if x == 31:\n        return '11111'\n    if x == 32:\n        return\
    \ '100000'\n    if x == 33", "    if base < 2:\n        raise ValueError('Base\
    \ must be greater than 1')\n    if base > 10:\n        raise ValueError('Base\
    \ must be less than 10')\n    if x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    if x == 0:\n        return '0'\n    if x < base:\n        return\
    \ '0' + change_base(x, base)\n    if x % base == 0:\n        return change_base(x\
    \ // base, base)\n    return change_base(x // base, base) + change_base(x % base,\
    \ base)\n\n", "    if base < 2:\n        raise ValueError(\"Base should be greater\
    \ than 1.\")\n    if base > 10:\n        raise ValueError(\"Base should be less\
    \ than 10.\")\n    if x < 0:\n        raise ValueError(\"Input number should be\
    \ positive.\")\n    if x == 0:\n        return \"0\"\n    if base == 10:\n   \
    \     return str(x)\n    return str(x).zfill(int(math.log(x, base)) + 1)\n\n",
  "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n \
    \   if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n \
    \   if x < 0:\n        raise ValueError(\"Input must be positive\")\n    if x\
    \ == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n   \
    \ if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return\
    \ bin(x)[2:].rjust(3, \"0\")\n    if base == 4:\n        return bin(x)[2:].rjust(4,\
    \ \"0\")\n    if base == 5:\n        return bin(x)[2:].rjust(5, \"0\")\n    if\
    \ base == 6:\n        return bin(x)[2:].rjust(6, \"0\")\n    if base == 7:\n \
    \       return bin(x)[2:].rjust(7, \"0\")\n    if base == 8:\n        return bin(x)[2:].rjust(8,\
    \ \"0\")\n    if base == 9:\n        return bin(x)[2:].rjust(9, \"0\")\n    if\
    \ base == 16:\n        return hex(x)[2:].rjust(4, \"0\")\n    if base == 17:\n\
    \        return hex(x)[2:].rjust(5, \"0\")\n    if base == 18:\n        return\
    \ hex(x)[2:].rjust(6, \"0\")\n    if base == 19:\n        return hex(x)[2:].rjust(7,\
    \ \"0\")\n    if base == 20:\n        return hex(x)[2:].rjust(8, \"0\")\n    if\
    \ base == 21:\n        return hex(x)[2:].rjust(9, \"0\")\n    if base == 22:\n\
    \        return hex(x)[2:].rjust(10, \"0\")\n    if base == 23:\n        return\
    \ hex(x)[2:].rjust(11, \"0\")\n    if base == 24:\n        return hex(x)[2:].rjust(12,\
    \ \"0\")\n    if base == 25:\n        return hex(", "    if base < 2:\n      \
    \  raise ValueError(\"Base must be greater than 1.\")\n    if base > 10:\n   \
    \     raise ValueError(\"Base must be less than 10.\")\n    if x < 0:\n      \
    \  raise ValueError(\"Input must be positive.\")\n    if x == 0:\n        return\
    \ '0'\n    if base == 10:\n        return str(x)\n    return str(x).zfill(base)\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1\"\
    )\n    if base > 36:\n        raise ValueError(\"Base must be less than 36\")\n\
    \    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x == 0:\n\
    \        return \"0\"\n    if x < base:\n        return change_base(x, base)\n\
    \    else:\n        return change_base(x // base, base) + change_base(x % base,\
    \ base)\n\n", "    if base < 2:\n        raise ValueError('Base must be greater\
    \ than 1.')\n    if base > 36:\n        raise ValueError('Base must be less than\
    \ 36.')\n    if x < 0:\n        raise ValueError('Input number must be positive.')\n\
    \    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return\
    \ bin(x)[2:].rjust(3, '0')\n    if base == 4:\n        return bin(x)[2:].rjust(4,\
    \ '0')\n    if base == 5:\n        return bin(x)[2:].rjust(5, '0')\n    if base\
    \ == 6:\n        return bin(x)[2:].rjust(6, '0')\n    if base == 7:\n        return\
    \ bin(x)[2:].rjust(7, '0')\n    if base == 8:\n        return bin(x)[2:].rjust(8,\
    \ '0')\n    if base == 9:\n        return bin(x)[2:].rjust(9, '0')\n    if base\
    \ == 16:\n        return hex(x)[2:].rjust(8, '0')\n    if base == 17:\n      \
    \  return hex(x)[2:].rjust(9, '0')\n    if base == 18:\n        return hex(x)[2:].rjust(10,\
    \ '0')\n    if base == 19:\n        return hex(x)[2:].rjust(11, '0')\n    if base\
    \ == 20:\n        return hex(x)[2:].rjust(12, '0')\n    if base == 21:\n     \
    \   return hex(x)[2:].rjust(13, '0')\n    if base == 22:\n        return hex(x)[2:].rjust(14,\
    \ '0')\n    if base == 23:\n        return hex(x)[2:].rjust(15, '0')\n    if base\
    \ == 24:\n        return hex(x)[2:].rjust(16, '0')\n    if base == 25:\n", " \
    \   if base < 2:\n        raise ValueError(\"Base must be greater than 1.\")\n\
    \    if base > 36:\n        raise ValueError(\"Base must be less than 36.\")\n\
    \    if x < 0:\n        raise ValueError(\"Input must be a positive integer.\"\
    )\n    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return\
    \ str(x)\n    if base == 4:\n        return bin(x)[2:]\n    if base == 5:\n  \
    \      return str(x)\n    if base == 6:\n        return bin(x)[2:]\n    if base\
    \ == 7:\n        return str(x)\n    if base == 8:\n        return bin(x)[2:]\n\
    \    if base == 9:\n        return str(x)\n    if base == 16:\n        return\
    \ hex(x)[2:]\n    if base == 17:\n        return hex(x)[2:]\n    if base == 18:\n\
    \        return hex(x)[2:]\n    if base == 19:\n        return hex(x)[2:]\n  \
    \  if base == 20:\n        return hex(x)[2:]\n    if base == 21:\n        return\
    \ hex(x)[2:]\n    if base == 22:\n        return hex(x)[2:]\n    if base == 23:\n\
    \        return hex(x)[2:]\n    if base == 24:\n        return hex(x)[2:]\n  \
    \  if base == 25:\n        return hex(x)[2:]\n    if base == 26:\n        return\
    \ hex(x)[2:]\n    if base == 27:\n        return hex(x)[2:]\n    if base == 28:\n\
    \        return hex(x)[2:]\n    if base == 29:\n        return hex(x)[2:]\n  \
    \  if base == 30:\n        return hex(x)[2:]\n    if base == 31:\n        return\
    \ hex(x)[2:]\n    if base == 32:\n        return hex(x)[2:]\n    if base == 33:\n\
    \        return hex(x)[2:]\n    if base == 34:\n        return hex(x)[2:]\n  \
    \  ", "    if base < 2:\n        raise ValueError(\"Base must be greater than\
    \ 1.\")\n    if base > 36:\n        raise ValueError(\"Base must be less than\
    \ 36.\")\n    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n\
    \        result = str(x % base) + result\n        x //= base\n    return result\n\
    \n", "    if base < 2:\n        raise ValueError(\"Base must be greater than 1.\"\
    )\n    if base > 36:\n        raise ValueError(\"Base must be less than 36.\"\
    )\n    if x < 0:\n        raise ValueError(\"Input must be a positive number.\"\
    )\n    if x == 0:\n        return \"0\"\n    if base == 10:\n        return str(x)\n\
    \    if base == 2:\n        return bin(x)[2:]\n    if base == 3:\n        return\
    \ bin(x)[2:]\n    if base == 4:\n        return bin(x)[2:]\n    if base == 5:\n\
    \        return bin(x)[2:]\n    if base == 6:\n        return bin(x)[2:]\n   \
    \ if base == 7:\n        return bin(x)[2:]\n    if base == 8:\n        return\
    \ bin(x)[2:]\n    if base == 9:\n        return bin(x)[2:]\n    if base == 16:\n\
    \        return hex(x)[2:]\n    if base == 17:\n        return hex(x)[2:]\n  \
    \  if base == 18:\n        return hex(x)[2:]\n    if base == 19:\n        return\
    \ hex(x)[2:]\n    if base == 20:\n        return hex(x)[2:]\n    if base == 21:\n\
    \        return hex(x)[2:]\n    if base == 22:\n        return hex(x)[2:]\n  \
    \  if base == 23:\n        return hex(x)[2:]\n    if base == 24:\n        return\
    \ hex(x)[2:]\n    if base == 25:\n        return hex(x)[2:]\n    if base == 26:\n\
    \        return hex(x)[2:]\n    if base == 27:\n        return hex(x)[2:]\n  \
    \  if base == 28:\n        return hex(x)[2:]\n    if base == 29:\n        return\
    \ hex(x)[2:]\n    if base == 30:\n        return hex(x)[2:]\n    if base == 31:\n\
    \        return hex(x)[2:]\n    if base == 32:\n        return hex(x)[2:]\n  \
    \  if base == 33:\n        return hex(x)[2:]\n    if base == 34:\n        return",
  "    if base < 2:\n        raise ValueError('base must be greater than 1')\n   \
    \ if base > 10:\n        raise ValueError('base must be less than 10')\n    if\
    \ x < 0:\n        raise ValueError('x must be non-negative')\n    if x == 0:\n\
    \        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n    \
    \    return '10'\n    if x == 3:\n        return '11'\n    if x == 4:\n      \
    \  return '100'\n    if x == 5:\n        return '101'\n    if x == 6:\n      \
    \  return '110'\n    if x == 7:\n        return '111'\n    if x == 8:\n      \
    \  return '1000'\n    if x == 9:\n        return '1001'\n    if x == 10:\n   \
    \     return '1010'\n    if x == 11:\n        return '1011'\n    if x == 12:\n\
    \        return '1100'\n    if x == 13:\n        return '1101'\n    if x == 14:\n\
    \        return '1110'\n    if x == 15:\n        return '1111'\n    if x == 16:\n\
    \        return '10000'\n    if x == 17:\n        return '10001'\n    if x ==\
    \ 18:\n        return '10010'\n    if x == 19:\n        return '10011'\n    if\
    \ x == 20:\n        return '10100'\n    if x == 21:\n        return '10101'\n\
    \    if x == 22:\n        return '10110'\n    if x == 23:\n        return '10111'\n\
    \    if x == 24:\n        return '11000'\n    if x == 25:\n        return '11001'\n\
    \    if x == 26:\n        return '11010'\n    if x == 27:\n        return '11011'\n\
    \    if x == 28:\n        return '11100'\n    if x == 29:\n        return '11101'\n\
    \    if x == 30:\n        return '11110'\n    if x == 31:\n        return '11111'\n\
    \    if x == 32:\n        return '100000'\n    if x", "    if base < 2:\n    \
    \    raise ValueError(\"Base must be greater than 1.\")\n    if base > 36:\n \
    \       raise ValueError(\"Base must be less than 36.\")\n    if x < 0:\n    \
    \    raise ValueError(\"Input number must be non-negative.\")\n    if x == 0:\n\
    \        return \"0\"\n    if base == 10:\n        return str(x)\n    return str(x).zfill(int(math.log(x,\
    \ base)) + 1)\n\n", "    if base < 2:\n        raise ValueError(\"Base must be\
    \ greater than 1\")\n    if base == 2:\n        return str(x)\n    if base ==\
    \ 10:\n        return str(x)\n    if x < 0:\n        return \"-\" + change_base(-x,\
    \ base)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) +\
    \ result\n        x = x // base\n    return result\n\n", "    if base < 2:\n \
    \       raise ValueError('Base must be greater than 1.')\n    if base > 36:\n\
    \        raise ValueError('Base must be less than 36.')\n    if x < 0:\n     \
    \   raise ValueError('Input must be a positive number.')\n    if x == 0:\n   \
    \     return '0'\n    if base == 10:\n        return str(x)\n    if base == 2:\n\
    \        return '{:b}'.format(x).zfill(int(math.log(x, 2)) + 1)\n    if base ==\
    \ 3:\n        return '{:b}'.format(x).zfill(int(math.log(x, 3)) + 1)\n    if base\
    \ == 4:\n        return '{:b}'.format(x).zfill(int(math.log(x, 4)) + 1)\n    if\
    \ base == 5:\n        return '{:b}'.format(x).zfill(int(math.log(x, 5)) + 1)\n\
    \    if base == 6:\n        return '{:b}'.format(x).zfill(int(math.log(x, 6))\
    \ + 1)\n    if base == 7:\n        return '{:b}'.format(x).zfill(int(math.log(x,\
    \ 7)) + 1)\n    if base == 8:\n        return '{:b}'.format(x).zfill(int(math.log(x,\
    \ 8)) + 1)\n    if base == 9:\n        return '{:b}'.format(x).zfill(int(math.log(x,\
    \ 9)) + 1)\n    if base == 16:\n        return '{:x}'.format(x).zfill(int(math.log(x,\
    \ 16)) + 1)\n    if base == 17:\n        return '{:x}'.format(x).zfill(int(math.log(x,\
    \ 17)) + 1)\n    if base == 18:\n        return '{:x}'.format(x).zfill(int(math.log(x,\
    \ 18)) + 1)\n    if base == 19:\n        return '{:x}'.format(x).zfill(int(math.",
  "    if base < 2:\n        raise ValueError('base must be greater than 1')\n   \
    \ if base > 36:\n        raise ValueError('base must be less than 36')\n    if\
    \ x < 0:\n        raise ValueError('x must be positive')\n    if x == 0:\n   \
    \     return '0'\n    if base == 10:\n        return str(x)\n    if base == 2:\n\
    \        return '{:b}'.format(x)\n    if base == 3:\n        return '{:b}'.format(x)\n\
    \    if base == 4:\n        return '{:b}'.format(x)\n    if base == 5:\n     \
    \   return '{:b}'.format(x)\n    if base == 6:\n        return '{:b}'.format(x)\n\
    \    if base == 7:\n        return '{:b}'.format(x)\n    if base == 8:\n     \
    \   return '{:b}'.format(x)\n    if base == 9:\n        return '{:b}'.format(x)\n\
    \    if base == 16:\n        return '{:x}'.format(x)\n    if base == 17:\n   \
    \     return '{:x}'.format(x)\n    if base == 18:\n        return '{:x}'.format(x)\n\
    \    if base == 19:\n        return '{:x}'.format(x)\n    if base == 20:\n   \
    \     return '{:x}'.format(x)\n    if base == 21:\n        return '{:x}'.format(x)\n\
    \    if base == 22:\n        return '{:x}'.format(x)\n    if base == 23:\n   \
    \     return '{:x}'.format(x)\n    if base == 24:\n        return '{:x}'.format(x)\n\
    \    if base == 25:\n        return '{:x}'.format(x)\n    if base == 26:\n   \
    \     return '{:x}'.format(x)\n    if base == 27:\n        return '{:x}'.format(x)\n\
    \    if base == 28:\n        return '{:x}'.format(x)\n    if base == 29:\n", " \
    \   if base < 2:\n        raise ValueError('Base must be greater than 1')\n  \
    \  if base > 36:\n        raise ValueError('Base must be less than 36')\n    if\
    \ x < 0:\n        raise ValueError('Input must be a positive number')\n    if\
    \ x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n   \
    \ else:\n        return str(x).zfill(int(math.log(x, base)) + 1)\n\n", "    if\
    \ base < 2:\n        raise ValueError(\"Base should be greater than 1.\")\n  \
    \  if base == 2:\n        return str(x)\n    if x < 0:\n        return '-' + change_base(-x,\
    \ base)\n    if x == 0:\n        return '0'\n    return str(x) + change_base(x\
    \ / base, base)\n\n", "    if base < 2:\n        raise ValueError('Base must be\
    \ greater than 1.')\n    if base > 36:\n        raise ValueError('Base must be\
    \ less than 36.')\n    if x < 0:\n        raise ValueError('Input must be a positive\
    \ number.')\n    if x == 0:\n        return '0'\n    if base == 10:\n        return\
    \ str(x)\n    return str(x).zfill(int(math.log(x, base)) + 1)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
